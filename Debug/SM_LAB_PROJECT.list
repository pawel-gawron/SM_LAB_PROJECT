
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c04  08008c04  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c0c  08008c0c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000084  08008c98  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08008c98  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001912f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003065  00000000  00000000  000391e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f7d  00000000  00000000  0003e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188a9  00000000  00000000  0006652d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f73af  00000000  00000000  0007edd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051cc  00000000  00000000  001761d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a84 	.word	0x08008a84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008a84 	.word	0x08008a84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <MX_ADC1_Init+0x9c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_ADC1_Init+0xa0>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e44:	f001 fa5c 	bl	8002300 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 fdc1 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e64:	f001 fbf6 	bl	8002654 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6e:	f000 fdb1 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000d8 	.word	0x200000d8
 8000e80:	40012000 	.word	0x40012000
 8000e84:	0f000001 	.word	0x0f000001

08000e88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x74>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_ADC_MspInit+0x7c>)
 8000eee:	f001 ffa5 	bl	8002e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b81      	ldr	r3, [pc, #516]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a80      	ldr	r2, [pc, #512]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b7e      	ldr	r3, [pc, #504]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a7a      	ldr	r2, [pc, #488]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b78      	ldr	r3, [pc, #480]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b75      	ldr	r3, [pc, #468]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a74      	ldr	r2, [pc, #464]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b72      	ldr	r3, [pc, #456]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b69      	ldr	r3, [pc, #420]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a68      	ldr	r2, [pc, #416]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fcc:	4856      	ldr	r0, [pc, #344]	; (8001128 <MX_GPIO_Init+0x220>)
 8000fce:	f002 f8e1 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4855      	ldr	r0, [pc, #340]	; (800112c <MX_GPIO_Init+0x224>)
 8000fd8:	f002 f8dc 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484f      	ldr	r0, [pc, #316]	; (8001130 <MX_GPIO_Init+0x228>)
 8000ff4:	f001 ff22 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff8:	2332      	movs	r3, #50	; 0x32
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4847      	ldr	r0, [pc, #284]	; (8001130 <MX_GPIO_Init+0x228>)
 8001014:	f001 ff12 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001018:	2386      	movs	r3, #134	; 0x86
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4840      	ldr	r0, [pc, #256]	; (8001134 <MX_GPIO_Init+0x22c>)
 8001034:	f001 ff02 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001038:	f244 0381 	movw	r3, #16513	; 0x4081
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4835      	ldr	r0, [pc, #212]	; (8001128 <MX_GPIO_Init+0x220>)
 8001052:	f001 fef3 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001068:	230b      	movs	r3, #11
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_GPIO_Init+0x220>)
 8001074:	f001 fee2 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_GPIO_Init+0x224>)
 8001090:	f001 fed4 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x224>)
 80010a8:	f001 fec8 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010be:	230a      	movs	r3, #10
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_GPIO_Init+0x22c>)
 80010ca:	f001 feb7 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_GPIO_Init+0x22c>)
 80010e4:	f001 feaa 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fa:	230b      	movs	r3, #11
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_GPIO_Init+0x224>)
 8001106:	f001 fe99 	bl	8002e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f001 fdcb 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f001 fde4 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020000 	.word	0x40020000

08001138 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <MX_I2C1_Init+0x74>)
 8001174:	f002 f840 	bl	80031f8 <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fc29 	bl	80019d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001186:	f002 fbb9 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fc20 	bl	80019d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_I2C1_Init+0x74>)
 8001198:	f002 fbfb 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fc17 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000120 	.word	0x20000120
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00808cd2 	.word	0x00808cd2

080011b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_I2C_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001204:	2304      	movs	r3, #4
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <HAL_I2C_MspInit+0x84>)
 8001210:	f001 fe14 	bl	8002e3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x80>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_I2C_MspInit+0x80>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_I2C_MspInit+0x80>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001256:	2308      	movs	r3, #8
 8001258:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f001 f82c 	bl	80022b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	2130      	movs	r1, #48	; 0x30
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f829 	bl	80012c0 <lcd_write>
	HAL_Delay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f001 f822 	bl	80022b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	2130      	movs	r1, #48	; 0x30
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f81f 	bl	80012c0 <lcd_write>
	HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f001 f818 	bl	80022b8 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	2130      	movs	r1, #48	; 0x30
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f815 	bl	80012c0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80e 	bl	80012c0 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	210c      	movs	r1, #12
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f807 	bl	80012c0 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f89f 	bl	80013f6 <lcd_clear>

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	460b      	mov	r3, r1
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	f023 030f 	bic.w	r3, r3, #15
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80012e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012ec:	f023 030f 	bic.w	r3, r3, #15
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b2da      	uxtb	r2, r3
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	4313      	orrs	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b25a      	sxtb	r2, r3
 8001318:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b299      	uxth	r1, r3
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2304      	movs	r3, #4
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <lcd_write+0x88>)
 8001334:	f001 fff0 	bl	8003318 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001338:	2005      	movs	r0, #5
 800133a:	f000 ffbd 	bl	80022b8 <HAL_Delay>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000120 	.word	0x20000120

0800134c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	2300      	movs	r3, #0
 800135a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001366:	2308      	movs	r3, #8
 8001368:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f843 	bl	80013f6 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ffa1 	bl	80012c0 <lcd_write>
	while(lcd->f_line[i])
 800137e:	e00f      	b.n	80013a0 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7818      	ldrb	r0, [r3, #0]
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	7859      	ldrb	r1, [r3, #1]
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f7ff ff93 	bl	80012c0 <lcd_write>
		i++;
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	21c0      	movs	r1, #192	; 0xc0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff81 	bl	80012c0 <lcd_write>
	while(lcd->s_line[i])
 80013be:	e00f      	b.n	80013e0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7818      	ldrb	r0, [r3, #0]
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	7c99      	ldrb	r1, [r3, #18]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	f7ff ff73 	bl	80012c0 <lcd_write>
		i++;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3301      	adds	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	7c9b      	ldrb	r3, [r3, #18]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e9      	bne.n	80013c0 <lcd_display+0x74>
	}
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800140c:	2308      	movs	r3, #8
 800140e:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff51 	bl	80012c0 <lcd_write>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_UART_RxCpltCallback>:
int u;
int counter_usart = 0;
uint16_t counter;
_Bool flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_UART_RxCpltCallback+0x4c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d118      	bne.n	800146c <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_UART_RxCpltCallback+0x50>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001446:	f005 fb73 	bl	8006b30 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_UART_RxCpltCallback+0x50>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001456:	f005 fafd 	bl	8006a54 <HAL_UART_Transmit_IT>
		counter_usart = atoi(msg_str);
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 800145c:	f006 fe20 	bl	80080a0 <atoi>
 8001460:	4603      	mov	r3, r0
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_UART_RxCpltCallback+0x5c>)
 8001464:	6013      	str	r3, [r2, #0]
		flag = 1;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_UART_RxCpltCallback+0x60>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
	}
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40004800 	.word	0x40004800
 8001478:	20000000 	.word	0x20000000
 800147c:	20000180 	.word	0x20000180
 8001480:	20000284 	.word	0x20000284
 8001484:	200000a4 	.word	0x200000a4
 8001488:	200000a8 	.word	0x200000a8

0800148c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]

if(GPIO_Pin == USER_Btn_Pin)
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800149c:	d105      	bne.n	80014aa <HAL_GPIO_EXTI_Callback+0x1e>
{
 user_btn += 1;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80014a8:	801a      	strh	r2, [r3, #0]
}
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	200000a0 	.word	0x200000a0

080014bc <HAL_TIM_IC_CaptureCallback>:

// INPUT CAPTURE FUNCTION


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7f1b      	ldrb	r3, [r3, #28]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d148      	bne.n	800155e <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80014d4:	2100      	movs	r1, #0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f004 fbfa 	bl	8005cd0 <HAL_TIM_ReadCapturedValue>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014e0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e039      	b.n	800155e <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80014ea:	2100      	movs	r1, #0
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f004 fbef 	bl	8005cd0 <HAL_TIM_ReadCapturedValue>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014f6:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d907      	bls.n	8001514 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e00d      	b.n	8001530 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d907      	bls.n	8001530 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800152e:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001532:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001542:	edd7 6a03 	vldr	s13, [r7, #12]
 8001546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800154c:	edc3 7a00 	vstr	s15, [r3]
//			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
//	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
//		{
//			counter = __HAL_TIM_GET_COUNTER(&htim3);
//		}

	  if(PID == 0)
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	  }
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000c4 	.word	0x200000c4
 800157c:	200000b8 	.word	0x200000b8
 8001580:	200000bc 	.word	0x200000bc
 8001584:	200000c0 	.word	0x200000c0
 8001588:	49742400 	.word	0x49742400
 800158c:	200000c8 	.word	0x200000c8
 8001590:	20000010 	.word	0x20000010

08001594 <HAL_TIM_PeriodElapsedCallback>:

}

int16_t temp_counter;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 80b9 	bne.w	800171a <HAL_TIM_PeriodElapsedCallback+0x186>
  {
//	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint16_t)(readADC_f));


	  	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 80015a8:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015b2:	801a      	strh	r2, [r3, #0]

	  	  if (flag == 1)
 80015b4:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0x30>
	  	  {
	  		u = counter_usart;
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a5e      	ldr	r2, [pc, #376]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80015c2:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if (temp_counter != counter) {
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d007      	beq.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x50>
			flag = 0;
 80015d4:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
			u = counter;
 80015da:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b56      	ldr	r3, [pc, #344]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80015e2:	601a      	str	r2, [r3, #0]
		}


	  	  temp_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015ee:	801a      	strh	r2, [r3, #0]


  		  error = u - frequency;
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160a:	ee17 2a90 	vmov	r2, s15
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001610:	601a      	str	r2, [r3, #0]

  		  p_term = (float)(Kp * error);
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161e:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800162a:	edc3 7a00 	vstr	s15, [r3]

  		  integral = previous_integral + (error+previous_error);
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b48      	ldr	r3, [pc, #288]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	441a      	add	r2, r3
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4413      	add	r3, r2
 800163e:	4a47      	ldr	r2, [pc, #284]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001640:	6013      	str	r3, [r2, #0]
  		  previous_integral = integral;
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001648:	6013      	str	r3, [r2, #0]
  		  i_term = Ki*integral*(dt/2);
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001662:	edd3 6a00 	vldr	s13, [r3]
 8001666:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800166a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001674:	edc3 7a00 	vstr	s15, [r3]

  		  derivative = (error - previous_error)/dt;
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001698:	ee17 2a90 	vmov	r2, s15
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800169e:	601a      	str	r2, [r3, #0]
  		  previous_error = error;
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016a6:	6013      	str	r3, [r2, #0]
  		  d_term = Kd*derivative;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016c0:	edc3 7a00 	vstr	s15, [r3]

  		  PID = (uint16_t)(p_term + i_term + d_term);
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016ec:	601a      	str	r2, [r3, #0]

  		  if (PID > 1000)
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f6:	dd04      	ble.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x16e>
  		  {
  			  PID = 1000;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e006      	b.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x17c>
  		  }
  		  else if(PID < 0)
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da02      	bge.n	8001710 <HAL_TIM_PeriodElapsedCallback+0x17c>
  		  {
  			  PID =0;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
  		  }
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PID);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c

//  		UART


  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40010000 	.word	0x40010000
 800172c:	200001a0 	.word	0x200001a0
 8001730:	2000017e 	.word	0x2000017e
 8001734:	200000a8 	.word	0x200000a8
 8001738:	200000a4 	.word	0x200000a4
 800173c:	2000019c 	.word	0x2000019c
 8001740:	20000170 	.word	0x20000170
 8001744:	200000c8 	.word	0x200000c8
 8001748:	2000018c 	.word	0x2000018c
 800174c:	20000004 	.word	0x20000004
 8001750:	20000184 	.word	0x20000184
 8001754:	200000b0 	.word	0x200000b0
 8001758:	200000b4 	.word	0x200000b4
 800175c:	20000198 	.word	0x20000198
 8001760:	20000008 	.word	0x20000008
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000188 	.word	0x20000188
 800176c:	20000174 	.word	0x20000174
 8001770:	200000ac 	.word	0x200000ac
 8001774:	20000194 	.word	0x20000194
 8001778:	20000010 	.word	0x20000010
 800177c:	200001ec 	.word	0x200001ec

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f000 fd3a 	bl	80021fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f895 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178e:	f7ff fbbb 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001792:	f000 f9eb 	bl	8001b6c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001796:	f7ff fb25 	bl	8000de4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800179a:	f000 fa95 	bl	8001cc8 <MX_TIM2_Init>
  MX_I2C1_Init();
 800179e:	f7ff fccb 	bl	8001138 <MX_I2C1_Init>
  MX_TIM3_Init();
 80017a2:	f000 fb0d 	bl	8001dc0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80017a6:	f000 fc85 	bl	80020b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80017aa:	4837      	ldr	r0, [pc, #220]	; (8001888 <main+0x108>)
 80017ac:	f003 fa3c 	bl	8004c28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017b0:	2108      	movs	r1, #8
 80017b2:	4835      	ldr	r0, [pc, #212]	; (8001888 <main+0x108>)
 80017b4:	f003 fb12 	bl	8004ddc <HAL_TIM_PWM_Start>

// Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80017b8:	2100      	movs	r1, #0
 80017ba:	4834      	ldr	r0, [pc, #208]	; (800188c <main+0x10c>)
 80017bc:	f003 fc6a 	bl	8005094 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80017c0:	2108      	movs	r1, #8
 80017c2:	4832      	ldr	r0, [pc, #200]	; (800188c <main+0x10c>)
 80017c4:	f003 fc66 	bl	8005094 <HAL_TIM_IC_Start_IT>

//  Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017c8:	213c      	movs	r1, #60	; 0x3c
 80017ca:	4831      	ldr	r0, [pc, #196]	; (8001890 <main+0x110>)
 80017cc:	f003 fe58 	bl	8005480 <HAL_TIM_Encoder_Start>
//USART
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <main+0x114>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	492f      	ldr	r1, [pc, #188]	; (8001898 <main+0x118>)
 80017da:	4830      	ldr	r0, [pc, #192]	; (800189c <main+0x11c>)
 80017dc:	f005 f9a8 	bl	8006b30 <HAL_UART_Receive_IT>

  // LCD init
  struct lcd_disp disp;


  disp.addr = (0x27 << 1);
 80017e0:	234e      	movs	r3, #78	; 0x4e
 80017e2:	713b      	strb	r3, [r7, #4]
  disp.bl = true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  lcd_init(&disp);
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fd27 	bl	8001240 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	3301      	adds	r3, #1
 80017f6:	492a      	ldr	r1, [pc, #168]	; (80018a0 <main+0x120>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 fc87 	bl	800810c <siprintf>
  sprintf((char *)&disp.s_line, "################");
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	3312      	adds	r3, #18
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <main+0x120>)
 8001804:	4618      	mov	r0, r3
 8001806:	f006 fc81 	bl	800810c <siprintf>

  lcd_display(&disp);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fd9d 	bl	800134c <lcd_display>
  while (1)
  {
//	  counter = __HAL_TIM_GET_COUNTER(&htim3);
// odczyt z ADC

	  HAL_ADC_Start(&hadc1);
 8001812:	4824      	ldr	r0, [pc, #144]	; (80018a4 <main+0x124>)
 8001814:	f000 fdb8 	bl	8002388 <HAL_ADC_Start>
		 if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001818:	2164      	movs	r1, #100	; 0x64
 800181a:	4822      	ldr	r0, [pc, #136]	; (80018a4 <main+0x124>)
 800181c:	f000 fe82 	bl	8002524 <HAL_ADC_PollForConversion>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <main+0xda>
		 {
			readADC = HAL_ADC_GetValue(&hadc1);
 8001826:	481f      	ldr	r0, [pc, #124]	; (80018a4 <main+0x124>)
 8001828:	f000 ff07 	bl	800263a <HAL_ADC_GetValue>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <main+0x128>)
 8001832:	801a      	strh	r2, [r3, #0]
			readADC_f = readADC / 4.095;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <main+0x128>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe8b 	bl	8000554 <__aeabi_i2d>
 800183e:	a310      	add	r3, pc, #64	; (adr r3, 8001880 <main+0x100>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f81a 	bl	800087c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f8fc 	bl	8000a4c <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <main+0x12c>)
 8001858:	6013      	str	r3, [r2, #0]
		 }

		 sprintf((char *)&disp.f_line, "var: %d", counter);
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <main+0x130>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	3301      	adds	r3, #1
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <main+0x134>)
 8001866:	4618      	mov	r0, r3
 8001868:	f006 fc50 	bl	800810c <siprintf>
		 lcd_display(&disp);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd6c 	bl	800134c <lcd_display>
		 HAL_Delay(500);
 8001874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001878:	f000 fd1e 	bl	80022b8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800187c:	e7c9      	b.n	8001812 <main+0x92>
 800187e:	bf00      	nop
 8001880:	ae147ae1 	.word	0xae147ae1
 8001884:	40106147 	.word	0x40106147
 8001888:	200001ec 	.word	0x200001ec
 800188c:	20000238 	.word	0x20000238
 8001890:	200001a0 	.word	0x200001a0
 8001894:	20000000 	.word	0x20000000
 8001898:	20000180 	.word	0x20000180
 800189c:	20000284 	.word	0x20000284
 80018a0:	08008a9c 	.word	0x08008a9c
 80018a4:	200000d8 	.word	0x200000d8
 80018a8:	2000017c 	.word	0x2000017c
 80018ac:	2000016c 	.word	0x2000016c
 80018b0:	2000017e 	.word	0x2000017e
 80018b4:	08008ab0 	.word	0x08008ab0

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0b4      	sub	sp, #208	; 0xd0
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018c2:	2230      	movs	r2, #48	; 0x30
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 fc18 	bl	80080fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	2284      	movs	r2, #132	; 0x84
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 fc09 	bl	80080fc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018ea:	f002 f89f 	bl	8003a2c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <SystemClock_Config+0x114>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a36      	ldr	r2, [pc, #216]	; (80019cc <SystemClock_Config+0x114>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <SystemClock_Config+0x114>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <SystemClock_Config+0x118>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <SystemClock_Config+0x118>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <SystemClock_Config+0x118>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001922:	2301      	movs	r3, #1
 8001924:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800192c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800193e:	2304      	movs	r3, #4
 8001940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001944:	2348      	movs	r3, #72	; 0x48
 8001946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800195a:	4618      	mov	r0, r3
 800195c:	f002 f876 	bl	8003a4c <HAL_RCC_OscConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001966:	f000 f835 	bl	80019d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196a:	230f      	movs	r3, #15
 800196c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f002 faff 	bl	8003f94 <HAL_RCC_ClockConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800199c:	f000 f81a 	bl	80019d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 80019a0:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80019a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fcf0 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80019be:	f000 f809 	bl	80019d4 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	37d0      	adds	r7, #208	; 0xd0
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x44>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x44>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x44>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_MspInit+0x44>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_MspInit+0x44>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MspInit+0x44>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <NMI_Handler+0x4>

08001a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 fc00 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a82:	f003 fd8b 	bl	800559c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001ec 	.word	0x200001ec

08001a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM2_IRQHandler+0x10>)
 8001a96:	f003 fd81 	bl	800559c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000238 	.word	0x20000238

08001aa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM3_IRQHandler+0x10>)
 8001aaa:	f003 fd77 	bl	800559c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200001a0 	.word	0x200001a0

08001ab8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <USART3_IRQHandler+0x10>)
 8001abe:	f005 f885 	bl	8006bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000284 	.word	0x20000284

08001acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ad4:	f001 fb78 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f006 facc 	bl	80080a8 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20050000 	.word	0x20050000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200000cc 	.word	0x200000cc
 8001b44:	20000320 	.word	0x20000320

08001b48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	222c      	movs	r2, #44	; 0x2c
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f006 faa8 	bl	80080fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bae:	4a45      	ldr	r2, [pc, #276]	; (8001cc4 <MX_TIM1_Init+0x158>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bb4:	2247      	movs	r2, #71	; 0x47
 8001bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd8:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bda:	f002 ffcd 	bl	8004b78 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f7ff fef6 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4832      	ldr	r0, [pc, #200]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001bf6:	f003 ffa1 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c00:	f7ff fee8 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c04:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001c06:	f003 f887 	bl	8004d18 <HAL_TIM_PWM_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c10:	f7ff fee0 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4826      	ldr	r0, [pc, #152]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001c28:	f004 fd9c 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c32:	f7ff fecf 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001c3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4818      	ldr	r0, [pc, #96]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001c5e:	f003 fe59 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c68:	f7ff feb4 	bl	80019d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001ca2:	f004 fded 	bl	8006880 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001cac:	f7ff fe92 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM1_Init+0x154>)
 8001cb2:	f000 f9c7 	bl	8002044 <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3768      	adds	r7, #104	; 0x68
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001ec 	.word	0x200001ec
 8001cc4:	40010000 	.word	0x40010000

08001cc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001cfe:	2247      	movs	r2, #71	; 0x47
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d1c:	4827      	ldr	r0, [pc, #156]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d1e:	f002 ff2b 	bl	8004b78 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d28:	f7ff fe54 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	4619      	mov	r1, r3
 8001d38:	4820      	ldr	r0, [pc, #128]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d3a:	f003 feff 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d44:	f7ff fe46 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d48:	481c      	ldr	r0, [pc, #112]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d4a:	f003 f941 	bl	8004fd0 <HAL_TIM_IC_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d54:	f7ff fe3e 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4815      	ldr	r0, [pc, #84]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d68:	f004 fcfc 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001d72:	f7ff fe2f 	bl	80019d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001d8e:	f003 fd24 	bl	80057da <HAL_TIM_IC_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001d98:	f7ff fe1c 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2208      	movs	r2, #8
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_TIM2_Init+0xf4>)
 8001da4:	f003 fd19 	bl	80057da <HAL_TIM_IC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001dae:	f7ff fe11 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000238 	.word	0x20000238

08001dc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 f994 	bl	80080fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001de0:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <MX_TIM3_Init+0xa4>)
 8001de2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001df2:	2264      	movs	r2, #100	; 0x64
 8001df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001e2e:	f003 fa81 	bl	8005334 <HAL_TIM_Encoder_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f7ff fdcc 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_TIM3_Init+0xa0>)
 8001e4a:	f004 fc8b 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e54:	f7ff fdbe 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	; 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200001a0 	.word	0x200001a0
 8001e64:	40000400 	.word	0x40000400

08001e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_TIM_Base_MspInit+0xf8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d114      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2019      	movs	r0, #25
 8001ea8:	f000 feff 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eac:	2019      	movs	r0, #25
 8001eae:	f000 ff18 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001eb2:	e051      	b.n	8001f58 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d14c      	bne.n	8001f58 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_TIM_Base_MspInit+0xfc>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <HAL_TIM_Base_MspInit+0x100>)
 8001f22:	f000 ff8b 	bl	8002e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x104>)
 8001f44:	f000 ff7a 	bl	8002e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f000 feac 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f52:	201c      	movs	r0, #28
 8001f54:	f000 fec5 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	; (8002034 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d14b      	bne.n	800202a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fda:	2340      	movs	r3, #64	; 0x40
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fea:	2302      	movs	r3, #2
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4811      	ldr	r0, [pc, #68]	; (800203c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ff6:	f000 ff21 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800200a:	2302      	movs	r3, #2
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002016:	f000 ff11 	bl	8002e3c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201d      	movs	r0, #29
 8002020:	f000 fe43 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002024:	201d      	movs	r0, #29
 8002026:	f000 fe5c 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40000400 	.word	0x40000400
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020800 	.word	0x40020800

08002044 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_TIM_MspPostInit+0x64>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d11c      	bne.n	80020a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_TIM_MspPostInit+0x68>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_TIM_MspPostInit+0x68>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_TIM_MspPostInit+0x68>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <HAL_TIM_MspPostInit+0x6c>)
 800209c:	f000 fece 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <MX_USART3_UART_Init+0x5c>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_USART3_UART_Init+0x58>)
 80020f8:	f004 fc5e 	bl	80069b8 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002102:	f7ff fc67 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000284 	.word	0x20000284
 8002110:	40004800 	.word	0x40004800

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_UART_MspInit+0x8c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d130      	bne.n	8002198 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_UART_MspInit+0x90>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_UART_MspInit+0x90>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002178:	2307      	movs	r3, #7
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <HAL_UART_MspInit+0x94>)
 8002184:	f000 fe5a 	bl	8002e3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2027      	movs	r0, #39	; 0x27
 800218e:	f000 fd8c 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002192:	2027      	movs	r0, #39	; 0x27
 8002194:	f000 fda5 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40004800 	.word	0x40004800
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020c00 	.word	0x40020c00

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021b2:	490e      	ldr	r1, [pc, #56]	; (80021ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021c8:	4c0b      	ldr	r4, [pc, #44]	; (80021f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021d6:	f7ff fcb7 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021da:	f005 ff6b 	bl	80080b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7ff facf 	bl	8001780 <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80021f0:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 80021f4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80021f8:	2000031c 	.word	0x2000031c

080021fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC_IRQHandler>

080021fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002202:	2003      	movs	r0, #3
 8002204:	f000 fd46 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002208:	2000      	movs	r0, #0
 800220a:	f000 f805 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220e:	f7ff fbe7 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fd61 	bl	8002cfe <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 fd29 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000014 	.word	0x20000014
 8002270:	2000001c 	.word	0x2000001c
 8002274:	20000018 	.word	0x20000018

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000001c 	.word	0x2000001c
 800229c:	20000308 	.word	0x20000308

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000308 	.word	0x20000308

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000001c 	.word	0x2000001c

08002300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e031      	b.n	800237a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fdb2 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_ADC_Init+0x84>)
 8002344:	4013      	ands	r3, r2
 8002346:	f043 0202 	orr.w	r2, r3, #2
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fad6 	bl	8002900 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
 800236a:	e001      	b.n	8002370 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	ffffeefd 	.word	0xffffeefd

08002388 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Start+0x1a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0ad      	b.n	80024fe <HAL_ADC_Start+0x176>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d018      	beq.n	80023ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_ADC_Start+0x184>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_ADC_Start+0x188>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9a      	lsrs	r2, r3, #18
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d175      	bne.n	80024e4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	4b45      	ldr	r3, [pc, #276]	; (8002514 <HAL_ADC_Start+0x18c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d106      	bne.n	8002442 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f023 0206 	bic.w	r2, r3, #6
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
 8002440:	e002      	b.n	8002448 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002458:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_ADC_Start+0x190>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d143      	bne.n	80024fc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e03a      	b.n	80024fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_ADC_Start+0x194>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d10e      	bne.n	80024ae <HAL_ADC_Start+0x126>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_ADC_Start+0x190>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d120      	bne.n	80024fc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_ADC_Start+0x198>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d11b      	bne.n	80024fc <HAL_ADC_Start+0x174>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d114      	bne.n	80024fc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	e00b      	b.n	80024fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f043 0210 	orr.w	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000014 	.word	0x20000014
 8002510:	431bde83 	.word	0x431bde83
 8002514:	fffff8fe 	.word	0xfffff8fe
 8002518:	40012300 	.word	0x40012300
 800251c:	40012000 	.word	0x40012000
 8002520:	40012200 	.word	0x40012200

08002524 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d113      	bne.n	800256a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d10b      	bne.n	800256a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e063      	b.n	8002632 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800256a:	f7ff fe99 	bl	80022a0 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002570:	e021      	b.n	80025b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d01d      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_ADC_PollForConversion+0x6c>
 8002580:	f7ff fe8e 	bl	80022a0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d212      	bcs.n	80025b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d00b      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0204 	orr.w	r2, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e03d      	b.n	8002632 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d1d6      	bne.n	8002572 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0212 	mvn.w	r2, #18
 80025cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d123      	bne.n	8002630 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11f      	bne.n	8002630 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e136      	b.n	80028de <HAL_ADC_ConfigChannel+0x28a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b09      	cmp	r3, #9
 800267e:	d93a      	bls.n	80026f6 <HAL_ADC_ConfigChannel+0xa2>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002688:	d035      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	3b1e      	subs	r3, #30
 80026a0:	2207      	movs	r2, #7
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a8d      	ldr	r2, [pc, #564]	; (80028ec <HAL_ADC_ConfigChannel+0x298>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	061a      	lsls	r2, r3, #24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ce:	e035      	b.n	800273c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4403      	add	r3, r0
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	409a      	lsls	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f4:	e022      	b.n	800273c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	4603      	mov	r3, r0
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4403      	add	r3, r0
 8002732:	409a      	lsls	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d824      	bhi.n	800278e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b05      	subs	r3, #5
 8002756:	221f      	movs	r2, #31
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43da      	mvns	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	400a      	ands	r2, r1
 8002764:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b05      	subs	r3, #5
 8002780:	fa00 f203 	lsl.w	r2, r0, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
 800278c:	e04c      	b.n	8002828 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d824      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b23      	subs	r3, #35	; 0x23
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b23      	subs	r3, #35	; 0x23
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	e023      	b.n	8002828 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b41      	subs	r3, #65	; 0x41
 80027f2:	221f      	movs	r2, #31
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b41      	subs	r3, #65	; 0x41
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_ADC_ConfigChannel+0x29c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1f4>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002842:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002846:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <HAL_ADC_ConfigChannel+0x29c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10f      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x21e>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b12      	cmp	r3, #18
 8002858:	d10b      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002864:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800286c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002870:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d12b      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x280>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <HAL_ADC_ConfigChannel+0x298>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <HAL_ADC_ConfigChannel+0x23a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b11      	cmp	r3, #17
 800288c:	d122      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002894:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002898:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_ADC_ConfigChannel+0x298>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_ADC_ConfigChannel+0x2a8>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9a      	lsrs	r2, r3, #18
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028c6:	e002      	b.n	80028ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	10000012 	.word	0x10000012
 80028f0:	40012000 	.word	0x40012000
 80028f4:	40012300 	.word	0x40012300
 80028f8:	20000014 	.word	0x20000014
 80028fc:	431bde83 	.word	0x431bde83

08002900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002908:	4b78      	ldr	r3, [pc, #480]	; (8002aec <ADC_Init+0x1ec>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a77      	ldr	r2, [pc, #476]	; (8002aec <ADC_Init+0x1ec>)
 800290e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002912:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002914:	4b75      	ldr	r3, [pc, #468]	; (8002aec <ADC_Init+0x1ec>)
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4973      	ldr	r1, [pc, #460]	; (8002aec <ADC_Init+0x1ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	021a      	lsls	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <ADC_Init+0x1f0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e00f      	b.n	80029fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0202 	bic.w	r2, r2, #2
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	005a      	lsls	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	3b01      	subs	r3, #1
 8002a54:	035a      	lsls	r2, r3, #13
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e007      	b.n	8002a70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	051a      	lsls	r2, r3, #20
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab2:	025a      	lsls	r2, r3, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	029a      	lsls	r2, r3, #10
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012300 	.word	0x40012300
 8002af0:	0f000001 	.word	0x0f000001

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <__NVIC_SetPriorityGrouping+0x40>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x40>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00
 8002b38:	05fa0000 	.word	0x05fa0000

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	; (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff3e 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff8e 	bl	8002be8 <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff31 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fabc 	bl	80022a0 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d008      	beq.n	8002d48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e052      	b.n	8002dee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0216 	bic.w	r2, r2, #22
 8002d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <HAL_DMA_Abort+0x62>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0208 	bic.w	r2, r2, #8
 8002d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	e013      	b.n	8002dc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9a:	f7ff fa81 	bl	80022a0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d90c      	bls.n	8002dc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2203      	movs	r2, #3
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e015      	b.n	8002dee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e4      	bne.n	8002d9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	223f      	movs	r2, #63	; 0x3f
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e00c      	b.n	8002e2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2205      	movs	r2, #5
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	e175      	b.n	8003148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f040 8164 	bne.w	8003142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d005      	beq.n	8002e92 <HAL_GPIO_Init+0x56>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d130      	bne.n	8002ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0201 	and.w	r2, r3, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d017      	beq.n	8002f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d123      	bne.n	8002f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80be 	beq.w	8003142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a65      	ldr	r2, [pc, #404]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <HAL_GPIO_Init+0x328>)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d037      	beq.n	800307a <HAL_GPIO_Init+0x23e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_GPIO_Init+0x330>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_GPIO_Init+0x23a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02b      	beq.n	8003072 <HAL_GPIO_Init+0x236>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_GPIO_Init+0x338>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d025      	beq.n	800306e <HAL_GPIO_Init+0x232>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_GPIO_Init+0x33c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01f      	beq.n	800306a <HAL_GPIO_Init+0x22e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a53      	ldr	r2, [pc, #332]	; (800317c <HAL_GPIO_Init+0x340>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x22a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_GPIO_Init+0x344>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x226>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_GPIO_Init+0x348>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_GPIO_Init+0x34c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_Init+0x350>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x21a>
 8003052:	2309      	movs	r3, #9
 8003054:	e012      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003056:	230a      	movs	r3, #10
 8003058:	e010      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305a:	2308      	movs	r3, #8
 800305c:	e00e      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305e:	2307      	movs	r3, #7
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003062:	2306      	movs	r3, #6
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x240>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x328>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_GPIO_Init+0x354>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_GPIO_Init+0x354>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_GPIO_Init+0x354>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_GPIO_Init+0x354>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f ae86 	bls.w	8002e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40021c00 	.word	0x40021c00
 8003188:	40022000 	.word	0x40022000
 800318c:	40022400 	.word	0x40022400
 8003190:	40013c00 	.word	0x40013c00

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031b0:	e003      	b.n	80031ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f950 	bl	800148c <HAL_GPIO_EXTI_Callback>
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd ffca 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003248:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003258:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e006      	b.n	8003280 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800327e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d104      	bne.n	8003292 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003290:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_I2C_Init+0x11c>)
 800329e:	430b      	orrs	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	02008000 	.word	0x02008000

08003318 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
 8003328:	4613      	mov	r3, r2
 800332a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 80da 	bne.w	80034ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2C_Master_Transmit+0x30>
 8003344:	2302      	movs	r3, #2
 8003346:	e0d3      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003350:	f7fe ffa6 	bl	80022a0 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2319      	movs	r3, #25
 800335c:	2201      	movs	r2, #1
 800335e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f8f0 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0be      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	; 0x21
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2210      	movs	r2, #16
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	893a      	ldrh	r2, [r7, #8]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2bff      	cmp	r3, #255	; 0xff
 80033a2:	d90e      	bls.n	80033c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fa6c 	bl	8003898 <I2C_TransferConfig>
 80033c0:	e06c      	b.n	800349c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fa5b 	bl	8003898 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033e2:	e05b      	b.n	800349c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6a39      	ldr	r1, [r7, #32]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f8ed 	bl	80035c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e07b      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_I2C_Master_Transmit+0x184>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d130      	bne.n	800349c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f87f 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04d      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d90e      	bls.n	800347c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fa0f 	bl	8003898 <I2C_TransferConfig>
 800347a:	e00f      	b.n	800349c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	b2da      	uxtb	r2, r3
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f9fe 	bl	8003898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d19e      	bne.n	80033e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f8cc 	bl	8003648 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e01a      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_I2C_Master_Transmit+0x1e4>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	80002000 	.word	0x80002000
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d007      	beq.n	800353c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	619a      	str	r2, [r3, #24]
  }
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	e022      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d01e      	beq.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fe9d 	bl	80022a0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e00f      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d0cd      	beq.n	800355a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d4:	e02c      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f870 	bl	80036c0 <I2C_IsErrorOccurred>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02a      	b.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d01e      	beq.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fe55 	bl	80022a0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d113      	bne.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d1cb      	bne.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003654:	e028      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f830 	bl	80036c0 <I2C_IsErrorOccurred>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e026      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fe19 	bl	80022a0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e007      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d1cf      	bne.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d075      	beq.n	80037d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f4:	e056      	b.n	80037a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d052      	beq.n	80037a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fdcf 	bl	80022a0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_IsErrorOccurred+0x54>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d147      	bne.n	80037a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d12e      	bne.n	8003796 <I2C_IsErrorOccurred+0xd6>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d02a      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b20      	cmp	r3, #32
 8003744:	d027      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003754:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003756:	f7fe fda3 	bl	80022a0 <HAL_GetTick>
 800375a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375c:	e01b      	b.n	8003796 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800375e:	f7fe fd9f 	bl	80022a0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b19      	cmp	r3, #25
 800376a:	d914      	bls.n	8003796 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d1dc      	bne.n	800375e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d003      	beq.n	80037ba <I2C_IsErrorOccurred+0xfa>
 80037b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d09d      	beq.n	80036f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fe56 	bl	8003500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <I2C_IsErrorOccurred+0x1d4>)
 8003860:	400b      	ands	r3, r1
 8003862:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	4613      	mov	r3, r2
 80038a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0d5b      	lsrs	r3, r3, #21
 80038d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <I2C_TransferConfig+0x60>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	43db      	mvns	r3, r3
 80038dc:	ea02 0103 	and.w	r1, r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	03ff63ff 	.word	0x03ff63ff

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e291      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7c:	4b93      	ldr	r3, [pc, #588]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x62>
 8003a88:	4b90      	ldr	r3, [pc, #576]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b8d      	ldr	r3, [pc, #564]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x130>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e26b      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x7a>
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a83      	ldr	r2, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x9c>
 8003ace:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7b      	ldr	r2, [pc, #492]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xc0>
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a75      	ldr	r2, [pc, #468]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b73      	ldr	r3, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a72      	ldr	r2, [pc, #456]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6b      	ldr	r2, [pc, #428]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fbb8 	bl	80022a0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fbb4 	bl	80022a0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e21f      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe8>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fba4 	bl	80022a0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fba0 	bl	80022a0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e20b      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x110>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d069      	beq.n	8003c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x190>
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1df      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	493d      	ldr	r1, [pc, #244]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e040      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fb56 	bl	80022a0 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fe fb52 	bl	80022a0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1bd      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4929      	ldr	r1, [pc, #164]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
 8003c2a:	e018      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fb32 	bl	80022a0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fe fb2e 	bl	80022a0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e199      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d038      	beq.n	8003cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d019      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fb0f 	bl	80022a0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fe fb0b 	bl	80022a0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e176      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x23a>
 8003ca4:	e01a      	b.n	8003cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fe faf5 	bl	80022a0 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe faf1 	bl	80022a0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d903      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e15c      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
 8003ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a4 	beq.w	8003e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a87      	ldr	r2, [pc, #540]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a7e      	ldr	r2, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fab9 	bl	80022a0 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fe fab5 	bl	80022a0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e120      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d44:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x31a>
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	e02d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x33c>
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a69      	ldr	r2, [pc, #420]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a66      	ldr	r2, [pc, #408]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	e01c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x35e>
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a60      	ldr	r2, [pc, #384]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a5d      	ldr	r2, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a5a      	ldr	r2, [pc, #360]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a57      	ldr	r2, [pc, #348]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fa69 	bl	80022a0 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fa65 	bl	80022a0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0ce      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x386>
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fe fa53 	bl	80022a0 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe fa4f 	bl	80022a0 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a4 	beq.w	8003f84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d06b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d149      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fa20 	bl	80022a0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe fa1c 	bl	80022a0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e087      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe f9f0 	bl	80022a0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe f9ec 	bl	80022a0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e057      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x478>
 8003ee2:	e04f      	b.n	8003f84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe f9d6 	bl	80022a0 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe f9d2 	bl	80022a0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e03d      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4ac>
 8003f16:	e035      	b.n	8003f84 <HAL_RCC_OscConfig+0x538>
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x544>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0d0      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d910      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 020f 	bic.w	r2, r3, #15
 8003fc2:	4965      	ldr	r1, [pc, #404]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b8      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff4:	4b59      	ldr	r3, [pc, #356]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004018:	4b50      	ldr	r3, [pc, #320]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	494d      	ldr	r1, [pc, #308]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d040      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b47      	ldr	r3, [pc, #284]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d115      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e07f      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e073      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e06b      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4936      	ldr	r1, [pc, #216]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fe f90a 	bl	80022a0 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe f906 	bl	80022a0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e053      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d210      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	4922      	ldr	r1, [pc, #136]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e032      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4916      	ldr	r1, [pc, #88]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	490e      	ldr	r1, [pc, #56]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004126:	f000 f821 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800412a:	4602      	mov	r2, r0
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	490a      	ldr	r1, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x1cc>)
 8004138:	5ccb      	ldrb	r3, [r1, r3]
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_ClockConfig+0x1d0>)
 8004140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1d4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe f866 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023c00 	.word	0x40023c00
 800415c:	40023800 	.word	0x40023800
 8004160:	08008ab8 	.word	0x08008ab8
 8004164:	20000014 	.word	0x20000014
 8004168:	20000018 	.word	0x20000018

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	2300      	movs	r3, #0
 800417e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004184:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d00d      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x40>
 8004190:	2b08      	cmp	r3, #8
 8004192:	f200 80bd 	bhi.w	8004310 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x34>
 800419a:	2b04      	cmp	r3, #4
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800419e:	e0b7      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041a2:	60bb      	str	r3, [r7, #8]
      break;
 80041a4:	e0b7      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a6:	4b61      	ldr	r3, [pc, #388]	; (800432c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041a8:	60bb      	str	r3, [r7, #8]
      break;
 80041aa:	e0b4      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ac:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04d      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b58      	ldr	r3, [pc, #352]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	ea02 0800 	and.w	r8, r2, r0
 80041da:	ea03 0901 	and.w	r9, r3, r1
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	014b      	lsls	r3, r1, #5
 80041ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f0:	0142      	lsls	r2, r0, #5
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	ebb0 0008 	subs.w	r0, r0, r8
 80041fa:	eb61 0109 	sbc.w	r1, r1, r9
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800420c:	0182      	lsls	r2, r0, #6
 800420e:	1a12      	subs	r2, r2, r0
 8004210:	eb63 0301 	sbc.w	r3, r3, r1
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	00d9      	lsls	r1, r3, #3
 800421e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004222:	00d0      	lsls	r0, r2, #3
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	eb12 0208 	adds.w	r2, r2, r8
 800422c:	eb43 0309 	adc.w	r3, r3, r9
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	0259      	lsls	r1, r3, #9
 800423a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800423e:	0250      	lsls	r0, r2, #9
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f7fc fc4c 	bl	8000aec <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e04a      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	461a      	mov	r2, r3
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	ea02 0400 	and.w	r4, r2, r0
 8004276:	ea03 0501 	and.w	r5, r3, r1
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	014b      	lsls	r3, r1, #5
 8004288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800428c:	0142      	lsls	r2, r0, #5
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	1b00      	subs	r0, r0, r4
 8004294:	eb61 0105 	sbc.w	r1, r1, r5
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	018b      	lsls	r3, r1, #6
 80042a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042a6:	0182      	lsls	r2, r0, #6
 80042a8:	1a12      	subs	r2, r2, r0
 80042aa:	eb63 0301 	sbc.w	r3, r3, r1
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	00d9      	lsls	r1, r3, #3
 80042b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042bc:	00d0      	lsls	r0, r2, #3
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	1912      	adds	r2, r2, r4
 80042c4:	eb45 0303 	adc.w	r3, r5, r3
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	0299      	lsls	r1, r3, #10
 80042d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042d6:	0290      	lsls	r0, r2, #10
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f7fc fc00 	bl	8000aec <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	3301      	adds	r3, #1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	60bb      	str	r3, [r7, #8]
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004312:	60bb      	str	r3, [r7, #8]
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	68bb      	ldr	r3, [r7, #8]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400
 800432c:	007a1200 	.word	0x007a1200

08004330 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_RCC_GetHCLKFreq+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000014 	.word	0x20000014

08004348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800434c:	f7ff fff0 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	0a9b      	lsrs	r3, r3, #10
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4903      	ldr	r1, [pc, #12]	; (800436c <HAL_RCC_GetPCLK1Freq+0x24>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	08008ac8 	.word	0x08008ac8

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004374:	f7ff ffdc 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0b5b      	lsrs	r3, r3, #13
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	08008ac8 	.word	0x08008ac8

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043c0:	4b69      	ldr	r3, [pc, #420]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a68      	ldr	r2, [pc, #416]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ca:	6093      	str	r3, [r2, #8]
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	4964      	ldr	r1, [pc, #400]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	4959      	ldr	r1, [pc, #356]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800442e:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004434:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	494a      	ldr	r1, [pc, #296]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 808b 	beq.w	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	4a39      	ldr	r2, [pc, #228]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	6413      	str	r3, [r2, #64]	; 0x40
 8004488:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004494:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a34      	ldr	r2, [pc, #208]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fd fefe 	bl	80022a0 <HAL_GetTick>
 80044a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd fefa 	bl	80022a0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e357      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d035      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d02e      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004504:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d114      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fec2 	bl	80022a0 <HAL_GetTick>
 800451c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd febe 	bl	80022a0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e319      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ee      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454e:	d111      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800455e:	400b      	ands	r3, r1
 8004560:	4901      	ldr	r1, [pc, #4]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
 8004566:	e00b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004568:	40023800 	.word	0x40023800
 800456c:	40007000 	.word	0x40007000
 8004570:	0ffffcff 	.word	0x0ffffcff
 8004574:	4bb1      	ldr	r3, [pc, #708]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4ab0      	ldr	r2, [pc, #704]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800457a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800457e:	6093      	str	r3, [r2, #8]
 8004580:	4bae      	ldr	r3, [pc, #696]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458c:	49ab      	ldr	r1, [pc, #684]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800459e:	4ba7      	ldr	r3, [pc, #668]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a4:	4aa5      	ldr	r2, [pc, #660]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ae:	4ba3      	ldr	r3, [pc, #652]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	49a0      	ldr	r1, [pc, #640]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045cc:	4b9b      	ldr	r3, [pc, #620]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045da:	4998      	ldr	r1, [pc, #608]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ee:	4b93      	ldr	r3, [pc, #588]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fc:	498f      	ldr	r1, [pc, #572]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004610:	4b8a      	ldr	r3, [pc, #552]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	4987      	ldr	r1, [pc, #540]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	497e      	ldr	r1, [pc, #504]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004654:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	4976      	ldr	r1, [pc, #472]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004676:	4b71      	ldr	r3, [pc, #452]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f023 020c 	bic.w	r2, r3, #12
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	496d      	ldr	r1, [pc, #436]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	4965      	ldr	r1, [pc, #404]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ba:	4b60      	ldr	r3, [pc, #384]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	495c      	ldr	r1, [pc, #368]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046dc:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	4954      	ldr	r1, [pc, #336]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046fe:	4b4f      	ldr	r3, [pc, #316]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	494b      	ldr	r1, [pc, #300]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004720:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	4943      	ldr	r1, [pc, #268]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	493a      	ldr	r1, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004772:	4932      	ldr	r1, [pc, #200]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004786:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004794:	4929      	ldr	r1, [pc, #164]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	4919      	ldr	r1, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f8:	4910      	ldr	r1, [pc, #64]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d006      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80d9 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a08      	ldr	r2, [pc, #32]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800481e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fd fd3e 	bl	80022a0 <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004826:	e00b      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004828:	f7fd fd3a 	bl	80022a0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d904      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e197      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004840:	4b6c      	ldr	r3, [pc, #432]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ed      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d021      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004860:	4b64      	ldr	r3, [pc, #400]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800486e:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	0e1b      	lsrs	r3, r3, #24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	019a      	lsls	r2, r3, #6
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	4957      	ldr	r1, [pc, #348]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c6:	d129      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0f1b      	lsrs	r3, r3, #28
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	019a      	lsls	r2, r3, #6
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	071b      	lsls	r3, r3, #28
 80048fc:	493d      	ldr	r1, [pc, #244]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004904:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490a:	f023 021f 	bic.w	r2, r3, #31
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	3b01      	subs	r3, #1
 8004914:	4937      	ldr	r1, [pc, #220]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01d      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	0e1b      	lsrs	r3, r3, #24
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004936:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493c:	0f1b      	lsrs	r3, r3, #28
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	019a      	lsls	r2, r3, #6
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	431a      	orrs	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	071b      	lsls	r3, r3, #28
 800495c:	4925      	ldr	r1, [pc, #148]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d011      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	019a      	lsls	r2, r3, #6
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	071b      	lsls	r3, r3, #28
 800498c:	4919      	ldr	r1, [pc, #100]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fc7e 	bl	80022a0 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049a8:	f7fd fc7a 	bl	80022a0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0d7      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 80cd 	bne.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fd fc61 	bl	80022a0 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049e2:	f7fd fc5d 	bl	80022a0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d903      	bls.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e0ba      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049f8:	4b5e      	ldr	r3, [pc, #376]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d0ed      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d12a      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a2e:	4b51      	ldr	r3, [pc, #324]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a3c:	4b4d      	ldr	r3, [pc, #308]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	071b      	lsls	r3, r3, #28
 8004a62:	4944      	ldr	r1, [pc, #272]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a6a:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	493d      	ldr	r1, [pc, #244]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d022      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a98:	d11d      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	0e1b      	lsrs	r3, r3, #24
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	0f1b      	lsrs	r3, r3, #28
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	019a      	lsls	r2, r3, #6
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	4929      	ldr	r1, [pc, #164]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d028      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4917      	ldr	r1, [pc, #92]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4911      	ldr	r1, [pc, #68]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b40:	f7fd fbae 	bl	80022a0 <HAL_GetTick>
 8004b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b48:	f7fd fbaa 	bl	80022a0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e007      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b66:	d1ef      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e049      	b.n	8004c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd f962 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f001 f8ec 	bl	8005d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e054      	b.n	8004cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d115      	bne.n	8004cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start_IT+0xec>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d015      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d011      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	e008      	b.n	8004ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40001800 	.word	0x40001800
 8004d14:	00010007 	.word	0x00010007

08004d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e049      	b.n	8004dbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f841 	bl	8004dc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f001 f81c 	bl	8005d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <HAL_TIM_PWM_Start+0x24>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e03c      	b.n	8004e7a <HAL_TIM_PWM_Start+0x9e>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d109      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x3e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e02f      	b.n	8004e7a <HAL_TIM_PWM_Start+0x9e>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d109      	bne.n	8004e34 <HAL_TIM_PWM_Start+0x58>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e022      	b.n	8004e7a <HAL_TIM_PWM_Start+0x9e>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d109      	bne.n	8004e4e <HAL_TIM_PWM_Start+0x72>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e015      	b.n	8004e7a <HAL_TIM_PWM_Start+0x9e>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start+0x8c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e008      	b.n	8004e7a <HAL_TIM_PWM_Start+0x9e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e092      	b.n	8004fa8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xb6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e90:	e023      	b.n	8004eda <HAL_TIM_PWM_Start+0xfe>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xc6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea0:	e01b      	b.n	8004eda <HAL_TIM_PWM_Start+0xfe>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_PWM_Start+0xfe>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0xe6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_PWM_Start+0xfe>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0xf6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_PWM_Start+0xfe>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fc18 	bl	8006718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a30      	ldr	r2, [pc, #192]	; (8004fb0 <HAL_TIM_PWM_Start+0x1d4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_PWM_Start+0x120>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <HAL_TIM_PWM_Start+0x1d8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_TIM_PWM_Start+0x124>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_PWM_Start+0x126>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <HAL_TIM_PWM_Start+0x1d4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_TIM_PWM_Start+0x1dc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_TIM_PWM_Start+0x1e0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_TIM_PWM_Start+0x1e4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_PWM_Start+0x1d8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x18a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_TIM_PWM_Start+0x1ec>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d115      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <HAL_TIM_PWM_Start+0x1f0>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d015      	beq.n	8004fa4 <HAL_TIM_PWM_Start+0x1c8>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d011      	beq.n	8004fa4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	e008      	b.n	8004fa4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e000      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40010400 	.word	0x40010400
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40001800 	.word	0x40001800
 8004fcc:	00010007 	.word	0x00010007

08004fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e049      	b.n	8005076 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f841 	bl	800507e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fec0 	bl	8005d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_IC_Start_IT+0x1e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e023      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0x2e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e01b      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_IT+0x3e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e013      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start_IT+0x4e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_IC_Start_IT+0x5e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e003      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_TIM_IC_Start_IT+0x78>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e013      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d104      	bne.n	800511c <HAL_TIM_IC_Start_IT+0x88>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e00b      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d104      	bne.n	800512c <HAL_TIM_IC_Start_IT+0x98>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e003      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005132:	b2db      	uxtb	r3, r3
 8005134:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d102      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800513c:	7b7b      	ldrb	r3, [r7, #13]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0e2      	b.n	800530c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0xc2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	e023      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0xd2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005164:	e01b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0xe2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005174:	e013      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d104      	bne.n	8005186 <HAL_TIM_IC_Start_IT+0xf2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005184:	e00b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Start_IT+0x102>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	e003      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0x11a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ac:	e013      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d104      	bne.n	80051be <HAL_TIM_IC_Start_IT+0x12a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_IC_Start_IT+0x13a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051cc:	e003      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d841      	bhi.n	8005260 <HAL_TIM_IC_Start_IT+0x1cc>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <HAL_TIM_IC_Start_IT+0x150>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005219 	.word	0x08005219
 80051e8:	08005261 	.word	0x08005261
 80051ec:	08005261 	.word	0x08005261
 80051f0:	08005261 	.word	0x08005261
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	08005261 	.word	0x08005261
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	0800523d 	.word	0x0800523d
 8005208:	08005261 	.word	0x08005261
 800520c:	08005261 	.word	0x08005261
 8005210:	08005261 	.word	0x08005261
 8005214:	0800524f 	.word	0x0800524f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0202 	orr.w	r2, r2, #2
 8005226:	60da      	str	r2, [r3, #12]
      break;
 8005228:	e01d      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0204 	orr.w	r2, r2, #4
 8005238:	60da      	str	r2, [r3, #12]
      break;
 800523a:	e014      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	60da      	str	r2, [r3, #12]
      break;
 800524c:	e00b      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0210 	orr.w	r2, r2, #16
 800525c:	60da      	str	r2, [r3, #12]
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	bf00      	nop
  }

  if (status == HAL_OK)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d14e      	bne.n	800530a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fa4f 	bl	8006718 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a25      	ldr	r2, [pc, #148]	; (8005314 <HAL_TIM_IC_Start_IT+0x280>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d01d      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	; (8005318 <HAL_TIM_IC_Start_IT+0x284>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_TIM_IC_Start_IT+0x288>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_TIM_IC_Start_IT+0x28c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_TIM_IC_Start_IT+0x290>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_TIM_IC_Start_IT+0x294>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x236>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_TIM_IC_Start_IT+0x298>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d115      	bne.n	80052f6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <HAL_TIM_IC_Start_IT+0x29c>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d015      	beq.n	8005308 <HAL_TIM_IC_Start_IT+0x274>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d011      	beq.n	8005308 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	e008      	b.n	8005308 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e000      	b.n	800530a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40010400 	.word	0x40010400
 8005328:	40014000 	.word	0x40014000
 800532c:	40001800 	.word	0x40001800
 8005330:	00010007 	.word	0x00010007

08005334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e08f      	b.n	8005468 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc fe07 	bl	8001f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <HAL_TIM_Encoder_Init+0x13c>)
 8005376:	400b      	ands	r3, r1
 8005378:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f000 fd05 	bl	8005d94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_TIM_Encoder_Init+0x140>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	4313      	orrs	r3, r2
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_TIM_Encoder_Init+0x144>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <HAL_TIM_Encoder_Init+0x148>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	4313      	orrs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	031b      	lsls	r3, r3, #12
 80053f4:	4313      	orrs	r3, r2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4313      	orrs	r3, r2
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	fffebff8 	.word	0xfffebff8
 8005474:	fffffcfc 	.word	0xfffffcfc
 8005478:	fffff3f3 	.word	0xfffff3f3
 800547c:	ffff0f0f 	.word	0xffff0f0f

08005480 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005490:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005498:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d110      	bne.n	80054d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d102      	bne.n	80054bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b6:	7b7b      	ldrb	r3, [r7, #13]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d001      	beq.n	80054c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e069      	b.n	8005594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	e031      	b.n	8005536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d110      	bne.n	80054fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d102      	bne.n	80054e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054de:	7b3b      	ldrb	r3, [r7, #12]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e055      	b.n	8005594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f8:	e01d      	b.n	8005536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d108      	bne.n	8005512 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005506:	7b7b      	ldrb	r3, [r7, #13]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d102      	bne.n	8005512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800550c:	7b3b      	ldrb	r3, [r7, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e03e      	b.n	8005594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_TIM_Encoder_Start+0xc4>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d008      	beq.n	8005554 <HAL_TIM_Encoder_Start+0xd4>
 8005542:	e00f      	b.n	8005564 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f001 f8e3 	bl	8006718 <TIM_CCxChannelCmd>
      break;
 8005552:	e016      	b.n	8005582 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	2104      	movs	r1, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f8db 	bl	8006718 <TIM_CCxChannelCmd>
      break;
 8005562:	e00e      	b.n	8005582 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2201      	movs	r2, #1
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f8d3 	bl	8006718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2201      	movs	r2, #1
 8005578:	2104      	movs	r1, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f001 f8cc 	bl	8006718 <TIM_CCxChannelCmd>
      break;
 8005580:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0202 	mvn.w	r2, #2
 80055c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb ff6c 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fbb6 	bl	8005d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fbbd 	bl	8005d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0204 	mvn.w	r2, #4
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb ff42 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fb8c 	bl	8005d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb93 	bl	8005d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b08      	cmp	r3, #8
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0208 	mvn.w	r2, #8
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fb ff18 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb62 	bl	8005d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb69 	bl	8005d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0210 	mvn.w	r2, #16
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2208      	movs	r2, #8
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb feee 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb38 	bl	8005d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb3f 	bl	8005d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0201 	mvn.w	r2, #1
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb ff3a 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 f922 	bl	8006990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f915 	bl	80069a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 faed 	bl	8005d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d10e      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0220 	mvn.w	r2, #32
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 f8d5 	bl	800697c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e088      	b.n	800590a <HAL_TIM_IC_ConfigChannel+0x130>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11b      	bne.n	800583e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f000 fdbb 	bl	8006390 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 020c 	bic.w	r2, r2, #12
 8005828:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6999      	ldr	r1, [r3, #24]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	619a      	str	r2, [r3, #24]
 800583c:	e060      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d11c      	bne.n	800587e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6819      	ldr	r1, [r3, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f000 fe3f 	bl	80064d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005866:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	619a      	str	r2, [r3, #24]
 800587c:	e040      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6819      	ldr	r1, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f000 fe8c 	bl	80065b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 020c 	bic.w	r2, r2, #12
 80058a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69d9      	ldr	r1, [r3, #28]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	61da      	str	r2, [r3, #28]
 80058ba:	e021      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d11c      	bne.n	80058fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6819      	ldr	r1, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f000 fea9 	bl	8006628 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69d9      	ldr	r1, [r3, #28]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	021a      	lsls	r2, r3, #8
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	61da      	str	r2, [r3, #28]
 80058fa:	e001      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0ff      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b14      	cmp	r3, #20
 800593e:	f200 80f0 	bhi.w	8005b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005b23 	.word	0x08005b23
 8005950:	08005b23 	.word	0x08005b23
 8005954:	08005b23 	.word	0x08005b23
 8005958:	080059dd 	.word	0x080059dd
 800595c:	08005b23 	.word	0x08005b23
 8005960:	08005b23 	.word	0x08005b23
 8005964:	08005b23 	.word	0x08005b23
 8005968:	08005a1f 	.word	0x08005a1f
 800596c:	08005b23 	.word	0x08005b23
 8005970:	08005b23 	.word	0x08005b23
 8005974:	08005b23 	.word	0x08005b23
 8005978:	08005a5f 	.word	0x08005a5f
 800597c:	08005b23 	.word	0x08005b23
 8005980:	08005b23 	.word	0x08005b23
 8005984:	08005b23 	.word	0x08005b23
 8005988:	08005aa1 	.word	0x08005aa1
 800598c:	08005b23 	.word	0x08005b23
 8005990:	08005b23 	.word	0x08005b23
 8005994:	08005b23 	.word	0x08005b23
 8005998:	08005ae1 	.word	0x08005ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fa96 	bl	8005ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	619a      	str	r2, [r3, #24]
      break;
 80059da:	e0a5      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fae8 	bl	8005fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6999      	ldr	r1, [r3, #24]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
      break;
 8005a1c:	e084      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fb3f 	bl	80060a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0204 	bic.w	r2, r2, #4
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
      break;
 8005a5c:	e064      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fb95 	bl	8006194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	61da      	str	r2, [r3, #28]
      break;
 8005a9e:	e043      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fbcc 	bl	8006244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ade:	e023      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fbfe 	bl	80062e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
      break;
 8005b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_ConfigClockSource+0x1c>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0b4      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x186>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4b56      	ldr	r3, [pc, #344]	; (8005ccc <HAL_TIM_ConfigClockSource+0x190>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d03e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0xd4>
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	f200 8087 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_TIM_ConfigClockSource+0x172>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d87f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d01a      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xa6>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d87b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d050      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x11a>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d877      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d03c      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xfa>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d873      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d058      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x13a>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d86f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d064      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d86b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d060      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05c      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d05a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	e062      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f000 fd71 	bl	80066d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
      break;
 8005c0e:	e04f      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f000 fd5a 	bl	80066d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e03c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 fc18 	bl	8006478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2150      	movs	r1, #80	; 0x50
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fd27 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 8005c54:	e02c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 fc74 	bl	8006550 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2160      	movs	r1, #96	; 0x60
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fd17 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 8005c74:	e01c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 fbf8 	bl	8006478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fd07 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 fcfe 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	fffeff88 	.word	0xfffeff88

08005cd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d831      	bhi.n	8005d48 <HAL_TIM_ReadCapturedValue+0x78>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d49 	.word	0x08005d49
 8005cf8:	08005d49 	.word	0x08005d49
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d49 	.word	0x08005d49
 8005d04:	08005d49 	.word	0x08005d49
 8005d08:	08005d49 	.word	0x08005d49
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d49 	.word	0x08005d49
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	60fb      	str	r3, [r7, #12]

      break;
 8005d28:	e00f      	b.n	8005d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	60fb      	str	r3, [r7, #12]

      break;
 8005d32:	e00a      	b.n	8005d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	60fb      	str	r3, [r7, #12]

      break;
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	60fb      	str	r3, [r7, #12]

      break;
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d48:	bf00      	nop
  }

  return tmpreg;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a40      	ldr	r2, [pc, #256]	; (8005ea8 <TIM_Base_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3d      	ldr	r2, [pc, #244]	; (8005eac <TIM_Base_SetConfig+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3c      	ldr	r2, [pc, #240]	; (8005eb0 <TIM_Base_SetConfig+0x11c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3b      	ldr	r2, [pc, #236]	; (8005eb4 <TIM_Base_SetConfig+0x120>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a3a      	ldr	r2, [pc, #232]	; (8005eb8 <TIM_Base_SetConfig+0x124>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d108      	bne.n	8005de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	; (8005ea8 <TIM_Base_SetConfig+0x114>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d02b      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df4:	d027      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	; (8005eac <TIM_Base_SetConfig+0x118>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d023      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <TIM_Base_SetConfig+0x11c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01f      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2a      	ldr	r2, [pc, #168]	; (8005eb4 <TIM_Base_SetConfig+0x120>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01b      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <TIM_Base_SetConfig+0x124>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d017      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <TIM_Base_SetConfig+0x128>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <TIM_Base_SetConfig+0x12c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00f      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <TIM_Base_SetConfig+0x130>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00b      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <TIM_Base_SetConfig+0x134>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <TIM_Base_SetConfig+0x138>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <TIM_Base_SetConfig+0x13c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d108      	bne.n	8005e58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <TIM_Base_SetConfig+0x114>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0xf8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <TIM_Base_SetConfig+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d103      	bne.n	8005e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	615a      	str	r2, [r3, #20]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40010400 	.word	0x40010400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800
 8005ec8:	40001800 	.word	0x40001800
 8005ecc:	40001c00 	.word	0x40001c00
 8005ed0:	40002000 	.word	0x40002000

08005ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <TIM_OC1_SetConfig+0xd8>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 0302 	bic.w	r3, r3, #2
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <TIM_OC1_SetConfig+0xdc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC1_SetConfig+0x64>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <TIM_OC1_SetConfig+0xe0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10c      	bne.n	8005f52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0308 	bic.w	r3, r3, #8
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 0304 	bic.w	r3, r3, #4
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC1_SetConfig+0xdc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_OC1_SetConfig+0x8e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC1_SetConfig+0xe0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d111      	bne.n	8005f86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	fffeff8f 	.word	0xfffeff8f
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0210 	bic.w	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4b2e      	ldr	r3, [pc, #184]	; (800609c <TIM_OC2_SetConfig+0xe4>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0320 	bic.w	r3, r3, #32
 8006002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a23      	ldr	r2, [pc, #140]	; (80060a0 <TIM_OC2_SetConfig+0xe8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC2_SetConfig+0x68>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <TIM_OC2_SetConfig+0xec>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10d      	bne.n	800603c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <TIM_OC2_SetConfig+0xe8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC2_SetConfig+0x94>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <TIM_OC2_SetConfig+0xec>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d113      	bne.n	8006074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	feff8fff 	.word	0xfeff8fff
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400

080060a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <TIM_OC3_SetConfig+0xe0>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <TIM_OC3_SetConfig+0xe4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC3_SetConfig+0x66>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a21      	ldr	r2, [pc, #132]	; (8006190 <TIM_OC3_SetConfig+0xe8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10d      	bne.n	800612a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <TIM_OC3_SetConfig+0xe4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC3_SetConfig+0x92>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a16      	ldr	r2, [pc, #88]	; (8006190 <TIM_OC3_SetConfig+0xe8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d113      	bne.n	8006162 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	fffeff8f 	.word	0xfffeff8f
 800618c:	40010000 	.word	0x40010000
 8006190:	40010400 	.word	0x40010400

08006194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <TIM_OC4_SetConfig+0xa4>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a13      	ldr	r2, [pc, #76]	; (800623c <TIM_OC4_SetConfig+0xa8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC4_SetConfig+0x68>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a12      	ldr	r2, [pc, #72]	; (8006240 <TIM_OC4_SetConfig+0xac>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d109      	bne.n	8006210 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	feff8fff 	.word	0xfeff8fff
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400

08006244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <TIM_OC5_SetConfig+0x98>)
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <TIM_OC5_SetConfig+0x9c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x5e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <TIM_OC5_SetConfig+0xa0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	fffeff8f 	.word	0xfffeff8f
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400

080062e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <TIM_OC6_SetConfig+0x9c>)
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800632a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	051b      	lsls	r3, r3, #20
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a13      	ldr	r2, [pc, #76]	; (8006388 <TIM_OC6_SetConfig+0xa0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_OC6_SetConfig+0x60>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a12      	ldr	r2, [pc, #72]	; (800638c <TIM_OC6_SetConfig+0xa4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d109      	bne.n	800635c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	029b      	lsls	r3, r3, #10
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	feff8fff 	.word	0xfeff8fff
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400

08006390 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a28      	ldr	r2, [pc, #160]	; (800645c <TIM_TI1_SetConfig+0xcc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01b      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c4:	d017      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a25      	ldr	r2, [pc, #148]	; (8006460 <TIM_TI1_SetConfig+0xd0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a24      	ldr	r2, [pc, #144]	; (8006464 <TIM_TI1_SetConfig+0xd4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a23      	ldr	r2, [pc, #140]	; (8006468 <TIM_TI1_SetConfig+0xd8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <TIM_TI1_SetConfig+0xdc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a21      	ldr	r2, [pc, #132]	; (8006470 <TIM_TI1_SetConfig+0xe0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_TI1_SetConfig+0x66>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <TIM_TI1_SetConfig+0xe4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <TIM_TI1_SetConfig+0x6a>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <TIM_TI1_SetConfig+0x6c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e003      	b.n	800641a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	b2db      	uxtb	r3, r3
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 030a 	bic.w	r3, r3, #10
 8006434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f003 030a 	and.w	r3, r3, #10
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40001800 	.word	0x40001800

08006478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 030a 	bic.w	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 0210 	bic.w	r2, r3, #16
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	b29b      	uxth	r3, r3
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006528:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0210 	bic.w	r2, r3, #16
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800657a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	031b      	lsls	r3, r3, #12
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800658c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006666:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	b29b      	uxth	r3, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800667a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	031b      	lsls	r3, r3, #12
 8006680:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f043 0307 	orr.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2201      	movs	r2, #1
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	43db      	mvns	r3, r3
 800673a:	401a      	ands	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006778:	2302      	movs	r3, #2
 800677a:	e06d      	b.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a30      	ldr	r2, [pc, #192]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2f      	ldr	r2, [pc, #188]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d108      	bne.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a20      	ldr	r2, [pc, #128]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ee:	d01d      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1d      	ldr	r2, [pc, #116]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a16      	ldr	r2, [pc, #88]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a15      	ldr	r2, [pc, #84]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10c      	bne.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40010000 	.word	0x40010000
 8006868:	40010400 	.word	0x40010400
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40014000 	.word	0x40014000
 800687c:	40001800 	.word	0x40001800

08006880 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006898:	2302      	movs	r3, #2
 800689a:	e065      	b.n	8006968 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a14      	ldr	r2, [pc, #80]	; (8006978 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d115      	bne.n	8006956 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	051b      	lsls	r3, r3, #20
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000
 8006978:	40010400 	.word	0x40010400

0800697c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e040      	b.n	8006a4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fb fb9a 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2224      	movs	r2, #36	; 0x24
 80069e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fbd2 	bl	80071a0 <UART_SetConfig>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e022      	b.n	8006a4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fe28 	bl	8007664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 feaf 	bl	80077a8 <UART_CheckIdleState>
 8006a4a:	4603      	mov	r3, r0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b08b      	sub	sp, #44	; 0x2c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d156      	bne.n	8006b18 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_UART_Transmit_IT+0x22>
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e04f      	b.n	8006b1a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_UART_Transmit_IT+0x34>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e048      	b.n	8006b1a <HAL_UART_Transmit_IT+0xc6>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2221      	movs	r2, #33	; 0x21
 8006ab8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d107      	bne.n	8006ad4 <HAL_UART_Transmit_IT+0x80>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a16      	ldr	r2, [pc, #88]	; (8006b28 <HAL_UART_Transmit_IT+0xd4>)
 8006ad0:	669a      	str	r2, [r3, #104]	; 0x68
 8006ad2:	e002      	b.n	8006ada <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <HAL_UART_Transmit_IT+0xd8>)
 8006ad8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	372c      	adds	r7, #44	; 0x2c
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	08007cd5 	.word	0x08007cd5
 8006b2c:	08007c1f 	.word	0x08007c1f

08006b30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d13d      	bne.n	8006bc2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_Receive_IT+0x22>
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e036      	b.n	8006bc4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Receive_IT+0x34>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e02f      	b.n	8006bc4 <HAL_UART_Receive_IT+0x94>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d018      	beq.n	8006bb2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	623b      	str	r3, [r7, #32]
 8006ba0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	69f9      	ldr	r1, [r7, #28]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e6      	bne.n	8006b80 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 feed 	bl	8007998 <UART_Start_Receive_IT>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	e000      	b.n	8006bc4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
  }
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b0ba      	sub	sp, #232	; 0xe8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d115      	bne.n	8006c34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 828f 	beq.w	8007148 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
      }
      return;
 8006c32:	e289      	b.n	8007148 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8117 	beq.w	8006e6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c4e:	4b85      	ldr	r3, [pc, #532]	; (8006e64 <HAL_UART_IRQHandler+0x298>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 810a 	beq.w	8006e6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d011      	beq.n	8006c88 <HAL_UART_IRQHandler+0xbc>
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7e:	f043 0201 	orr.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xec>
 8006c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	f043 0204 	orr.w	r2, r3, #4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d011      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x11c>
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d017      	beq.n	8006d24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1a:	f043 0208 	orr.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <HAL_UART_IRQHandler+0x18a>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00c      	beq.n	8006d56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 81f5 	beq.w	800714c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d005      	beq.n	8006dae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d04f      	beq.n	8006e4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 febc 	bl	8007b2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d141      	bne.n	8006e46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1d9      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d013      	beq.n	8006e3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <HAL_UART_IRQHandler+0x29c>)
 8006e1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fb ffe7 	bl	8002df6 <HAL_DMA_Abort_IT>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	e00f      	b.n	8006e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f998 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	e00b      	b.n	8006e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f994 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	e007      	b.n	8006e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f990 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e5c:	e176      	b.n	800714c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5e:	bf00      	nop
    return;
 8006e60:	e174      	b.n	800714c <HAL_UART_IRQHandler+0x580>
 8006e62:	bf00      	nop
 8006e64:	04000120 	.word	0x04000120
 8006e68:	08007bf3 	.word	0x08007bf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	f040 8144 	bne.w	80070fe <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f003 0310 	and.w	r3, r3, #16
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 813d 	beq.w	80070fe <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8136 	beq.w	80070fe <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2210      	movs	r2, #16
 8006e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	f040 80b2 	bne.w	800700e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8148 	beq.w	8007150 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	f080 8140 	bcs.w	8007150 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ed6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee4:	f000 8085 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1da      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e1      	bne.n	8006f32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e3      	bne.n	8006f6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e4      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fb fe92 	bl	8002d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	b29b      	uxth	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8be 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800700c:	e0a0      	b.n	8007150 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800701a:	b29b      	uxth	r3, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8092 	beq.w	8007154 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 808d 	beq.w	8007154 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800704e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
 800705e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800706a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e4      	bne.n	800703a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	623b      	str	r3, [r7, #32]
   return(result);
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007094:	633a      	str	r2, [r7, #48]	; 0x30
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800709a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e3      	bne.n	8007070 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e4      	bne.n	80070ba <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f846 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070fc:	e02a      	b.n	8007154 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00e      	beq.n	8007128 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01c      	beq.n	8007158 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
    }
    return;
 8007126:	e017      	b.n	8007158 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <HAL_UART_IRQHandler+0x58e>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fe27 	bl	8007d94 <UART_EndTransmit_IT>
    return;
 8007146:	e008      	b.n	800715a <HAL_UART_IRQHandler+0x58e>
      return;
 8007148:	bf00      	nop
 800714a:	e006      	b.n	800715a <HAL_UART_IRQHandler+0x58e>
    return;
 800714c:	bf00      	nop
 800714e:	e004      	b.n	800715a <HAL_UART_IRQHandler+0x58e>
      return;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <HAL_UART_IRQHandler+0x58e>
      return;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <HAL_UART_IRQHandler+0x58e>
    return;
 8007158:	bf00      	nop
  }

}
 800715a:	37e8      	adds	r7, #232	; 0xe8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4ba7      	ldr	r3, [pc, #668]	; (8007468 <UART_SetConfig+0x2c8>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a95      	ldr	r2, [pc, #596]	; (800746c <UART_SetConfig+0x2cc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d120      	bne.n	800725e <UART_SetConfig+0xbe>
 800721c:	4b94      	ldr	r3, [pc, #592]	; (8007470 <UART_SetConfig+0x2d0>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d816      	bhi.n	8007258 <UART_SetConfig+0xb8>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x90>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007241 	.word	0x08007241
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007247 	.word	0x08007247
 800723c:	08007253 	.word	0x08007253
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e14f      	b.n	80074e6 <UART_SetConfig+0x346>
 8007246:	2302      	movs	r3, #2
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e14c      	b.n	80074e6 <UART_SetConfig+0x346>
 800724c:	2304      	movs	r3, #4
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e149      	b.n	80074e6 <UART_SetConfig+0x346>
 8007252:	2308      	movs	r3, #8
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e146      	b.n	80074e6 <UART_SetConfig+0x346>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e143      	b.n	80074e6 <UART_SetConfig+0x346>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a84      	ldr	r2, [pc, #528]	; (8007474 <UART_SetConfig+0x2d4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d132      	bne.n	80072ce <UART_SetConfig+0x12e>
 8007268:	4b81      	ldr	r3, [pc, #516]	; (8007470 <UART_SetConfig+0x2d0>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f003 030c 	and.w	r3, r3, #12
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d828      	bhi.n	80072c8 <UART_SetConfig+0x128>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0xdc>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072b7 	.word	0x080072b7
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	2300      	movs	r3, #0
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e117      	b.n	80074e6 <UART_SetConfig+0x346>
 80072b6:	2302      	movs	r3, #2
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e114      	b.n	80074e6 <UART_SetConfig+0x346>
 80072bc:	2304      	movs	r3, #4
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e111      	b.n	80074e6 <UART_SetConfig+0x346>
 80072c2:	2308      	movs	r3, #8
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e10e      	b.n	80074e6 <UART_SetConfig+0x346>
 80072c8:	2310      	movs	r3, #16
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e10b      	b.n	80074e6 <UART_SetConfig+0x346>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a69      	ldr	r2, [pc, #420]	; (8007478 <UART_SetConfig+0x2d8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d120      	bne.n	800731a <UART_SetConfig+0x17a>
 80072d8:	4b65      	ldr	r3, [pc, #404]	; (8007470 <UART_SetConfig+0x2d0>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072e2:	2b30      	cmp	r3, #48	; 0x30
 80072e4:	d013      	beq.n	800730e <UART_SetConfig+0x16e>
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d814      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d009      	beq.n	8007302 <UART_SetConfig+0x162>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d810      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <UART_SetConfig+0x15c>
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d006      	beq.n	8007308 <UART_SetConfig+0x168>
 80072fa:	e00b      	b.n	8007314 <UART_SetConfig+0x174>
 80072fc:	2300      	movs	r3, #0
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e0f1      	b.n	80074e6 <UART_SetConfig+0x346>
 8007302:	2302      	movs	r3, #2
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0ee      	b.n	80074e6 <UART_SetConfig+0x346>
 8007308:	2304      	movs	r3, #4
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e0eb      	b.n	80074e6 <UART_SetConfig+0x346>
 800730e:	2308      	movs	r3, #8
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e0e8      	b.n	80074e6 <UART_SetConfig+0x346>
 8007314:	2310      	movs	r3, #16
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e0e5      	b.n	80074e6 <UART_SetConfig+0x346>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a57      	ldr	r2, [pc, #348]	; (800747c <UART_SetConfig+0x2dc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d120      	bne.n	8007366 <UART_SetConfig+0x1c6>
 8007324:	4b52      	ldr	r3, [pc, #328]	; (8007470 <UART_SetConfig+0x2d0>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800732e:	2bc0      	cmp	r3, #192	; 0xc0
 8007330:	d013      	beq.n	800735a <UART_SetConfig+0x1ba>
 8007332:	2bc0      	cmp	r3, #192	; 0xc0
 8007334:	d814      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d009      	beq.n	800734e <UART_SetConfig+0x1ae>
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d810      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <UART_SetConfig+0x1a8>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d006      	beq.n	8007354 <UART_SetConfig+0x1b4>
 8007346:	e00b      	b.n	8007360 <UART_SetConfig+0x1c0>
 8007348:	2300      	movs	r3, #0
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e0cb      	b.n	80074e6 <UART_SetConfig+0x346>
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e0c8      	b.n	80074e6 <UART_SetConfig+0x346>
 8007354:	2304      	movs	r3, #4
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e0c5      	b.n	80074e6 <UART_SetConfig+0x346>
 800735a:	2308      	movs	r3, #8
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e0c2      	b.n	80074e6 <UART_SetConfig+0x346>
 8007360:	2310      	movs	r3, #16
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e0bf      	b.n	80074e6 <UART_SetConfig+0x346>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a45      	ldr	r2, [pc, #276]	; (8007480 <UART_SetConfig+0x2e0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d125      	bne.n	80073bc <UART_SetConfig+0x21c>
 8007370:	4b3f      	ldr	r3, [pc, #252]	; (8007470 <UART_SetConfig+0x2d0>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737e:	d017      	beq.n	80073b0 <UART_SetConfig+0x210>
 8007380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007384:	d817      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800738a:	d00b      	beq.n	80073a4 <UART_SetConfig+0x204>
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d811      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <UART_SetConfig+0x1fe>
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	d006      	beq.n	80073aa <UART_SetConfig+0x20a>
 800739c:	e00b      	b.n	80073b6 <UART_SetConfig+0x216>
 800739e:	2300      	movs	r3, #0
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e0a0      	b.n	80074e6 <UART_SetConfig+0x346>
 80073a4:	2302      	movs	r3, #2
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e09d      	b.n	80074e6 <UART_SetConfig+0x346>
 80073aa:	2304      	movs	r3, #4
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e09a      	b.n	80074e6 <UART_SetConfig+0x346>
 80073b0:	2308      	movs	r3, #8
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e097      	b.n	80074e6 <UART_SetConfig+0x346>
 80073b6:	2310      	movs	r3, #16
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e094      	b.n	80074e6 <UART_SetConfig+0x346>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a30      	ldr	r2, [pc, #192]	; (8007484 <UART_SetConfig+0x2e4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d125      	bne.n	8007412 <UART_SetConfig+0x272>
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <UART_SetConfig+0x2d0>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d4:	d017      	beq.n	8007406 <UART_SetConfig+0x266>
 80073d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073da:	d817      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e0:	d00b      	beq.n	80073fa <UART_SetConfig+0x25a>
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e6:	d811      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <UART_SetConfig+0x254>
 80073ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f0:	d006      	beq.n	8007400 <UART_SetConfig+0x260>
 80073f2:	e00b      	b.n	800740c <UART_SetConfig+0x26c>
 80073f4:	2301      	movs	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e075      	b.n	80074e6 <UART_SetConfig+0x346>
 80073fa:	2302      	movs	r3, #2
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e072      	b.n	80074e6 <UART_SetConfig+0x346>
 8007400:	2304      	movs	r3, #4
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e06f      	b.n	80074e6 <UART_SetConfig+0x346>
 8007406:	2308      	movs	r3, #8
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e06c      	b.n	80074e6 <UART_SetConfig+0x346>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e069      	b.n	80074e6 <UART_SetConfig+0x346>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <UART_SetConfig+0x2e8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d137      	bne.n	800748c <UART_SetConfig+0x2ec>
 800741c:	4b14      	ldr	r3, [pc, #80]	; (8007470 <UART_SetConfig+0x2d0>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800742a:	d017      	beq.n	800745c <UART_SetConfig+0x2bc>
 800742c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007430:	d817      	bhi.n	8007462 <UART_SetConfig+0x2c2>
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d00b      	beq.n	8007450 <UART_SetConfig+0x2b0>
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d811      	bhi.n	8007462 <UART_SetConfig+0x2c2>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <UART_SetConfig+0x2aa>
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d006      	beq.n	8007456 <UART_SetConfig+0x2b6>
 8007448:	e00b      	b.n	8007462 <UART_SetConfig+0x2c2>
 800744a:	2300      	movs	r3, #0
 800744c:	77fb      	strb	r3, [r7, #31]
 800744e:	e04a      	b.n	80074e6 <UART_SetConfig+0x346>
 8007450:	2302      	movs	r3, #2
 8007452:	77fb      	strb	r3, [r7, #31]
 8007454:	e047      	b.n	80074e6 <UART_SetConfig+0x346>
 8007456:	2304      	movs	r3, #4
 8007458:	77fb      	strb	r3, [r7, #31]
 800745a:	e044      	b.n	80074e6 <UART_SetConfig+0x346>
 800745c:	2308      	movs	r3, #8
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e041      	b.n	80074e6 <UART_SetConfig+0x346>
 8007462:	2310      	movs	r3, #16
 8007464:	77fb      	strb	r3, [r7, #31]
 8007466:	e03e      	b.n	80074e6 <UART_SetConfig+0x346>
 8007468:	efff69f3 	.word	0xefff69f3
 800746c:	40011000 	.word	0x40011000
 8007470:	40023800 	.word	0x40023800
 8007474:	40004400 	.word	0x40004400
 8007478:	40004800 	.word	0x40004800
 800747c:	40004c00 	.word	0x40004c00
 8007480:	40005000 	.word	0x40005000
 8007484:	40011400 	.word	0x40011400
 8007488:	40007800 	.word	0x40007800
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <UART_SetConfig+0x4b8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d125      	bne.n	80074e2 <UART_SetConfig+0x342>
 8007496:	4b71      	ldr	r3, [pc, #452]	; (800765c <UART_SetConfig+0x4bc>)
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074a4:	d017      	beq.n	80074d6 <UART_SetConfig+0x336>
 80074a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074aa:	d817      	bhi.n	80074dc <UART_SetConfig+0x33c>
 80074ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b0:	d00b      	beq.n	80074ca <UART_SetConfig+0x32a>
 80074b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b6:	d811      	bhi.n	80074dc <UART_SetConfig+0x33c>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <UART_SetConfig+0x324>
 80074bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c0:	d006      	beq.n	80074d0 <UART_SetConfig+0x330>
 80074c2:	e00b      	b.n	80074dc <UART_SetConfig+0x33c>
 80074c4:	2300      	movs	r3, #0
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e00d      	b.n	80074e6 <UART_SetConfig+0x346>
 80074ca:	2302      	movs	r3, #2
 80074cc:	77fb      	strb	r3, [r7, #31]
 80074ce:	e00a      	b.n	80074e6 <UART_SetConfig+0x346>
 80074d0:	2304      	movs	r3, #4
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e007      	b.n	80074e6 <UART_SetConfig+0x346>
 80074d6:	2308      	movs	r3, #8
 80074d8:	77fb      	strb	r3, [r7, #31]
 80074da:	e004      	b.n	80074e6 <UART_SetConfig+0x346>
 80074dc:	2310      	movs	r3, #16
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e001      	b.n	80074e6 <UART_SetConfig+0x346>
 80074e2:	2310      	movs	r3, #16
 80074e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d15a      	bne.n	80075a6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80074f0:	7ffb      	ldrb	r3, [r7, #31]
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d827      	bhi.n	8007546 <UART_SetConfig+0x3a6>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x35c>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	08007547 	.word	0x08007547
 800750c:	08007537 	.word	0x08007537
 8007510:	08007547 	.word	0x08007547
 8007514:	08007547 	.word	0x08007547
 8007518:	08007547 	.word	0x08007547
 800751c:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fc ff12 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8007524:	61b8      	str	r0, [r7, #24]
        break;
 8007526:	e013      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fc ff22 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 800752c:	61b8      	str	r0, [r7, #24]
        break;
 800752e:	e00f      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b4b      	ldr	r3, [pc, #300]	; (8007660 <UART_SetConfig+0x4c0>)
 8007532:	61bb      	str	r3, [r7, #24]
        break;
 8007534:	e00c      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fc fe19 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800753a:	61b8      	str	r0, [r7, #24]
        break;
 800753c:	e008      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	61bb      	str	r3, [r7, #24]
        break;
 8007544:	e004      	b.n	8007550 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	77bb      	strb	r3, [r7, #30]
        break;
 800754e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d074      	beq.n	8007640 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	005a      	lsls	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	441a      	add	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	fbb2 f3f3 	udiv	r3, r2, r3
 800756a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b0f      	cmp	r3, #15
 8007570:	d916      	bls.n	80075a0 <UART_SetConfig+0x400>
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007578:	d212      	bcs.n	80075a0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f023 030f 	bic.w	r3, r3, #15
 8007582:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	b29a      	uxth	r2, r3
 8007590:	89fb      	ldrh	r3, [r7, #14]
 8007592:	4313      	orrs	r3, r2
 8007594:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	89fa      	ldrh	r2, [r7, #14]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	e04f      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	77bb      	strb	r3, [r7, #30]
 80075a4:	e04c      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d828      	bhi.n	80075fe <UART_SetConfig+0x45e>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0x414>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	080075ff 	.word	0x080075ff
 80075c4:	080075ef 	.word	0x080075ef
 80075c8:	080075ff 	.word	0x080075ff
 80075cc:	080075ff 	.word	0x080075ff
 80075d0:	080075ff 	.word	0x080075ff
 80075d4:	080075f7 	.word	0x080075f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d8:	f7fc feb6 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 80075dc:	61b8      	str	r0, [r7, #24]
        break;
 80075de:	e013      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e0:	f7fc fec6 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 80075e4:	61b8      	str	r0, [r7, #24]
        break;
 80075e6:	e00f      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <UART_SetConfig+0x4c0>)
 80075ea:	61bb      	str	r3, [r7, #24]
        break;
 80075ec:	e00c      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ee:	f7fc fdbd 	bl	800416c <HAL_RCC_GetSysClockFreq>
 80075f2:	61b8      	str	r0, [r7, #24]
        break;
 80075f4:	e008      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fa:	61bb      	str	r3, [r7, #24]
        break;
 80075fc:	e004      	b.n	8007608 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	77bb      	strb	r3, [r7, #30]
        break;
 8007606:	bf00      	nop
    }

    if (pclk != 0U)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d018      	beq.n	8007640 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	085a      	lsrs	r2, r3, #1
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	441a      	add	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b0f      	cmp	r3, #15
 8007626:	d909      	bls.n	800763c <UART_SetConfig+0x49c>
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762e:	d205      	bcs.n	800763c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e001      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800764c:	7fbb      	ldrb	r3, [r7, #30]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40007c00 	.word	0x40007c00
 800765c:	40023800 	.word	0x40023800
 8007660:	00f42400 	.word	0x00f42400

08007664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007762:	d10a      	bne.n	800777a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077b8:	f7fa fd72 	bl	80022a0 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d10e      	bne.n	80077ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f817 	bl	800780e <UART_WaitOnFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e00d      	b.n	8007806 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b09c      	sub	sp, #112	; 0x70
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	603b      	str	r3, [r7, #0]
 800781a:	4613      	mov	r3, r2
 800781c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781e:	e0a5      	b.n	800796c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	f000 80a1 	beq.w	800796c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782a:	f7fa fd39 	bl	80022a0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <UART_WaitOnFlagUntilTimeout+0x32>
 800783a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800783c:	2b00      	cmp	r3, #0
 800783e:	d13e      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800784e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007854:	667b      	str	r3, [r7, #100]	; 0x64
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007860:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800786c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e6      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	663b      	str	r3, [r7, #96]	; 0x60
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007892:	64ba      	str	r2, [r7, #72]	; 0x48
 8007894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e067      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d04f      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078da:	d147      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
 8007906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800790a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	613b      	str	r3, [r7, #16]
   return(result);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007938:	623a      	str	r2, [r7, #32]
 800793a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69f9      	ldr	r1, [r7, #28]
 800793e:	6a3a      	ldr	r2, [r7, #32]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	61bb      	str	r3, [r7, #24]
   return(result);
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e5      	bne.n	8007918 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2220      	movs	r2, #32
 8007950:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e010      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4013      	ands	r3, r2
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	429a      	cmp	r2, r3
 8007988:	f43f af4a 	beq.w	8007820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3770      	adds	r7, #112	; 0x70
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b480      	push	{r7}
 800799a:	b097      	sub	sp, #92	; 0x5c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d10e      	bne.n	80079ea <UART_Start_Receive_IT+0x52>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <UART_Start_Receive_IT+0x48>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079de:	e02d      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	22ff      	movs	r2, #255	; 0xff
 80079e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079e8:	e028      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10d      	bne.n	8007a0e <UART_Start_Receive_IT+0x76>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <UART_Start_Receive_IT+0x6c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a02:	e01b      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	227f      	movs	r2, #127	; 0x7f
 8007a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a0c:	e016      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a16:	d10d      	bne.n	8007a34 <UART_Start_Receive_IT+0x9c>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <UART_Start_Receive_IT+0x92>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	227f      	movs	r2, #127	; 0x7f
 8007a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a28:	e008      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	223f      	movs	r2, #63	; 0x3f
 8007a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a32:	e003      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2222      	movs	r2, #34	; 0x22
 8007a48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	657b      	str	r3, [r7, #84]	; 0x54
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e5      	bne.n	8007a4a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	d107      	bne.n	8007a98 <UART_Start_Receive_IT+0x100>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a24      	ldr	r2, [pc, #144]	; (8007b24 <UART_Start_Receive_IT+0x18c>)
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64
 8007a96:	e002      	b.n	8007a9e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a23      	ldr	r2, [pc, #140]	; (8007b28 <UART_Start_Receive_IT+0x190>)
 8007a9c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d019      	beq.n	8007ae2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ace:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e6      	bne.n	8007aae <UART_Start_Receive_IT+0x116>
 8007ae0:	e018      	b.n	8007b14 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	613b      	str	r3, [r7, #16]
   return(result);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f043 0320 	orr.w	r3, r3, #32
 8007af6:	653b      	str	r3, [r7, #80]	; 0x50
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b00:	623b      	str	r3, [r7, #32]
 8007b02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	69f9      	ldr	r1, [r7, #28]
 8007b06:	6a3a      	ldr	r2, [r7, #32]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	375c      	adds	r7, #92	; 0x5c
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	08007f45 	.word	0x08007f45
 8007b28:	08007de9 	.word	0x08007de9

08007b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b095      	sub	sp, #84	; 0x54
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b52:	643b      	str	r3, [r7, #64]	; 0x40
 8007b54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d118      	bne.n	8007bd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f023 0310 	bic.w	r3, r3, #16
 8007bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6979      	ldr	r1, [r7, #20]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007be6:	bf00      	nop
 8007be8:	3754      	adds	r7, #84	; 0x54
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff faaf 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b08f      	sub	sp, #60	; 0x3c
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c2a:	2b21      	cmp	r3, #33	; 0x21
 8007c2c:	d14c      	bne.n	8007cc8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d132      	bne.n	8007ca0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c80:	633b      	str	r3, [r7, #48]	; 0x30
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	613b      	str	r3, [r7, #16]
   return(result);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c9e:	e013      	b.n	8007cc8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007cc8:	bf00      	nop
 8007cca:	373c      	adds	r7, #60	; 0x3c
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b091      	sub	sp, #68	; 0x44
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce0:	2b21      	cmp	r3, #33	; 0x21
 8007ce2:	d151      	bne.n	8007d88 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d132      	bne.n	8007d56 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e6      	bne.n	8007cf0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	69b9      	ldr	r1, [r7, #24]
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d54:	e018      	b.n	8007d88 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d88:	bf00      	nop
 8007d8a:	3744      	adds	r7, #68	; 0x44
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	61bb      	str	r3, [r7, #24]
 8007dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6979      	ldr	r1, [r7, #20]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff f9c0 	bl	8007160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de0:	bf00      	nop
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b096      	sub	sp, #88	; 0x58
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007df6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	2b22      	cmp	r3, #34	; 0x22
 8007e00:	f040 8094 	bne.w	8007f2c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e0e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007e12:	b2d9      	uxtb	r1, r3
 8007e14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	400a      	ands	r2, r1
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d177      	bne.n	8007f3c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e60:	653b      	str	r3, [r7, #80]	; 0x50
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3308      	adds	r3, #8
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e5      	bne.n	8007e7e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d12e      	bne.n	8007f24 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f023 0310 	bic.w	r3, r3, #16
 8007ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	61fb      	str	r3, [r7, #28]
 8007eec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	69b9      	ldr	r1, [r7, #24]
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d103      	bne.n	8007f14 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2210      	movs	r2, #16
 8007f12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff f933 	bl	8007188 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f22:	e00b      	b.n	8007f3c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7f9 fa7f 	bl	8001428 <HAL_UART_RxCpltCallback>
}
 8007f2a:	e007      	b.n	8007f3c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0208 	orr.w	r2, r2, #8
 8007f3a:	619a      	str	r2, [r3, #24]
}
 8007f3c:	bf00      	nop
 8007f3e:	3758      	adds	r7, #88	; 0x58
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b096      	sub	sp, #88	; 0x58
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	f040 8094 	bne.w	8008088 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f78:	4013      	ands	r3, r2
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	1c9a      	adds	r2, r3, #2
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d177      	bne.n	8008098 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e5      	bne.n	8007fda <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801e:	2b01      	cmp	r3, #1
 8008020:	d12e      	bne.n	8008080 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	60bb      	str	r3, [r7, #8]
   return(result);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f023 0310 	bic.w	r3, r3, #16
 800803c:	647b      	str	r3, [r7, #68]	; 0x44
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6979      	ldr	r1, [r7, #20]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	613b      	str	r3, [r7, #16]
   return(result);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b10      	cmp	r3, #16
 8008066:	d103      	bne.n	8008070 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2210      	movs	r2, #16
 800806e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f885 	bl	8007188 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800807e:	e00b      	b.n	8008098 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7f9 f9d1 	bl	8001428 <HAL_UART_RxCpltCallback>
}
 8008086:	e007      	b.n	8008098 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0208 	orr.w	r2, r2, #8
 8008096:	619a      	str	r2, [r3, #24]
}
 8008098:	bf00      	nop
 800809a:	3758      	adds	r7, #88	; 0x58
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <atoi>:
 80080a0:	220a      	movs	r2, #10
 80080a2:	2100      	movs	r1, #0
 80080a4:	f000 b8d6 	b.w	8008254 <strtol>

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000020 	.word	0x20000020

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	4d0d      	ldr	r5, [pc, #52]	; (80080ec <__libc_init_array+0x38>)
 80080b8:	4c0d      	ldr	r4, [pc, #52]	; (80080f0 <__libc_init_array+0x3c>)
 80080ba:	1b64      	subs	r4, r4, r5
 80080bc:	10a4      	asrs	r4, r4, #2
 80080be:	2600      	movs	r6, #0
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	4d0b      	ldr	r5, [pc, #44]	; (80080f4 <__libc_init_array+0x40>)
 80080c6:	4c0c      	ldr	r4, [pc, #48]	; (80080f8 <__libc_init_array+0x44>)
 80080c8:	f000 fcdc 	bl	8008a84 <_init>
 80080cc:	1b64      	subs	r4, r4, r5
 80080ce:	10a4      	asrs	r4, r4, #2
 80080d0:	2600      	movs	r6, #0
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	08008c0c 	.word	0x08008c0c
 80080f0:	08008c0c 	.word	0x08008c0c
 80080f4:	08008c0c 	.word	0x08008c0c
 80080f8:	08008c10 	.word	0x08008c10

080080fc <memset>:
 80080fc:	4402      	add	r2, r0
 80080fe:	4603      	mov	r3, r0
 8008100:	4293      	cmp	r3, r2
 8008102:	d100      	bne.n	8008106 <memset+0xa>
 8008104:	4770      	bx	lr
 8008106:	f803 1b01 	strb.w	r1, [r3], #1
 800810a:	e7f9      	b.n	8008100 <memset+0x4>

0800810c <siprintf>:
 800810c:	b40e      	push	{r1, r2, r3}
 800810e:	b500      	push	{lr}
 8008110:	b09c      	sub	sp, #112	; 0x70
 8008112:	ab1d      	add	r3, sp, #116	; 0x74
 8008114:	9002      	str	r0, [sp, #8]
 8008116:	9006      	str	r0, [sp, #24]
 8008118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <siprintf+0x38>)
 800811e:	9107      	str	r1, [sp, #28]
 8008120:	9104      	str	r1, [sp, #16]
 8008122:	4909      	ldr	r1, [pc, #36]	; (8008148 <siprintf+0x3c>)
 8008124:	f853 2b04 	ldr.w	r2, [r3], #4
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	a902      	add	r1, sp, #8
 8008130:	f000 f8f6 	bl	8008320 <_svfiprintf_r>
 8008134:	9b02      	ldr	r3, [sp, #8]
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	b01c      	add	sp, #112	; 0x70
 800813c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008140:	b003      	add	sp, #12
 8008142:	4770      	bx	lr
 8008144:	20000020 	.word	0x20000020
 8008148:	ffff0208 	.word	0xffff0208

0800814c <_strtol_l.isra.0>:
 800814c:	2b01      	cmp	r3, #1
 800814e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008152:	d001      	beq.n	8008158 <_strtol_l.isra.0+0xc>
 8008154:	2b24      	cmp	r3, #36	; 0x24
 8008156:	d906      	bls.n	8008166 <_strtol_l.isra.0+0x1a>
 8008158:	f7ff ffa6 	bl	80080a8 <__errno>
 800815c:	2316      	movs	r3, #22
 800815e:	6003      	str	r3, [r0, #0]
 8008160:	2000      	movs	r0, #0
 8008162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008166:	4f3a      	ldr	r7, [pc, #232]	; (8008250 <_strtol_l.isra.0+0x104>)
 8008168:	468e      	mov	lr, r1
 800816a:	4676      	mov	r6, lr
 800816c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008170:	5de5      	ldrb	r5, [r4, r7]
 8008172:	f015 0508 	ands.w	r5, r5, #8
 8008176:	d1f8      	bne.n	800816a <_strtol_l.isra.0+0x1e>
 8008178:	2c2d      	cmp	r4, #45	; 0x2d
 800817a:	d134      	bne.n	80081e6 <_strtol_l.isra.0+0x9a>
 800817c:	f89e 4000 	ldrb.w	r4, [lr]
 8008180:	f04f 0801 	mov.w	r8, #1
 8008184:	f106 0e02 	add.w	lr, r6, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05c      	beq.n	8008246 <_strtol_l.isra.0+0xfa>
 800818c:	2b10      	cmp	r3, #16
 800818e:	d10c      	bne.n	80081aa <_strtol_l.isra.0+0x5e>
 8008190:	2c30      	cmp	r4, #48	; 0x30
 8008192:	d10a      	bne.n	80081aa <_strtol_l.isra.0+0x5e>
 8008194:	f89e 4000 	ldrb.w	r4, [lr]
 8008198:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800819c:	2c58      	cmp	r4, #88	; 0x58
 800819e:	d14d      	bne.n	800823c <_strtol_l.isra.0+0xf0>
 80081a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80081a4:	2310      	movs	r3, #16
 80081a6:	f10e 0e02 	add.w	lr, lr, #2
 80081aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80081ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081b2:	2600      	movs	r6, #0
 80081b4:	fbbc f9f3 	udiv	r9, ip, r3
 80081b8:	4635      	mov	r5, r6
 80081ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80081be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80081c2:	2f09      	cmp	r7, #9
 80081c4:	d818      	bhi.n	80081f8 <_strtol_l.isra.0+0xac>
 80081c6:	463c      	mov	r4, r7
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	dd24      	ble.n	8008216 <_strtol_l.isra.0+0xca>
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	db1f      	blt.n	8008210 <_strtol_l.isra.0+0xc4>
 80081d0:	45a9      	cmp	r9, r5
 80081d2:	d31d      	bcc.n	8008210 <_strtol_l.isra.0+0xc4>
 80081d4:	d101      	bne.n	80081da <_strtol_l.isra.0+0x8e>
 80081d6:	45a2      	cmp	sl, r4
 80081d8:	db1a      	blt.n	8008210 <_strtol_l.isra.0+0xc4>
 80081da:	fb05 4503 	mla	r5, r5, r3, r4
 80081de:	2601      	movs	r6, #1
 80081e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80081e4:	e7eb      	b.n	80081be <_strtol_l.isra.0+0x72>
 80081e6:	2c2b      	cmp	r4, #43	; 0x2b
 80081e8:	bf08      	it	eq
 80081ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 80081ee:	46a8      	mov	r8, r5
 80081f0:	bf08      	it	eq
 80081f2:	f106 0e02 	addeq.w	lr, r6, #2
 80081f6:	e7c7      	b.n	8008188 <_strtol_l.isra.0+0x3c>
 80081f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80081fc:	2f19      	cmp	r7, #25
 80081fe:	d801      	bhi.n	8008204 <_strtol_l.isra.0+0xb8>
 8008200:	3c37      	subs	r4, #55	; 0x37
 8008202:	e7e1      	b.n	80081c8 <_strtol_l.isra.0+0x7c>
 8008204:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008208:	2f19      	cmp	r7, #25
 800820a:	d804      	bhi.n	8008216 <_strtol_l.isra.0+0xca>
 800820c:	3c57      	subs	r4, #87	; 0x57
 800820e:	e7db      	b.n	80081c8 <_strtol_l.isra.0+0x7c>
 8008210:	f04f 36ff 	mov.w	r6, #4294967295
 8008214:	e7e4      	b.n	80081e0 <_strtol_l.isra.0+0x94>
 8008216:	2e00      	cmp	r6, #0
 8008218:	da05      	bge.n	8008226 <_strtol_l.isra.0+0xda>
 800821a:	2322      	movs	r3, #34	; 0x22
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	4665      	mov	r5, ip
 8008220:	b942      	cbnz	r2, 8008234 <_strtol_l.isra.0+0xe8>
 8008222:	4628      	mov	r0, r5
 8008224:	e79d      	b.n	8008162 <_strtol_l.isra.0+0x16>
 8008226:	f1b8 0f00 	cmp.w	r8, #0
 800822a:	d000      	beq.n	800822e <_strtol_l.isra.0+0xe2>
 800822c:	426d      	negs	r5, r5
 800822e:	2a00      	cmp	r2, #0
 8008230:	d0f7      	beq.n	8008222 <_strtol_l.isra.0+0xd6>
 8008232:	b10e      	cbz	r6, 8008238 <_strtol_l.isra.0+0xec>
 8008234:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	e7f2      	b.n	8008222 <_strtol_l.isra.0+0xd6>
 800823c:	2430      	movs	r4, #48	; 0x30
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1b3      	bne.n	80081aa <_strtol_l.isra.0+0x5e>
 8008242:	2308      	movs	r3, #8
 8008244:	e7b1      	b.n	80081aa <_strtol_l.isra.0+0x5e>
 8008246:	2c30      	cmp	r4, #48	; 0x30
 8008248:	d0a4      	beq.n	8008194 <_strtol_l.isra.0+0x48>
 800824a:	230a      	movs	r3, #10
 800824c:	e7ad      	b.n	80081aa <_strtol_l.isra.0+0x5e>
 800824e:	bf00      	nop
 8008250:	08008ad1 	.word	0x08008ad1

08008254 <strtol>:
 8008254:	4613      	mov	r3, r2
 8008256:	460a      	mov	r2, r1
 8008258:	4601      	mov	r1, r0
 800825a:	4802      	ldr	r0, [pc, #8]	; (8008264 <strtol+0x10>)
 800825c:	6800      	ldr	r0, [r0, #0]
 800825e:	f7ff bf75 	b.w	800814c <_strtol_l.isra.0>
 8008262:	bf00      	nop
 8008264:	20000020 	.word	0x20000020

08008268 <__ssputs_r>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	688e      	ldr	r6, [r1, #8]
 800826e:	429e      	cmp	r6, r3
 8008270:	4682      	mov	sl, r0
 8008272:	460c      	mov	r4, r1
 8008274:	4690      	mov	r8, r2
 8008276:	461f      	mov	r7, r3
 8008278:	d838      	bhi.n	80082ec <__ssputs_r+0x84>
 800827a:	898a      	ldrh	r2, [r1, #12]
 800827c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008280:	d032      	beq.n	80082e8 <__ssputs_r+0x80>
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	6909      	ldr	r1, [r1, #16]
 8008286:	eba5 0901 	sub.w	r9, r5, r1
 800828a:	6965      	ldr	r5, [r4, #20]
 800828c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008294:	3301      	adds	r3, #1
 8008296:	444b      	add	r3, r9
 8008298:	106d      	asrs	r5, r5, #1
 800829a:	429d      	cmp	r5, r3
 800829c:	bf38      	it	cc
 800829e:	461d      	movcc	r5, r3
 80082a0:	0553      	lsls	r3, r2, #21
 80082a2:	d531      	bpl.n	8008308 <__ssputs_r+0xa0>
 80082a4:	4629      	mov	r1, r5
 80082a6:	f000 fb47 	bl	8008938 <_malloc_r>
 80082aa:	4606      	mov	r6, r0
 80082ac:	b950      	cbnz	r0, 80082c4 <__ssputs_r+0x5c>
 80082ae:	230c      	movs	r3, #12
 80082b0:	f8ca 3000 	str.w	r3, [sl]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c4:	6921      	ldr	r1, [r4, #16]
 80082c6:	464a      	mov	r2, r9
 80082c8:	f000 fabe 	bl	8008848 <memcpy>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	6126      	str	r6, [r4, #16]
 80082da:	6165      	str	r5, [r4, #20]
 80082dc:	444e      	add	r6, r9
 80082de:	eba5 0509 	sub.w	r5, r5, r9
 80082e2:	6026      	str	r6, [r4, #0]
 80082e4:	60a5      	str	r5, [r4, #8]
 80082e6:	463e      	mov	r6, r7
 80082e8:	42be      	cmp	r6, r7
 80082ea:	d900      	bls.n	80082ee <__ssputs_r+0x86>
 80082ec:	463e      	mov	r6, r7
 80082ee:	4632      	mov	r2, r6
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	4641      	mov	r1, r8
 80082f4:	f000 fab6 	bl	8008864 <memmove>
 80082f8:	68a3      	ldr	r3, [r4, #8]
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	1b9b      	subs	r3, r3, r6
 80082fe:	4432      	add	r2, r6
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	2000      	movs	r0, #0
 8008306:	e7db      	b.n	80082c0 <__ssputs_r+0x58>
 8008308:	462a      	mov	r2, r5
 800830a:	f000 fb6f 	bl	80089ec <_realloc_r>
 800830e:	4606      	mov	r6, r0
 8008310:	2800      	cmp	r0, #0
 8008312:	d1e1      	bne.n	80082d8 <__ssputs_r+0x70>
 8008314:	6921      	ldr	r1, [r4, #16]
 8008316:	4650      	mov	r0, sl
 8008318:	f000 fabe 	bl	8008898 <_free_r>
 800831c:	e7c7      	b.n	80082ae <__ssputs_r+0x46>
	...

08008320 <_svfiprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4698      	mov	r8, r3
 8008326:	898b      	ldrh	r3, [r1, #12]
 8008328:	061b      	lsls	r3, r3, #24
 800832a:	b09d      	sub	sp, #116	; 0x74
 800832c:	4607      	mov	r7, r0
 800832e:	460d      	mov	r5, r1
 8008330:	4614      	mov	r4, r2
 8008332:	d50e      	bpl.n	8008352 <_svfiprintf_r+0x32>
 8008334:	690b      	ldr	r3, [r1, #16]
 8008336:	b963      	cbnz	r3, 8008352 <_svfiprintf_r+0x32>
 8008338:	2140      	movs	r1, #64	; 0x40
 800833a:	f000 fafd 	bl	8008938 <_malloc_r>
 800833e:	6028      	str	r0, [r5, #0]
 8008340:	6128      	str	r0, [r5, #16]
 8008342:	b920      	cbnz	r0, 800834e <_svfiprintf_r+0x2e>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e0d1      	b.n	80084f2 <_svfiprintf_r+0x1d2>
 800834e:	2340      	movs	r3, #64	; 0x40
 8008350:	616b      	str	r3, [r5, #20]
 8008352:	2300      	movs	r3, #0
 8008354:	9309      	str	r3, [sp, #36]	; 0x24
 8008356:	2320      	movs	r3, #32
 8008358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008360:	2330      	movs	r3, #48	; 0x30
 8008362:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800850c <_svfiprintf_r+0x1ec>
 8008366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800836a:	f04f 0901 	mov.w	r9, #1
 800836e:	4623      	mov	r3, r4
 8008370:	469a      	mov	sl, r3
 8008372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008376:	b10a      	cbz	r2, 800837c <_svfiprintf_r+0x5c>
 8008378:	2a25      	cmp	r2, #37	; 0x25
 800837a:	d1f9      	bne.n	8008370 <_svfiprintf_r+0x50>
 800837c:	ebba 0b04 	subs.w	fp, sl, r4
 8008380:	d00b      	beq.n	800839a <_svfiprintf_r+0x7a>
 8008382:	465b      	mov	r3, fp
 8008384:	4622      	mov	r2, r4
 8008386:	4629      	mov	r1, r5
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ff6d 	bl	8008268 <__ssputs_r>
 800838e:	3001      	adds	r0, #1
 8008390:	f000 80aa 	beq.w	80084e8 <_svfiprintf_r+0x1c8>
 8008394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008396:	445a      	add	r2, fp
 8008398:	9209      	str	r2, [sp, #36]	; 0x24
 800839a:	f89a 3000 	ldrb.w	r3, [sl]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80a2 	beq.w	80084e8 <_svfiprintf_r+0x1c8>
 80083a4:	2300      	movs	r3, #0
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ae:	f10a 0a01 	add.w	sl, sl, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ba:	931a      	str	r3, [sp, #104]	; 0x68
 80083bc:	4654      	mov	r4, sl
 80083be:	2205      	movs	r2, #5
 80083c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c4:	4851      	ldr	r0, [pc, #324]	; (800850c <_svfiprintf_r+0x1ec>)
 80083c6:	f7f7 ff23 	bl	8000210 <memchr>
 80083ca:	9a04      	ldr	r2, [sp, #16]
 80083cc:	b9d8      	cbnz	r0, 8008406 <_svfiprintf_r+0xe6>
 80083ce:	06d0      	lsls	r0, r2, #27
 80083d0:	bf44      	itt	mi
 80083d2:	2320      	movmi	r3, #32
 80083d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d8:	0711      	lsls	r1, r2, #28
 80083da:	bf44      	itt	mi
 80083dc:	232b      	movmi	r3, #43	; 0x2b
 80083de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e2:	f89a 3000 	ldrb.w	r3, [sl]
 80083e6:	2b2a      	cmp	r3, #42	; 0x2a
 80083e8:	d015      	beq.n	8008416 <_svfiprintf_r+0xf6>
 80083ea:	9a07      	ldr	r2, [sp, #28]
 80083ec:	4654      	mov	r4, sl
 80083ee:	2000      	movs	r0, #0
 80083f0:	f04f 0c0a 	mov.w	ip, #10
 80083f4:	4621      	mov	r1, r4
 80083f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fa:	3b30      	subs	r3, #48	; 0x30
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d94e      	bls.n	800849e <_svfiprintf_r+0x17e>
 8008400:	b1b0      	cbz	r0, 8008430 <_svfiprintf_r+0x110>
 8008402:	9207      	str	r2, [sp, #28]
 8008404:	e014      	b.n	8008430 <_svfiprintf_r+0x110>
 8008406:	eba0 0308 	sub.w	r3, r0, r8
 800840a:	fa09 f303 	lsl.w	r3, r9, r3
 800840e:	4313      	orrs	r3, r2
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	46a2      	mov	sl, r4
 8008414:	e7d2      	b.n	80083bc <_svfiprintf_r+0x9c>
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	1d19      	adds	r1, r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	9103      	str	r1, [sp, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbb      	ittet	lt
 8008422:	425b      	neglt	r3, r3
 8008424:	f042 0202 	orrlt.w	r2, r2, #2
 8008428:	9307      	strge	r3, [sp, #28]
 800842a:	9307      	strlt	r3, [sp, #28]
 800842c:	bfb8      	it	lt
 800842e:	9204      	strlt	r2, [sp, #16]
 8008430:	7823      	ldrb	r3, [r4, #0]
 8008432:	2b2e      	cmp	r3, #46	; 0x2e
 8008434:	d10c      	bne.n	8008450 <_svfiprintf_r+0x130>
 8008436:	7863      	ldrb	r3, [r4, #1]
 8008438:	2b2a      	cmp	r3, #42	; 0x2a
 800843a:	d135      	bne.n	80084a8 <_svfiprintf_r+0x188>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d1a      	adds	r2, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9203      	str	r2, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfb8      	it	lt
 8008448:	f04f 33ff 	movlt.w	r3, #4294967295
 800844c:	3402      	adds	r4, #2
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800851c <_svfiprintf_r+0x1fc>
 8008454:	7821      	ldrb	r1, [r4, #0]
 8008456:	2203      	movs	r2, #3
 8008458:	4650      	mov	r0, sl
 800845a:	f7f7 fed9 	bl	8000210 <memchr>
 800845e:	b140      	cbz	r0, 8008472 <_svfiprintf_r+0x152>
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	eba0 000a 	sub.w	r0, r0, sl
 8008466:	fa03 f000 	lsl.w	r0, r3, r0
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	4303      	orrs	r3, r0
 800846e:	3401      	adds	r4, #1
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008476:	4826      	ldr	r0, [pc, #152]	; (8008510 <_svfiprintf_r+0x1f0>)
 8008478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847c:	2206      	movs	r2, #6
 800847e:	f7f7 fec7 	bl	8000210 <memchr>
 8008482:	2800      	cmp	r0, #0
 8008484:	d038      	beq.n	80084f8 <_svfiprintf_r+0x1d8>
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <_svfiprintf_r+0x1f4>)
 8008488:	bb1b      	cbnz	r3, 80084d2 <_svfiprintf_r+0x1b2>
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	3307      	adds	r3, #7
 800848e:	f023 0307 	bic.w	r3, r3, #7
 8008492:	3308      	adds	r3, #8
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	4433      	add	r3, r6
 800849a:	9309      	str	r3, [sp, #36]	; 0x24
 800849c:	e767      	b.n	800836e <_svfiprintf_r+0x4e>
 800849e:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a2:	460c      	mov	r4, r1
 80084a4:	2001      	movs	r0, #1
 80084a6:	e7a5      	b.n	80083f4 <_svfiprintf_r+0xd4>
 80084a8:	2300      	movs	r3, #0
 80084aa:	3401      	adds	r4, #1
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	4619      	mov	r1, r3
 80084b0:	f04f 0c0a 	mov.w	ip, #10
 80084b4:	4620      	mov	r0, r4
 80084b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ba:	3a30      	subs	r2, #48	; 0x30
 80084bc:	2a09      	cmp	r2, #9
 80084be:	d903      	bls.n	80084c8 <_svfiprintf_r+0x1a8>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0c5      	beq.n	8008450 <_svfiprintf_r+0x130>
 80084c4:	9105      	str	r1, [sp, #20]
 80084c6:	e7c3      	b.n	8008450 <_svfiprintf_r+0x130>
 80084c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084cc:	4604      	mov	r4, r0
 80084ce:	2301      	movs	r3, #1
 80084d0:	e7f0      	b.n	80084b4 <_svfiprintf_r+0x194>
 80084d2:	ab03      	add	r3, sp, #12
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	462a      	mov	r2, r5
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <_svfiprintf_r+0x1f8>)
 80084da:	a904      	add	r1, sp, #16
 80084dc:	4638      	mov	r0, r7
 80084de:	f3af 8000 	nop.w
 80084e2:	1c42      	adds	r2, r0, #1
 80084e4:	4606      	mov	r6, r0
 80084e6:	d1d6      	bne.n	8008496 <_svfiprintf_r+0x176>
 80084e8:	89ab      	ldrh	r3, [r5, #12]
 80084ea:	065b      	lsls	r3, r3, #25
 80084ec:	f53f af2c 	bmi.w	8008348 <_svfiprintf_r+0x28>
 80084f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f2:	b01d      	add	sp, #116	; 0x74
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	ab03      	add	r3, sp, #12
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	462a      	mov	r2, r5
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <_svfiprintf_r+0x1f8>)
 8008500:	a904      	add	r1, sp, #16
 8008502:	4638      	mov	r0, r7
 8008504:	f000 f87a 	bl	80085fc <_printf_i>
 8008508:	e7eb      	b.n	80084e2 <_svfiprintf_r+0x1c2>
 800850a:	bf00      	nop
 800850c:	08008bd1 	.word	0x08008bd1
 8008510:	08008bdb 	.word	0x08008bdb
 8008514:	00000000 	.word	0x00000000
 8008518:	08008269 	.word	0x08008269
 800851c:	08008bd7 	.word	0x08008bd7

08008520 <_printf_common>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	4616      	mov	r6, r2
 8008526:	4699      	mov	r9, r3
 8008528:	688a      	ldr	r2, [r1, #8]
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008530:	4293      	cmp	r3, r2
 8008532:	bfb8      	it	lt
 8008534:	4613      	movlt	r3, r2
 8008536:	6033      	str	r3, [r6, #0]
 8008538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800853c:	4607      	mov	r7, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b10a      	cbz	r2, 8008546 <_printf_common+0x26>
 8008542:	3301      	adds	r3, #1
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	0699      	lsls	r1, r3, #26
 800854a:	bf42      	ittt	mi
 800854c:	6833      	ldrmi	r3, [r6, #0]
 800854e:	3302      	addmi	r3, #2
 8008550:	6033      	strmi	r3, [r6, #0]
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	f015 0506 	ands.w	r5, r5, #6
 8008558:	d106      	bne.n	8008568 <_printf_common+0x48>
 800855a:	f104 0a19 	add.w	sl, r4, #25
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	6832      	ldr	r2, [r6, #0]
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	42ab      	cmp	r3, r5
 8008566:	dc26      	bgt.n	80085b6 <_printf_common+0x96>
 8008568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800856c:	1e13      	subs	r3, r2, #0
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	bf18      	it	ne
 8008572:	2301      	movne	r3, #1
 8008574:	0692      	lsls	r2, r2, #26
 8008576:	d42b      	bmi.n	80085d0 <_printf_common+0xb0>
 8008578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800857c:	4649      	mov	r1, r9
 800857e:	4638      	mov	r0, r7
 8008580:	47c0      	blx	r8
 8008582:	3001      	adds	r0, #1
 8008584:	d01e      	beq.n	80085c4 <_printf_common+0xa4>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	68e5      	ldr	r5, [r4, #12]
 800858a:	6832      	ldr	r2, [r6, #0]
 800858c:	f003 0306 	and.w	r3, r3, #6
 8008590:	2b04      	cmp	r3, #4
 8008592:	bf08      	it	eq
 8008594:	1aad      	subeq	r5, r5, r2
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	bf0c      	ite	eq
 800859c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a0:	2500      	movne	r5, #0
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bfc4      	itt	gt
 80085a6:	1a9b      	subgt	r3, r3, r2
 80085a8:	18ed      	addgt	r5, r5, r3
 80085aa:	2600      	movs	r6, #0
 80085ac:	341a      	adds	r4, #26
 80085ae:	42b5      	cmp	r5, r6
 80085b0:	d11a      	bne.n	80085e8 <_printf_common+0xc8>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e008      	b.n	80085c8 <_printf_common+0xa8>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4652      	mov	r2, sl
 80085ba:	4649      	mov	r1, r9
 80085bc:	4638      	mov	r0, r7
 80085be:	47c0      	blx	r8
 80085c0:	3001      	adds	r0, #1
 80085c2:	d103      	bne.n	80085cc <_printf_common+0xac>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085cc:	3501      	adds	r5, #1
 80085ce:	e7c6      	b.n	800855e <_printf_common+0x3e>
 80085d0:	18e1      	adds	r1, r4, r3
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	2030      	movs	r0, #48	; 0x30
 80085d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085da:	4422      	add	r2, r4
 80085dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085e4:	3302      	adds	r3, #2
 80085e6:	e7c7      	b.n	8008578 <_printf_common+0x58>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4622      	mov	r2, r4
 80085ec:	4649      	mov	r1, r9
 80085ee:	4638      	mov	r0, r7
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d0e6      	beq.n	80085c4 <_printf_common+0xa4>
 80085f6:	3601      	adds	r6, #1
 80085f8:	e7d9      	b.n	80085ae <_printf_common+0x8e>
	...

080085fc <_printf_i>:
 80085fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	4691      	mov	r9, r2
 8008604:	7e27      	ldrb	r7, [r4, #24]
 8008606:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008608:	2f78      	cmp	r7, #120	; 0x78
 800860a:	4680      	mov	r8, r0
 800860c:	469a      	mov	sl, r3
 800860e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008612:	d807      	bhi.n	8008624 <_printf_i+0x28>
 8008614:	2f62      	cmp	r7, #98	; 0x62
 8008616:	d80a      	bhi.n	800862e <_printf_i+0x32>
 8008618:	2f00      	cmp	r7, #0
 800861a:	f000 80d8 	beq.w	80087ce <_printf_i+0x1d2>
 800861e:	2f58      	cmp	r7, #88	; 0x58
 8008620:	f000 80a3 	beq.w	800876a <_printf_i+0x16e>
 8008624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800862c:	e03a      	b.n	80086a4 <_printf_i+0xa8>
 800862e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008632:	2b15      	cmp	r3, #21
 8008634:	d8f6      	bhi.n	8008624 <_printf_i+0x28>
 8008636:	a001      	add	r0, pc, #4	; (adr r0, 800863c <_printf_i+0x40>)
 8008638:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800863c:	08008695 	.word	0x08008695
 8008640:	080086a9 	.word	0x080086a9
 8008644:	08008625 	.word	0x08008625
 8008648:	08008625 	.word	0x08008625
 800864c:	08008625 	.word	0x08008625
 8008650:	08008625 	.word	0x08008625
 8008654:	080086a9 	.word	0x080086a9
 8008658:	08008625 	.word	0x08008625
 800865c:	08008625 	.word	0x08008625
 8008660:	08008625 	.word	0x08008625
 8008664:	08008625 	.word	0x08008625
 8008668:	080087b5 	.word	0x080087b5
 800866c:	080086d9 	.word	0x080086d9
 8008670:	08008797 	.word	0x08008797
 8008674:	08008625 	.word	0x08008625
 8008678:	08008625 	.word	0x08008625
 800867c:	080087d7 	.word	0x080087d7
 8008680:	08008625 	.word	0x08008625
 8008684:	080086d9 	.word	0x080086d9
 8008688:	08008625 	.word	0x08008625
 800868c:	08008625 	.word	0x08008625
 8008690:	0800879f 	.word	0x0800879f
 8008694:	680b      	ldr	r3, [r1, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	600a      	str	r2, [r1, #0]
 800869c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0a3      	b.n	80087f0 <_printf_i+0x1f4>
 80086a8:	6825      	ldr	r5, [r4, #0]
 80086aa:	6808      	ldr	r0, [r1, #0]
 80086ac:	062e      	lsls	r6, r5, #24
 80086ae:	f100 0304 	add.w	r3, r0, #4
 80086b2:	d50a      	bpl.n	80086ca <_printf_i+0xce>
 80086b4:	6805      	ldr	r5, [r0, #0]
 80086b6:	600b      	str	r3, [r1, #0]
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	da03      	bge.n	80086c4 <_printf_i+0xc8>
 80086bc:	232d      	movs	r3, #45	; 0x2d
 80086be:	426d      	negs	r5, r5
 80086c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c4:	485e      	ldr	r0, [pc, #376]	; (8008840 <_printf_i+0x244>)
 80086c6:	230a      	movs	r3, #10
 80086c8:	e019      	b.n	80086fe <_printf_i+0x102>
 80086ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086ce:	6805      	ldr	r5, [r0, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	bf18      	it	ne
 80086d4:	b22d      	sxthne	r5, r5
 80086d6:	e7ef      	b.n	80086b8 <_printf_i+0xbc>
 80086d8:	680b      	ldr	r3, [r1, #0]
 80086da:	6825      	ldr	r5, [r4, #0]
 80086dc:	1d18      	adds	r0, r3, #4
 80086de:	6008      	str	r0, [r1, #0]
 80086e0:	0628      	lsls	r0, r5, #24
 80086e2:	d501      	bpl.n	80086e8 <_printf_i+0xec>
 80086e4:	681d      	ldr	r5, [r3, #0]
 80086e6:	e002      	b.n	80086ee <_printf_i+0xf2>
 80086e8:	0669      	lsls	r1, r5, #25
 80086ea:	d5fb      	bpl.n	80086e4 <_printf_i+0xe8>
 80086ec:	881d      	ldrh	r5, [r3, #0]
 80086ee:	4854      	ldr	r0, [pc, #336]	; (8008840 <_printf_i+0x244>)
 80086f0:	2f6f      	cmp	r7, #111	; 0x6f
 80086f2:	bf0c      	ite	eq
 80086f4:	2308      	moveq	r3, #8
 80086f6:	230a      	movne	r3, #10
 80086f8:	2100      	movs	r1, #0
 80086fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086fe:	6866      	ldr	r6, [r4, #4]
 8008700:	60a6      	str	r6, [r4, #8]
 8008702:	2e00      	cmp	r6, #0
 8008704:	bfa2      	ittt	ge
 8008706:	6821      	ldrge	r1, [r4, #0]
 8008708:	f021 0104 	bicge.w	r1, r1, #4
 800870c:	6021      	strge	r1, [r4, #0]
 800870e:	b90d      	cbnz	r5, 8008714 <_printf_i+0x118>
 8008710:	2e00      	cmp	r6, #0
 8008712:	d04d      	beq.n	80087b0 <_printf_i+0x1b4>
 8008714:	4616      	mov	r6, r2
 8008716:	fbb5 f1f3 	udiv	r1, r5, r3
 800871a:	fb03 5711 	mls	r7, r3, r1, r5
 800871e:	5dc7      	ldrb	r7, [r0, r7]
 8008720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008724:	462f      	mov	r7, r5
 8008726:	42bb      	cmp	r3, r7
 8008728:	460d      	mov	r5, r1
 800872a:	d9f4      	bls.n	8008716 <_printf_i+0x11a>
 800872c:	2b08      	cmp	r3, #8
 800872e:	d10b      	bne.n	8008748 <_printf_i+0x14c>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	07df      	lsls	r7, r3, #31
 8008734:	d508      	bpl.n	8008748 <_printf_i+0x14c>
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6861      	ldr	r1, [r4, #4]
 800873a:	4299      	cmp	r1, r3
 800873c:	bfde      	ittt	le
 800873e:	2330      	movle	r3, #48	; 0x30
 8008740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008748:	1b92      	subs	r2, r2, r6
 800874a:	6122      	str	r2, [r4, #16]
 800874c:	f8cd a000 	str.w	sl, [sp]
 8008750:	464b      	mov	r3, r9
 8008752:	aa03      	add	r2, sp, #12
 8008754:	4621      	mov	r1, r4
 8008756:	4640      	mov	r0, r8
 8008758:	f7ff fee2 	bl	8008520 <_printf_common>
 800875c:	3001      	adds	r0, #1
 800875e:	d14c      	bne.n	80087fa <_printf_i+0x1fe>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	b004      	add	sp, #16
 8008766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876a:	4835      	ldr	r0, [pc, #212]	; (8008840 <_printf_i+0x244>)
 800876c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	680e      	ldr	r6, [r1, #0]
 8008774:	061f      	lsls	r7, r3, #24
 8008776:	f856 5b04 	ldr.w	r5, [r6], #4
 800877a:	600e      	str	r6, [r1, #0]
 800877c:	d514      	bpl.n	80087a8 <_printf_i+0x1ac>
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	bf44      	itt	mi
 8008782:	f043 0320 	orrmi.w	r3, r3, #32
 8008786:	6023      	strmi	r3, [r4, #0]
 8008788:	b91d      	cbnz	r5, 8008792 <_printf_i+0x196>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	f023 0320 	bic.w	r3, r3, #32
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	2310      	movs	r3, #16
 8008794:	e7b0      	b.n	80086f8 <_printf_i+0xfc>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f043 0320 	orr.w	r3, r3, #32
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	2378      	movs	r3, #120	; 0x78
 80087a0:	4828      	ldr	r0, [pc, #160]	; (8008844 <_printf_i+0x248>)
 80087a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087a6:	e7e3      	b.n	8008770 <_printf_i+0x174>
 80087a8:	065e      	lsls	r6, r3, #25
 80087aa:	bf48      	it	mi
 80087ac:	b2ad      	uxthmi	r5, r5
 80087ae:	e7e6      	b.n	800877e <_printf_i+0x182>
 80087b0:	4616      	mov	r6, r2
 80087b2:	e7bb      	b.n	800872c <_printf_i+0x130>
 80087b4:	680b      	ldr	r3, [r1, #0]
 80087b6:	6826      	ldr	r6, [r4, #0]
 80087b8:	6960      	ldr	r0, [r4, #20]
 80087ba:	1d1d      	adds	r5, r3, #4
 80087bc:	600d      	str	r5, [r1, #0]
 80087be:	0635      	lsls	r5, r6, #24
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	d501      	bpl.n	80087c8 <_printf_i+0x1cc>
 80087c4:	6018      	str	r0, [r3, #0]
 80087c6:	e002      	b.n	80087ce <_printf_i+0x1d2>
 80087c8:	0671      	lsls	r1, r6, #25
 80087ca:	d5fb      	bpl.n	80087c4 <_printf_i+0x1c8>
 80087cc:	8018      	strh	r0, [r3, #0]
 80087ce:	2300      	movs	r3, #0
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	4616      	mov	r6, r2
 80087d4:	e7ba      	b.n	800874c <_printf_i+0x150>
 80087d6:	680b      	ldr	r3, [r1, #0]
 80087d8:	1d1a      	adds	r2, r3, #4
 80087da:	600a      	str	r2, [r1, #0]
 80087dc:	681e      	ldr	r6, [r3, #0]
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	2100      	movs	r1, #0
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7f7 fd14 	bl	8000210 <memchr>
 80087e8:	b108      	cbz	r0, 80087ee <_printf_i+0x1f2>
 80087ea:	1b80      	subs	r0, r0, r6
 80087ec:	6060      	str	r0, [r4, #4]
 80087ee:	6863      	ldr	r3, [r4, #4]
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	2300      	movs	r3, #0
 80087f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f8:	e7a8      	b.n	800874c <_printf_i+0x150>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	4632      	mov	r2, r6
 80087fe:	4649      	mov	r1, r9
 8008800:	4640      	mov	r0, r8
 8008802:	47d0      	blx	sl
 8008804:	3001      	adds	r0, #1
 8008806:	d0ab      	beq.n	8008760 <_printf_i+0x164>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	079b      	lsls	r3, r3, #30
 800880c:	d413      	bmi.n	8008836 <_printf_i+0x23a>
 800880e:	68e0      	ldr	r0, [r4, #12]
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	4298      	cmp	r0, r3
 8008814:	bfb8      	it	lt
 8008816:	4618      	movlt	r0, r3
 8008818:	e7a4      	b.n	8008764 <_printf_i+0x168>
 800881a:	2301      	movs	r3, #1
 800881c:	4632      	mov	r2, r6
 800881e:	4649      	mov	r1, r9
 8008820:	4640      	mov	r0, r8
 8008822:	47d0      	blx	sl
 8008824:	3001      	adds	r0, #1
 8008826:	d09b      	beq.n	8008760 <_printf_i+0x164>
 8008828:	3501      	adds	r5, #1
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	9903      	ldr	r1, [sp, #12]
 800882e:	1a5b      	subs	r3, r3, r1
 8008830:	42ab      	cmp	r3, r5
 8008832:	dcf2      	bgt.n	800881a <_printf_i+0x21e>
 8008834:	e7eb      	b.n	800880e <_printf_i+0x212>
 8008836:	2500      	movs	r5, #0
 8008838:	f104 0619 	add.w	r6, r4, #25
 800883c:	e7f5      	b.n	800882a <_printf_i+0x22e>
 800883e:	bf00      	nop
 8008840:	08008be2 	.word	0x08008be2
 8008844:	08008bf3 	.word	0x08008bf3

08008848 <memcpy>:
 8008848:	440a      	add	r2, r1
 800884a:	4291      	cmp	r1, r2
 800884c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008850:	d100      	bne.n	8008854 <memcpy+0xc>
 8008852:	4770      	bx	lr
 8008854:	b510      	push	{r4, lr}
 8008856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800885e:	4291      	cmp	r1, r2
 8008860:	d1f9      	bne.n	8008856 <memcpy+0xe>
 8008862:	bd10      	pop	{r4, pc}

08008864 <memmove>:
 8008864:	4288      	cmp	r0, r1
 8008866:	b510      	push	{r4, lr}
 8008868:	eb01 0402 	add.w	r4, r1, r2
 800886c:	d902      	bls.n	8008874 <memmove+0x10>
 800886e:	4284      	cmp	r4, r0
 8008870:	4623      	mov	r3, r4
 8008872:	d807      	bhi.n	8008884 <memmove+0x20>
 8008874:	1e43      	subs	r3, r0, #1
 8008876:	42a1      	cmp	r1, r4
 8008878:	d008      	beq.n	800888c <memmove+0x28>
 800887a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008882:	e7f8      	b.n	8008876 <memmove+0x12>
 8008884:	4402      	add	r2, r0
 8008886:	4601      	mov	r1, r0
 8008888:	428a      	cmp	r2, r1
 800888a:	d100      	bne.n	800888e <memmove+0x2a>
 800888c:	bd10      	pop	{r4, pc}
 800888e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008896:	e7f7      	b.n	8008888 <memmove+0x24>

08008898 <_free_r>:
 8008898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889a:	2900      	cmp	r1, #0
 800889c:	d048      	beq.n	8008930 <_free_r+0x98>
 800889e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a2:	9001      	str	r0, [sp, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f1a1 0404 	sub.w	r4, r1, #4
 80088aa:	bfb8      	it	lt
 80088ac:	18e4      	addlt	r4, r4, r3
 80088ae:	f000 f8d3 	bl	8008a58 <__malloc_lock>
 80088b2:	4a20      	ldr	r2, [pc, #128]	; (8008934 <_free_r+0x9c>)
 80088b4:	9801      	ldr	r0, [sp, #4]
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	4615      	mov	r5, r2
 80088ba:	b933      	cbnz	r3, 80088ca <_free_r+0x32>
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6014      	str	r4, [r2, #0]
 80088c0:	b003      	add	sp, #12
 80088c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c6:	f000 b8cd 	b.w	8008a64 <__malloc_unlock>
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	d90b      	bls.n	80088e6 <_free_r+0x4e>
 80088ce:	6821      	ldr	r1, [r4, #0]
 80088d0:	1862      	adds	r2, r4, r1
 80088d2:	4293      	cmp	r3, r2
 80088d4:	bf04      	itt	eq
 80088d6:	681a      	ldreq	r2, [r3, #0]
 80088d8:	685b      	ldreq	r3, [r3, #4]
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	bf04      	itt	eq
 80088de:	1852      	addeq	r2, r2, r1
 80088e0:	6022      	streq	r2, [r4, #0]
 80088e2:	602c      	str	r4, [r5, #0]
 80088e4:	e7ec      	b.n	80088c0 <_free_r+0x28>
 80088e6:	461a      	mov	r2, r3
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	b10b      	cbz	r3, 80088f0 <_free_r+0x58>
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d9fa      	bls.n	80088e6 <_free_r+0x4e>
 80088f0:	6811      	ldr	r1, [r2, #0]
 80088f2:	1855      	adds	r5, r2, r1
 80088f4:	42a5      	cmp	r5, r4
 80088f6:	d10b      	bne.n	8008910 <_free_r+0x78>
 80088f8:	6824      	ldr	r4, [r4, #0]
 80088fa:	4421      	add	r1, r4
 80088fc:	1854      	adds	r4, r2, r1
 80088fe:	42a3      	cmp	r3, r4
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	d1dd      	bne.n	80088c0 <_free_r+0x28>
 8008904:	681c      	ldr	r4, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	6053      	str	r3, [r2, #4]
 800890a:	4421      	add	r1, r4
 800890c:	6011      	str	r1, [r2, #0]
 800890e:	e7d7      	b.n	80088c0 <_free_r+0x28>
 8008910:	d902      	bls.n	8008918 <_free_r+0x80>
 8008912:	230c      	movs	r3, #12
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	e7d3      	b.n	80088c0 <_free_r+0x28>
 8008918:	6825      	ldr	r5, [r4, #0]
 800891a:	1961      	adds	r1, r4, r5
 800891c:	428b      	cmp	r3, r1
 800891e:	bf04      	itt	eq
 8008920:	6819      	ldreq	r1, [r3, #0]
 8008922:	685b      	ldreq	r3, [r3, #4]
 8008924:	6063      	str	r3, [r4, #4]
 8008926:	bf04      	itt	eq
 8008928:	1949      	addeq	r1, r1, r5
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	6054      	str	r4, [r2, #4]
 800892e:	e7c7      	b.n	80088c0 <_free_r+0x28>
 8008930:	b003      	add	sp, #12
 8008932:	bd30      	pop	{r4, r5, pc}
 8008934:	200000d0 	.word	0x200000d0

08008938 <_malloc_r>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	1ccd      	adds	r5, r1, #3
 800893c:	f025 0503 	bic.w	r5, r5, #3
 8008940:	3508      	adds	r5, #8
 8008942:	2d0c      	cmp	r5, #12
 8008944:	bf38      	it	cc
 8008946:	250c      	movcc	r5, #12
 8008948:	2d00      	cmp	r5, #0
 800894a:	4606      	mov	r6, r0
 800894c:	db01      	blt.n	8008952 <_malloc_r+0x1a>
 800894e:	42a9      	cmp	r1, r5
 8008950:	d903      	bls.n	800895a <_malloc_r+0x22>
 8008952:	230c      	movs	r3, #12
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	2000      	movs	r0, #0
 8008958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800895a:	f000 f87d 	bl	8008a58 <__malloc_lock>
 800895e:	4921      	ldr	r1, [pc, #132]	; (80089e4 <_malloc_r+0xac>)
 8008960:	680a      	ldr	r2, [r1, #0]
 8008962:	4614      	mov	r4, r2
 8008964:	b99c      	cbnz	r4, 800898e <_malloc_r+0x56>
 8008966:	4f20      	ldr	r7, [pc, #128]	; (80089e8 <_malloc_r+0xb0>)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	b923      	cbnz	r3, 8008976 <_malloc_r+0x3e>
 800896c:	4621      	mov	r1, r4
 800896e:	4630      	mov	r0, r6
 8008970:	f000 f862 	bl	8008a38 <_sbrk_r>
 8008974:	6038      	str	r0, [r7, #0]
 8008976:	4629      	mov	r1, r5
 8008978:	4630      	mov	r0, r6
 800897a:	f000 f85d 	bl	8008a38 <_sbrk_r>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d123      	bne.n	80089ca <_malloc_r+0x92>
 8008982:	230c      	movs	r3, #12
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	4630      	mov	r0, r6
 8008988:	f000 f86c 	bl	8008a64 <__malloc_unlock>
 800898c:	e7e3      	b.n	8008956 <_malloc_r+0x1e>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	1b5b      	subs	r3, r3, r5
 8008992:	d417      	bmi.n	80089c4 <_malloc_r+0x8c>
 8008994:	2b0b      	cmp	r3, #11
 8008996:	d903      	bls.n	80089a0 <_malloc_r+0x68>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	441c      	add	r4, r3
 800899c:	6025      	str	r5, [r4, #0]
 800899e:	e004      	b.n	80089aa <_malloc_r+0x72>
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	42a2      	cmp	r2, r4
 80089a4:	bf0c      	ite	eq
 80089a6:	600b      	streq	r3, [r1, #0]
 80089a8:	6053      	strne	r3, [r2, #4]
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f85a 	bl	8008a64 <__malloc_unlock>
 80089b0:	f104 000b 	add.w	r0, r4, #11
 80089b4:	1d23      	adds	r3, r4, #4
 80089b6:	f020 0007 	bic.w	r0, r0, #7
 80089ba:	1ac2      	subs	r2, r0, r3
 80089bc:	d0cc      	beq.n	8008958 <_malloc_r+0x20>
 80089be:	1a1b      	subs	r3, r3, r0
 80089c0:	50a3      	str	r3, [r4, r2]
 80089c2:	e7c9      	b.n	8008958 <_malloc_r+0x20>
 80089c4:	4622      	mov	r2, r4
 80089c6:	6864      	ldr	r4, [r4, #4]
 80089c8:	e7cc      	b.n	8008964 <_malloc_r+0x2c>
 80089ca:	1cc4      	adds	r4, r0, #3
 80089cc:	f024 0403 	bic.w	r4, r4, #3
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	d0e3      	beq.n	800899c <_malloc_r+0x64>
 80089d4:	1a21      	subs	r1, r4, r0
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f82e 	bl	8008a38 <_sbrk_r>
 80089dc:	3001      	adds	r0, #1
 80089de:	d1dd      	bne.n	800899c <_malloc_r+0x64>
 80089e0:	e7cf      	b.n	8008982 <_malloc_r+0x4a>
 80089e2:	bf00      	nop
 80089e4:	200000d0 	.word	0x200000d0
 80089e8:	200000d4 	.word	0x200000d4

080089ec <_realloc_r>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	4607      	mov	r7, r0
 80089f0:	4614      	mov	r4, r2
 80089f2:	460e      	mov	r6, r1
 80089f4:	b921      	cbnz	r1, 8008a00 <_realloc_r+0x14>
 80089f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089fa:	4611      	mov	r1, r2
 80089fc:	f7ff bf9c 	b.w	8008938 <_malloc_r>
 8008a00:	b922      	cbnz	r2, 8008a0c <_realloc_r+0x20>
 8008a02:	f7ff ff49 	bl	8008898 <_free_r>
 8008a06:	4625      	mov	r5, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0c:	f000 f830 	bl	8008a70 <_malloc_usable_size_r>
 8008a10:	42a0      	cmp	r0, r4
 8008a12:	d20f      	bcs.n	8008a34 <_realloc_r+0x48>
 8008a14:	4621      	mov	r1, r4
 8008a16:	4638      	mov	r0, r7
 8008a18:	f7ff ff8e 	bl	8008938 <_malloc_r>
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d0f2      	beq.n	8008a08 <_realloc_r+0x1c>
 8008a22:	4631      	mov	r1, r6
 8008a24:	4622      	mov	r2, r4
 8008a26:	f7ff ff0f 	bl	8008848 <memcpy>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ff33 	bl	8008898 <_free_r>
 8008a32:	e7e9      	b.n	8008a08 <_realloc_r+0x1c>
 8008a34:	4635      	mov	r5, r6
 8008a36:	e7e7      	b.n	8008a08 <_realloc_r+0x1c>

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d06      	ldr	r5, [pc, #24]	; (8008a54 <_sbrk_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f9 f84a 	bl	8001adc <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	2000030c 	.word	0x2000030c

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f000 b811 	b.w	8008a80 <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20000314 	.word	0x20000314

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f000 b80c 	b.w	8008a82 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000314 	.word	0x20000314

08008a70 <_malloc_usable_size_r>:
 8008a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a74:	1f18      	subs	r0, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfbc      	itt	lt
 8008a7a:	580b      	ldrlt	r3, [r1, r0]
 8008a7c:	18c0      	addlt	r0, r0, r3
 8008a7e:	4770      	bx	lr

08008a80 <__retarget_lock_acquire_recursive>:
 8008a80:	4770      	bx	lr

08008a82 <__retarget_lock_release_recursive>:
 8008a82:	4770      	bx	lr

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
