
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acfc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800aed0  0800aed0  0001aed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2fc  0800b2fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b304  0800b304  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001e0  0800b4ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800b4ec  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa99  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a1  00000000  00000000  0003aca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029086  00000000  00000000  00040608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019656  00000000  00000000  0006968e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8633  00000000  00000000  00082ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  0017b36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aeb4 	.word	0x0800aeb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aeb4 	.word	0x0800aeb4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <pid_init>:
 * @param[in] dt_init Sampling value
 * @param[in] anti_windup_limit_init Anti-windup limit
 * @return None
 */
void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float dt_init, int anti_windup_limit_init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6178      	str	r0, [r7, #20]
 8000ee8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eec:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ef0:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ef4:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	pid_data->previous_error = 0;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
	pid_data->previous_integral = 0;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]

	pid_data->Kp = kp_init;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	615a      	str	r2, [r3, #20]
	pid_data->Ki = ki_init;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	619a      	str	r2, [r3, #24]
	pid_data->Kd = kd_init;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	61da      	str	r2, [r3, #28]
	pid_data->dt = dt_init;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	621a      	str	r2, [r3, #32]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <pid_calculate>:
 * @param[in] setpoint Set value
 * @param[in] frequency Current speed value
 * @return Value of PWM
 */
int pid_calculate(pid_str *pid_data, int setpoint, int frequency)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b08b      	sub	sp, #44	; 0x2c
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;
	uint16_t PID;

	  error = setpoint - frequency;
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	61fb      	str	r3, [r7, #28]

	  p_term = (float)(pid_data->Kp * error);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5e:	edc7 7a06 	vstr	s15, [r7, #24]

	  pid_data->integral = pid_data->previous_integral + (error + pid_data->previous_error);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	441a      	add	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	60da      	str	r2, [r3, #12]
	  pid_data->previous_integral = pid_data->integral;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	609a      	str	r2, [r3, #8]
	  i_term = pid_data->Ki*pid_data->integral*(pid_data->dt/2);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 6a08 	vldr	s13, [r3, #32]
 8000f98:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000f9c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  pid_data->derivative = (error - pid_data->previous_error)/pid_data->dt;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 2a90 	vmov	r2, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
	  pid_data->previous_error = error;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	601a      	str	r2, [r3, #0]
	  d_term = pid_data->Kd*pid_data->derivative;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	edc7 7a05 	vstr	s15, [r7, #20]

	  if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	db08      	blt.n	800101a <pid_calculate+0xe4>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001018:	e016      	b.n	8001048 <pid_calculate+0x112>
	  else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	425b      	negs	r3, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800102c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d808      	bhi.n	8001048 <pid_calculate+0x112>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	425b      	negs	r3, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  PID = (uint16_t)(p_term + i_term + d_term);
 8001048:	ed97 7a06 	vldr	s14, [r7, #24]
 800104c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	edd7 7a05 	vldr	s15, [r7, #20]
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001060:	ee17 3a90 	vmov	r3, s15
 8001064:	847b      	strh	r3, [r7, #34]	; 0x22

	  if (PID > 1000)
 8001066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106c:	d902      	bls.n	8001074 <pid_calculate+0x13e>
	  {
		  PID = 1000;
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	847b      	strh	r3, [r7, #34]	; 0x22
	  else if(PID < 0)
	  {
		  PID = 0;
	  }

	  return PID;
 8001074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8001076:	4618      	mov	r0, r3
 8001078:	372c      	adds	r7, #44	; 0x2c
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC1_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_ADC1_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC1_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC1_Init+0x98>)
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_ADC1_Init+0xa0>)
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC1_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_ADC1_Init+0x98>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x98>)
 80010de:	2201      	movs	r2, #1
 80010e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <MX_ADC1_Init+0x98>)
 80010e4:	f001 fa18 	bl	8002518 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 fced 	bl	8001acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f2:	2303      	movs	r3, #3
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC1_Init+0x98>)
 8001104:	f001 fa4c 	bl	80025a0 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110e:	f000 fcdd 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000220 	.word	0x20000220
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x74>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d123      	bne.n	8001192 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117a:	2308      	movs	r3, #8
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x7c>)
 800118e:	f001 fdfb 	bl	8002d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a62      	ldr	r2, [pc, #392]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a5c      	ldr	r2, [pc, #368]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f244 0181 	movw	r1, #16513	; 0x4081
 800126c:	4856      	ldr	r0, [pc, #344]	; (80013c8 <MX_GPIO_Init+0x220>)
 800126e:	f001 ff37 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4855      	ldr	r0, [pc, #340]	; (80013cc <MX_GPIO_Init+0x224>)
 8001278:	f001 ff32 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	484f      	ldr	r0, [pc, #316]	; (80013d0 <MX_GPIO_Init+0x228>)
 8001294:	f001 fd78 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001298:	2332      	movs	r3, #50	; 0x32
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4847      	ldr	r0, [pc, #284]	; (80013d0 <MX_GPIO_Init+0x228>)
 80012b4:	f001 fd68 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b8:	2386      	movs	r3, #134	; 0x86
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c8:	230b      	movs	r3, #11
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4840      	ldr	r0, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x22c>)
 80012d4:	f001 fd58 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <MX_GPIO_Init+0x220>)
 80012f2:	f001 fd49 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001308:	230b      	movs	r3, #11
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <MX_GPIO_Init+0x220>)
 8001314:	f001 fd38 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <MX_GPIO_Init+0x224>)
 8001330:	f001 fd2a 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <MX_GPIO_Init+0x224>)
 8001348:	f001 fd1e 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800134c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800135e:	230a      	movs	r3, #10
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_GPIO_Init+0x22c>)
 800136a:	f001 fd0d 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_GPIO_Init+0x22c>)
 8001384:	f001 fd00 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001388:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139a:	230b      	movs	r3, #11
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <MX_GPIO_Init+0x224>)
 80013a6:	f001 fcef 	bl	8002d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f001 fc21 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f001 fc3a 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3730      	adds	r7, #48	; 0x30
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000

080013d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <MX_I2C1_Init+0x7c>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_I2C1_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_I2C1_Init+0x74>)
 8001414:	f001 fea2 	bl	800315c <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800141e:	f000 fb55 	bl	8001acc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001426:	f002 fa1b 	bl	8003860 <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001430:	f000 fb4c 	bl	8001acc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_I2C1_Init+0x74>)
 8001438:	f002 fa5d 	bl	80038f6 <HAL_I2CEx_ConfigDigitalFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 fb43 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000268 	.word	0x20000268
 8001450:	40005400 	.word	0x40005400
 8001454:	00808cd2 	.word	0x00808cd2

08001458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x7c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d128      	bne.n	80014cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001492:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a4:	2304      	movs	r3, #4
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <HAL_I2C_MspInit+0x84>)
 80014b0:	f001 fc6a 	bl	8002d88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <lcd_init>:
 * @brief Initialisation PID controller
 * @param[in] pid_data PID handler
 * @return None
 */
void lcd_init(struct lcd_disp * lcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80014f6:	2308      	movs	r3, #8
 80014f8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f000 ffe8 	bl	80024d0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	2130      	movs	r1, #48	; 0x30
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f829 	bl	8001560 <lcd_write>
	HAL_Delay(5);
 800150e:	2005      	movs	r0, #5
 8001510:	f000 ffde 	bl	80024d0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	2130      	movs	r1, #48	; 0x30
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f81f 	bl	8001560 <lcd_write>
	HAL_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 ffd4 	bl	80024d0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	2130      	movs	r1, #48	; 0x30
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f815 	bl	8001560 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f80e 	bl	8001560 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	210c      	movs	r1, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f807 	bl	8001560 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f89f 	bl	8001696 <lcd_clear>

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <lcd_write>:
 * @param[in] kp_init Proportional value
 * @param[in] ki_init Integral value
 * @return None
 */
void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2da      	uxtb	r2, r3
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001588:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800158c:	f023 030f 	bic.w	r3, r3, #15
 8001590:	b25a      	sxtb	r2, r3
 8001592:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001596:	4313      	orrs	r3, r2
 8001598:	b25b      	sxtb	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	797b      	ldrb	r3, [r7, #5]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f107 020c 	add.w	r2, r7, #12
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2304      	movs	r3, #4
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <lcd_write+0x88>)
 80015d4:	f001 fe52 	bl	800327c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80015d8:	2005      	movs	r0, #5
 80015da:	f000 ff79 	bl	80024d0 <HAL_Delay>
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000268 	.word	0x20000268

080015ec <lcd_display>:
 * @brief Initialisation PID controller
 * @param[in] pid_data PID handler
 * @return None
 */
void lcd_display(struct lcd_disp * lcd)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	2300      	movs	r3, #0
 80015fa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001606:	2308      	movs	r3, #8
 8001608:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f843 	bl	8001696 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffa1 	bl	8001560 <lcd_write>
	while(lcd->f_line[i])
 800161e:	e00f      	b.n	8001640 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7818      	ldrb	r0, [r3, #0]
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	7859      	ldrb	r1, [r3, #1]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff ff93 	bl	8001560 <lcd_write>
		i++;
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	3301      	adds	r3, #1
 800163e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	21c0      	movs	r1, #192	; 0xc0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff81 	bl	8001560 <lcd_write>
	while(lcd->s_line[i])
 800165e:	e00f      	b.n	8001680 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7818      	ldrb	r0, [r3, #0]
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	7c99      	ldrb	r1, [r3, #18]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	f7ff ff73 	bl	8001560 <lcd_write>
		i++;
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	3301      	adds	r3, #1
 800167e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	7c9b      	ldrb	r3, [r3, #18]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e9      	bne.n	8001660 <lcd_display+0x74>
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <lcd_clear>:
 * @brief Initialisation PID controller
 * @param[in] pid_data PID handler
 * @return None
 */
void lcd_clear(struct lcd_disp * lcd)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80016ac:	2308      	movs	r3, #8
 80016ae:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	2101      	movs	r1, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff51 	bl	8001560 <lcd_write>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_RxCpltCallback+0x50>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11a      	bne.n	8001710 <HAL_UART_RxCpltCallback+0x48>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_UART_RxCpltCallback+0x54>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	490f      	ldr	r1, [pc, #60]	; (8001720 <HAL_UART_RxCpltCallback+0x58>)
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <HAL_UART_RxCpltCallback+0x5c>)
 80016e6:	f005 f9d5 	bl	8006a94 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg_str, msg_len);
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_UART_RxCpltCallback+0x54>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	490b      	ldr	r1, [pc, #44]	; (8001720 <HAL_UART_RxCpltCallback+0x58>)
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <HAL_UART_RxCpltCallback+0x5c>)
 80016f6:	f005 f95f 	bl	80069b8 <HAL_UART_Transmit_IT>
		counter_usart = atoi(msg_str);
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <HAL_UART_RxCpltCallback+0x58>)
 80016fc:	f006 fc82 	bl	8008004 <atoi>
 8001700:	4603      	mov	r3, r0
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_UART_RxCpltCallback+0x60>)
 8001704:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim3, counter_usart);
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_UART_RxCpltCallback+0x60>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_UART_RxCpltCallback+0x64>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004800 	.word	0x40004800
 800171c:	20000000 	.word	0x20000000
 8001720:	200002c0 	.word	0x200002c0
 8001724:	2000043c 	.word	0x2000043c
 8001728:	20000210 	.word	0x20000210
 800172c:	20000358 	.word	0x20000358

08001730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Period elapsed callback in input capture mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d148      	bne.n	80017d2 <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10a      	bne.n	800175e <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001748:	2100      	movs	r1, #0
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f004 fa72 	bl	8005c34 <HAL_TIM_ReadCapturedValue>
 8001750:	4603      	mov	r3, r0
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001754:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e039      	b.n	80017d2 <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f004 fa67 	bl	8005c34 <HAL_TIM_ReadCapturedValue>
 8001766:	4603      	mov	r3, r0
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800176a:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d907      	bls.n	8001788 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00d      	b.n	80017a4 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d907      	bls.n	80017a4 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017a2:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_TIM_IC_CaptureCallback+0xcc>)
 80017a6:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80017ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]


		}
	}

	  if(output == 0)
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
	  }
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000208 	.word	0x20000208
 80017f0:	200001fc 	.word	0x200001fc
 80017f4:	20000200 	.word	0x20000200
 80017f8:	20000204 	.word	0x20000204
 80017fc:	49742400 	.word	0x49742400
 8001800:	2000020c 	.word	0x2000020c
 8001804:	200002b8 	.word	0x200002b8

08001808 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af04      	add	r7, sp, #16
 800180e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d13e      	bne.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x90>
  {

	  	counter = __HAL_TIM_GET_COUNTER(&htim3);
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001824:	801a      	strh	r2, [r3, #0]

	  	u = counter;
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800182e:	601a      	str	r2, [r3, #0]

	  	output = pid_calculate(&(pid_controller), u, frequency);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001836:	edd2 7a00 	vldr	s15, [r2]
 800183a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183e:	ee17 2a90 	vmov	r2, s15
 8001842:	4619      	mov	r1, r3
 8001844:	481b      	ldr	r0, [pc, #108]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001846:	f7ff fb76 	bl	8000f36 <pid_calculate>
 800184a:	4603      	mov	r3, r0
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800184e:	6013      	str	r3, [r2, #0]
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, output);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c

//
  		n = sprintf(data_msg, " U: %4d, V: %.2f, Y: %4d,\r\n", (int)output, frequency, (int)u);
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800185c:	681c      	ldr	r4, [r3, #0]
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe90 	bl	8000588 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	490f      	ldr	r1, [pc, #60]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800186e:	6809      	ldr	r1, [r1, #0]
 8001870:	9102      	str	r1, [sp, #8]
 8001872:	e9cd 2300 	strd	r2, r3, [sp]
 8001876:	4622      	mov	r2, r4
 8001878:	4911      	ldr	r1, [pc, #68]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800187a:	4812      	ldr	r0, [pc, #72]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800187c:	f007 f862 	bl	8008944 <siprintf>
 8001880:	4603      	mov	r3, r0
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001886:	701a      	strb	r2, [r3, #0]
//  		n = sprintf(data_msg, "%.2f\r\n", (int)output, frequency, (int)u);
  		HAL_UART_Transmit_IT(&huart3, (uint8_t*)data_msg, n);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001894:	f005 f890 	bl	80069b8 <HAL_UART_Transmit_IT>
  }
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	40010000 	.word	0x40010000
 80018a4:	20000358 	.word	0x20000358
 80018a8:	200002be 	.word	0x200002be
 80018ac:	200002f0 	.word	0x200002f0
 80018b0:	2000020c 	.word	0x2000020c
 80018b4:	200002c4 	.word	0x200002c4
 80018b8:	200002b8 	.word	0x200002b8
 80018bc:	200003a4 	.word	0x200003a4
 80018c0:	0800aed0 	.word	0x0800aed0
 80018c4:	20000318 	.word	0x20000318
 80018c8:	20000001 	.word	0x20000001
 80018cc:	2000043c 	.word	0x2000043c

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d4:	f000 fd9f 	bl	8002416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d8:	f000 f86a 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f7ff fc64 	bl	80011a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80018e0:	f000 fa50 	bl	8001d84 <MX_TIM1_Init>
  MX_ADC1_Init();
 80018e4:	f7ff fbce 	bl	8001084 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018e8:	f000 fafa 	bl	8001ee0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018ec:	f7ff fd74 	bl	80013d8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018f0:	f000 fb72 	bl	8001fd8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80018f4:	f000 fcea 	bl	80022cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80018f8:	481e      	ldr	r0, [pc, #120]	; (8001974 <main+0xa4>)
 80018fa:	f003 f947 	bl	8004b8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018fe:	2108      	movs	r1, #8
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <main+0xa4>)
 8001902:	f003 fa1d 	bl	8004d40 <HAL_TIM_PWM_Start>

//PID initialize
  pid_init(&(pid_controller), FAN_Kp, FAN_Ki, FAN_Kd, FAN_dt, FAN_ANTI_WINDUP);
 8001906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800190a:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8001978 <main+0xa8>
 800190e:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800197c <main+0xac>
 8001912:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001980 <main+0xb0>
 8001916:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001984 <main+0xb4>
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <main+0xb8>)
 800191c:	f7ff fae0 	bl	8000ee0 <pid_init>

// Input Capture initialize
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <main+0xbc>)
 8001924:	f003 fb68 	bl	8004ff8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001928:	2108      	movs	r1, #8
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <main+0xbc>)
 800192c:	f003 fb64 	bl	8004ff8 <HAL_TIM_IC_Start_IT>

//  Encoder initialize
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001930:	213c      	movs	r1, #60	; 0x3c
 8001932:	4817      	ldr	r0, [pc, #92]	; (8001990 <main+0xc0>)
 8001934:	f003 fd56 	bl	80053e4 <HAL_TIM_Encoder_Start>
//USART receive
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <main+0xc4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4915      	ldr	r1, [pc, #84]	; (8001998 <main+0xc8>)
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <main+0xcc>)
 8001944:	f005 f8a6 	bl	8006a94 <HAL_UART_Receive_IT>


  // LCD init
  disp.addr = (0x27 << 1);
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <main+0xd0>)
 800194a:	224e      	movs	r2, #78	; 0x4e
 800194c:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <main+0xd0>)
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <main+0xd0>)
 8001958:	f7ff fdc2 	bl	80014e0 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <main+0xd4>)
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <main+0xd8>)
 8001960:	f006 fff0 	bl	8008944 <siprintf>
  sprintf((char *)&disp.s_line, "################");
 8001964:	490f      	ldr	r1, [pc, #60]	; (80019a4 <main+0xd4>)
 8001966:	4811      	ldr	r0, [pc, #68]	; (80019ac <main+0xdc>)
 8001968:	f006 ffec 	bl	8008944 <siprintf>

  lcd_display(&disp);
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <main+0xd0>)
 800196e:	f7ff fe3d 	bl	80015ec <lcd_display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001972:	e7fe      	b.n	8001972 <main+0xa2>
 8001974:	200003a4 	.word	0x200003a4
 8001978:	3a83126f 	.word	0x3a83126f
 800197c:	00000000 	.word	0x00000000
 8001980:	41073d08 	.word	0x41073d08
 8001984:	3ec313be 	.word	0x3ec313be
 8001988:	200002c4 	.word	0x200002c4
 800198c:	200003f0 	.word	0x200003f0
 8001990:	20000358 	.word	0x20000358
 8001994:	20000000 	.word	0x20000000
 8001998:	200002c0 	.word	0x200002c0
 800199c:	2000043c 	.word	0x2000043c
 80019a0:	200002f4 	.word	0x200002f4
 80019a4:	0800aeec 	.word	0x0800aeec
 80019a8:	200002f5 	.word	0x200002f5
 80019ac:	20000306 	.word	0x20000306

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0b4      	sub	sp, #208	; 0xd0
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ba:	2230      	movs	r2, #48	; 0x30
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fb4e 	bl	8008060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	2284      	movs	r2, #132	; 0x84
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 fb3f 	bl	8008060 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e2:	f001 ffd5 	bl	8003990 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <SystemClock_Config+0x114>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a36      	ldr	r2, [pc, #216]	; (8001ac4 <SystemClock_Config+0x114>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <SystemClock_Config+0x114>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <SystemClock_Config+0x118>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a06:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <SystemClock_Config+0x118>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <SystemClock_Config+0x118>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a36:	2304      	movs	r3, #4
 8001a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a3c:	2348      	movs	r3, #72	; 0x48
 8001a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 ffac 	bl	80039b0 <HAL_RCC_OscConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a5e:	f000 f835 	bl	8001acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a62:	230f      	movs	r3, #15
 8001a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a86:	2102      	movs	r1, #2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fa35 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001a94:	f000 f81a 	bl	8001acc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001a98:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001a9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fc26 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001ab6:	f000 f809 	bl	8001acc <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	37d0      	adds	r7, #208	; 0xd0
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 fc90 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b7a:	f003 fcc1 	bl	8005500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003a4 	.word	0x200003a4

08001b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM2_IRQHandler+0x10>)
 8001b8e:	f003 fcb7 	bl	8005500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200003f0 	.word	0x200003f0

08001b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM3_IRQHandler+0x10>)
 8001ba2:	f003 fcad 	bl	8005500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000358 	.word	0x20000358

08001bb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <USART3_IRQHandler+0x10>)
 8001bb6:	f004 ffbb 	bl	8006b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000043c 	.word	0x2000043c

08001bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bcc:	f001 faa2 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_kill>:

int _kill(int pid, int sig)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bee:	f006 fa0d 	bl	800800c <__errno>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2216      	movs	r2, #22
 8001bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_exit>:

void _exit (int status)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffe7 	bl	8001be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c16:	e7fe      	b.n	8001c16 <_exit+0x12>

08001c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	4601      	mov	r1, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <_read+0x12>
	}

return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e009      	b.n	8001c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60ba      	str	r2, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf1      	blt.n	8001c64 <_write+0x12>
	}
	return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_close>:

int _close(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_isatty>:

int _isatty(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f006 f972 	bl	800800c <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20050000 	.word	0x20050000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	20000214 	.word	0x20000214
 8001d5c:	200004d8 	.word	0x200004d8

08001d60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <SystemInit+0x20>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <SystemInit+0x20>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b09a      	sub	sp, #104	; 0x68
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	222c      	movs	r2, #44	; 0x2c
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f006 f94e 	bl	8008060 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001dc6:	4a45      	ldr	r2, [pc, #276]	; (8001edc <MX_TIM1_Init+0x158>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001dcc:	2247      	movs	r2, #71	; 0x47
 8001dce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df0:	4839      	ldr	r0, [pc, #228]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001df2:	f002 fe73 	bl	8004adc <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001dfc:	f7ff fe66 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4832      	ldr	r0, [pc, #200]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001e0e:	f003 fe47 	bl	8005aa0 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e18:	f7ff fe58 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e1c:	482e      	ldr	r0, [pc, #184]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001e1e:	f002 ff2d 	bl	8004c7c <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e28:	f7ff fe50 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001e40:	f004 fc42 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e4a:	f7ff fe3f 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4e:	2360      	movs	r3, #96	; 0x60
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001e52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e70:	2208      	movs	r2, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001e76:	f003 fcff 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e80:	f7ff fe24 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001eba:	f004 fc93 	bl	80067e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001ec4:	f7ff fe02 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <MX_TIM1_Init+0x154>)
 8001eca:	f000 f9c7 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001ece:	bf00      	nop
 8001ed0:	3768      	adds	r7, #104	; 0x68
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200003a4 	.word	0x200003a4
 8001edc:	40010000 	.word	0x40010000

08001ee0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f16:	2247      	movs	r2, #71	; 0x47
 8001f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f22:	f04f 32ff 	mov.w	r2, #4294967295
 8001f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f34:	4827      	ldr	r0, [pc, #156]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f36:	f002 fdd1 	bl	8004adc <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001f40:	f7ff fdc4 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4820      	ldr	r0, [pc, #128]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f52:	f003 fda5 	bl	8005aa0 <HAL_TIM_ConfigClockSource>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f5c:	f7ff fdb6 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f60:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f62:	f002 ffe7 	bl	8004f34 <HAL_TIM_IC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f6c:	f7ff fdae 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4815      	ldr	r0, [pc, #84]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001f80:	f004 fba2 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001f8a:	f7ff fd9f 	bl	8001acc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f92:	2301      	movs	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001fa6:	f003 fbca 	bl	800573e <HAL_TIM_IC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001fb0:	f7ff fd8c 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_TIM2_Init+0xf4>)
 8001fbc:	f003 fbbf 	bl	800573e <HAL_TIM_IC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001fc6:	f7ff fd81 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3730      	adds	r7, #48	; 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200003f0 	.word	0x200003f0

08001fd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f006 f83a 	bl	8008060 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <MX_TIM3_Init+0xa0>)
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <MX_TIM3_Init+0xa4>)
 8001ffa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <MX_TIM3_Init+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM3_Init+0xa0>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_TIM3_Init+0xa0>)
 800200a:	2264      	movs	r2, #100	; 0x64
 800200c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM3_Init+0xa0>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM3_Init+0xa0>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800201a:	2303      	movs	r3, #3
 800201c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM3_Init+0xa0>)
 8002046:	f003 f927 	bl	8005298 <HAL_TIM_Encoder_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002050:	f7ff fd3c 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM3_Init+0xa0>)
 8002062:	f004 fb31 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800206c:	f7ff fd2e 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000358 	.word	0x20000358
 800207c:	40000400 	.word	0x40000400

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <HAL_TIM_Base_MspInit+0xf8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d114      	bne.n	80020cc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2019      	movs	r0, #25
 80020c0:	f000 fd99 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c4:	2019      	movs	r0, #25
 80020c6:	f000 fdb2 	bl	8002c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ca:	e051      	b.n	8002170 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d14c      	bne.n	8002170 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_TIM_Base_MspInit+0xfc>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002126:	2301      	movs	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212e:	2301      	movs	r3, #1
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <HAL_TIM_Base_MspInit+0x100>)
 800213a:	f000 fe25 	bl	8002d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002150:	2301      	movs	r3, #1
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x104>)
 800215c:	f000 fe14 	bl	8002d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	201c      	movs	r0, #28
 8002166:	f000 fd46 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800216a:	201c      	movs	r0, #28
 800216c:	f000 fd5f 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 8002170:	bf00      	nop
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40010000 	.word	0x40010000
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400

08002188 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_TIM_Encoder_MspInit+0xc4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d14b      	bne.n	8002242 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002202:	2302      	movs	r3, #2
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4811      	ldr	r0, [pc, #68]	; (8002254 <HAL_TIM_Encoder_MspInit+0xcc>)
 800220e:	f000 fdbb 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002222:	2302      	movs	r3, #2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <HAL_TIM_Encoder_MspInit+0xd0>)
 800222e:	f000 fdab 	bl	8002d88 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	201d      	movs	r0, #29
 8002238:	f000 fcdd 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800223c:	201d      	movs	r0, #29
 800223e:	f000 fcf6 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000400 	.word	0x40000400
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020800 	.word	0x40020800

0800225c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_TIM_MspPostInit+0x64>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11c      	bne.n	80022b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_TIM_MspPostInit+0x68>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_MspPostInit+0x68>)
 8002284:	f043 0310 	orr.w	r3, r3, #16
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_TIM_MspPostInit+0x68>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_TIM_MspPostInit+0x6c>)
 80022b4:	f000 fd68 	bl	8002d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40021000 	.word	0x40021000

080022cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART3_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART3_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART3_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART3_UART_Init+0x58>)
 8002310:	f004 fb04 	bl	800691c <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f7ff fbd7 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000043c 	.word	0x2000043c
 8002328:	40004800 	.word	0x40004800

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_UART_MspInit+0x8c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d130      	bne.n	80023b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_UART_MspInit+0x90>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_UART_MspInit+0x90>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_UART_MspInit+0x90>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800237e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002390:	2307      	movs	r3, #7
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <HAL_UART_MspInit+0x94>)
 800239c:	f000 fcf4 	bl	8002d88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	2027      	movs	r0, #39	; 0x27
 80023a6:	f000 fc26 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023aa:	2027      	movs	r0, #39	; 0x27
 80023ac:	f000 fc3f 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40004800 	.word	0x40004800
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e0:	4c0b      	ldr	r4, [pc, #44]	; (8002410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ee:	f7ff fcb7 	bl	8001d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f005 fe11 	bl	8008018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7ff fa6b 	bl	80018d0 <main>
  bx  lr    
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002408:	0800b30c 	.word	0x0800b30c
  ldr r2, =_sbss
 800240c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002410:	200004d4 	.word	0x200004d4

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>

08002416 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241a:	2003      	movs	r0, #3
 800241c:	f000 fbe0 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002420:	2000      	movs	r0, #0
 8002422:	f000 f805 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002426:	f7ff fb57 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fbfb 	bl	8002c4a <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 fbc3 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000004 	.word	0x20000004
 8002488:	2000000c 	.word	0x2000000c
 800248c:	20000008 	.word	0x20000008

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	200004c0 	.word	0x200004c0

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200004c0 	.word	0x200004c0

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000000c 	.word	0x2000000c

08002518 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e031      	b.n	8002592 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fdf6 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_ADC_Init+0x84>)
 800255c:	4013      	ands	r3, r2
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f970 	bl	800284c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
 8002582:	e001      	b.n	8002588 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	ffffeefd 	.word	0xffffeefd

080025a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e136      	b.n	800282a <HAL_ADC_ConfigChannel+0x28a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d93a      	bls.n	8002642 <HAL_ADC_ConfigChannel+0xa2>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025d4:	d035      	beq.n	8002642 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a8d      	ldr	r2, [pc, #564]	; (8002838 <HAL_ADC_ConfigChannel+0x298>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	061a      	lsls	r2, r3, #24
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800261a:	e035      	b.n	8002688 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	4603      	mov	r3, r0
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4403      	add	r3, r0
 8002634:	3b1e      	subs	r3, #30
 8002636:	409a      	lsls	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002640:	e022      	b.n	8002688 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	2207      	movs	r2, #7
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6919      	ldr	r1, [r3, #16]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	4603      	mov	r3, r0
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4403      	add	r3, r0
 800267e:	409a      	lsls	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d824      	bhi.n	80026da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b05      	subs	r3, #5
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43da      	mvns	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	400a      	ands	r2, r1
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b05      	subs	r3, #5
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34
 80026d8:	e04c      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d824      	bhi.n	800272c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	3b23      	subs	r3, #35	; 0x23
 80026f4:	221f      	movs	r2, #31
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b23      	subs	r3, #35	; 0x23
 800271e:	fa00 f203 	lsl.w	r2, r0, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
 800272a:	e023      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b41      	subs	r3, #65	; 0x41
 800273e:	221f      	movs	r2, #31
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43da      	mvns	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	400a      	ands	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b41      	subs	r3, #65	; 0x41
 8002768:	fa00 f203 	lsl.w	r2, r0, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_ADC_ConfigChannel+0x29c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10a      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1f4>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002786:	d105      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 800278e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002792:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_ADC_ConfigChannel+0x29c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10f      	bne.n	80027be <HAL_ADC_ConfigChannel+0x21e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d10b      	bne.n	80027be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_ADC_ConfigChannel+0x29c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d12b      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x280>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_ADC_ConfigChannel+0x298>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <HAL_ADC_ConfigChannel+0x23a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b11      	cmp	r3, #17
 80027d8:	d122      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_ADC_ConfigChannel+0x298>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d111      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_ADC_ConfigChannel+0x2a4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_ADC_ConfigChannel+0x2a8>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9a      	lsrs	r2, r3, #18
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002812:	e002      	b.n	800281a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b01      	subs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	10000012 	.word	0x10000012
 800283c:	40012000 	.word	0x40012000
 8002840:	40012300 	.word	0x40012300
 8002844:	20000004 	.word	0x20000004
 8002848:	431bde83 	.word	0x431bde83

0800284c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002854:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <ADC_Init+0x1ec>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a77      	ldr	r2, [pc, #476]	; (8002a38 <ADC_Init+0x1ec>)
 800285a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800285e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002860:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <ADC_Init+0x1ec>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4973      	ldr	r1, [pc, #460]	; (8002a38 <ADC_Init+0x1ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <ADC_Init+0x1f0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e00f      	b.n	8002946 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002944:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0202 	bic.w	r2, r2, #2
 8002954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	005a      	lsls	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002992:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	035a      	lsls	r2, r3, #13
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	e007      	b.n	80029bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	051a      	lsls	r2, r3, #20
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fe:	025a      	lsls	r2, r3, #9
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	029a      	lsls	r2, r3, #10
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40012300 	.word	0x40012300
 8002a3c:	0f000001 	.word	0x0f000001

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <__NVIC_SetPriorityGrouping+0x40>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x40>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00
 8002a84:	05fa0000 	.word	0x05fa0000

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff29 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff3e 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff31 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa2 	bl	8002b9c <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff fc22 	bl	80024b8 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d008      	beq.n	8002c94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e052      	b.n	8002d3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0216 	bic.w	r2, r2, #22
 8002ca2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <HAL_DMA_Abort+0x62>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0208 	bic.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce4:	e013      	b.n	8002d0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ce6:	f7ff fbe7 	bl	80024b8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d90c      	bls.n	8002d0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e015      	b.n	8002d3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e4      	bne.n	8002ce6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	223f      	movs	r2, #63	; 0x3f
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d004      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00c      	b.n	8002d7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2205      	movs	r2, #5
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e175      	b.n	8003094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002da8:	2201      	movs	r2, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8164 	bne.w	800308e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d005      	beq.n	8002dde <HAL_GPIO_Init+0x56>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d130      	bne.n	8002e40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d017      	beq.n	8002e7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d123      	bne.n	8002ed0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80be 	beq.w	800308e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_GPIO_Init+0x324>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_GPIO_Init+0x324>)
 8002f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_GPIO_Init+0x324>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f2a:	4a61      	ldr	r2, [pc, #388]	; (80030b0 <HAL_GPIO_Init+0x328>)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a58      	ldr	r2, [pc, #352]	; (80030b4 <HAL_GPIO_Init+0x32c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d037      	beq.n	8002fc6 <HAL_GPIO_Init+0x23e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a57      	ldr	r2, [pc, #348]	; (80030b8 <HAL_GPIO_Init+0x330>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_GPIO_Init+0x23a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a56      	ldr	r2, [pc, #344]	; (80030bc <HAL_GPIO_Init+0x334>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02b      	beq.n	8002fbe <HAL_GPIO_Init+0x236>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a55      	ldr	r2, [pc, #340]	; (80030c0 <HAL_GPIO_Init+0x338>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d025      	beq.n	8002fba <HAL_GPIO_Init+0x232>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a54      	ldr	r2, [pc, #336]	; (80030c4 <HAL_GPIO_Init+0x33c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x22e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a53      	ldr	r2, [pc, #332]	; (80030c8 <HAL_GPIO_Init+0x340>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0x22a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_GPIO_Init+0x344>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0x226>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a51      	ldr	r2, [pc, #324]	; (80030d0 <HAL_GPIO_Init+0x348>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_Init+0x222>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <HAL_GPIO_Init+0x34c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x21e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	; (80030d8 <HAL_GPIO_Init+0x350>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_Init+0x21a>
 8002f9e:	2309      	movs	r3, #9
 8002fa0:	e012      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	e010      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	; (80030b0 <HAL_GPIO_Init+0x328>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_GPIO_Init+0x354>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a34      	ldr	r2, [pc, #208]	; (80030dc <HAL_GPIO_Init+0x354>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_GPIO_Init+0x354>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_GPIO_Init+0x354>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_GPIO_Init+0x354>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_GPIO_Init+0x354>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_GPIO_Init+0x354>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_GPIO_Init+0x354>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae86 	bls.w	8002da8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40022400 	.word	0x40022400
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f806 	bl	8003144 <HAL_GPIO_EXTI_Callback>
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe f968 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d104      	bne.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_I2C_Init+0x11c>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	02008000 	.word	0x02008000

0800327c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	461a      	mov	r2, r3
 8003288:	460b      	mov	r3, r1
 800328a:	817b      	strh	r3, [r7, #10]
 800328c:	4613      	mov	r3, r2
 800328e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b20      	cmp	r3, #32
 800329a:	f040 80da 	bne.w	8003452 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2C_Master_Transmit+0x30>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0d3      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032b4:	f7ff f900 	bl	80024b8 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2319      	movs	r3, #25
 80032c0:	2201      	movs	r2, #1
 80032c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f8f0 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0be      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2221      	movs	r2, #33	; 0x21
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2210      	movs	r2, #16
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2bff      	cmp	r3, #255	; 0xff
 8003306:	d90e      	bls.n	8003326 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	22ff      	movs	r2, #255	; 0xff
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_I2C_Master_Transmit+0x1e0>)
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa6c 	bl	80037fc <I2C_TransferConfig>
 8003324:	e06c      	b.n	8003400 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	b2da      	uxtb	r2, r3
 8003336:	8979      	ldrh	r1, [r7, #10]
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_I2C_Master_Transmit+0x1e0>)
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa5b 	bl	80037fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003346:	e05b      	b.n	8003400 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6a39      	ldr	r1, [r7, #32]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f8ed 	bl	800352c <I2C_WaitOnTXISFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e07b      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d034      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x184>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d130      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f87f 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04d      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2bff      	cmp	r3, #255	; 0xff
 80033c0:	d90e      	bls.n	80033e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fa0f 	bl	80037fc <I2C_TransferConfig>
 80033de:	e00f      	b.n	8003400 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	8979      	ldrh	r1, [r7, #10]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f9fe 	bl	80037fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d19e      	bne.n	8003348 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	6a39      	ldr	r1, [r7, #32]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f8cc 	bl	80035ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e01a      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2220      	movs	r2, #32
 8003424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_I2C_Master_Transmit+0x1e4>)
 8003432:	400b      	ands	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	80002000 	.word	0x80002000
 8003460:	fe00e800 	.word	0xfe00e800

08003464 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d103      	bne.n	8003482 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	619a      	str	r2, [r3, #24]
  }
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034bc:	e022      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d01e      	beq.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe fff7 	bl	80024b8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d113      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e00f      	b.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	429a      	cmp	r2, r3
 8003520:	d0cd      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003538:	e02c      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f870 	bl	8003624 <I2C_IsErrorOccurred>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e02a      	b.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d01e      	beq.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe ffaf 	bl	80024b8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d113      	bne.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e007      	b.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d1cb      	bne.n	800353a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b8:	e028      	b.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f830 	bl	8003624 <I2C_IsErrorOccurred>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e026      	b.n	800361c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe ff73 	bl	80024b8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d113      	bne.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d1cf      	bne.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d075      	beq.n	800373c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003658:	e056      	b.n	8003708 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d052      	beq.n	8003708 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fe ff29 	bl	80024b8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_IsErrorOccurred+0x54>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d147      	bne.n	8003708 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800368a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d12e      	bne.n	80036fa <I2C_IsErrorOccurred+0xd6>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a2:	d02a      	beq.n	80036fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d027      	beq.n	80036fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ba:	f7fe fefd 	bl	80024b8 <HAL_GetTick>
 80036be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c0:	e01b      	b.n	80036fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c2:	f7fe fef9 	bl	80024b8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b19      	cmp	r3, #25
 80036ce:	d914      	bls.n	80036fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d1dc      	bne.n	80036c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b20      	cmp	r3, #32
 8003714:	d003      	beq.n	800371e <I2C_IsErrorOccurred+0xfa>
 8003716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800371a:	2b00      	cmp	r3, #0
 800371c:	d09d      	beq.n	800365a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800371e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2220      	movs	r2, #32
 800372c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	f043 0308 	orr.w	r3, r3, #8
 8003776:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01c      	beq.n	80037ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff fe56 	bl	8003464 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <I2C_IsErrorOccurred+0x1d4>)
 80037c4:	400b      	ands	r3, r1
 80037c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	fe00e800 	.word	0xfe00e800

080037fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	4613      	mov	r3, r2
 800380c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003814:	7a7b      	ldrb	r3, [r7, #9]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800381c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	4313      	orrs	r3, r2
 8003826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800382a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	0d5b      	lsrs	r3, r3, #21
 8003836:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <I2C_TransferConfig+0x60>)
 800383c:	430b      	orrs	r3, r1
 800383e:	43db      	mvns	r3, r3
 8003840:	ea02 0103 	and.w	r1, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	03ff63ff 	.word	0x03ff63ff

08003860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d138      	bne.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003880:	2302      	movs	r3, #2
 8003882:	e032      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d139      	bne.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003916:	2302      	movs	r3, #2
 8003918:	e033      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	; 0x24
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40007000 	.word	0x40007000

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e291      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b96      	ldr	r3, [pc, #600]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e0:	4b93      	ldr	r3, [pc, #588]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
 80039ec:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x130>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e26b      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x7a>
 8003a1c:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a83      	ldr	r2, [pc, #524]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x9c>
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a56:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6b      	ldr	r2, [pc, #428]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fd12 	bl	80024b8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fd0e 	bl	80024b8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e21f      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fcfe 	bl	80024b8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fcfa 	bl	80024b8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e20b      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b57      	ldr	r3, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x110>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d069      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
 8003b06:	4b4a      	ldr	r3, [pc, #296]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1df      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	493d      	ldr	r1, [pc, #244]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e040      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d023      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fcb0 	bl	80024b8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fcac 	bl	80024b8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1bd      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4929      	ldr	r1, [pc, #164]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fc8c 	bl	80024b8 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fc88 	bl	80024b8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e199      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d038      	beq.n	8003c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe fc69 	bl	80024b8 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fe fc65 	bl	80024b8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e176      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x23a>
 8003c08:	e01a      	b.n	8003c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe fc4f 	bl	80024b8 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fc4b 	bl	80024b8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d903      	bls.n	8003c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e15c      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
 8003c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a4 	beq.w	8003d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a87      	ldr	r2, [pc, #540]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c82:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fc13 	bl	80024b8 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fe fc0f 	bl	80024b8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e120      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	4b75      	ldr	r3, [pc, #468]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x31a>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	e02d      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x33c>
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	e01c      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x35e>
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a60      	ldr	r2, [pc, #384]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003d0e:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fbc3 	bl	80024b8 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fe fbbf 	bl	80024b8 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0ce      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ee      	beq.n	8003d36 <HAL_RCC_OscConfig+0x386>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fbad 	bl	80024b8 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe fba9 	bl	80024b8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0b8      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80a4 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d06b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d149      	bne.n	8003e48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fb7a 	bl	80024b8 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fb76 	bl	80024b8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e087      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fb4a 	bl	80024b8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fb46 	bl	80024b8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e057      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x478>
 8003e46:	e04f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe fb30 	bl	80024b8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fe fb2c 	bl	80024b8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e03d      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4ac>
 8003e7a:	e035      	b.n	8003ee8 <HAL_RCC_OscConfig+0x538>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x544>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d11a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d0      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	4965      	ldr	r1, [pc, #404]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d040      	beq.n	800401c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e073      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06b      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4936      	ldr	r1, [pc, #216]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7fe fa64 	bl	80024b8 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fe fa60 	bl	80024b8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e053      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d210      	bcs.n	800404c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4922      	ldr	r1, [pc, #136]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e032      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800408a:	f000 f821 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1d0>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe f9c0 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800af00 	.word	0x0800af00
 80040c8:	20000004 	.word	0x20000004
 80040cc:	20000008 	.word	0x20000008

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	2300      	movs	r3, #0
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e8:	4b67      	ldr	r3, [pc, #412]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d00d      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x40>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	f200 80bd 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d003      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x3a>
 8004102:	e0b7      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004106:	60bb      	str	r3, [r7, #8]
      break;
 8004108:	e0b7      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410a:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800410c:	60bb      	str	r3, [r7, #8]
      break;
 800410e:	e0b4      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004110:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004118:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04d      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	ea02 0800 	and.w	r8, r2, r0
 800413e:	ea03 0901 	and.w	r9, r3, r1
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	014b      	lsls	r3, r1, #5
 8004150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004154:	0142      	lsls	r2, r0, #5
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	ebb0 0008 	subs.w	r0, r0, r8
 800415e:	eb61 0109 	sbc.w	r1, r1, r9
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	018b      	lsls	r3, r1, #6
 800416c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004170:	0182      	lsls	r2, r0, #6
 8004172:	1a12      	subs	r2, r2, r0
 8004174:	eb63 0301 	sbc.w	r3, r3, r1
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	00d9      	lsls	r1, r3, #3
 8004182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004186:	00d0      	lsls	r0, r2, #3
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	eb12 0208 	adds.w	r2, r2, r8
 8004190:	eb43 0309 	adc.w	r3, r3, r9
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0259      	lsls	r1, r3, #9
 800419e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041a2:	0250      	lsls	r0, r2, #9
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f7fc fd18 	bl	8000be8 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e04a      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	ea02 0400 	and.w	r4, r2, r0
 80041da:	ea03 0501 	and.w	r5, r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	014b      	lsls	r3, r1, #5
 80041ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f0:	0142      	lsls	r2, r0, #5
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	1b00      	subs	r0, r0, r4
 80041f8:	eb61 0105 	sbc.w	r1, r1, r5
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	018b      	lsls	r3, r1, #6
 8004206:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800420a:	0182      	lsls	r2, r0, #6
 800420c:	1a12      	subs	r2, r2, r0
 800420e:	eb63 0301 	sbc.w	r3, r3, r1
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	00d9      	lsls	r1, r3, #3
 800421c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004220:	00d0      	lsls	r0, r2, #3
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	1912      	adds	r2, r2, r4
 8004228:	eb45 0303 	adc.w	r3, r5, r3
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	0299      	lsls	r1, r3, #10
 8004236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800423a:	0290      	lsls	r0, r2, #10
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	461a      	mov	r2, r3
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f7fc fccc 	bl	8000be8 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	60bb      	str	r3, [r7, #8]
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004276:	60bb      	str	r3, [r7, #8]
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	68bb      	ldr	r3, [r7, #8]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800af10 	.word	0x0800af10

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d8:	f7ff ffdc 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0b5b      	lsrs	r3, r3, #13
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800af10 	.word	0x0800af10

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004324:	4b69      	ldr	r3, [pc, #420]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a68      	ldr	r2, [pc, #416]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	4b66      	ldr	r3, [pc, #408]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	4964      	ldr	r1, [pc, #400]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d017      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004356:	4b5d      	ldr	r3, [pc, #372]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	4959      	ldr	r1, [pc, #356]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d017      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004392:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	494a      	ldr	r1, [pc, #296]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 808b 	beq.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b3a      	ldr	r3, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	4a39      	ldr	r2, [pc, #228]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6413      	str	r3, [r2, #64]	; 0x40
 80043ec:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043f8:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fe f858 	bl	80024b8 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fe f854 	bl	80024b8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e357      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800441e:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800442a:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d035      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d02e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004448:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4a1d      	ldr	r2, [pc, #116]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004468:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004470:	4b16      	ldr	r3, [pc, #88]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d114      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe f81c 	bl	80024b8 <HAL_GetTick>
 8004480:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	e00a      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fe f818 	bl	80024b8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e319      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0ee      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	d111      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044c2:	400b      	ands	r3, r1
 80044c4:	4901      	ldr	r1, [pc, #4]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	0ffffcff 	.word	0x0ffffcff
 80044d8:	4bb1      	ldr	r3, [pc, #708]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4ab0      	ldr	r2, [pc, #704]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	4bae      	ldr	r3, [pc, #696]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	49ab      	ldr	r1, [pc, #684]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004502:	4ba7      	ldr	r3, [pc, #668]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004508:	4aa5      	ldr	r2, [pc, #660]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004512:	4ba3      	ldr	r3, [pc, #652]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004514:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	49a0      	ldr	r1, [pc, #640]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004530:	4b9b      	ldr	r3, [pc, #620]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800453e:	4998      	ldr	r1, [pc, #608]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004552:	4b93      	ldr	r3, [pc, #588]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004560:	498f      	ldr	r1, [pc, #572]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004574:	4b8a      	ldr	r3, [pc, #552]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004582:	4987      	ldr	r1, [pc, #540]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	497e      	ldr	r1, [pc, #504]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b8:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4976      	ldr	r1, [pc, #472]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045da:	4b71      	ldr	r3, [pc, #452]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f023 020c 	bic.w	r2, r3, #12
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e8:	496d      	ldr	r1, [pc, #436]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fc:	4b68      	ldr	r3, [pc, #416]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	4965      	ldr	r1, [pc, #404]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461e:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	495c      	ldr	r1, [pc, #368]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004640:	4b57      	ldr	r3, [pc, #348]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	4954      	ldr	r1, [pc, #336]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004662:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	494b      	ldr	r1, [pc, #300]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004684:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	4943      	ldr	r1, [pc, #268]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b4:	493a      	ldr	r1, [pc, #232]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d6:	4932      	ldr	r1, [pc, #200]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f8:	4929      	ldr	r1, [pc, #164]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004708:	d101      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	4919      	ldr	r1, [pc, #100]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475c:	4910      	ldr	r1, [pc, #64]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d006      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80d9 	beq.w	800492a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd fe98 	bl	80024b8 <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800478a:	e00b      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478c:	f7fd fe94 	bl	80024b8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d904      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e197      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a4:	4b6c      	ldr	r3, [pc, #432]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ed      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d021      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11d      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047c4:	4b64      	ldr	r3, [pc, #400]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	019a      	lsls	r2, r3, #6
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	071b      	lsls	r3, r3, #28
 80047f8:	4957      	ldr	r1, [pc, #348]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800481e:	2b00      	cmp	r3, #0
 8004820:	d02e      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482a:	d129      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800482c:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004832:	0c1b      	lsrs	r3, r3, #16
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	0f1b      	lsrs	r3, r3, #28
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	019a      	lsls	r2, r3, #6
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	431a      	orrs	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	071b      	lsls	r3, r3, #28
 8004860:	493d      	ldr	r1, [pc, #244]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486e:	f023 021f 	bic.w	r2, r3, #31
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	3b01      	subs	r3, #1
 8004878:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01d      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	0e1b      	lsrs	r3, r3, #24
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	0f1b      	lsrs	r3, r3, #28
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	019a      	lsls	r2, r3, #6
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	071b      	lsls	r3, r3, #28
 80048c0:	4925      	ldr	r1, [pc, #148]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	019a      	lsls	r2, r3, #6
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	061b      	lsls	r3, r3, #24
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	071b      	lsls	r3, r3, #28
 80048f0:	4919      	ldr	r1, [pc, #100]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fd fdd8 	bl	80024b8 <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800490c:	f7fd fdd4 	bl	80024b8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0d7      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 80cd 	bne.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a08      	ldr	r2, [pc, #32]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fd fdbb 	bl	80024b8 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004944:	e00a      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004946:	f7fd fdb7 	bl	80024b8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d903      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0ba      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004958:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800495c:	4b5e      	ldr	r3, [pc, #376]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004968:	d0ed      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02e      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d12a      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004992:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	0f1b      	lsrs	r3, r3, #28
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	4944      	ldr	r1, [pc, #272]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049ce:	4b42      	ldr	r3, [pc, #264]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	493d      	ldr	r1, [pc, #244]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d022      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fc:	d11d      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	0e1b      	lsrs	r3, r3, #24
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a0c:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	0f1b      	lsrs	r3, r3, #28
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	4929      	ldr	r1, [pc, #164]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	019a      	lsls	r2, r3, #6
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4911      	ldr	r1, [pc, #68]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fd fd08 	bl	80024b8 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aac:	f7fd fd04 	bl	80024b8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e007      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aca:	d1ef      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800

08004adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e049      	b.n	8004b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd fabc 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f001 f8ec 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d001      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e054      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d022      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d01d      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_TIM_Base_Start_IT+0xe0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_TIM_Base_Start_IT+0xe4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x80>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d115      	bne.n	8004c38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_TIM_Base_Start_IT+0xec>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d015      	beq.n	8004c4a <HAL_TIM_Base_Start_IT+0xbe>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d011      	beq.n	8004c4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	e008      	b.n	8004c4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40001800 	.word	0x40001800
 8004c78:	00010007 	.word	0x00010007

08004c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e049      	b.n	8004d22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f841 	bl	8004d2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f001 f81c 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_TIM_PWM_Start+0x24>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e03c      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d109      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x3e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e02f      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start+0x58>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e022      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x72>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e015      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x8c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e092      	b.n	8004f0c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xb6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xc6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	e01b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xd6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0xe6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xf6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fc18 	bl	800667c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <HAL_TIM_PWM_Start+0x1d4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIM_PWM_Start+0x120>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <HAL_TIM_PWM_Start+0x1d8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_PWM_Start+0x124>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_TIM_PWM_Start+0x126>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <HAL_TIM_PWM_Start+0x1d4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d01d      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <HAL_TIM_PWM_Start+0x1dc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_TIM_PWM_Start+0x1e0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_TIM_PWM_Start+0x1e4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_TIM_PWM_Start+0x1d8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_TIM_PWM_Start+0x1e8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_PWM_Start+0x18a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_TIM_PWM_Start+0x1ec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d115      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_TIM_PWM_Start+0x1f0>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d015      	beq.n	8004f08 <HAL_TIM_PWM_Start+0x1c8>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d011      	beq.n	8004f08 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	e008      	b.n	8004f08 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40010400 	.word	0x40010400
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	00010007 	.word	0x00010007

08004f34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e049      	b.n	8004fda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f841 	bl	8004fe2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 fec0 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_TIM_IC_Start_IT+0x1e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e023      	b.n	800505e <HAL_TIM_IC_Start_IT+0x66>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d104      	bne.n	8005026 <HAL_TIM_IC_Start_IT+0x2e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e01b      	b.n	800505e <HAL_TIM_IC_Start_IT+0x66>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d104      	bne.n	8005036 <HAL_TIM_IC_Start_IT+0x3e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e013      	b.n	800505e <HAL_TIM_IC_Start_IT+0x66>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start_IT+0x4e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e00b      	b.n	800505e <HAL_TIM_IC_Start_IT+0x66>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b10      	cmp	r3, #16
 800504a:	d104      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0x5e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e003      	b.n	800505e <HAL_TIM_IC_Start_IT+0x66>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800505c:	b2db      	uxtb	r3, r3
 800505e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_TIM_IC_Start_IT+0x78>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e013      	b.n	8005098 <HAL_TIM_IC_Start_IT+0xa0>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d104      	bne.n	8005080 <HAL_TIM_IC_Start_IT+0x88>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507c:	b2db      	uxtb	r3, r3
 800507e:	e00b      	b.n	8005098 <HAL_TIM_IC_Start_IT+0xa0>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b08      	cmp	r3, #8
 8005084:	d104      	bne.n	8005090 <HAL_TIM_IC_Start_IT+0x98>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e003      	b.n	8005098 <HAL_TIM_IC_Start_IT+0xa0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005096:	b2db      	uxtb	r3, r3
 8005098:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d102      	bne.n	80050a6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a0:	7b7b      	ldrb	r3, [r7, #13]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d001      	beq.n	80050aa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0e2      	b.n	8005270 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_IC_Start_IT+0xc2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	e023      	b.n	8005102 <HAL_TIM_IC_Start_IT+0x10a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d104      	bne.n	80050ca <HAL_TIM_IC_Start_IT+0xd2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	e01b      	b.n	8005102 <HAL_TIM_IC_Start_IT+0x10a>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start_IT+0xe2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	e013      	b.n	8005102 <HAL_TIM_IC_Start_IT+0x10a>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0xf2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_IC_Start_IT+0x10a>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start_IT+0x102>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	e003      	b.n	8005102 <HAL_TIM_IC_Start_IT+0x10a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <HAL_TIM_IC_Start_IT+0x11a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	e013      	b.n	800513a <HAL_TIM_IC_Start_IT+0x142>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d104      	bne.n	8005122 <HAL_TIM_IC_Start_IT+0x12a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005120:	e00b      	b.n	800513a <HAL_TIM_IC_Start_IT+0x142>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d104      	bne.n	8005132 <HAL_TIM_IC_Start_IT+0x13a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005130:	e003      	b.n	800513a <HAL_TIM_IC_Start_IT+0x142>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d841      	bhi.n	80051c4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <HAL_TIM_IC_Start_IT+0x150>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800517d 	.word	0x0800517d
 800514c:	080051c5 	.word	0x080051c5
 8005150:	080051c5 	.word	0x080051c5
 8005154:	080051c5 	.word	0x080051c5
 8005158:	0800518f 	.word	0x0800518f
 800515c:	080051c5 	.word	0x080051c5
 8005160:	080051c5 	.word	0x080051c5
 8005164:	080051c5 	.word	0x080051c5
 8005168:	080051a1 	.word	0x080051a1
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051b3 	.word	0x080051b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	60da      	str	r2, [r3, #12]
      break;
 800518c:	e01d      	b.n	80051ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0204 	orr.w	r2, r2, #4
 800519c:	60da      	str	r2, [r3, #12]
      break;
 800519e:	e014      	b.n	80051ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0208 	orr.w	r2, r2, #8
 80051ae:	60da      	str	r2, [r3, #12]
      break;
 80051b0:	e00b      	b.n	80051ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0210 	orr.w	r2, r2, #16
 80051c0:	60da      	str	r2, [r3, #12]
      break;
 80051c2:	e002      	b.n	80051ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d14e      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2201      	movs	r2, #1
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fa4f 	bl	800667c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a25      	ldr	r2, [pc, #148]	; (8005278 <HAL_TIM_IC_Start_IT+0x280>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d01d      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_TIM_IC_Start_IT+0x284>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_TIM_IC_Start_IT+0x288>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_TIM_IC_Start_IT+0x28c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIM_IC_Start_IT+0x290>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_TIM_IC_Start_IT+0x294>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIM_IC_Start_IT+0x236>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_TIM_IC_Start_IT+0x298>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d115      	bne.n	800525a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b17      	ldr	r3, [pc, #92]	; (8005294 <HAL_TIM_IC_Start_IT+0x29c>)
 8005236:	4013      	ands	r3, r2
 8005238:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d015      	beq.n	800526c <HAL_TIM_IC_Start_IT+0x274>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005246:	d011      	beq.n	800526c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	e008      	b.n	800526c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e000      	b.n	800526e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40010400 	.word	0x40010400
 800528c:	40014000 	.word	0x40014000
 8005290:	40001800 	.word	0x40001800
 8005294:	00010007 	.word	0x00010007

08005298 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e08f      	b.n	80053cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fc ff61 	bl	8002188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <HAL_TIM_Encoder_Init+0x13c>)
 80052da:	400b      	ands	r3, r1
 80052dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 fd05 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_TIM_Encoder_Init+0x140>)
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	4313      	orrs	r3, r2
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <HAL_TIM_Encoder_Init+0x144>)
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <HAL_TIM_Encoder_Init+0x148>)
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4313      	orrs	r3, r2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	011a      	lsls	r2, r3, #4
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	031b      	lsls	r3, r3, #12
 8005358:	4313      	orrs	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4313      	orrs	r3, r2
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	fffebff8 	.word	0xfffebff8
 80053d8:	fffffcfc 	.word	0xfffffcfc
 80053dc:	fffff3f3 	.word	0xfffff3f3
 80053e0:	ffff0f0f 	.word	0xffff0f0f

080053e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005404:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800540c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d110      	bne.n	8005436 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800541a:	7b7b      	ldrb	r3, [r7, #13]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d001      	beq.n	8005424 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e069      	b.n	80054f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	e031      	b.n	800549a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d110      	bne.n	800545e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005442:	7b3b      	ldrb	r3, [r7, #12]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e055      	b.n	80054f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800545c:	e01d      	b.n	800549a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d108      	bne.n	8005476 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d105      	bne.n	8005476 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800546a:	7b7b      	ldrb	r3, [r7, #13]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d102      	bne.n	8005476 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005470:	7b3b      	ldrb	r3, [r7, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e03e      	b.n	80054f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_TIM_Encoder_Start+0xc4>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d008      	beq.n	80054b8 <HAL_TIM_Encoder_Start+0xd4>
 80054a6:	e00f      	b.n	80054c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f8e3 	bl	800667c <TIM_CCxChannelCmd>
      break;
 80054b6:	e016      	b.n	80054e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	2104      	movs	r1, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f8db 	bl	800667c <TIM_CCxChannelCmd>
      break;
 80054c6:	e00e      	b.n	80054e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f8d3 	bl	800667c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2201      	movs	r2, #1
 80054dc:	2104      	movs	r1, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 f8cc 	bl	800667c <TIM_CCxChannelCmd>
      break;
 80054e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d122      	bne.n	800555c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d11b      	bne.n	800555c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0202 	mvn.w	r2, #2
 800552c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc f8f4 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fbb6 	bl	8005cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fbbd 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b04      	cmp	r3, #4
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0204 	mvn.w	r2, #4
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc f8ca 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fb8c 	bl	8005cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb93 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0208 	mvn.w	r2, #8
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc f8a0 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fb62 	bl	8005cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fb69 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b10      	cmp	r3, #16
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b10      	cmp	r3, #16
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0210 	mvn.w	r2, #16
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2208      	movs	r2, #8
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc f876 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fb38 	bl	8005cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb3f 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0201 	mvn.w	r2, #1
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc f8c2 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d10e      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d107      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f001 f922 	bl	80068f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056be:	d10e      	bne.n	80056de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f915 	bl	8006908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d10e      	bne.n	800570a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d107      	bne.n	800570a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 faed 	bl	8005ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b20      	cmp	r3, #32
 8005716:	d10e      	bne.n	8005736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b20      	cmp	r3, #32
 8005724:	d107      	bne.n	8005736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0220 	mvn.w	r2, #32
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f8d5 	bl	80068e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005758:	2302      	movs	r3, #2
 800575a:	e088      	b.n	800586e <HAL_TIM_IC_ConfigChannel+0x130>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11b      	bne.n	80057a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f000 fdbb 	bl	80062f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 020c 	bic.w	r2, r2, #12
 800578c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6999      	ldr	r1, [r3, #24]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	619a      	str	r2, [r3, #24]
 80057a0:	e060      	b.n	8005864 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d11c      	bne.n	80057e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6819      	ldr	r1, [r3, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f000 fe3f 	bl	800643a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	619a      	str	r2, [r3, #24]
 80057e0:	e040      	b.n	8005864 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f000 fe8c 	bl	8006514 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020c 	bic.w	r2, r2, #12
 800580a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69d9      	ldr	r1, [r3, #28]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e021      	b.n	8005864 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d11c      	bne.n	8005860 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f000 fea9 	bl	800658c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005848:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69d9      	ldr	r1, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	021a      	lsls	r2, r3, #8
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	61da      	str	r2, [r3, #28]
 800585e:	e001      	b.n	8005864 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005892:	2302      	movs	r3, #2
 8005894:	e0ff      	b.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b14      	cmp	r3, #20
 80058a2:	f200 80f0 	bhi.w	8005a86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005a87 	.word	0x08005a87
 80058b4:	08005a87 	.word	0x08005a87
 80058b8:	08005a87 	.word	0x08005a87
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005a87 	.word	0x08005a87
 80058c4:	08005a87 	.word	0x08005a87
 80058c8:	08005a87 	.word	0x08005a87
 80058cc:	08005983 	.word	0x08005983
 80058d0:	08005a87 	.word	0x08005a87
 80058d4:	08005a87 	.word	0x08005a87
 80058d8:	08005a87 	.word	0x08005a87
 80058dc:	080059c3 	.word	0x080059c3
 80058e0:	08005a87 	.word	0x08005a87
 80058e4:	08005a87 	.word	0x08005a87
 80058e8:	08005a87 	.word	0x08005a87
 80058ec:	08005a05 	.word	0x08005a05
 80058f0:	08005a87 	.word	0x08005a87
 80058f4:	08005a87 	.word	0x08005a87
 80058f8:	08005a87 	.word	0x08005a87
 80058fc:	08005a45 	.word	0x08005a45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa96 	bl	8005e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	619a      	str	r2, [r3, #24]
      break;
 800593e:	e0a5      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fae8 	bl	8005f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]
      break;
 8005980:	e084      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fb3f 	bl	800600c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0204 	bic.w	r2, r2, #4
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	61da      	str	r2, [r3, #28]
      break;
 80059c0:	e064      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fb95 	bl	80060f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	021a      	lsls	r2, r3, #8
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	61da      	str	r2, [r3, #28]
      break;
 8005a02:	e043      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fbcc 	bl	80061a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0208 	orr.w	r2, r2, #8
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0204 	bic.w	r2, r2, #4
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a42:	e023      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fbfe 	bl	800624c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	021a      	lsls	r2, r3, #8
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a84:	e002      	b.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop

08005aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_ConfigClockSource+0x1c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0b4      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x186>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <HAL_TIM_ConfigClockSource+0x190>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af4:	d03e      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0xd4>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	f200 8087 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	f000 8086 	beq.w	8005c12 <HAL_TIM_ConfigClockSource+0x172>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d87f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b70      	cmp	r3, #112	; 0x70
 8005b0e:	d01a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xa6>
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d87b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b60      	cmp	r3, #96	; 0x60
 8005b16:	d050      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x11a>
 8005b18:	2b60      	cmp	r3, #96	; 0x60
 8005b1a:	d877      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d03c      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0xfa>
 8005b20:	2b50      	cmp	r3, #80	; 0x50
 8005b22:	d873      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d058      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x13a>
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d86f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b30      	cmp	r3, #48	; 0x30
 8005b2e:	d064      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15a>
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d86b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d060      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15a>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d867      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d05c      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15a>
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d05a      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	e062      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f000 fd71 	bl	800663c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
      break;
 8005b72:	e04f      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f000 fd5a 	bl	800663c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b96:	609a      	str	r2, [r3, #8]
      break;
 8005b98:	e03c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fc18 	bl	80063dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2150      	movs	r1, #80	; 0x50
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fd27 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e02c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fc74 	bl	80064b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2160      	movs	r1, #96	; 0x60
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd17 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e01c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 fbf8 	bl	80063dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2140      	movs	r1, #64	; 0x40
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fd07 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e00c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fcfe 	bl	8006606 <TIM_ITRx_SetConfig>
      break;
 8005c0a:	e003      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e000      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	fffeff88 	.word	0xfffeff88

08005c34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	d831      	bhi.n	8005cac <HAL_TIM_ReadCapturedValue+0x78>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005cad 	.word	0x08005cad
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005cad 	.word	0x08005cad
 8005c60:	08005c8f 	.word	0x08005c8f
 8005c64:	08005cad 	.word	0x08005cad
 8005c68:	08005cad 	.word	0x08005cad
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005cad 	.word	0x08005cad
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005ca3 	.word	0x08005ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	60fb      	str	r3, [r7, #12]

      break;
 8005c8c:	e00f      	b.n	8005cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	60fb      	str	r3, [r7, #12]

      break;
 8005c96:	e00a      	b.n	8005cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	60fb      	str	r3, [r7, #12]

      break;
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	60fb      	str	r3, [r7, #12]

      break;
 8005caa:	e000      	b.n	8005cae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005cac:	bf00      	nop
  }

  return tmpreg;
 8005cae:	68fb      	ldr	r3, [r7, #12]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a40      	ldr	r2, [pc, #256]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <TIM_Base_SetConfig+0x118>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3c      	ldr	r2, [pc, #240]	; (8005e14 <TIM_Base_SetConfig+0x11c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <TIM_Base_SetConfig+0x120>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d027      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <TIM_Base_SetConfig+0x118>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d023      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2b      	ldr	r2, [pc, #172]	; (8005e14 <TIM_Base_SetConfig+0x11c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	; (8005e18 <TIM_Base_SetConfig+0x120>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a28      	ldr	r2, [pc, #160]	; (8005e20 <TIM_Base_SetConfig+0x128>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a27      	ldr	r2, [pc, #156]	; (8005e24 <TIM_Base_SetConfig+0x12c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <TIM_Base_SetConfig+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <TIM_Base_SetConfig+0x134>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <TIM_Base_SetConfig+0x138>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <TIM_Base_SetConfig+0x13c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <TIM_Base_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a0c      	ldr	r2, [pc, #48]	; (8005e1c <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d103      	bne.n	8005df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	615a      	str	r2, [r3, #20]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40000c00 	.word	0x40000c00
 8005e1c:	40010400 	.word	0x40010400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800
 8005e2c:	40001800 	.word	0x40001800
 8005e30:	40001c00 	.word	0x40001c00
 8005e34:	40002000 	.word	0x40002000

08005e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0201 	bic.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <TIM_OC1_SetConfig+0xd8>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0302 	bic.w	r3, r3, #2
 8005e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <TIM_OC1_SetConfig+0xdc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC1_SetConfig+0x64>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <TIM_OC1_SetConfig+0xe0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10c      	bne.n	8005eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0308 	bic.w	r3, r3, #8
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 0304 	bic.w	r3, r3, #4
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a16      	ldr	r2, [pc, #88]	; (8005f14 <TIM_OC1_SetConfig+0xdc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC1_SetConfig+0x8e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <TIM_OC1_SetConfig+0xe0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d111      	bne.n	8005eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	fffeff8f 	.word	0xfffeff8f
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0210 	bic.w	r2, r3, #16
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <TIM_OC2_SetConfig+0xe4>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0320 	bic.w	r3, r3, #32
 8005f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a23      	ldr	r2, [pc, #140]	; (8006004 <TIM_OC2_SetConfig+0xe8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC2_SetConfig+0x68>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a22      	ldr	r2, [pc, #136]	; (8006008 <TIM_OC2_SetConfig+0xec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d10d      	bne.n	8005fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <TIM_OC2_SetConfig+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x94>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <TIM_OC2_SetConfig+0xec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d113      	bne.n	8005fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	feff8fff 	.word	0xfeff8fff
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <TIM_OC3_SetConfig+0xe0>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <TIM_OC3_SetConfig+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0x66>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <TIM_OC3_SetConfig+0xe8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10d      	bne.n	800608e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a17      	ldr	r2, [pc, #92]	; (80060f0 <TIM_OC3_SetConfig+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_OC3_SetConfig+0x92>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <TIM_OC3_SetConfig+0xe8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d113      	bne.n	80060c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	fffeff8f 	.word	0xfffeff8f
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40010400 	.word	0x40010400

080060f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4b1e      	ldr	r3, [pc, #120]	; (800619c <TIM_OC4_SetConfig+0xa4>)
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <TIM_OC4_SetConfig+0xa8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC4_SetConfig+0x68>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <TIM_OC4_SetConfig+0xac>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d109      	bne.n	8006174 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	019b      	lsls	r3, r3, #6
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	feff8fff 	.word	0xfeff8fff
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <TIM_OC5_SetConfig+0x98>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <TIM_OC5_SetConfig+0x9c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_OC5_SetConfig+0x5e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a11      	ldr	r2, [pc, #68]	; (8006248 <TIM_OC5_SetConfig+0xa0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d109      	bne.n	800621a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	621a      	str	r2, [r3, #32]
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	fffeff8f 	.word	0xfffeff8f
 8006244:	40010000 	.word	0x40010000
 8006248:	40010400 	.word	0x40010400

0800624c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <TIM_OC6_SetConfig+0x9c>)
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	051b      	lsls	r3, r3, #20
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <TIM_OC6_SetConfig+0xa0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC6_SetConfig+0x60>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <TIM_OC6_SetConfig+0xa4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d109      	bne.n	80062c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	feff8fff 	.word	0xfeff8fff
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40010400 	.word	0x40010400

080062f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a28      	ldr	r2, [pc, #160]	; (80063c0 <TIM_TI1_SetConfig+0xcc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d01b      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d017      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <TIM_TI1_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a24      	ldr	r2, [pc, #144]	; (80063c8 <TIM_TI1_SetConfig+0xd4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00f      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <TIM_TI1_SetConfig+0xd8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <TIM_TI1_SetConfig+0xdc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <TIM_TI1_SetConfig+0xe0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_TI1_SetConfig+0x66>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <TIM_TI1_SetConfig+0xe4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <TIM_TI1_SetConfig+0x6a>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <TIM_TI1_SetConfig+0x6c>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e003      	b.n	800637e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	b2db      	uxtb	r3, r3
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f023 030a 	bic.w	r3, r3, #10
 8006398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f003 030a 	and.w	r3, r3, #10
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 030a 	bic.w	r3, r3, #10
 8006418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f023 0210 	bic.w	r2, r3, #16
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	031b      	lsls	r3, r3, #12
 800647e:	b29b      	uxth	r3, r3
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800648c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0210 	bic.w	r2, r3, #16
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	031b      	lsls	r3, r3, #12
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	621a      	str	r2, [r3, #32]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006550:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006564:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	031b      	lsls	r3, r3, #12
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	031b      	lsls	r3, r3, #12
 80065e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	f043 0307 	orr.w	r3, r3, #7
 8006628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	431a      	orrs	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4313      	orrs	r3, r2
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2201      	movs	r2, #1
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	43db      	mvns	r3, r3
 800669e:	401a      	ands	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066dc:	2302      	movs	r3, #2
 80066de:	e06d      	b.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a30      	ldr	r2, [pc, #192]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2f      	ldr	r2, [pc, #188]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d108      	bne.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800671a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a20      	ldr	r2, [pc, #128]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d022      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006752:	d01d      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d018      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00e      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a15      	ldr	r2, [pc, #84]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10c      	bne.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40001800 	.word	0x40001800

080067e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e065      	b.n	80068cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d115      	bne.n	80068ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	051b      	lsls	r3, r3, #20
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400

080068e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e040      	b.n	80069b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb fcf4 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2224      	movs	r2, #36	; 0x24
 8006948:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fbd2 	bl	8007104 <UART_SetConfig>
 8006960:	4603      	mov	r3, r0
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e022      	b.n	80069b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fe28 	bl	80075c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 feaf 	bl	800770c <UART_CheckIdleState>
 80069ae:	4603      	mov	r3, r0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b08b      	sub	sp, #44	; 0x2c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d156      	bne.n	8006a7c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_UART_Transmit_IT+0x22>
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e04f      	b.n	8006a7e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UART_Transmit_IT+0x34>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e048      	b.n	8006a7e <HAL_UART_Transmit_IT+0xc6>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2221      	movs	r2, #33	; 0x21
 8006a1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d107      	bne.n	8006a38 <HAL_UART_Transmit_IT+0x80>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <HAL_UART_Transmit_IT+0xd4>)
 8006a34:	669a      	str	r2, [r3, #104]	; 0x68
 8006a36:	e002      	b.n	8006a3e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <HAL_UART_Transmit_IT+0xd8>)
 8006a3c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	69f9      	ldr	r1, [r7, #28]
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	372c      	adds	r7, #44	; 0x2c
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	08007c39 	.word	0x08007c39
 8006a90:	08007b83 	.word	0x08007b83

08006a94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d13d      	bne.n	8006b26 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_UART_Receive_IT+0x22>
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e036      	b.n	8006b28 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UART_Receive_IT+0x34>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e02f      	b.n	8006b28 <HAL_UART_Receive_IT+0x94>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d018      	beq.n	8006b16 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	613b      	str	r3, [r7, #16]
   return(result);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	623b      	str	r3, [r7, #32]
 8006b04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	69f9      	ldr	r1, [r7, #28]
 8006b08:	6a3a      	ldr	r2, [r7, #32]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 feed 	bl	80078fc <UART_Start_Receive_IT>
 8006b22:	4603      	mov	r3, r0
 8006b24:	e000      	b.n	8006b28 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3728      	adds	r7, #40	; 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b0ba      	sub	sp, #232	; 0xe8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b5e:	4013      	ands	r3, r2
 8006b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d115      	bne.n	8006b98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00f      	beq.n	8006b98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 828f 	beq.w	80070ac <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
      }
      return;
 8006b96:	e289      	b.n	80070ac <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8117 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bb2:	4b85      	ldr	r3, [pc, #532]	; (8006dc8 <HAL_UART_IRQHandler+0x298>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 810a 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d011      	beq.n	8006bec <HAL_UART_IRQHandler+0xbc>
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	f043 0201 	orr.w	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d011      	beq.n	8006c1c <HAL_UART_IRQHandler+0xec>
 8006bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c12:	f043 0204 	orr.w	r2, r3, #4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d011      	beq.n	8006c4c <HAL_UART_IRQHandler+0x11c>
 8006c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2204      	movs	r2, #4
 8006c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	f043 0202 	orr.w	r2, r3, #2
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d017      	beq.n	8006c88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2208      	movs	r2, #8
 8006c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7e:	f043 0208 	orr.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <HAL_UART_IRQHandler+0x18a>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00c      	beq.n	8006cba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb0:	f043 0220 	orr.w	r2, r3, #32
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 81f5 	beq.w	80070b0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d005      	beq.n	8006d12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d04f      	beq.n	8006db2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 febc 	bl	8007a90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d141      	bne.n	8006daa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1d9      	bne.n	8006d26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d013      	beq.n	8006da2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <HAL_UART_IRQHandler+0x29c>)
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fb ffdb 	bl	8002d42 <HAL_DMA_Abort_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d017      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00f      	b.n	8006dc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f998 	bl	80070d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e00b      	b.n	8006dc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f994 	bl	80070d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	e007      	b.n	8006dc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f990 	bl	80070d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006dc0:	e176      	b.n	80070b0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc2:	bf00      	nop
    return;
 8006dc4:	e174      	b.n	80070b0 <HAL_UART_IRQHandler+0x580>
 8006dc6:	bf00      	nop
 8006dc8:	04000120 	.word	0x04000120
 8006dcc:	08007b57 	.word	0x08007b57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 8144 	bne.w	8007062 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 813d 	beq.w	8007062 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8136 	beq.w	8007062 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	f040 80b2 	bne.w	8006f72 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8148 	beq.w	80070b4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	f080 8140 	bcs.w	80070b4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e48:	f000 8085 	beq.w	8006f56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1da      	bne.n	8006e4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e1      	bne.n	8006e96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e3      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f26:	f023 0310 	bic.w	r3, r3, #16
 8006f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e4      	bne.n	8006f16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fb fe86 	bl	8002c62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f8be 	bl	80070ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f70:	e0a0      	b.n	80070b4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 8092 	beq.w	80070b8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 808d 	beq.w	80070b8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e4      	bne.n	8006f9e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff8:	633a      	str	r2, [r7, #48]	; 0x30
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e3      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60fb      	str	r3, [r7, #12]
   return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	617b      	str	r3, [r7, #20]
   return(result);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e4      	bne.n	800701e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f846 	bl	80070ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007060:	e02a      	b.n	80070b8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800706e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01c      	beq.n	80070bc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
    }
    return;
 800708a:	e017      	b.n	80070bc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d012      	beq.n	80070be <HAL_UART_IRQHandler+0x58e>
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00c      	beq.n	80070be <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fe27 	bl	8007cf8 <UART_EndTransmit_IT>
    return;
 80070aa:	e008      	b.n	80070be <HAL_UART_IRQHandler+0x58e>
      return;
 80070ac:	bf00      	nop
 80070ae:	e006      	b.n	80070be <HAL_UART_IRQHandler+0x58e>
    return;
 80070b0:	bf00      	nop
 80070b2:	e004      	b.n	80070be <HAL_UART_IRQHandler+0x58e>
      return;
 80070b4:	bf00      	nop
 80070b6:	e002      	b.n	80070be <HAL_UART_IRQHandler+0x58e>
      return;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <HAL_UART_IRQHandler+0x58e>
    return;
 80070bc:	bf00      	nop
  }

}
 80070be:	37e8      	adds	r7, #232	; 0xe8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4ba7      	ldr	r3, [pc, #668]	; (80073cc <UART_SetConfig+0x2c8>)
 8007130:	4013      	ands	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	6979      	ldr	r1, [r7, #20]
 8007138:	430b      	orrs	r3, r1
 800713a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a95      	ldr	r2, [pc, #596]	; (80073d0 <UART_SetConfig+0x2cc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d120      	bne.n	80071c2 <UART_SetConfig+0xbe>
 8007180:	4b94      	ldr	r3, [pc, #592]	; (80073d4 <UART_SetConfig+0x2d0>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b03      	cmp	r3, #3
 800718c:	d816      	bhi.n	80071bc <UART_SetConfig+0xb8>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x90>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071ab 	.word	0x080071ab
 80071a0:	080071b7 	.word	0x080071b7
 80071a4:	2301      	movs	r3, #1
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	e14f      	b.n	800744a <UART_SetConfig+0x346>
 80071aa:	2302      	movs	r3, #2
 80071ac:	77fb      	strb	r3, [r7, #31]
 80071ae:	e14c      	b.n	800744a <UART_SetConfig+0x346>
 80071b0:	2304      	movs	r3, #4
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e149      	b.n	800744a <UART_SetConfig+0x346>
 80071b6:	2308      	movs	r3, #8
 80071b8:	77fb      	strb	r3, [r7, #31]
 80071ba:	e146      	b.n	800744a <UART_SetConfig+0x346>
 80071bc:	2310      	movs	r3, #16
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e143      	b.n	800744a <UART_SetConfig+0x346>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a84      	ldr	r2, [pc, #528]	; (80073d8 <UART_SetConfig+0x2d4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d132      	bne.n	8007232 <UART_SetConfig+0x12e>
 80071cc:	4b81      	ldr	r3, [pc, #516]	; (80073d4 <UART_SetConfig+0x2d0>)
 80071ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d828      	bhi.n	800722c <UART_SetConfig+0x128>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0xdc>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007215 	.word	0x08007215
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800722d 	.word	0x0800722d
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	08007221 	.word	0x08007221
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	0800721b 	.word	0x0800721b
 8007204:	0800722d 	.word	0x0800722d
 8007208:	0800722d 	.word	0x0800722d
 800720c:	0800722d 	.word	0x0800722d
 8007210:	08007227 	.word	0x08007227
 8007214:	2300      	movs	r3, #0
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e117      	b.n	800744a <UART_SetConfig+0x346>
 800721a:	2302      	movs	r3, #2
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e114      	b.n	800744a <UART_SetConfig+0x346>
 8007220:	2304      	movs	r3, #4
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e111      	b.n	800744a <UART_SetConfig+0x346>
 8007226:	2308      	movs	r3, #8
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e10e      	b.n	800744a <UART_SetConfig+0x346>
 800722c:	2310      	movs	r3, #16
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e10b      	b.n	800744a <UART_SetConfig+0x346>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a69      	ldr	r2, [pc, #420]	; (80073dc <UART_SetConfig+0x2d8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d120      	bne.n	800727e <UART_SetConfig+0x17a>
 800723c:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <UART_SetConfig+0x2d0>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007246:	2b30      	cmp	r3, #48	; 0x30
 8007248:	d013      	beq.n	8007272 <UART_SetConfig+0x16e>
 800724a:	2b30      	cmp	r3, #48	; 0x30
 800724c:	d814      	bhi.n	8007278 <UART_SetConfig+0x174>
 800724e:	2b20      	cmp	r3, #32
 8007250:	d009      	beq.n	8007266 <UART_SetConfig+0x162>
 8007252:	2b20      	cmp	r3, #32
 8007254:	d810      	bhi.n	8007278 <UART_SetConfig+0x174>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <UART_SetConfig+0x15c>
 800725a:	2b10      	cmp	r3, #16
 800725c:	d006      	beq.n	800726c <UART_SetConfig+0x168>
 800725e:	e00b      	b.n	8007278 <UART_SetConfig+0x174>
 8007260:	2300      	movs	r3, #0
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e0f1      	b.n	800744a <UART_SetConfig+0x346>
 8007266:	2302      	movs	r3, #2
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e0ee      	b.n	800744a <UART_SetConfig+0x346>
 800726c:	2304      	movs	r3, #4
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e0eb      	b.n	800744a <UART_SetConfig+0x346>
 8007272:	2308      	movs	r3, #8
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e0e8      	b.n	800744a <UART_SetConfig+0x346>
 8007278:	2310      	movs	r3, #16
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e0e5      	b.n	800744a <UART_SetConfig+0x346>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a57      	ldr	r2, [pc, #348]	; (80073e0 <UART_SetConfig+0x2dc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d120      	bne.n	80072ca <UART_SetConfig+0x1c6>
 8007288:	4b52      	ldr	r3, [pc, #328]	; (80073d4 <UART_SetConfig+0x2d0>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007292:	2bc0      	cmp	r3, #192	; 0xc0
 8007294:	d013      	beq.n	80072be <UART_SetConfig+0x1ba>
 8007296:	2bc0      	cmp	r3, #192	; 0xc0
 8007298:	d814      	bhi.n	80072c4 <UART_SetConfig+0x1c0>
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d009      	beq.n	80072b2 <UART_SetConfig+0x1ae>
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d810      	bhi.n	80072c4 <UART_SetConfig+0x1c0>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <UART_SetConfig+0x1a8>
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d006      	beq.n	80072b8 <UART_SetConfig+0x1b4>
 80072aa:	e00b      	b.n	80072c4 <UART_SetConfig+0x1c0>
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
 80072b0:	e0cb      	b.n	800744a <UART_SetConfig+0x346>
 80072b2:	2302      	movs	r3, #2
 80072b4:	77fb      	strb	r3, [r7, #31]
 80072b6:	e0c8      	b.n	800744a <UART_SetConfig+0x346>
 80072b8:	2304      	movs	r3, #4
 80072ba:	77fb      	strb	r3, [r7, #31]
 80072bc:	e0c5      	b.n	800744a <UART_SetConfig+0x346>
 80072be:	2308      	movs	r3, #8
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e0c2      	b.n	800744a <UART_SetConfig+0x346>
 80072c4:	2310      	movs	r3, #16
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e0bf      	b.n	800744a <UART_SetConfig+0x346>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a45      	ldr	r2, [pc, #276]	; (80073e4 <UART_SetConfig+0x2e0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d125      	bne.n	8007320 <UART_SetConfig+0x21c>
 80072d4:	4b3f      	ldr	r3, [pc, #252]	; (80073d4 <UART_SetConfig+0x2d0>)
 80072d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d017      	beq.n	8007314 <UART_SetConfig+0x210>
 80072e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e8:	d817      	bhi.n	800731a <UART_SetConfig+0x216>
 80072ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ee:	d00b      	beq.n	8007308 <UART_SetConfig+0x204>
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d811      	bhi.n	800731a <UART_SetConfig+0x216>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <UART_SetConfig+0x1fe>
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d006      	beq.n	800730e <UART_SetConfig+0x20a>
 8007300:	e00b      	b.n	800731a <UART_SetConfig+0x216>
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0a0      	b.n	800744a <UART_SetConfig+0x346>
 8007308:	2302      	movs	r3, #2
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e09d      	b.n	800744a <UART_SetConfig+0x346>
 800730e:	2304      	movs	r3, #4
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e09a      	b.n	800744a <UART_SetConfig+0x346>
 8007314:	2308      	movs	r3, #8
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e097      	b.n	800744a <UART_SetConfig+0x346>
 800731a:	2310      	movs	r3, #16
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e094      	b.n	800744a <UART_SetConfig+0x346>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a30      	ldr	r2, [pc, #192]	; (80073e8 <UART_SetConfig+0x2e4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d125      	bne.n	8007376 <UART_SetConfig+0x272>
 800732a:	4b2a      	ldr	r3, [pc, #168]	; (80073d4 <UART_SetConfig+0x2d0>)
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007338:	d017      	beq.n	800736a <UART_SetConfig+0x266>
 800733a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800733e:	d817      	bhi.n	8007370 <UART_SetConfig+0x26c>
 8007340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007344:	d00b      	beq.n	800735e <UART_SetConfig+0x25a>
 8007346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734a:	d811      	bhi.n	8007370 <UART_SetConfig+0x26c>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <UART_SetConfig+0x254>
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007354:	d006      	beq.n	8007364 <UART_SetConfig+0x260>
 8007356:	e00b      	b.n	8007370 <UART_SetConfig+0x26c>
 8007358:	2301      	movs	r3, #1
 800735a:	77fb      	strb	r3, [r7, #31]
 800735c:	e075      	b.n	800744a <UART_SetConfig+0x346>
 800735e:	2302      	movs	r3, #2
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e072      	b.n	800744a <UART_SetConfig+0x346>
 8007364:	2304      	movs	r3, #4
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e06f      	b.n	800744a <UART_SetConfig+0x346>
 800736a:	2308      	movs	r3, #8
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	e06c      	b.n	800744a <UART_SetConfig+0x346>
 8007370:	2310      	movs	r3, #16
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e069      	b.n	800744a <UART_SetConfig+0x346>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <UART_SetConfig+0x2e8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d137      	bne.n	80073f0 <UART_SetConfig+0x2ec>
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <UART_SetConfig+0x2d0>)
 8007382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007386:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800738a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800738e:	d017      	beq.n	80073c0 <UART_SetConfig+0x2bc>
 8007390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007394:	d817      	bhi.n	80073c6 <UART_SetConfig+0x2c2>
 8007396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739a:	d00b      	beq.n	80073b4 <UART_SetConfig+0x2b0>
 800739c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a0:	d811      	bhi.n	80073c6 <UART_SetConfig+0x2c2>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <UART_SetConfig+0x2aa>
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073aa:	d006      	beq.n	80073ba <UART_SetConfig+0x2b6>
 80073ac:	e00b      	b.n	80073c6 <UART_SetConfig+0x2c2>
 80073ae:	2300      	movs	r3, #0
 80073b0:	77fb      	strb	r3, [r7, #31]
 80073b2:	e04a      	b.n	800744a <UART_SetConfig+0x346>
 80073b4:	2302      	movs	r3, #2
 80073b6:	77fb      	strb	r3, [r7, #31]
 80073b8:	e047      	b.n	800744a <UART_SetConfig+0x346>
 80073ba:	2304      	movs	r3, #4
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e044      	b.n	800744a <UART_SetConfig+0x346>
 80073c0:	2308      	movs	r3, #8
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e041      	b.n	800744a <UART_SetConfig+0x346>
 80073c6:	2310      	movs	r3, #16
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e03e      	b.n	800744a <UART_SetConfig+0x346>
 80073cc:	efff69f3 	.word	0xefff69f3
 80073d0:	40011000 	.word	0x40011000
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40004400 	.word	0x40004400
 80073dc:	40004800 	.word	0x40004800
 80073e0:	40004c00 	.word	0x40004c00
 80073e4:	40005000 	.word	0x40005000
 80073e8:	40011400 	.word	0x40011400
 80073ec:	40007800 	.word	0x40007800
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a71      	ldr	r2, [pc, #452]	; (80075bc <UART_SetConfig+0x4b8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d125      	bne.n	8007446 <UART_SetConfig+0x342>
 80073fa:	4b71      	ldr	r3, [pc, #452]	; (80075c0 <UART_SetConfig+0x4bc>)
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007404:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007408:	d017      	beq.n	800743a <UART_SetConfig+0x336>
 800740a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800740e:	d817      	bhi.n	8007440 <UART_SetConfig+0x33c>
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	d00b      	beq.n	800742e <UART_SetConfig+0x32a>
 8007416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741a:	d811      	bhi.n	8007440 <UART_SetConfig+0x33c>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <UART_SetConfig+0x324>
 8007420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007424:	d006      	beq.n	8007434 <UART_SetConfig+0x330>
 8007426:	e00b      	b.n	8007440 <UART_SetConfig+0x33c>
 8007428:	2300      	movs	r3, #0
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e00d      	b.n	800744a <UART_SetConfig+0x346>
 800742e:	2302      	movs	r3, #2
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e00a      	b.n	800744a <UART_SetConfig+0x346>
 8007434:	2304      	movs	r3, #4
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e007      	b.n	800744a <UART_SetConfig+0x346>
 800743a:	2308      	movs	r3, #8
 800743c:	77fb      	strb	r3, [r7, #31]
 800743e:	e004      	b.n	800744a <UART_SetConfig+0x346>
 8007440:	2310      	movs	r3, #16
 8007442:	77fb      	strb	r3, [r7, #31]
 8007444:	e001      	b.n	800744a <UART_SetConfig+0x346>
 8007446:	2310      	movs	r3, #16
 8007448:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007452:	d15a      	bne.n	800750a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007454:	7ffb      	ldrb	r3, [r7, #31]
 8007456:	2b08      	cmp	r3, #8
 8007458:	d827      	bhi.n	80074aa <UART_SetConfig+0x3a6>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x35c>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	080074ab 	.word	0x080074ab
 8007470:	0800749b 	.word	0x0800749b
 8007474:	080074ab 	.word	0x080074ab
 8007478:	080074ab 	.word	0x080074ab
 800747c:	080074ab 	.word	0x080074ab
 8007480:	080074a3 	.word	0x080074a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007484:	f7fc ff12 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8007488:	61b8      	str	r0, [r7, #24]
        break;
 800748a:	e013      	b.n	80074b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800748c:	f7fc ff22 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8007490:	61b8      	str	r0, [r7, #24]
        break;
 8007492:	e00f      	b.n	80074b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007494:	4b4b      	ldr	r3, [pc, #300]	; (80075c4 <UART_SetConfig+0x4c0>)
 8007496:	61bb      	str	r3, [r7, #24]
        break;
 8007498:	e00c      	b.n	80074b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749a:	f7fc fe19 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800749e:	61b8      	str	r0, [r7, #24]
        break;
 80074a0:	e008      	b.n	80074b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	61bb      	str	r3, [r7, #24]
        break;
 80074a8:	e004      	b.n	80074b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	77bb      	strb	r3, [r7, #30]
        break;
 80074b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d074      	beq.n	80075a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	005a      	lsls	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	441a      	add	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b0f      	cmp	r3, #15
 80074d4:	d916      	bls.n	8007504 <UART_SetConfig+0x400>
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d212      	bcs.n	8007504 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f023 030f 	bic.w	r3, r3, #15
 80074e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	89fb      	ldrh	r3, [r7, #14]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	89fa      	ldrh	r2, [r7, #14]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	e04f      	b.n	80075a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	77bb      	strb	r3, [r7, #30]
 8007508:	e04c      	b.n	80075a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800750a:	7ffb      	ldrb	r3, [r7, #31]
 800750c:	2b08      	cmp	r3, #8
 800750e:	d828      	bhi.n	8007562 <UART_SetConfig+0x45e>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0x414>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	0800753d 	.word	0x0800753d
 800751c:	08007545 	.word	0x08007545
 8007520:	0800754d 	.word	0x0800754d
 8007524:	08007563 	.word	0x08007563
 8007528:	08007553 	.word	0x08007553
 800752c:	08007563 	.word	0x08007563
 8007530:	08007563 	.word	0x08007563
 8007534:	08007563 	.word	0x08007563
 8007538:	0800755b 	.word	0x0800755b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800753c:	f7fc feb6 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8007540:	61b8      	str	r0, [r7, #24]
        break;
 8007542:	e013      	b.n	800756c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007544:	f7fc fec6 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8007548:	61b8      	str	r0, [r7, #24]
        break;
 800754a:	e00f      	b.n	800756c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <UART_SetConfig+0x4c0>)
 800754e:	61bb      	str	r3, [r7, #24]
        break;
 8007550:	e00c      	b.n	800756c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007552:	f7fc fdbd 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8007556:	61b8      	str	r0, [r7, #24]
        break;
 8007558:	e008      	b.n	800756c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755e:	61bb      	str	r3, [r7, #24]
        break;
 8007560:	e004      	b.n	800756c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	77bb      	strb	r3, [r7, #30]
        break;
 800756a:	bf00      	nop
    }

    if (pclk != 0U)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d018      	beq.n	80075a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085a      	lsrs	r2, r3, #1
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	441a      	add	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d909      	bls.n	80075a0 <UART_SetConfig+0x49c>
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007592:	d205      	bcs.n	80075a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	e001      	b.n	80075a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40007c00 	.word	0x40007c00
 80075c0:	40023800 	.word	0x40023800
 80075c4:	00f42400 	.word	0x00f42400

080075c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01a      	beq.n	80076de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c6:	d10a      	bne.n	80076de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	605a      	str	r2, [r3, #4]
  }
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af02      	add	r7, sp, #8
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800771c:	f7fa fecc 	bl	80024b8 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b08      	cmp	r3, #8
 800772e:	d10e      	bne.n	800774e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f817 	bl	8007772 <UART_WaitOnFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e00d      	b.n	800776a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b09c      	sub	sp, #112	; 0x70
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	4613      	mov	r3, r2
 8007780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007782:	e0a5      	b.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	f000 80a1 	beq.w	80078d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778e:	f7fa fe93 	bl	80024b8 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800779a:	429a      	cmp	r2, r3
 800779c:	d302      	bcc.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800779e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d13e      	bne.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077b8:	667b      	str	r3, [r7, #100]	; 0x64
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	663b      	str	r3, [r7, #96]	; 0x60
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80077f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e5      	bne.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e067      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d04f      	beq.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783e:	d147      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007848:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800785e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800786e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e6      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	66bb      	str	r3, [r7, #104]	; 0x68
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800789c:	623a      	str	r2, [r7, #32]
 800789e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e010      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4013      	ands	r3, r2
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	f43f af4a 	beq.w	8007784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3770      	adds	r7, #112	; 0x70
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b097      	sub	sp, #92	; 0x5c
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792e:	d10e      	bne.n	800794e <UART_Start_Receive_IT+0x52>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <UART_Start_Receive_IT+0x48>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800793e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007942:	e02d      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	22ff      	movs	r2, #255	; 0xff
 8007948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800794c:	e028      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <UART_Start_Receive_IT+0x76>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <UART_Start_Receive_IT+0x6c>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	22ff      	movs	r2, #255	; 0xff
 8007962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007966:	e01b      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	227f      	movs	r2, #127	; 0x7f
 800796c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007970:	e016      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800797a:	d10d      	bne.n	8007998 <UART_Start_Receive_IT+0x9c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <UART_Start_Receive_IT+0x92>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	227f      	movs	r2, #127	; 0x7f
 8007988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800798c:	e008      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	223f      	movs	r2, #63	; 0x3f
 8007992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007996:	e003      	b.n	80079a0 <UART_Start_Receive_IT+0xa4>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2222      	movs	r2, #34	; 0x22
 80079ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	657b      	str	r3, [r7, #84]	; 0x54
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e5      	bne.n	80079ae <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ea:	d107      	bne.n	80079fc <UART_Start_Receive_IT+0x100>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4a24      	ldr	r2, [pc, #144]	; (8007a88 <UART_Start_Receive_IT+0x18c>)
 80079f8:	665a      	str	r2, [r3, #100]	; 0x64
 80079fa:	e002      	b.n	8007a02 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4a23      	ldr	r2, [pc, #140]	; (8007a8c <UART_Start_Receive_IT+0x190>)
 8007a00:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d019      	beq.n	8007a46 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
 8007a32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e6      	bne.n	8007a12 <UART_Start_Receive_IT+0x116>
 8007a44:	e018      	b.n	8007a78 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	613b      	str	r3, [r7, #16]
   return(result);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f043 0320 	orr.w	r3, r3, #32
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	69f9      	ldr	r1, [r7, #28]
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	375c      	adds	r7, #92	; 0x5c
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	08007ea9 	.word	0x08007ea9
 8007a8c:	08007d4d 	.word	0x08007d4d

08007a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b095      	sub	sp, #84	; 0x54
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d118      	bne.n	8007b38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	613b      	str	r3, [r7, #16]
   return(result);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e6      	bne.n	8007b06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b4a:	bf00      	nop
 8007b4c:	3754      	adds	r7, #84	; 0x54
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff faaf 	bl	80070d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b08f      	sub	sp, #60	; 0x3c
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b8e:	2b21      	cmp	r3, #33	; 0x21
 8007b90:	d14c      	bne.n	8007c2c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d132      	bne.n	8007c04 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c02:	e013      	b.n	8007c2c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c2c:	bf00      	nop
 8007c2e:	373c      	adds	r7, #60	; 0x3c
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b091      	sub	sp, #68	; 0x44
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c44:	2b21      	cmp	r3, #33	; 0x21
 8007c46:	d151      	bne.n	8007cec <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d132      	bne.n	8007cba <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	623b      	str	r3, [r7, #32]
   return(result);
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30
 8007c74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e6      	bne.n	8007c54 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007cb8:	e018      	b.n	8007cec <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd4:	1c9a      	adds	r2, r3, #2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007cec:	bf00      	nop
 8007cee:	3744      	adds	r7, #68	; 0x44
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6979      	ldr	r1, [r7, #20]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e6      	bne.n	8007d00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff f9c0 	bl	80070c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d44:	bf00      	nop
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b096      	sub	sp, #88	; 0x58
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	2b22      	cmp	r3, #34	; 0x22
 8007d64:	f040 8094 	bne.w	8007e90 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d72:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007d76:	b2d9      	uxtb	r1, r3
 8007d78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	400a      	ands	r2, r1
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d177      	bne.n	8007ea0 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	623b      	str	r3, [r7, #32]
   return(result);
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e02:	633a      	str	r2, [r7, #48]	; 0x30
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d12e      	bne.n	8007e88 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f023 0310 	bic.w	r3, r3, #16
 8007e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	69b9      	ldr	r1, [r7, #24]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e6      	bne.n	8007e30 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d103      	bne.n	8007e78 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2210      	movs	r2, #16
 8007e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff f933 	bl	80070ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e86:	e00b      	b.n	8007ea0 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7f9 fc1d 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 8007e8e:	e007      	b.n	8007ea0 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0208 	orr.w	r2, r2, #8
 8007e9e:	619a      	str	r2, [r3, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	3758      	adds	r7, #88	; 0x58
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b096      	sub	sp, #88	; 0x58
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ebe:	2b22      	cmp	r3, #34	; 0x22
 8007ec0:	f040 8094 	bne.w	8007fec <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ed4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007ed8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007edc:	4013      	ands	r3, r2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	1c9a      	adds	r2, r3, #2
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d177      	bne.n	8007ffc <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d12e      	bne.n	8007fe4 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6979      	ldr	r1, [r7, #20]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d103      	bne.n	8007fd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff f885 	bl	80070ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fe2:	e00b      	b.n	8007ffc <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7f9 fb6f 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 8007fea:	e007      	b.n	8007ffc <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0208 	orr.w	r2, r2, #8
 8007ffa:	619a      	str	r2, [r3, #24]
}
 8007ffc:	bf00      	nop
 8007ffe:	3758      	adds	r7, #88	; 0x58
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <atoi>:
 8008004:	220a      	movs	r2, #10
 8008006:	2100      	movs	r1, #0
 8008008:	f000 bd40 	b.w	8008a8c <strtol>

0800800c <__errno>:
 800800c:	4b01      	ldr	r3, [pc, #4]	; (8008014 <__errno+0x8>)
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000010 	.word	0x20000010

08008018 <__libc_init_array>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4d0d      	ldr	r5, [pc, #52]	; (8008050 <__libc_init_array+0x38>)
 800801c:	4c0d      	ldr	r4, [pc, #52]	; (8008054 <__libc_init_array+0x3c>)
 800801e:	1b64      	subs	r4, r4, r5
 8008020:	10a4      	asrs	r4, r4, #2
 8008022:	2600      	movs	r6, #0
 8008024:	42a6      	cmp	r6, r4
 8008026:	d109      	bne.n	800803c <__libc_init_array+0x24>
 8008028:	4d0b      	ldr	r5, [pc, #44]	; (8008058 <__libc_init_array+0x40>)
 800802a:	4c0c      	ldr	r4, [pc, #48]	; (800805c <__libc_init_array+0x44>)
 800802c:	f002 ff42 	bl	800aeb4 <_init>
 8008030:	1b64      	subs	r4, r4, r5
 8008032:	10a4      	asrs	r4, r4, #2
 8008034:	2600      	movs	r6, #0
 8008036:	42a6      	cmp	r6, r4
 8008038:	d105      	bne.n	8008046 <__libc_init_array+0x2e>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008040:	4798      	blx	r3
 8008042:	3601      	adds	r6, #1
 8008044:	e7ee      	b.n	8008024 <__libc_init_array+0xc>
 8008046:	f855 3b04 	ldr.w	r3, [r5], #4
 800804a:	4798      	blx	r3
 800804c:	3601      	adds	r6, #1
 800804e:	e7f2      	b.n	8008036 <__libc_init_array+0x1e>
 8008050:	0800b304 	.word	0x0800b304
 8008054:	0800b304 	.word	0x0800b304
 8008058:	0800b304 	.word	0x0800b304
 800805c:	0800b308 	.word	0x0800b308

08008060 <memset>:
 8008060:	4402      	add	r2, r0
 8008062:	4603      	mov	r3, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	d100      	bne.n	800806a <memset+0xa>
 8008068:	4770      	bx	lr
 800806a:	f803 1b01 	strb.w	r1, [r3], #1
 800806e:	e7f9      	b.n	8008064 <memset+0x4>

08008070 <__cvt>:
 8008070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	ec55 4b10 	vmov	r4, r5, d0
 8008078:	2d00      	cmp	r5, #0
 800807a:	460e      	mov	r6, r1
 800807c:	4619      	mov	r1, r3
 800807e:	462b      	mov	r3, r5
 8008080:	bfbb      	ittet	lt
 8008082:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008086:	461d      	movlt	r5, r3
 8008088:	2300      	movge	r3, #0
 800808a:	232d      	movlt	r3, #45	; 0x2d
 800808c:	700b      	strb	r3, [r1, #0]
 800808e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008090:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008094:	4691      	mov	r9, r2
 8008096:	f023 0820 	bic.w	r8, r3, #32
 800809a:	bfbc      	itt	lt
 800809c:	4622      	movlt	r2, r4
 800809e:	4614      	movlt	r4, r2
 80080a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080a4:	d005      	beq.n	80080b2 <__cvt+0x42>
 80080a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080aa:	d100      	bne.n	80080ae <__cvt+0x3e>
 80080ac:	3601      	adds	r6, #1
 80080ae:	2102      	movs	r1, #2
 80080b0:	e000      	b.n	80080b4 <__cvt+0x44>
 80080b2:	2103      	movs	r1, #3
 80080b4:	ab03      	add	r3, sp, #12
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	ab02      	add	r3, sp, #8
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	ec45 4b10 	vmov	d0, r4, r5
 80080c0:	4653      	mov	r3, sl
 80080c2:	4632      	mov	r2, r6
 80080c4:	f000 fd78 	bl	8008bb8 <_dtoa_r>
 80080c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080cc:	4607      	mov	r7, r0
 80080ce:	d102      	bne.n	80080d6 <__cvt+0x66>
 80080d0:	f019 0f01 	tst.w	r9, #1
 80080d4:	d022      	beq.n	800811c <__cvt+0xac>
 80080d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080da:	eb07 0906 	add.w	r9, r7, r6
 80080de:	d110      	bne.n	8008102 <__cvt+0x92>
 80080e0:	783b      	ldrb	r3, [r7, #0]
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d10a      	bne.n	80080fc <__cvt+0x8c>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 80080f2:	b918      	cbnz	r0, 80080fc <__cvt+0x8c>
 80080f4:	f1c6 0601 	rsb	r6, r6, #1
 80080f8:	f8ca 6000 	str.w	r6, [sl]
 80080fc:	f8da 3000 	ldr.w	r3, [sl]
 8008100:	4499      	add	r9, r3
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800810e:	b108      	cbz	r0, 8008114 <__cvt+0xa4>
 8008110:	f8cd 900c 	str.w	r9, [sp, #12]
 8008114:	2230      	movs	r2, #48	; 0x30
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	454b      	cmp	r3, r9
 800811a:	d307      	bcc.n	800812c <__cvt+0xbc>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008120:	1bdb      	subs	r3, r3, r7
 8008122:	4638      	mov	r0, r7
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	b004      	add	sp, #16
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	9103      	str	r1, [sp, #12]
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e7f0      	b.n	8008116 <__cvt+0xa6>

08008134 <__exponent>:
 8008134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008136:	4603      	mov	r3, r0
 8008138:	2900      	cmp	r1, #0
 800813a:	bfb8      	it	lt
 800813c:	4249      	neglt	r1, r1
 800813e:	f803 2b02 	strb.w	r2, [r3], #2
 8008142:	bfb4      	ite	lt
 8008144:	222d      	movlt	r2, #45	; 0x2d
 8008146:	222b      	movge	r2, #43	; 0x2b
 8008148:	2909      	cmp	r1, #9
 800814a:	7042      	strb	r2, [r0, #1]
 800814c:	dd2a      	ble.n	80081a4 <__exponent+0x70>
 800814e:	f10d 0407 	add.w	r4, sp, #7
 8008152:	46a4      	mov	ip, r4
 8008154:	270a      	movs	r7, #10
 8008156:	46a6      	mov	lr, r4
 8008158:	460a      	mov	r2, r1
 800815a:	fb91 f6f7 	sdiv	r6, r1, r7
 800815e:	fb07 1516 	mls	r5, r7, r6, r1
 8008162:	3530      	adds	r5, #48	; 0x30
 8008164:	2a63      	cmp	r2, #99	; 0x63
 8008166:	f104 34ff 	add.w	r4, r4, #4294967295
 800816a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800816e:	4631      	mov	r1, r6
 8008170:	dcf1      	bgt.n	8008156 <__exponent+0x22>
 8008172:	3130      	adds	r1, #48	; 0x30
 8008174:	f1ae 0502 	sub.w	r5, lr, #2
 8008178:	f804 1c01 	strb.w	r1, [r4, #-1]
 800817c:	1c44      	adds	r4, r0, #1
 800817e:	4629      	mov	r1, r5
 8008180:	4561      	cmp	r1, ip
 8008182:	d30a      	bcc.n	800819a <__exponent+0x66>
 8008184:	f10d 0209 	add.w	r2, sp, #9
 8008188:	eba2 020e 	sub.w	r2, r2, lr
 800818c:	4565      	cmp	r5, ip
 800818e:	bf88      	it	hi
 8008190:	2200      	movhi	r2, #0
 8008192:	4413      	add	r3, r2
 8008194:	1a18      	subs	r0, r3, r0
 8008196:	b003      	add	sp, #12
 8008198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081a2:	e7ed      	b.n	8008180 <__exponent+0x4c>
 80081a4:	2330      	movs	r3, #48	; 0x30
 80081a6:	3130      	adds	r1, #48	; 0x30
 80081a8:	7083      	strb	r3, [r0, #2]
 80081aa:	70c1      	strb	r1, [r0, #3]
 80081ac:	1d03      	adds	r3, r0, #4
 80081ae:	e7f1      	b.n	8008194 <__exponent+0x60>

080081b0 <_printf_float>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	ed2d 8b02 	vpush	{d8}
 80081b8:	b08d      	sub	sp, #52	; 0x34
 80081ba:	460c      	mov	r4, r1
 80081bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081c0:	4616      	mov	r6, r2
 80081c2:	461f      	mov	r7, r3
 80081c4:	4605      	mov	r5, r0
 80081c6:	f001 fae3 	bl	8009790 <_localeconv_r>
 80081ca:	f8d0 a000 	ldr.w	sl, [r0]
 80081ce:	4650      	mov	r0, sl
 80081d0:	f7f8 f81e 	bl	8000210 <strlen>
 80081d4:	2300      	movs	r3, #0
 80081d6:	930a      	str	r3, [sp, #40]	; 0x28
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8d8 3000 	ldr.w	r3, [r8]
 80081e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081e4:	3307      	adds	r3, #7
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	f103 0208 	add.w	r2, r3, #8
 80081ee:	f8c8 2000 	str.w	r2, [r8]
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008202:	9307      	str	r3, [sp, #28]
 8008204:	f8cd 8018 	str.w	r8, [sp, #24]
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	4b9f      	ldr	r3, [pc, #636]	; (800848c <_printf_float+0x2dc>)
 800820e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	f7f8 fca9 	bl	8000b6c <__aeabi_dcmpun>
 800821a:	bb88      	cbnz	r0, 8008280 <_printf_float+0xd0>
 800821c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008220:	4b9a      	ldr	r3, [pc, #616]	; (800848c <_printf_float+0x2dc>)
 8008222:	f04f 32ff 	mov.w	r2, #4294967295
 8008226:	f7f8 fc83 	bl	8000b30 <__aeabi_dcmple>
 800822a:	bb48      	cbnz	r0, 8008280 <_printf_float+0xd0>
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	4640      	mov	r0, r8
 8008232:	4649      	mov	r1, r9
 8008234:	f7f8 fc72 	bl	8000b1c <__aeabi_dcmplt>
 8008238:	b110      	cbz	r0, 8008240 <_printf_float+0x90>
 800823a:	232d      	movs	r3, #45	; 0x2d
 800823c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008240:	4b93      	ldr	r3, [pc, #588]	; (8008490 <_printf_float+0x2e0>)
 8008242:	4894      	ldr	r0, [pc, #592]	; (8008494 <_printf_float+0x2e4>)
 8008244:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008248:	bf94      	ite	ls
 800824a:	4698      	movls	r8, r3
 800824c:	4680      	movhi	r8, r0
 800824e:	2303      	movs	r3, #3
 8008250:	6123      	str	r3, [r4, #16]
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	f023 0204 	bic.w	r2, r3, #4
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	9700      	str	r7, [sp, #0]
 8008260:	4633      	mov	r3, r6
 8008262:	aa0b      	add	r2, sp, #44	; 0x2c
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f9d8 	bl	800861c <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	f040 8090 	bne.w	8008392 <_printf_float+0x1e2>
 8008272:	f04f 30ff 	mov.w	r0, #4294967295
 8008276:	b00d      	add	sp, #52	; 0x34
 8008278:	ecbd 8b02 	vpop	{d8}
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fc70 	bl	8000b6c <__aeabi_dcmpun>
 800828c:	b140      	cbz	r0, 80082a0 <_printf_float+0xf0>
 800828e:	464b      	mov	r3, r9
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbc      	itt	lt
 8008294:	232d      	movlt	r3, #45	; 0x2d
 8008296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800829a:	487f      	ldr	r0, [pc, #508]	; (8008498 <_printf_float+0x2e8>)
 800829c:	4b7f      	ldr	r3, [pc, #508]	; (800849c <_printf_float+0x2ec>)
 800829e:	e7d1      	b.n	8008244 <_printf_float+0x94>
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082a6:	9206      	str	r2, [sp, #24]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	d13f      	bne.n	800832c <_printf_float+0x17c>
 80082ac:	2306      	movs	r3, #6
 80082ae:	6063      	str	r3, [r4, #4]
 80082b0:	9b05      	ldr	r3, [sp, #20]
 80082b2:	6861      	ldr	r1, [r4, #4]
 80082b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082b8:	2300      	movs	r3, #0
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	ab0a      	add	r3, sp, #40	; 0x28
 80082be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082c2:	ab09      	add	r3, sp, #36	; 0x24
 80082c4:	ec49 8b10 	vmov	d0, r8, r9
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff fecd 	bl	8008070 <__cvt>
 80082d6:	9b06      	ldr	r3, [sp, #24]
 80082d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082da:	2b47      	cmp	r3, #71	; 0x47
 80082dc:	4680      	mov	r8, r0
 80082de:	d108      	bne.n	80082f2 <_printf_float+0x142>
 80082e0:	1cc8      	adds	r0, r1, #3
 80082e2:	db02      	blt.n	80082ea <_printf_float+0x13a>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	4299      	cmp	r1, r3
 80082e8:	dd41      	ble.n	800836e <_printf_float+0x1be>
 80082ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80082ee:	fa5f fb8b 	uxtb.w	fp, fp
 80082f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082f6:	d820      	bhi.n	800833a <_printf_float+0x18a>
 80082f8:	3901      	subs	r1, #1
 80082fa:	465a      	mov	r2, fp
 80082fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008300:	9109      	str	r1, [sp, #36]	; 0x24
 8008302:	f7ff ff17 	bl	8008134 <__exponent>
 8008306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008308:	1813      	adds	r3, r2, r0
 800830a:	2a01      	cmp	r2, #1
 800830c:	4681      	mov	r9, r0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	dc02      	bgt.n	8008318 <_printf_float+0x168>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	07d2      	lsls	r2, r2, #31
 8008316:	d501      	bpl.n	800831c <_printf_float+0x16c>
 8008318:	3301      	adds	r3, #1
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008320:	2b00      	cmp	r3, #0
 8008322:	d09c      	beq.n	800825e <_printf_float+0xae>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832a:	e798      	b.n	800825e <_printf_float+0xae>
 800832c:	9a06      	ldr	r2, [sp, #24]
 800832e:	2a47      	cmp	r2, #71	; 0x47
 8008330:	d1be      	bne.n	80082b0 <_printf_float+0x100>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1bc      	bne.n	80082b0 <_printf_float+0x100>
 8008336:	2301      	movs	r3, #1
 8008338:	e7b9      	b.n	80082ae <_printf_float+0xfe>
 800833a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800833e:	d118      	bne.n	8008372 <_printf_float+0x1c2>
 8008340:	2900      	cmp	r1, #0
 8008342:	6863      	ldr	r3, [r4, #4]
 8008344:	dd0b      	ble.n	800835e <_printf_float+0x1ae>
 8008346:	6121      	str	r1, [r4, #16]
 8008348:	b913      	cbnz	r3, 8008350 <_printf_float+0x1a0>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	07d0      	lsls	r0, r2, #31
 800834e:	d502      	bpl.n	8008356 <_printf_float+0x1a6>
 8008350:	3301      	adds	r3, #1
 8008352:	440b      	add	r3, r1
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	65a1      	str	r1, [r4, #88]	; 0x58
 8008358:	f04f 0900 	mov.w	r9, #0
 800835c:	e7de      	b.n	800831c <_printf_float+0x16c>
 800835e:	b913      	cbnz	r3, 8008366 <_printf_float+0x1b6>
 8008360:	6822      	ldr	r2, [r4, #0]
 8008362:	07d2      	lsls	r2, r2, #31
 8008364:	d501      	bpl.n	800836a <_printf_float+0x1ba>
 8008366:	3302      	adds	r3, #2
 8008368:	e7f4      	b.n	8008354 <_printf_float+0x1a4>
 800836a:	2301      	movs	r3, #1
 800836c:	e7f2      	b.n	8008354 <_printf_float+0x1a4>
 800836e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008374:	4299      	cmp	r1, r3
 8008376:	db05      	blt.n	8008384 <_printf_float+0x1d4>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	6121      	str	r1, [r4, #16]
 800837c:	07d8      	lsls	r0, r3, #31
 800837e:	d5ea      	bpl.n	8008356 <_printf_float+0x1a6>
 8008380:	1c4b      	adds	r3, r1, #1
 8008382:	e7e7      	b.n	8008354 <_printf_float+0x1a4>
 8008384:	2900      	cmp	r1, #0
 8008386:	bfd4      	ite	le
 8008388:	f1c1 0202 	rsble	r2, r1, #2
 800838c:	2201      	movgt	r2, #1
 800838e:	4413      	add	r3, r2
 8008390:	e7e0      	b.n	8008354 <_printf_float+0x1a4>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	055a      	lsls	r2, r3, #21
 8008396:	d407      	bmi.n	80083a8 <_printf_float+0x1f8>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	4642      	mov	r2, r8
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	d12c      	bne.n	8008400 <_printf_float+0x250>
 80083a6:	e764      	b.n	8008272 <_printf_float+0xc2>
 80083a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083ac:	f240 80e0 	bls.w	8008570 <_printf_float+0x3c0>
 80083b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f7f8 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d034      	beq.n	800842a <_printf_float+0x27a>
 80083c0:	4a37      	ldr	r2, [pc, #220]	; (80084a0 <_printf_float+0x2f0>)
 80083c2:	2301      	movs	r3, #1
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f af51 	beq.w	8008272 <_printf_float+0xc2>
 80083d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d4:	429a      	cmp	r2, r3
 80083d6:	db02      	blt.n	80083de <_printf_float+0x22e>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	07d8      	lsls	r0, r3, #31
 80083dc:	d510      	bpl.n	8008400 <_printf_float+0x250>
 80083de:	ee18 3a10 	vmov	r3, s16
 80083e2:	4652      	mov	r2, sl
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f af41 	beq.w	8008272 <_printf_float+0xc2>
 80083f0:	f04f 0800 	mov.w	r8, #0
 80083f4:	f104 091a 	add.w	r9, r4, #26
 80083f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4543      	cmp	r3, r8
 80083fe:	dc09      	bgt.n	8008414 <_printf_float+0x264>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	079b      	lsls	r3, r3, #30
 8008404:	f100 8105 	bmi.w	8008612 <_printf_float+0x462>
 8008408:	68e0      	ldr	r0, [r4, #12]
 800840a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840c:	4298      	cmp	r0, r3
 800840e:	bfb8      	it	lt
 8008410:	4618      	movlt	r0, r3
 8008412:	e730      	b.n	8008276 <_printf_float+0xc6>
 8008414:	2301      	movs	r3, #1
 8008416:	464a      	mov	r2, r9
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af27 	beq.w	8008272 <_printf_float+0xc2>
 8008424:	f108 0801 	add.w	r8, r8, #1
 8008428:	e7e6      	b.n	80083f8 <_printf_float+0x248>
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc39      	bgt.n	80084a4 <_printf_float+0x2f4>
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <_printf_float+0x2f0>)
 8008432:	2301      	movs	r3, #1
 8008434:	4631      	mov	r1, r6
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	f43f af19 	beq.w	8008272 <_printf_float+0xc2>
 8008440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008444:	4313      	orrs	r3, r2
 8008446:	d102      	bne.n	800844e <_printf_float+0x29e>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	07d9      	lsls	r1, r3, #31
 800844c:	d5d8      	bpl.n	8008400 <_printf_float+0x250>
 800844e:	ee18 3a10 	vmov	r3, s16
 8008452:	4652      	mov	r2, sl
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f af09 	beq.w	8008272 <_printf_float+0xc2>
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	f104 0a1a 	add.w	sl, r4, #26
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	425b      	negs	r3, r3
 800846c:	454b      	cmp	r3, r9
 800846e:	dc01      	bgt.n	8008474 <_printf_float+0x2c4>
 8008470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008472:	e792      	b.n	800839a <_printf_float+0x1ea>
 8008474:	2301      	movs	r3, #1
 8008476:	4652      	mov	r2, sl
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f aef7 	beq.w	8008272 <_printf_float+0xc2>
 8008484:	f109 0901 	add.w	r9, r9, #1
 8008488:	e7ee      	b.n	8008468 <_printf_float+0x2b8>
 800848a:	bf00      	nop
 800848c:	7fefffff 	.word	0x7fefffff
 8008490:	0800af1c 	.word	0x0800af1c
 8008494:	0800af20 	.word	0x0800af20
 8008498:	0800af28 	.word	0x0800af28
 800849c:	0800af24 	.word	0x0800af24
 80084a0:	0800af2c 	.word	0x0800af2c
 80084a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084a8:	429a      	cmp	r2, r3
 80084aa:	bfa8      	it	ge
 80084ac:	461a      	movge	r2, r3
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	4691      	mov	r9, r2
 80084b2:	dc37      	bgt.n	8008524 <_printf_float+0x374>
 80084b4:	f04f 0b00 	mov.w	fp, #0
 80084b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084bc:	f104 021a 	add.w	r2, r4, #26
 80084c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	eba3 0309 	sub.w	r3, r3, r9
 80084c8:	455b      	cmp	r3, fp
 80084ca:	dc33      	bgt.n	8008534 <_printf_float+0x384>
 80084cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d0:	429a      	cmp	r2, r3
 80084d2:	db3b      	blt.n	800854c <_printf_float+0x39c>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	07da      	lsls	r2, r3, #31
 80084d8:	d438      	bmi.n	800854c <_printf_float+0x39c>
 80084da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	eba2 0901 	sub.w	r9, r2, r1
 80084e6:	4599      	cmp	r9, r3
 80084e8:	bfa8      	it	ge
 80084ea:	4699      	movge	r9, r3
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	dc35      	bgt.n	800855e <_printf_float+0x3ae>
 80084f2:	f04f 0800 	mov.w	r8, #0
 80084f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084fa:	f104 0a1a 	add.w	sl, r4, #26
 80084fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	eba3 0309 	sub.w	r3, r3, r9
 8008508:	4543      	cmp	r3, r8
 800850a:	f77f af79 	ble.w	8008400 <_printf_float+0x250>
 800850e:	2301      	movs	r3, #1
 8008510:	4652      	mov	r2, sl
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	f43f aeaa 	beq.w	8008272 <_printf_float+0xc2>
 800851e:	f108 0801 	add.w	r8, r8, #1
 8008522:	e7ec      	b.n	80084fe <_printf_float+0x34e>
 8008524:	4613      	mov	r3, r2
 8008526:	4631      	mov	r1, r6
 8008528:	4642      	mov	r2, r8
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d1c0      	bne.n	80084b4 <_printf_float+0x304>
 8008532:	e69e      	b.n	8008272 <_printf_float+0xc2>
 8008534:	2301      	movs	r3, #1
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	9205      	str	r2, [sp, #20]
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f ae97 	beq.w	8008272 <_printf_float+0xc2>
 8008544:	9a05      	ldr	r2, [sp, #20]
 8008546:	f10b 0b01 	add.w	fp, fp, #1
 800854a:	e7b9      	b.n	80084c0 <_printf_float+0x310>
 800854c:	ee18 3a10 	vmov	r3, s16
 8008550:	4652      	mov	r2, sl
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d1be      	bne.n	80084da <_printf_float+0x32a>
 800855c:	e689      	b.n	8008272 <_printf_float+0xc2>
 800855e:	9a05      	ldr	r2, [sp, #20]
 8008560:	464b      	mov	r3, r9
 8008562:	4442      	add	r2, r8
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	d1c1      	bne.n	80084f2 <_printf_float+0x342>
 800856e:	e680      	b.n	8008272 <_printf_float+0xc2>
 8008570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008572:	2a01      	cmp	r2, #1
 8008574:	dc01      	bgt.n	800857a <_printf_float+0x3ca>
 8008576:	07db      	lsls	r3, r3, #31
 8008578:	d538      	bpl.n	80085ec <_printf_float+0x43c>
 800857a:	2301      	movs	r3, #1
 800857c:	4642      	mov	r2, r8
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f ae74 	beq.w	8008272 <_printf_float+0xc2>
 800858a:	ee18 3a10 	vmov	r3, s16
 800858e:	4652      	mov	r2, sl
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	47b8      	blx	r7
 8008596:	3001      	adds	r0, #1
 8008598:	f43f ae6b 	beq.w	8008272 <_printf_float+0xc2>
 800859c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085a0:	2200      	movs	r2, #0
 80085a2:	2300      	movs	r3, #0
 80085a4:	f7f8 fab0 	bl	8000b08 <__aeabi_dcmpeq>
 80085a8:	b9d8      	cbnz	r0, 80085e2 <_printf_float+0x432>
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	f108 0201 	add.w	r2, r8, #1
 80085b0:	3b01      	subs	r3, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	d10e      	bne.n	80085da <_printf_float+0x42a>
 80085bc:	e659      	b.n	8008272 <_printf_float+0xc2>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae52 	beq.w	8008272 <_printf_float+0xc2>
 80085ce:	f108 0801 	add.w	r8, r8, #1
 80085d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d4:	3b01      	subs	r3, #1
 80085d6:	4543      	cmp	r3, r8
 80085d8:	dcf1      	bgt.n	80085be <_printf_float+0x40e>
 80085da:	464b      	mov	r3, r9
 80085dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085e0:	e6dc      	b.n	800839c <_printf_float+0x1ec>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	f104 0a1a 	add.w	sl, r4, #26
 80085ea:	e7f2      	b.n	80085d2 <_printf_float+0x422>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4642      	mov	r2, r8
 80085f0:	e7df      	b.n	80085b2 <_printf_float+0x402>
 80085f2:	2301      	movs	r3, #1
 80085f4:	464a      	mov	r2, r9
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae38 	beq.w	8008272 <_printf_float+0xc2>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	4543      	cmp	r3, r8
 800860e:	dcf0      	bgt.n	80085f2 <_printf_float+0x442>
 8008610:	e6fa      	b.n	8008408 <_printf_float+0x258>
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	f104 0919 	add.w	r9, r4, #25
 800861a:	e7f4      	b.n	8008606 <_printf_float+0x456>

0800861c <_printf_common>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	4616      	mov	r6, r2
 8008622:	4699      	mov	r9, r3
 8008624:	688a      	ldr	r2, [r1, #8]
 8008626:	690b      	ldr	r3, [r1, #16]
 8008628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800862c:	4293      	cmp	r3, r2
 800862e:	bfb8      	it	lt
 8008630:	4613      	movlt	r3, r2
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008638:	4607      	mov	r7, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b10a      	cbz	r2, 8008642 <_printf_common+0x26>
 800863e:	3301      	adds	r3, #1
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	0699      	lsls	r1, r3, #26
 8008646:	bf42      	ittt	mi
 8008648:	6833      	ldrmi	r3, [r6, #0]
 800864a:	3302      	addmi	r3, #2
 800864c:	6033      	strmi	r3, [r6, #0]
 800864e:	6825      	ldr	r5, [r4, #0]
 8008650:	f015 0506 	ands.w	r5, r5, #6
 8008654:	d106      	bne.n	8008664 <_printf_common+0x48>
 8008656:	f104 0a19 	add.w	sl, r4, #25
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	6832      	ldr	r2, [r6, #0]
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc26      	bgt.n	80086b2 <_printf_common+0x96>
 8008664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008668:	1e13      	subs	r3, r2, #0
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	bf18      	it	ne
 800866e:	2301      	movne	r3, #1
 8008670:	0692      	lsls	r2, r2, #26
 8008672:	d42b      	bmi.n	80086cc <_printf_common+0xb0>
 8008674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008678:	4649      	mov	r1, r9
 800867a:	4638      	mov	r0, r7
 800867c:	47c0      	blx	r8
 800867e:	3001      	adds	r0, #1
 8008680:	d01e      	beq.n	80086c0 <_printf_common+0xa4>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	68e5      	ldr	r5, [r4, #12]
 8008686:	6832      	ldr	r2, [r6, #0]
 8008688:	f003 0306 	and.w	r3, r3, #6
 800868c:	2b04      	cmp	r3, #4
 800868e:	bf08      	it	eq
 8008690:	1aad      	subeq	r5, r5, r2
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	6922      	ldr	r2, [r4, #16]
 8008696:	bf0c      	ite	eq
 8008698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800869c:	2500      	movne	r5, #0
 800869e:	4293      	cmp	r3, r2
 80086a0:	bfc4      	itt	gt
 80086a2:	1a9b      	subgt	r3, r3, r2
 80086a4:	18ed      	addgt	r5, r5, r3
 80086a6:	2600      	movs	r6, #0
 80086a8:	341a      	adds	r4, #26
 80086aa:	42b5      	cmp	r5, r6
 80086ac:	d11a      	bne.n	80086e4 <_printf_common+0xc8>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e008      	b.n	80086c4 <_printf_common+0xa8>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4652      	mov	r2, sl
 80086b6:	4649      	mov	r1, r9
 80086b8:	4638      	mov	r0, r7
 80086ba:	47c0      	blx	r8
 80086bc:	3001      	adds	r0, #1
 80086be:	d103      	bne.n	80086c8 <_printf_common+0xac>
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7c6      	b.n	800865a <_printf_common+0x3e>
 80086cc:	18e1      	adds	r1, r4, r3
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	2030      	movs	r0, #48	; 0x30
 80086d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086d6:	4422      	add	r2, r4
 80086d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086e0:	3302      	adds	r3, #2
 80086e2:	e7c7      	b.n	8008674 <_printf_common+0x58>
 80086e4:	2301      	movs	r3, #1
 80086e6:	4622      	mov	r2, r4
 80086e8:	4649      	mov	r1, r9
 80086ea:	4638      	mov	r0, r7
 80086ec:	47c0      	blx	r8
 80086ee:	3001      	adds	r0, #1
 80086f0:	d0e6      	beq.n	80086c0 <_printf_common+0xa4>
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7d9      	b.n	80086aa <_printf_common+0x8e>
	...

080086f8 <_printf_i>:
 80086f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	4691      	mov	r9, r2
 8008700:	7e27      	ldrb	r7, [r4, #24]
 8008702:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008704:	2f78      	cmp	r7, #120	; 0x78
 8008706:	4680      	mov	r8, r0
 8008708:	469a      	mov	sl, r3
 800870a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800870e:	d807      	bhi.n	8008720 <_printf_i+0x28>
 8008710:	2f62      	cmp	r7, #98	; 0x62
 8008712:	d80a      	bhi.n	800872a <_printf_i+0x32>
 8008714:	2f00      	cmp	r7, #0
 8008716:	f000 80d8 	beq.w	80088ca <_printf_i+0x1d2>
 800871a:	2f58      	cmp	r7, #88	; 0x58
 800871c:	f000 80a3 	beq.w	8008866 <_printf_i+0x16e>
 8008720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008728:	e03a      	b.n	80087a0 <_printf_i+0xa8>
 800872a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800872e:	2b15      	cmp	r3, #21
 8008730:	d8f6      	bhi.n	8008720 <_printf_i+0x28>
 8008732:	a001      	add	r0, pc, #4	; (adr r0, 8008738 <_printf_i+0x40>)
 8008734:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008738:	08008791 	.word	0x08008791
 800873c:	080087a5 	.word	0x080087a5
 8008740:	08008721 	.word	0x08008721
 8008744:	08008721 	.word	0x08008721
 8008748:	08008721 	.word	0x08008721
 800874c:	08008721 	.word	0x08008721
 8008750:	080087a5 	.word	0x080087a5
 8008754:	08008721 	.word	0x08008721
 8008758:	08008721 	.word	0x08008721
 800875c:	08008721 	.word	0x08008721
 8008760:	08008721 	.word	0x08008721
 8008764:	080088b1 	.word	0x080088b1
 8008768:	080087d5 	.word	0x080087d5
 800876c:	08008893 	.word	0x08008893
 8008770:	08008721 	.word	0x08008721
 8008774:	08008721 	.word	0x08008721
 8008778:	080088d3 	.word	0x080088d3
 800877c:	08008721 	.word	0x08008721
 8008780:	080087d5 	.word	0x080087d5
 8008784:	08008721 	.word	0x08008721
 8008788:	08008721 	.word	0x08008721
 800878c:	0800889b 	.word	0x0800889b
 8008790:	680b      	ldr	r3, [r1, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	600a      	str	r2, [r1, #0]
 8008798:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800879c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087a0:	2301      	movs	r3, #1
 80087a2:	e0a3      	b.n	80088ec <_printf_i+0x1f4>
 80087a4:	6825      	ldr	r5, [r4, #0]
 80087a6:	6808      	ldr	r0, [r1, #0]
 80087a8:	062e      	lsls	r6, r5, #24
 80087aa:	f100 0304 	add.w	r3, r0, #4
 80087ae:	d50a      	bpl.n	80087c6 <_printf_i+0xce>
 80087b0:	6805      	ldr	r5, [r0, #0]
 80087b2:	600b      	str	r3, [r1, #0]
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	da03      	bge.n	80087c0 <_printf_i+0xc8>
 80087b8:	232d      	movs	r3, #45	; 0x2d
 80087ba:	426d      	negs	r5, r5
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c0:	485e      	ldr	r0, [pc, #376]	; (800893c <_printf_i+0x244>)
 80087c2:	230a      	movs	r3, #10
 80087c4:	e019      	b.n	80087fa <_printf_i+0x102>
 80087c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087ca:	6805      	ldr	r5, [r0, #0]
 80087cc:	600b      	str	r3, [r1, #0]
 80087ce:	bf18      	it	ne
 80087d0:	b22d      	sxthne	r5, r5
 80087d2:	e7ef      	b.n	80087b4 <_printf_i+0xbc>
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	6825      	ldr	r5, [r4, #0]
 80087d8:	1d18      	adds	r0, r3, #4
 80087da:	6008      	str	r0, [r1, #0]
 80087dc:	0628      	lsls	r0, r5, #24
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0xec>
 80087e0:	681d      	ldr	r5, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0xf2>
 80087e4:	0669      	lsls	r1, r5, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0xe8>
 80087e8:	881d      	ldrh	r5, [r3, #0]
 80087ea:	4854      	ldr	r0, [pc, #336]	; (800893c <_printf_i+0x244>)
 80087ec:	2f6f      	cmp	r7, #111	; 0x6f
 80087ee:	bf0c      	ite	eq
 80087f0:	2308      	moveq	r3, #8
 80087f2:	230a      	movne	r3, #10
 80087f4:	2100      	movs	r1, #0
 80087f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087fa:	6866      	ldr	r6, [r4, #4]
 80087fc:	60a6      	str	r6, [r4, #8]
 80087fe:	2e00      	cmp	r6, #0
 8008800:	bfa2      	ittt	ge
 8008802:	6821      	ldrge	r1, [r4, #0]
 8008804:	f021 0104 	bicge.w	r1, r1, #4
 8008808:	6021      	strge	r1, [r4, #0]
 800880a:	b90d      	cbnz	r5, 8008810 <_printf_i+0x118>
 800880c:	2e00      	cmp	r6, #0
 800880e:	d04d      	beq.n	80088ac <_printf_i+0x1b4>
 8008810:	4616      	mov	r6, r2
 8008812:	fbb5 f1f3 	udiv	r1, r5, r3
 8008816:	fb03 5711 	mls	r7, r3, r1, r5
 800881a:	5dc7      	ldrb	r7, [r0, r7]
 800881c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008820:	462f      	mov	r7, r5
 8008822:	42bb      	cmp	r3, r7
 8008824:	460d      	mov	r5, r1
 8008826:	d9f4      	bls.n	8008812 <_printf_i+0x11a>
 8008828:	2b08      	cmp	r3, #8
 800882a:	d10b      	bne.n	8008844 <_printf_i+0x14c>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	07df      	lsls	r7, r3, #31
 8008830:	d508      	bpl.n	8008844 <_printf_i+0x14c>
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	4299      	cmp	r1, r3
 8008838:	bfde      	ittt	le
 800883a:	2330      	movle	r3, #48	; 0x30
 800883c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008840:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008844:	1b92      	subs	r2, r2, r6
 8008846:	6122      	str	r2, [r4, #16]
 8008848:	f8cd a000 	str.w	sl, [sp]
 800884c:	464b      	mov	r3, r9
 800884e:	aa03      	add	r2, sp, #12
 8008850:	4621      	mov	r1, r4
 8008852:	4640      	mov	r0, r8
 8008854:	f7ff fee2 	bl	800861c <_printf_common>
 8008858:	3001      	adds	r0, #1
 800885a:	d14c      	bne.n	80088f6 <_printf_i+0x1fe>
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	b004      	add	sp, #16
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	4835      	ldr	r0, [pc, #212]	; (800893c <_printf_i+0x244>)
 8008868:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	680e      	ldr	r6, [r1, #0]
 8008870:	061f      	lsls	r7, r3, #24
 8008872:	f856 5b04 	ldr.w	r5, [r6], #4
 8008876:	600e      	str	r6, [r1, #0]
 8008878:	d514      	bpl.n	80088a4 <_printf_i+0x1ac>
 800887a:	07d9      	lsls	r1, r3, #31
 800887c:	bf44      	itt	mi
 800887e:	f043 0320 	orrmi.w	r3, r3, #32
 8008882:	6023      	strmi	r3, [r4, #0]
 8008884:	b91d      	cbnz	r5, 800888e <_printf_i+0x196>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	f023 0320 	bic.w	r3, r3, #32
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	2310      	movs	r3, #16
 8008890:	e7b0      	b.n	80087f4 <_printf_i+0xfc>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f043 0320 	orr.w	r3, r3, #32
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	2378      	movs	r3, #120	; 0x78
 800889c:	4828      	ldr	r0, [pc, #160]	; (8008940 <_printf_i+0x248>)
 800889e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088a2:	e7e3      	b.n	800886c <_printf_i+0x174>
 80088a4:	065e      	lsls	r6, r3, #25
 80088a6:	bf48      	it	mi
 80088a8:	b2ad      	uxthmi	r5, r5
 80088aa:	e7e6      	b.n	800887a <_printf_i+0x182>
 80088ac:	4616      	mov	r6, r2
 80088ae:	e7bb      	b.n	8008828 <_printf_i+0x130>
 80088b0:	680b      	ldr	r3, [r1, #0]
 80088b2:	6826      	ldr	r6, [r4, #0]
 80088b4:	6960      	ldr	r0, [r4, #20]
 80088b6:	1d1d      	adds	r5, r3, #4
 80088b8:	600d      	str	r5, [r1, #0]
 80088ba:	0635      	lsls	r5, r6, #24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0x1cc>
 80088c0:	6018      	str	r0, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0x1d2>
 80088c4:	0671      	lsls	r1, r6, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0x1c8>
 80088c8:	8018      	strh	r0, [r3, #0]
 80088ca:	2300      	movs	r3, #0
 80088cc:	6123      	str	r3, [r4, #16]
 80088ce:	4616      	mov	r6, r2
 80088d0:	e7ba      	b.n	8008848 <_printf_i+0x150>
 80088d2:	680b      	ldr	r3, [r1, #0]
 80088d4:	1d1a      	adds	r2, r3, #4
 80088d6:	600a      	str	r2, [r1, #0]
 80088d8:	681e      	ldr	r6, [r3, #0]
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	2100      	movs	r1, #0
 80088de:	4630      	mov	r0, r6
 80088e0:	f7f7 fc9e 	bl	8000220 <memchr>
 80088e4:	b108      	cbz	r0, 80088ea <_printf_i+0x1f2>
 80088e6:	1b80      	subs	r0, r0, r6
 80088e8:	6060      	str	r0, [r4, #4]
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	2300      	movs	r3, #0
 80088f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f4:	e7a8      	b.n	8008848 <_printf_i+0x150>
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	4632      	mov	r2, r6
 80088fa:	4649      	mov	r1, r9
 80088fc:	4640      	mov	r0, r8
 80088fe:	47d0      	blx	sl
 8008900:	3001      	adds	r0, #1
 8008902:	d0ab      	beq.n	800885c <_printf_i+0x164>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	079b      	lsls	r3, r3, #30
 8008908:	d413      	bmi.n	8008932 <_printf_i+0x23a>
 800890a:	68e0      	ldr	r0, [r4, #12]
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	4298      	cmp	r0, r3
 8008910:	bfb8      	it	lt
 8008912:	4618      	movlt	r0, r3
 8008914:	e7a4      	b.n	8008860 <_printf_i+0x168>
 8008916:	2301      	movs	r3, #1
 8008918:	4632      	mov	r2, r6
 800891a:	4649      	mov	r1, r9
 800891c:	4640      	mov	r0, r8
 800891e:	47d0      	blx	sl
 8008920:	3001      	adds	r0, #1
 8008922:	d09b      	beq.n	800885c <_printf_i+0x164>
 8008924:	3501      	adds	r5, #1
 8008926:	68e3      	ldr	r3, [r4, #12]
 8008928:	9903      	ldr	r1, [sp, #12]
 800892a:	1a5b      	subs	r3, r3, r1
 800892c:	42ab      	cmp	r3, r5
 800892e:	dcf2      	bgt.n	8008916 <_printf_i+0x21e>
 8008930:	e7eb      	b.n	800890a <_printf_i+0x212>
 8008932:	2500      	movs	r5, #0
 8008934:	f104 0619 	add.w	r6, r4, #25
 8008938:	e7f5      	b.n	8008926 <_printf_i+0x22e>
 800893a:	bf00      	nop
 800893c:	0800af2e 	.word	0x0800af2e
 8008940:	0800af3f 	.word	0x0800af3f

08008944 <siprintf>:
 8008944:	b40e      	push	{r1, r2, r3}
 8008946:	b500      	push	{lr}
 8008948:	b09c      	sub	sp, #112	; 0x70
 800894a:	ab1d      	add	r3, sp, #116	; 0x74
 800894c:	9002      	str	r0, [sp, #8]
 800894e:	9006      	str	r0, [sp, #24]
 8008950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008954:	4809      	ldr	r0, [pc, #36]	; (800897c <siprintf+0x38>)
 8008956:	9107      	str	r1, [sp, #28]
 8008958:	9104      	str	r1, [sp, #16]
 800895a:	4909      	ldr	r1, [pc, #36]	; (8008980 <siprintf+0x3c>)
 800895c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008960:	9105      	str	r1, [sp, #20]
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	a902      	add	r1, sp, #8
 8008968:	f001 fbc0 	bl	800a0ec <_svfiprintf_r>
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	b01c      	add	sp, #112	; 0x70
 8008974:	f85d eb04 	ldr.w	lr, [sp], #4
 8008978:	b003      	add	sp, #12
 800897a:	4770      	bx	lr
 800897c:	20000010 	.word	0x20000010
 8008980:	ffff0208 	.word	0xffff0208

08008984 <_strtol_l.isra.0>:
 8008984:	2b01      	cmp	r3, #1
 8008986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898a:	d001      	beq.n	8008990 <_strtol_l.isra.0+0xc>
 800898c:	2b24      	cmp	r3, #36	; 0x24
 800898e:	d906      	bls.n	800899e <_strtol_l.isra.0+0x1a>
 8008990:	f7ff fb3c 	bl	800800c <__errno>
 8008994:	2316      	movs	r3, #22
 8008996:	6003      	str	r3, [r0, #0]
 8008998:	2000      	movs	r0, #0
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	4f3a      	ldr	r7, [pc, #232]	; (8008a88 <_strtol_l.isra.0+0x104>)
 80089a0:	468e      	mov	lr, r1
 80089a2:	4676      	mov	r6, lr
 80089a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80089a8:	5de5      	ldrb	r5, [r4, r7]
 80089aa:	f015 0508 	ands.w	r5, r5, #8
 80089ae:	d1f8      	bne.n	80089a2 <_strtol_l.isra.0+0x1e>
 80089b0:	2c2d      	cmp	r4, #45	; 0x2d
 80089b2:	d134      	bne.n	8008a1e <_strtol_l.isra.0+0x9a>
 80089b4:	f89e 4000 	ldrb.w	r4, [lr]
 80089b8:	f04f 0801 	mov.w	r8, #1
 80089bc:	f106 0e02 	add.w	lr, r6, #2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d05c      	beq.n	8008a7e <_strtol_l.isra.0+0xfa>
 80089c4:	2b10      	cmp	r3, #16
 80089c6:	d10c      	bne.n	80089e2 <_strtol_l.isra.0+0x5e>
 80089c8:	2c30      	cmp	r4, #48	; 0x30
 80089ca:	d10a      	bne.n	80089e2 <_strtol_l.isra.0+0x5e>
 80089cc:	f89e 4000 	ldrb.w	r4, [lr]
 80089d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089d4:	2c58      	cmp	r4, #88	; 0x58
 80089d6:	d14d      	bne.n	8008a74 <_strtol_l.isra.0+0xf0>
 80089d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80089dc:	2310      	movs	r3, #16
 80089de:	f10e 0e02 	add.w	lr, lr, #2
 80089e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80089e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80089ea:	2600      	movs	r6, #0
 80089ec:	fbbc f9f3 	udiv	r9, ip, r3
 80089f0:	4635      	mov	r5, r6
 80089f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80089f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80089fa:	2f09      	cmp	r7, #9
 80089fc:	d818      	bhi.n	8008a30 <_strtol_l.isra.0+0xac>
 80089fe:	463c      	mov	r4, r7
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	dd24      	ble.n	8008a4e <_strtol_l.isra.0+0xca>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	db1f      	blt.n	8008a48 <_strtol_l.isra.0+0xc4>
 8008a08:	45a9      	cmp	r9, r5
 8008a0a:	d31d      	bcc.n	8008a48 <_strtol_l.isra.0+0xc4>
 8008a0c:	d101      	bne.n	8008a12 <_strtol_l.isra.0+0x8e>
 8008a0e:	45a2      	cmp	sl, r4
 8008a10:	db1a      	blt.n	8008a48 <_strtol_l.isra.0+0xc4>
 8008a12:	fb05 4503 	mla	r5, r5, r3, r4
 8008a16:	2601      	movs	r6, #1
 8008a18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008a1c:	e7eb      	b.n	80089f6 <_strtol_l.isra.0+0x72>
 8008a1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008a20:	bf08      	it	eq
 8008a22:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008a26:	46a8      	mov	r8, r5
 8008a28:	bf08      	it	eq
 8008a2a:	f106 0e02 	addeq.w	lr, r6, #2
 8008a2e:	e7c7      	b.n	80089c0 <_strtol_l.isra.0+0x3c>
 8008a30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008a34:	2f19      	cmp	r7, #25
 8008a36:	d801      	bhi.n	8008a3c <_strtol_l.isra.0+0xb8>
 8008a38:	3c37      	subs	r4, #55	; 0x37
 8008a3a:	e7e1      	b.n	8008a00 <_strtol_l.isra.0+0x7c>
 8008a3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008a40:	2f19      	cmp	r7, #25
 8008a42:	d804      	bhi.n	8008a4e <_strtol_l.isra.0+0xca>
 8008a44:	3c57      	subs	r4, #87	; 0x57
 8008a46:	e7db      	b.n	8008a00 <_strtol_l.isra.0+0x7c>
 8008a48:	f04f 36ff 	mov.w	r6, #4294967295
 8008a4c:	e7e4      	b.n	8008a18 <_strtol_l.isra.0+0x94>
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	da05      	bge.n	8008a5e <_strtol_l.isra.0+0xda>
 8008a52:	2322      	movs	r3, #34	; 0x22
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	4665      	mov	r5, ip
 8008a58:	b942      	cbnz	r2, 8008a6c <_strtol_l.isra.0+0xe8>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	e79d      	b.n	800899a <_strtol_l.isra.0+0x16>
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d000      	beq.n	8008a66 <_strtol_l.isra.0+0xe2>
 8008a64:	426d      	negs	r5, r5
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	d0f7      	beq.n	8008a5a <_strtol_l.isra.0+0xd6>
 8008a6a:	b10e      	cbz	r6, 8008a70 <_strtol_l.isra.0+0xec>
 8008a6c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008a70:	6011      	str	r1, [r2, #0]
 8008a72:	e7f2      	b.n	8008a5a <_strtol_l.isra.0+0xd6>
 8008a74:	2430      	movs	r4, #48	; 0x30
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1b3      	bne.n	80089e2 <_strtol_l.isra.0+0x5e>
 8008a7a:	2308      	movs	r3, #8
 8008a7c:	e7b1      	b.n	80089e2 <_strtol_l.isra.0+0x5e>
 8008a7e:	2c30      	cmp	r4, #48	; 0x30
 8008a80:	d0a4      	beq.n	80089cc <_strtol_l.isra.0+0x48>
 8008a82:	230a      	movs	r3, #10
 8008a84:	e7ad      	b.n	80089e2 <_strtol_l.isra.0+0x5e>
 8008a86:	bf00      	nop
 8008a88:	0800af51 	.word	0x0800af51

08008a8c <strtol>:
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	460a      	mov	r2, r1
 8008a90:	4601      	mov	r1, r0
 8008a92:	4802      	ldr	r0, [pc, #8]	; (8008a9c <strtol+0x10>)
 8008a94:	6800      	ldr	r0, [r0, #0]
 8008a96:	f7ff bf75 	b.w	8008984 <_strtol_l.isra.0>
 8008a9a:	bf00      	nop
 8008a9c:	20000010 	.word	0x20000010

08008aa0 <quorem>:
 8008aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	6903      	ldr	r3, [r0, #16]
 8008aa6:	690c      	ldr	r4, [r1, #16]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	4607      	mov	r7, r0
 8008aac:	f2c0 8081 	blt.w	8008bb2 <quorem+0x112>
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	f101 0814 	add.w	r8, r1, #20
 8008ab6:	f100 0514 	add.w	r5, r0, #20
 8008aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ad8:	d331      	bcc.n	8008b3e <quorem+0x9e>
 8008ada:	f04f 0e00 	mov.w	lr, #0
 8008ade:	4640      	mov	r0, r8
 8008ae0:	46ac      	mov	ip, r5
 8008ae2:	46f2      	mov	sl, lr
 8008ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ae8:	b293      	uxth	r3, r2
 8008aea:	fb06 e303 	mla	r3, r6, r3, lr
 8008aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	ebaa 0303 	sub.w	r3, sl, r3
 8008af8:	0c12      	lsrs	r2, r2, #16
 8008afa:	f8dc a000 	ldr.w	sl, [ip]
 8008afe:	fb06 e202 	mla	r2, r6, r2, lr
 8008b02:	fa13 f38a 	uxtah	r3, r3, sl
 8008b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b0a:	fa1f fa82 	uxth.w	sl, r2
 8008b0e:	f8dc 2000 	ldr.w	r2, [ip]
 8008b12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b20:	4581      	cmp	r9, r0
 8008b22:	f84c 3b04 	str.w	r3, [ip], #4
 8008b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b2a:	d2db      	bcs.n	8008ae4 <quorem+0x44>
 8008b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b30:	b92b      	cbnz	r3, 8008b3e <quorem+0x9e>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	429d      	cmp	r5, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	d32e      	bcc.n	8008b9a <quorem+0xfa>
 8008b3c:	613c      	str	r4, [r7, #16]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f001 f8be 	bl	8009cc0 <__mcmp>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	db24      	blt.n	8008b92 <quorem+0xf2>
 8008b48:	3601      	adds	r6, #1
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f04f 0c00 	mov.w	ip, #0
 8008b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b54:	f8d0 e000 	ldr.w	lr, [r0]
 8008b58:	b293      	uxth	r3, r2
 8008b5a:	ebac 0303 	sub.w	r3, ip, r3
 8008b5e:	0c12      	lsrs	r2, r2, #16
 8008b60:	fa13 f38e 	uxtah	r3, r3, lr
 8008b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b72:	45c1      	cmp	r9, r8
 8008b74:	f840 3b04 	str.w	r3, [r0], #4
 8008b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b7c:	d2e8      	bcs.n	8008b50 <quorem+0xb0>
 8008b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b86:	b922      	cbnz	r2, 8008b92 <quorem+0xf2>
 8008b88:	3b04      	subs	r3, #4
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	d30a      	bcc.n	8008ba6 <quorem+0x106>
 8008b90:	613c      	str	r4, [r7, #16]
 8008b92:	4630      	mov	r0, r6
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d1cc      	bne.n	8008b3c <quorem+0x9c>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	e7c7      	b.n	8008b36 <quorem+0x96>
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d1f0      	bne.n	8008b90 <quorem+0xf0>
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	e7eb      	b.n	8008b8a <quorem+0xea>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e7ee      	b.n	8008b94 <quorem+0xf4>
	...

08008bb8 <_dtoa_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b02 	vpush	{d8}
 8008bc0:	ec57 6b10 	vmov	r6, r7, d0
 8008bc4:	b095      	sub	sp, #84	; 0x54
 8008bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bcc:	9105      	str	r1, [sp, #20]
 8008bce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd8:	b975      	cbnz	r5, 8008bf8 <_dtoa_r+0x40>
 8008bda:	2010      	movs	r0, #16
 8008bdc:	f000 fddc 	bl	8009798 <malloc>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6260      	str	r0, [r4, #36]	; 0x24
 8008be4:	b920      	cbnz	r0, 8008bf0 <_dtoa_r+0x38>
 8008be6:	4bb2      	ldr	r3, [pc, #712]	; (8008eb0 <_dtoa_r+0x2f8>)
 8008be8:	21ea      	movs	r1, #234	; 0xea
 8008bea:	48b2      	ldr	r0, [pc, #712]	; (8008eb4 <_dtoa_r+0x2fc>)
 8008bec:	f001 fb8e 	bl	800a30c <__assert_func>
 8008bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bf4:	6005      	str	r5, [r0, #0]
 8008bf6:	60c5      	str	r5, [r0, #12]
 8008bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bfa:	6819      	ldr	r1, [r3, #0]
 8008bfc:	b151      	cbz	r1, 8008c14 <_dtoa_r+0x5c>
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	604a      	str	r2, [r1, #4]
 8008c02:	2301      	movs	r3, #1
 8008c04:	4093      	lsls	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fe1b 	bl	8009844 <_Bfree>
 8008c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	1e3b      	subs	r3, r7, #0
 8008c16:	bfb9      	ittee	lt
 8008c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c1c:	9303      	strlt	r3, [sp, #12]
 8008c1e:	2300      	movge	r3, #0
 8008c20:	f8c8 3000 	strge.w	r3, [r8]
 8008c24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008c28:	4ba3      	ldr	r3, [pc, #652]	; (8008eb8 <_dtoa_r+0x300>)
 8008c2a:	bfbc      	itt	lt
 8008c2c:	2201      	movlt	r2, #1
 8008c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8008c32:	ea33 0309 	bics.w	r3, r3, r9
 8008c36:	d11b      	bne.n	8008c70 <_dtoa_r+0xb8>
 8008c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c44:	4333      	orrs	r3, r6
 8008c46:	f000 857a 	beq.w	800973e <_dtoa_r+0xb86>
 8008c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c4c:	b963      	cbnz	r3, 8008c68 <_dtoa_r+0xb0>
 8008c4e:	4b9b      	ldr	r3, [pc, #620]	; (8008ebc <_dtoa_r+0x304>)
 8008c50:	e024      	b.n	8008c9c <_dtoa_r+0xe4>
 8008c52:	4b9b      	ldr	r3, [pc, #620]	; (8008ec0 <_dtoa_r+0x308>)
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	9800      	ldr	r0, [sp, #0]
 8008c5e:	b015      	add	sp, #84	; 0x54
 8008c60:	ecbd 8b02 	vpop	{d8}
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	4b94      	ldr	r3, [pc, #592]	; (8008ebc <_dtoa_r+0x304>)
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	3303      	adds	r3, #3
 8008c6e:	e7f3      	b.n	8008c58 <_dtoa_r+0xa0>
 8008c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c74:	2200      	movs	r2, #0
 8008c76:	ec51 0b17 	vmov	r0, r1, d7
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c80:	f7f7 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8008c84:	4680      	mov	r8, r0
 8008c86:	b158      	cbz	r0, 8008ca0 <_dtoa_r+0xe8>
 8008c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8551 	beq.w	8009738 <_dtoa_r+0xb80>
 8008c96:	488b      	ldr	r0, [pc, #556]	; (8008ec4 <_dtoa_r+0x30c>)
 8008c98:	6018      	str	r0, [r3, #0]
 8008c9a:	1e43      	subs	r3, r0, #1
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	e7dd      	b.n	8008c5c <_dtoa_r+0xa4>
 8008ca0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ca4:	aa12      	add	r2, sp, #72	; 0x48
 8008ca6:	a913      	add	r1, sp, #76	; 0x4c
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 f8ad 	bl	8009e08 <__d2b>
 8008cae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cb2:	4683      	mov	fp, r0
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d07c      	beq.n	8008db2 <_dtoa_r+0x1fa>
 8008cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008cc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cd2:	4b7d      	ldr	r3, [pc, #500]	; (8008ec8 <_dtoa_r+0x310>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 faf5 	bl	80002c8 <__aeabi_dsub>
 8008cde:	a36e      	add	r3, pc, #440	; (adr r3, 8008e98 <_dtoa_r+0x2e0>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fca8 	bl	8000638 <__aeabi_dmul>
 8008ce8:	a36d      	add	r3, pc, #436	; (adr r3, 8008ea0 <_dtoa_r+0x2e8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 faed 	bl	80002cc <__adddf3>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	f7f7 fc34 	bl	8000564 <__aeabi_i2d>
 8008cfc:	a36a      	add	r3, pc, #424	; (adr r3, 8008ea8 <_dtoa_r+0x2f0>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fc99 	bl	8000638 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fadd 	bl	80002cc <__adddf3>
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 ff3f 	bl	8000b98 <__aeabi_d2iz>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fefa 	bl	8000b1c <__aeabi_dcmplt>
 8008d28:	b148      	cbz	r0, 8008d3e <_dtoa_r+0x186>
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	f7f7 fc1a 	bl	8000564 <__aeabi_i2d>
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	f7f7 fee8 	bl	8000b08 <__aeabi_dcmpeq>
 8008d38:	b908      	cbnz	r0, 8008d3e <_dtoa_r+0x186>
 8008d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d3e:	f1ba 0f16 	cmp.w	sl, #22
 8008d42:	d854      	bhi.n	8008dee <_dtoa_r+0x236>
 8008d44:	4b61      	ldr	r3, [pc, #388]	; (8008ecc <_dtoa_r+0x314>)
 8008d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d52:	f7f7 fee3 	bl	8000b1c <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d04b      	beq.n	8008df2 <_dtoa_r+0x23a>
 8008d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5e:	2300      	movs	r3, #0
 8008d60:	930e      	str	r3, [sp, #56]	; 0x38
 8008d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d64:	1b5d      	subs	r5, r3, r5
 8008d66:	1e6b      	subs	r3, r5, #1
 8008d68:	9304      	str	r3, [sp, #16]
 8008d6a:	bf43      	ittte	mi
 8008d6c:	2300      	movmi	r3, #0
 8008d6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008d72:	9304      	strmi	r3, [sp, #16]
 8008d74:	f04f 0800 	movpl.w	r8, #0
 8008d78:	f1ba 0f00 	cmp.w	sl, #0
 8008d7c:	db3b      	blt.n	8008df6 <_dtoa_r+0x23e>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008d84:	4453      	add	r3, sl
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9306      	str	r3, [sp, #24]
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	2b09      	cmp	r3, #9
 8008d90:	d869      	bhi.n	8008e66 <_dtoa_r+0x2ae>
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	bfc4      	itt	gt
 8008d96:	3b04      	subgt	r3, #4
 8008d98:	9305      	strgt	r3, [sp, #20]
 8008d9a:	9b05      	ldr	r3, [sp, #20]
 8008d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008da0:	bfcc      	ite	gt
 8008da2:	2500      	movgt	r5, #0
 8008da4:	2501      	movle	r5, #1
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d869      	bhi.n	8008e7e <_dtoa_r+0x2c6>
 8008daa:	e8df f003 	tbb	[pc, r3]
 8008dae:	4e2c      	.short	0x4e2c
 8008db0:	5a4c      	.short	0x5a4c
 8008db2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008db6:	441d      	add	r5, r3
 8008db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	bfc1      	itttt	gt
 8008dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008dcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dd0:	bfda      	itte	le
 8008dd2:	f1c3 0320 	rsble	r3, r3, #32
 8008dd6:	fa06 f003 	lslle.w	r0, r6, r3
 8008dda:	4318      	orrgt	r0, r3
 8008ddc:	f7f7 fbb2 	bl	8000544 <__aeabi_ui2d>
 8008de0:	2301      	movs	r3, #1
 8008de2:	4606      	mov	r6, r0
 8008de4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008de8:	3d01      	subs	r5, #1
 8008dea:	9310      	str	r3, [sp, #64]	; 0x40
 8008dec:	e771      	b.n	8008cd2 <_dtoa_r+0x11a>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e7b6      	b.n	8008d60 <_dtoa_r+0x1a8>
 8008df2:	900e      	str	r0, [sp, #56]	; 0x38
 8008df4:	e7b5      	b.n	8008d62 <_dtoa_r+0x1aa>
 8008df6:	f1ca 0300 	rsb	r3, sl, #0
 8008dfa:	9306      	str	r3, [sp, #24]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	eba8 080a 	sub.w	r8, r8, sl
 8008e02:	930d      	str	r3, [sp, #52]	; 0x34
 8008e04:	e7c2      	b.n	8008d8c <_dtoa_r+0x1d4>
 8008e06:	2300      	movs	r3, #0
 8008e08:	9308      	str	r3, [sp, #32]
 8008e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc39      	bgt.n	8008e84 <_dtoa_r+0x2cc>
 8008e10:	f04f 0901 	mov.w	r9, #1
 8008e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e18:	464b      	mov	r3, r9
 8008e1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e20:	2200      	movs	r2, #0
 8008e22:	6042      	str	r2, [r0, #4]
 8008e24:	2204      	movs	r2, #4
 8008e26:	f102 0614 	add.w	r6, r2, #20
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	6841      	ldr	r1, [r0, #4]
 8008e2e:	d92f      	bls.n	8008e90 <_dtoa_r+0x2d8>
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fcc7 	bl	80097c4 <_Balloc>
 8008e36:	9000      	str	r0, [sp, #0]
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d14b      	bne.n	8008ed4 <_dtoa_r+0x31c>
 8008e3c:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <_dtoa_r+0x318>)
 8008e3e:	4602      	mov	r2, r0
 8008e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e44:	e6d1      	b.n	8008bea <_dtoa_r+0x32>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e7de      	b.n	8008e08 <_dtoa_r+0x250>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9308      	str	r3, [sp, #32]
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	eb0a 0903 	add.w	r9, sl, r3
 8008e54:	f109 0301 	add.w	r3, r9, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	bfb8      	it	lt
 8008e5e:	2301      	movlt	r3, #1
 8008e60:	e7dd      	b.n	8008e1e <_dtoa_r+0x266>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7f2      	b.n	8008e4c <_dtoa_r+0x294>
 8008e66:	2501      	movs	r5, #1
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	9508      	str	r5, [sp, #32]
 8008e6e:	f04f 39ff 	mov.w	r9, #4294967295
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e78:	2312      	movs	r3, #18
 8008e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e7c:	e7cf      	b.n	8008e1e <_dtoa_r+0x266>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	e7f4      	b.n	8008e6e <_dtoa_r+0x2b6>
 8008e84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	e7c6      	b.n	8008e1e <_dtoa_r+0x266>
 8008e90:	3101      	adds	r1, #1
 8008e92:	6041      	str	r1, [r0, #4]
 8008e94:	0052      	lsls	r2, r2, #1
 8008e96:	e7c6      	b.n	8008e26 <_dtoa_r+0x26e>
 8008e98:	636f4361 	.word	0x636f4361
 8008e9c:	3fd287a7 	.word	0x3fd287a7
 8008ea0:	8b60c8b3 	.word	0x8b60c8b3
 8008ea4:	3fc68a28 	.word	0x3fc68a28
 8008ea8:	509f79fb 	.word	0x509f79fb
 8008eac:	3fd34413 	.word	0x3fd34413
 8008eb0:	0800b05e 	.word	0x0800b05e
 8008eb4:	0800b075 	.word	0x0800b075
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	0800b05a 	.word	0x0800b05a
 8008ec0:	0800b051 	.word	0x0800b051
 8008ec4:	0800af2d 	.word	0x0800af2d
 8008ec8:	3ff80000 	.word	0x3ff80000
 8008ecc:	0800b170 	.word	0x0800b170
 8008ed0:	0800b0d4 	.word	0x0800b0d4
 8008ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed6:	9a00      	ldr	r2, [sp, #0]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	2b0e      	cmp	r3, #14
 8008ede:	f200 80ad 	bhi.w	800903c <_dtoa_r+0x484>
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	f000 80aa 	beq.w	800903c <_dtoa_r+0x484>
 8008ee8:	f1ba 0f00 	cmp.w	sl, #0
 8008eec:	dd36      	ble.n	8008f5c <_dtoa_r+0x3a4>
 8008eee:	4ac3      	ldr	r2, [pc, #780]	; (80091fc <_dtoa_r+0x644>)
 8008ef0:	f00a 030f 	and.w	r3, sl, #15
 8008ef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ef8:	ed93 7b00 	vldr	d7, [r3]
 8008efc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f04:	eeb0 8a47 	vmov.f32	s16, s14
 8008f08:	eef0 8a67 	vmov.f32	s17, s15
 8008f0c:	d016      	beq.n	8008f3c <_dtoa_r+0x384>
 8008f0e:	4bbc      	ldr	r3, [pc, #752]	; (8009200 <_dtoa_r+0x648>)
 8008f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f18:	f7f7 fcb8 	bl	800088c <__aeabi_ddiv>
 8008f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f20:	f007 070f 	and.w	r7, r7, #15
 8008f24:	2503      	movs	r5, #3
 8008f26:	4eb6      	ldr	r6, [pc, #728]	; (8009200 <_dtoa_r+0x648>)
 8008f28:	b957      	cbnz	r7, 8008f40 <_dtoa_r+0x388>
 8008f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f2e:	ec53 2b18 	vmov	r2, r3, d8
 8008f32:	f7f7 fcab 	bl	800088c <__aeabi_ddiv>
 8008f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f3a:	e029      	b.n	8008f90 <_dtoa_r+0x3d8>
 8008f3c:	2502      	movs	r5, #2
 8008f3e:	e7f2      	b.n	8008f26 <_dtoa_r+0x36e>
 8008f40:	07f9      	lsls	r1, r7, #31
 8008f42:	d508      	bpl.n	8008f56 <_dtoa_r+0x39e>
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f4c:	f7f7 fb74 	bl	8000638 <__aeabi_dmul>
 8008f50:	ec41 0b18 	vmov	d8, r0, r1
 8008f54:	3501      	adds	r5, #1
 8008f56:	107f      	asrs	r7, r7, #1
 8008f58:	3608      	adds	r6, #8
 8008f5a:	e7e5      	b.n	8008f28 <_dtoa_r+0x370>
 8008f5c:	f000 80a6 	beq.w	80090ac <_dtoa_r+0x4f4>
 8008f60:	f1ca 0600 	rsb	r6, sl, #0
 8008f64:	4ba5      	ldr	r3, [pc, #660]	; (80091fc <_dtoa_r+0x644>)
 8008f66:	4fa6      	ldr	r7, [pc, #664]	; (8009200 <_dtoa_r+0x648>)
 8008f68:	f006 020f 	and.w	r2, r6, #15
 8008f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f78:	f7f7 fb5e 	bl	8000638 <__aeabi_dmul>
 8008f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f80:	1136      	asrs	r6, r6, #4
 8008f82:	2300      	movs	r3, #0
 8008f84:	2502      	movs	r5, #2
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	f040 8085 	bne.w	8009096 <_dtoa_r+0x4de>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1d2      	bne.n	8008f36 <_dtoa_r+0x37e>
 8008f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 808c 	beq.w	80090b0 <_dtoa_r+0x4f8>
 8008f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f9c:	4b99      	ldr	r3, [pc, #612]	; (8009204 <_dtoa_r+0x64c>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fdba 	bl	8000b1c <__aeabi_dcmplt>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	f000 8081 	beq.w	80090b0 <_dtoa_r+0x4f8>
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d07d      	beq.n	80090b0 <_dtoa_r+0x4f8>
 8008fb4:	f1b9 0f00 	cmp.w	r9, #0
 8008fb8:	dd3c      	ble.n	8009034 <_dtoa_r+0x47c>
 8008fba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4b91      	ldr	r3, [pc, #580]	; (8009208 <_dtoa_r+0x650>)
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fb36 	bl	8000638 <__aeabi_dmul>
 8008fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008fd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f7f7 fac2 	bl	8000564 <__aeabi_i2d>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 fb28 	bl	8000638 <__aeabi_dmul>
 8008fe8:	4b88      	ldr	r3, [pc, #544]	; (800920c <_dtoa_r+0x654>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	f7f7 f96e 	bl	80002cc <__adddf3>
 8008ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d15c      	bne.n	80090ba <_dtoa_r+0x502>
 8009000:	4b83      	ldr	r3, [pc, #524]	; (8009210 <_dtoa_r+0x658>)
 8009002:	2200      	movs	r2, #0
 8009004:	4630      	mov	r0, r6
 8009006:	4639      	mov	r1, r7
 8009008:	f7f7 f95e 	bl	80002c8 <__aeabi_dsub>
 800900c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009010:	4606      	mov	r6, r0
 8009012:	460f      	mov	r7, r1
 8009014:	f7f7 fda0 	bl	8000b58 <__aeabi_dcmpgt>
 8009018:	2800      	cmp	r0, #0
 800901a:	f040 8296 	bne.w	800954a <_dtoa_r+0x992>
 800901e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009022:	4630      	mov	r0, r6
 8009024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009028:	4639      	mov	r1, r7
 800902a:	f7f7 fd77 	bl	8000b1c <__aeabi_dcmplt>
 800902e:	2800      	cmp	r0, #0
 8009030:	f040 8288 	bne.w	8009544 <_dtoa_r+0x98c>
 8009034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800903c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800903e:	2b00      	cmp	r3, #0
 8009040:	f2c0 8158 	blt.w	80092f4 <_dtoa_r+0x73c>
 8009044:	f1ba 0f0e 	cmp.w	sl, #14
 8009048:	f300 8154 	bgt.w	80092f4 <_dtoa_r+0x73c>
 800904c:	4b6b      	ldr	r3, [pc, #428]	; (80091fc <_dtoa_r+0x644>)
 800904e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	f280 80e3 	bge.w	8009224 <_dtoa_r+0x66c>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f300 80df 	bgt.w	8009224 <_dtoa_r+0x66c>
 8009066:	f040 826d 	bne.w	8009544 <_dtoa_r+0x98c>
 800906a:	4b69      	ldr	r3, [pc, #420]	; (8009210 <_dtoa_r+0x658>)
 800906c:	2200      	movs	r2, #0
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	f7f7 fae1 	bl	8000638 <__aeabi_dmul>
 8009076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800907a:	f7f7 fd63 	bl	8000b44 <__aeabi_dcmpge>
 800907e:	9e01      	ldr	r6, [sp, #4]
 8009080:	4637      	mov	r7, r6
 8009082:	2800      	cmp	r0, #0
 8009084:	f040 8243 	bne.w	800950e <_dtoa_r+0x956>
 8009088:	9d00      	ldr	r5, [sp, #0]
 800908a:	2331      	movs	r3, #49	; 0x31
 800908c:	f805 3b01 	strb.w	r3, [r5], #1
 8009090:	f10a 0a01 	add.w	sl, sl, #1
 8009094:	e23f      	b.n	8009516 <_dtoa_r+0x95e>
 8009096:	07f2      	lsls	r2, r6, #31
 8009098:	d505      	bpl.n	80090a6 <_dtoa_r+0x4ee>
 800909a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800909e:	f7f7 facb 	bl	8000638 <__aeabi_dmul>
 80090a2:	3501      	adds	r5, #1
 80090a4:	2301      	movs	r3, #1
 80090a6:	1076      	asrs	r6, r6, #1
 80090a8:	3708      	adds	r7, #8
 80090aa:	e76c      	b.n	8008f86 <_dtoa_r+0x3ce>
 80090ac:	2502      	movs	r5, #2
 80090ae:	e76f      	b.n	8008f90 <_dtoa_r+0x3d8>
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80090b6:	930c      	str	r3, [sp, #48]	; 0x30
 80090b8:	e78d      	b.n	8008fd6 <_dtoa_r+0x41e>
 80090ba:	9900      	ldr	r1, [sp, #0]
 80090bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090c0:	4b4e      	ldr	r3, [pc, #312]	; (80091fc <_dtoa_r+0x644>)
 80090c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090c6:	4401      	add	r1, r0
 80090c8:	9102      	str	r1, [sp, #8]
 80090ca:	9908      	ldr	r1, [sp, #32]
 80090cc:	eeb0 8a47 	vmov.f32	s16, s14
 80090d0:	eef0 8a67 	vmov.f32	s17, s15
 80090d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090dc:	2900      	cmp	r1, #0
 80090de:	d045      	beq.n	800916c <_dtoa_r+0x5b4>
 80090e0:	494c      	ldr	r1, [pc, #304]	; (8009214 <_dtoa_r+0x65c>)
 80090e2:	2000      	movs	r0, #0
 80090e4:	f7f7 fbd2 	bl	800088c <__aeabi_ddiv>
 80090e8:	ec53 2b18 	vmov	r2, r3, d8
 80090ec:	f7f7 f8ec 	bl	80002c8 <__aeabi_dsub>
 80090f0:	9d00      	ldr	r5, [sp, #0]
 80090f2:	ec41 0b18 	vmov	d8, r0, r1
 80090f6:	4639      	mov	r1, r7
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7f7 fd4d 	bl	8000b98 <__aeabi_d2iz>
 80090fe:	900c      	str	r0, [sp, #48]	; 0x30
 8009100:	f7f7 fa30 	bl	8000564 <__aeabi_i2d>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 f8dc 	bl	80002c8 <__aeabi_dsub>
 8009110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009112:	3330      	adds	r3, #48	; 0x30
 8009114:	f805 3b01 	strb.w	r3, [r5], #1
 8009118:	ec53 2b18 	vmov	r2, r3, d8
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	f7f7 fcfc 	bl	8000b1c <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d165      	bne.n	80091f4 <_dtoa_r+0x63c>
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	4935      	ldr	r1, [pc, #212]	; (8009204 <_dtoa_r+0x64c>)
 800912e:	2000      	movs	r0, #0
 8009130:	f7f7 f8ca 	bl	80002c8 <__aeabi_dsub>
 8009134:	ec53 2b18 	vmov	r2, r3, d8
 8009138:	f7f7 fcf0 	bl	8000b1c <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 80b9 	bne.w	80092b4 <_dtoa_r+0x6fc>
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	429d      	cmp	r5, r3
 8009146:	f43f af75 	beq.w	8009034 <_dtoa_r+0x47c>
 800914a:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <_dtoa_r+0x650>)
 800914c:	ec51 0b18 	vmov	r0, r1, d8
 8009150:	2200      	movs	r2, #0
 8009152:	f7f7 fa71 	bl	8000638 <__aeabi_dmul>
 8009156:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <_dtoa_r+0x650>)
 8009158:	ec41 0b18 	vmov	d8, r0, r1
 800915c:	2200      	movs	r2, #0
 800915e:	4630      	mov	r0, r6
 8009160:	4639      	mov	r1, r7
 8009162:	f7f7 fa69 	bl	8000638 <__aeabi_dmul>
 8009166:	4606      	mov	r6, r0
 8009168:	460f      	mov	r7, r1
 800916a:	e7c4      	b.n	80090f6 <_dtoa_r+0x53e>
 800916c:	ec51 0b17 	vmov	r0, r1, d7
 8009170:	f7f7 fa62 	bl	8000638 <__aeabi_dmul>
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	9d00      	ldr	r5, [sp, #0]
 8009178:	930c      	str	r3, [sp, #48]	; 0x30
 800917a:	ec41 0b18 	vmov	d8, r0, r1
 800917e:	4639      	mov	r1, r7
 8009180:	4630      	mov	r0, r6
 8009182:	f7f7 fd09 	bl	8000b98 <__aeabi_d2iz>
 8009186:	9011      	str	r0, [sp, #68]	; 0x44
 8009188:	f7f7 f9ec 	bl	8000564 <__aeabi_i2d>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 f898 	bl	80002c8 <__aeabi_dsub>
 8009198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800919a:	3330      	adds	r3, #48	; 0x30
 800919c:	f805 3b01 	strb.w	r3, [r5], #1
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	429d      	cmp	r5, r3
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	d134      	bne.n	8009218 <_dtoa_r+0x660>
 80091ae:	4b19      	ldr	r3, [pc, #100]	; (8009214 <_dtoa_r+0x65c>)
 80091b0:	ec51 0b18 	vmov	r0, r1, d8
 80091b4:	f7f7 f88a 	bl	80002cc <__adddf3>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f7f7 fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d175      	bne.n	80092b4 <_dtoa_r+0x6fc>
 80091c8:	ec53 2b18 	vmov	r2, r3, d8
 80091cc:	4911      	ldr	r1, [pc, #68]	; (8009214 <_dtoa_r+0x65c>)
 80091ce:	2000      	movs	r0, #0
 80091d0:	f7f7 f87a 	bl	80002c8 <__aeabi_dsub>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 fc9e 	bl	8000b1c <__aeabi_dcmplt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f43f af27 	beq.w	8009034 <_dtoa_r+0x47c>
 80091e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091e8:	1e6b      	subs	r3, r5, #1
 80091ea:	930c      	str	r3, [sp, #48]	; 0x30
 80091ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	d0f8      	beq.n	80091e6 <_dtoa_r+0x62e>
 80091f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091f8:	e04a      	b.n	8009290 <_dtoa_r+0x6d8>
 80091fa:	bf00      	nop
 80091fc:	0800b170 	.word	0x0800b170
 8009200:	0800b148 	.word	0x0800b148
 8009204:	3ff00000 	.word	0x3ff00000
 8009208:	40240000 	.word	0x40240000
 800920c:	401c0000 	.word	0x401c0000
 8009210:	40140000 	.word	0x40140000
 8009214:	3fe00000 	.word	0x3fe00000
 8009218:	4baf      	ldr	r3, [pc, #700]	; (80094d8 <_dtoa_r+0x920>)
 800921a:	f7f7 fa0d 	bl	8000638 <__aeabi_dmul>
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	e7ac      	b.n	800917e <_dtoa_r+0x5c6>
 8009224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009228:	9d00      	ldr	r5, [sp, #0]
 800922a:	4642      	mov	r2, r8
 800922c:	464b      	mov	r3, r9
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 fb2b 	bl	800088c <__aeabi_ddiv>
 8009236:	f7f7 fcaf 	bl	8000b98 <__aeabi_d2iz>
 800923a:	9002      	str	r0, [sp, #8]
 800923c:	f7f7 f992 	bl	8000564 <__aeabi_i2d>
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	f7f7 f9f8 	bl	8000638 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4630      	mov	r0, r6
 800924e:	4639      	mov	r1, r7
 8009250:	f7f7 f83a 	bl	80002c8 <__aeabi_dsub>
 8009254:	9e02      	ldr	r6, [sp, #8]
 8009256:	9f01      	ldr	r7, [sp, #4]
 8009258:	3630      	adds	r6, #48	; 0x30
 800925a:	f805 6b01 	strb.w	r6, [r5], #1
 800925e:	9e00      	ldr	r6, [sp, #0]
 8009260:	1bae      	subs	r6, r5, r6
 8009262:	42b7      	cmp	r7, r6
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	d137      	bne.n	80092da <_dtoa_r+0x722>
 800926a:	f7f7 f82f 	bl	80002cc <__adddf3>
 800926e:	4642      	mov	r2, r8
 8009270:	464b      	mov	r3, r9
 8009272:	4606      	mov	r6, r0
 8009274:	460f      	mov	r7, r1
 8009276:	f7f7 fc6f 	bl	8000b58 <__aeabi_dcmpgt>
 800927a:	b9c8      	cbnz	r0, 80092b0 <_dtoa_r+0x6f8>
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	4630      	mov	r0, r6
 8009282:	4639      	mov	r1, r7
 8009284:	f7f7 fc40 	bl	8000b08 <__aeabi_dcmpeq>
 8009288:	b110      	cbz	r0, 8009290 <_dtoa_r+0x6d8>
 800928a:	9b02      	ldr	r3, [sp, #8]
 800928c:	07d9      	lsls	r1, r3, #31
 800928e:	d40f      	bmi.n	80092b0 <_dtoa_r+0x6f8>
 8009290:	4620      	mov	r0, r4
 8009292:	4659      	mov	r1, fp
 8009294:	f000 fad6 	bl	8009844 <_Bfree>
 8009298:	2300      	movs	r3, #0
 800929a:	702b      	strb	r3, [r5, #0]
 800929c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800929e:	f10a 0001 	add.w	r0, sl, #1
 80092a2:	6018      	str	r0, [r3, #0]
 80092a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f43f acd8 	beq.w	8008c5c <_dtoa_r+0xa4>
 80092ac:	601d      	str	r5, [r3, #0]
 80092ae:	e4d5      	b.n	8008c5c <_dtoa_r+0xa4>
 80092b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80092b4:	462b      	mov	r3, r5
 80092b6:	461d      	mov	r5, r3
 80092b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092bc:	2a39      	cmp	r2, #57	; 0x39
 80092be:	d108      	bne.n	80092d2 <_dtoa_r+0x71a>
 80092c0:	9a00      	ldr	r2, [sp, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d1f7      	bne.n	80092b6 <_dtoa_r+0x6fe>
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	9900      	ldr	r1, [sp, #0]
 80092ca:	3201      	adds	r2, #1
 80092cc:	9207      	str	r2, [sp, #28]
 80092ce:	2230      	movs	r2, #48	; 0x30
 80092d0:	700a      	strb	r2, [r1, #0]
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	3201      	adds	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e78c      	b.n	80091f4 <_dtoa_r+0x63c>
 80092da:	4b7f      	ldr	r3, [pc, #508]	; (80094d8 <_dtoa_r+0x920>)
 80092dc:	2200      	movs	r2, #0
 80092de:	f7f7 f9ab 	bl	8000638 <__aeabi_dmul>
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	4606      	mov	r6, r0
 80092e8:	460f      	mov	r7, r1
 80092ea:	f7f7 fc0d 	bl	8000b08 <__aeabi_dcmpeq>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d09b      	beq.n	800922a <_dtoa_r+0x672>
 80092f2:	e7cd      	b.n	8009290 <_dtoa_r+0x6d8>
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	f000 80c4 	beq.w	8009484 <_dtoa_r+0x8cc>
 80092fc:	9a05      	ldr	r2, [sp, #20]
 80092fe:	2a01      	cmp	r2, #1
 8009300:	f300 80a8 	bgt.w	8009454 <_dtoa_r+0x89c>
 8009304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009306:	2a00      	cmp	r2, #0
 8009308:	f000 80a0 	beq.w	800944c <_dtoa_r+0x894>
 800930c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009310:	9e06      	ldr	r6, [sp, #24]
 8009312:	4645      	mov	r5, r8
 8009314:	9a04      	ldr	r2, [sp, #16]
 8009316:	2101      	movs	r1, #1
 8009318:	441a      	add	r2, r3
 800931a:	4620      	mov	r0, r4
 800931c:	4498      	add	r8, r3
 800931e:	9204      	str	r2, [sp, #16]
 8009320:	f000 fb4c 	bl	80099bc <__i2b>
 8009324:	4607      	mov	r7, r0
 8009326:	2d00      	cmp	r5, #0
 8009328:	dd0b      	ble.n	8009342 <_dtoa_r+0x78a>
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd08      	ble.n	8009342 <_dtoa_r+0x78a>
 8009330:	42ab      	cmp	r3, r5
 8009332:	9a04      	ldr	r2, [sp, #16]
 8009334:	bfa8      	it	ge
 8009336:	462b      	movge	r3, r5
 8009338:	eba8 0803 	sub.w	r8, r8, r3
 800933c:	1aed      	subs	r5, r5, r3
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	9b06      	ldr	r3, [sp, #24]
 8009344:	b1fb      	cbz	r3, 8009386 <_dtoa_r+0x7ce>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 809f 	beq.w	800948c <_dtoa_r+0x8d4>
 800934e:	2e00      	cmp	r6, #0
 8009350:	dd11      	ble.n	8009376 <_dtoa_r+0x7be>
 8009352:	4639      	mov	r1, r7
 8009354:	4632      	mov	r2, r6
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fbec 	bl	8009b34 <__pow5mult>
 800935c:	465a      	mov	r2, fp
 800935e:	4601      	mov	r1, r0
 8009360:	4607      	mov	r7, r0
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fb40 	bl	80099e8 <__multiply>
 8009368:	4659      	mov	r1, fp
 800936a:	9007      	str	r0, [sp, #28]
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fa69 	bl	8009844 <_Bfree>
 8009372:	9b07      	ldr	r3, [sp, #28]
 8009374:	469b      	mov	fp, r3
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	1b9a      	subs	r2, r3, r6
 800937a:	d004      	beq.n	8009386 <_dtoa_r+0x7ce>
 800937c:	4659      	mov	r1, fp
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fbd8 	bl	8009b34 <__pow5mult>
 8009384:	4683      	mov	fp, r0
 8009386:	2101      	movs	r1, #1
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fb17 	bl	80099bc <__i2b>
 800938e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	4606      	mov	r6, r0
 8009394:	dd7c      	ble.n	8009490 <_dtoa_r+0x8d8>
 8009396:	461a      	mov	r2, r3
 8009398:	4601      	mov	r1, r0
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fbca 	bl	8009b34 <__pow5mult>
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	4606      	mov	r6, r0
 80093a6:	dd76      	ble.n	8009496 <_dtoa_r+0x8de>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9306      	str	r3, [sp, #24]
 80093ac:	6933      	ldr	r3, [r6, #16]
 80093ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093b2:	6918      	ldr	r0, [r3, #16]
 80093b4:	f000 fab2 	bl	800991c <__hi0bits>
 80093b8:	f1c0 0020 	rsb	r0, r0, #32
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	4418      	add	r0, r3
 80093c0:	f010 001f 	ands.w	r0, r0, #31
 80093c4:	f000 8086 	beq.w	80094d4 <_dtoa_r+0x91c>
 80093c8:	f1c0 0320 	rsb	r3, r0, #32
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	dd7f      	ble.n	80094d0 <_dtoa_r+0x918>
 80093d0:	f1c0 001c 	rsb	r0, r0, #28
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	4403      	add	r3, r0
 80093d8:	4480      	add	r8, r0
 80093da:	4405      	add	r5, r0
 80093dc:	9304      	str	r3, [sp, #16]
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	dd05      	ble.n	80093f0 <_dtoa_r+0x838>
 80093e4:	4659      	mov	r1, fp
 80093e6:	4642      	mov	r2, r8
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 fbfd 	bl	8009be8 <__lshift>
 80093ee:	4683      	mov	fp, r0
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd05      	ble.n	8009402 <_dtoa_r+0x84a>
 80093f6:	4631      	mov	r1, r6
 80093f8:	461a      	mov	r2, r3
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fbf4 	bl	8009be8 <__lshift>
 8009400:	4606      	mov	r6, r0
 8009402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009404:	2b00      	cmp	r3, #0
 8009406:	d069      	beq.n	80094dc <_dtoa_r+0x924>
 8009408:	4631      	mov	r1, r6
 800940a:	4658      	mov	r0, fp
 800940c:	f000 fc58 	bl	8009cc0 <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	da63      	bge.n	80094dc <_dtoa_r+0x924>
 8009414:	2300      	movs	r3, #0
 8009416:	4659      	mov	r1, fp
 8009418:	220a      	movs	r2, #10
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fa34 	bl	8009888 <__multadd>
 8009420:	9b08      	ldr	r3, [sp, #32]
 8009422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009426:	4683      	mov	fp, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 818f 	beq.w	800974c <_dtoa_r+0xb94>
 800942e:	4639      	mov	r1, r7
 8009430:	2300      	movs	r3, #0
 8009432:	220a      	movs	r2, #10
 8009434:	4620      	mov	r0, r4
 8009436:	f000 fa27 	bl	8009888 <__multadd>
 800943a:	f1b9 0f00 	cmp.w	r9, #0
 800943e:	4607      	mov	r7, r0
 8009440:	f300 808e 	bgt.w	8009560 <_dtoa_r+0x9a8>
 8009444:	9b05      	ldr	r3, [sp, #20]
 8009446:	2b02      	cmp	r3, #2
 8009448:	dc50      	bgt.n	80094ec <_dtoa_r+0x934>
 800944a:	e089      	b.n	8009560 <_dtoa_r+0x9a8>
 800944c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800944e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009452:	e75d      	b.n	8009310 <_dtoa_r+0x758>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	1e5e      	subs	r6, r3, #1
 8009458:	9b06      	ldr	r3, [sp, #24]
 800945a:	42b3      	cmp	r3, r6
 800945c:	bfbf      	itttt	lt
 800945e:	9b06      	ldrlt	r3, [sp, #24]
 8009460:	9606      	strlt	r6, [sp, #24]
 8009462:	1af2      	sublt	r2, r6, r3
 8009464:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009466:	bfb6      	itet	lt
 8009468:	189b      	addlt	r3, r3, r2
 800946a:	1b9e      	subge	r6, r3, r6
 800946c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	bfb8      	it	lt
 8009472:	2600      	movlt	r6, #0
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfb5      	itete	lt
 8009478:	eba8 0503 	sublt.w	r5, r8, r3
 800947c:	9b01      	ldrge	r3, [sp, #4]
 800947e:	2300      	movlt	r3, #0
 8009480:	4645      	movge	r5, r8
 8009482:	e747      	b.n	8009314 <_dtoa_r+0x75c>
 8009484:	9e06      	ldr	r6, [sp, #24]
 8009486:	9f08      	ldr	r7, [sp, #32]
 8009488:	4645      	mov	r5, r8
 800948a:	e74c      	b.n	8009326 <_dtoa_r+0x76e>
 800948c:	9a06      	ldr	r2, [sp, #24]
 800948e:	e775      	b.n	800937c <_dtoa_r+0x7c4>
 8009490:	9b05      	ldr	r3, [sp, #20]
 8009492:	2b01      	cmp	r3, #1
 8009494:	dc18      	bgt.n	80094c8 <_dtoa_r+0x910>
 8009496:	9b02      	ldr	r3, [sp, #8]
 8009498:	b9b3      	cbnz	r3, 80094c8 <_dtoa_r+0x910>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a0:	b9a3      	cbnz	r3, 80094cc <_dtoa_r+0x914>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a8:	0d1b      	lsrs	r3, r3, #20
 80094aa:	051b      	lsls	r3, r3, #20
 80094ac:	b12b      	cbz	r3, 80094ba <_dtoa_r+0x902>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	3301      	adds	r3, #1
 80094b2:	9304      	str	r3, [sp, #16]
 80094b4:	f108 0801 	add.w	r8, r8, #1
 80094b8:	2301      	movs	r3, #1
 80094ba:	9306      	str	r3, [sp, #24]
 80094bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f47f af74 	bne.w	80093ac <_dtoa_r+0x7f4>
 80094c4:	2001      	movs	r0, #1
 80094c6:	e779      	b.n	80093bc <_dtoa_r+0x804>
 80094c8:	2300      	movs	r3, #0
 80094ca:	e7f6      	b.n	80094ba <_dtoa_r+0x902>
 80094cc:	9b02      	ldr	r3, [sp, #8]
 80094ce:	e7f4      	b.n	80094ba <_dtoa_r+0x902>
 80094d0:	d085      	beq.n	80093de <_dtoa_r+0x826>
 80094d2:	4618      	mov	r0, r3
 80094d4:	301c      	adds	r0, #28
 80094d6:	e77d      	b.n	80093d4 <_dtoa_r+0x81c>
 80094d8:	40240000 	.word	0x40240000
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dc38      	bgt.n	8009554 <_dtoa_r+0x99c>
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	dd35      	ble.n	8009554 <_dtoa_r+0x99c>
 80094e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094ec:	f1b9 0f00 	cmp.w	r9, #0
 80094f0:	d10d      	bne.n	800950e <_dtoa_r+0x956>
 80094f2:	4631      	mov	r1, r6
 80094f4:	464b      	mov	r3, r9
 80094f6:	2205      	movs	r2, #5
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 f9c5 	bl	8009888 <__multadd>
 80094fe:	4601      	mov	r1, r0
 8009500:	4606      	mov	r6, r0
 8009502:	4658      	mov	r0, fp
 8009504:	f000 fbdc 	bl	8009cc0 <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	f73f adbd 	bgt.w	8009088 <_dtoa_r+0x4d0>
 800950e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009510:	9d00      	ldr	r5, [sp, #0]
 8009512:	ea6f 0a03 	mvn.w	sl, r3
 8009516:	f04f 0800 	mov.w	r8, #0
 800951a:	4631      	mov	r1, r6
 800951c:	4620      	mov	r0, r4
 800951e:	f000 f991 	bl	8009844 <_Bfree>
 8009522:	2f00      	cmp	r7, #0
 8009524:	f43f aeb4 	beq.w	8009290 <_dtoa_r+0x6d8>
 8009528:	f1b8 0f00 	cmp.w	r8, #0
 800952c:	d005      	beq.n	800953a <_dtoa_r+0x982>
 800952e:	45b8      	cmp	r8, r7
 8009530:	d003      	beq.n	800953a <_dtoa_r+0x982>
 8009532:	4641      	mov	r1, r8
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f985 	bl	8009844 <_Bfree>
 800953a:	4639      	mov	r1, r7
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f981 	bl	8009844 <_Bfree>
 8009542:	e6a5      	b.n	8009290 <_dtoa_r+0x6d8>
 8009544:	2600      	movs	r6, #0
 8009546:	4637      	mov	r7, r6
 8009548:	e7e1      	b.n	800950e <_dtoa_r+0x956>
 800954a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800954c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009550:	4637      	mov	r7, r6
 8009552:	e599      	b.n	8009088 <_dtoa_r+0x4d0>
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80fd 	beq.w	800975a <_dtoa_r+0xba2>
 8009560:	2d00      	cmp	r5, #0
 8009562:	dd05      	ble.n	8009570 <_dtoa_r+0x9b8>
 8009564:	4639      	mov	r1, r7
 8009566:	462a      	mov	r2, r5
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fb3d 	bl	8009be8 <__lshift>
 800956e:	4607      	mov	r7, r0
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d05c      	beq.n	8009630 <_dtoa_r+0xa78>
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4620      	mov	r0, r4
 800957a:	f000 f923 	bl	80097c4 <_Balloc>
 800957e:	4605      	mov	r5, r0
 8009580:	b928      	cbnz	r0, 800958e <_dtoa_r+0x9d6>
 8009582:	4b80      	ldr	r3, [pc, #512]	; (8009784 <_dtoa_r+0xbcc>)
 8009584:	4602      	mov	r2, r0
 8009586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800958a:	f7ff bb2e 	b.w	8008bea <_dtoa_r+0x32>
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	3202      	adds	r2, #2
 8009592:	0092      	lsls	r2, r2, #2
 8009594:	f107 010c 	add.w	r1, r7, #12
 8009598:	300c      	adds	r0, #12
 800959a:	f000 f905 	bl	80097a8 <memcpy>
 800959e:	2201      	movs	r2, #1
 80095a0:	4629      	mov	r1, r5
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fb20 	bl	8009be8 <__lshift>
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	444b      	add	r3, r9
 80095b2:	9307      	str	r3, [sp, #28]
 80095b4:	9b02      	ldr	r3, [sp, #8]
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	46b8      	mov	r8, r7
 80095bc:	9306      	str	r3, [sp, #24]
 80095be:	4607      	mov	r7, r0
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	4631      	mov	r1, r6
 80095c4:	3b01      	subs	r3, #1
 80095c6:	4658      	mov	r0, fp
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	f7ff fa69 	bl	8008aa0 <quorem>
 80095ce:	4603      	mov	r3, r0
 80095d0:	3330      	adds	r3, #48	; 0x30
 80095d2:	9004      	str	r0, [sp, #16]
 80095d4:	4641      	mov	r1, r8
 80095d6:	4658      	mov	r0, fp
 80095d8:	9308      	str	r3, [sp, #32]
 80095da:	f000 fb71 	bl	8009cc0 <__mcmp>
 80095de:	463a      	mov	r2, r7
 80095e0:	4681      	mov	r9, r0
 80095e2:	4631      	mov	r1, r6
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fb87 	bl	8009cf8 <__mdiff>
 80095ea:	68c2      	ldr	r2, [r0, #12]
 80095ec:	9b08      	ldr	r3, [sp, #32]
 80095ee:	4605      	mov	r5, r0
 80095f0:	bb02      	cbnz	r2, 8009634 <_dtoa_r+0xa7c>
 80095f2:	4601      	mov	r1, r0
 80095f4:	4658      	mov	r0, fp
 80095f6:	f000 fb63 	bl	8009cc0 <__mcmp>
 80095fa:	9b08      	ldr	r3, [sp, #32]
 80095fc:	4602      	mov	r2, r0
 80095fe:	4629      	mov	r1, r5
 8009600:	4620      	mov	r0, r4
 8009602:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009606:	f000 f91d 	bl	8009844 <_Bfree>
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960e:	9d01      	ldr	r5, [sp, #4]
 8009610:	ea43 0102 	orr.w	r1, r3, r2
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	430b      	orrs	r3, r1
 8009618:	9b08      	ldr	r3, [sp, #32]
 800961a:	d10d      	bne.n	8009638 <_dtoa_r+0xa80>
 800961c:	2b39      	cmp	r3, #57	; 0x39
 800961e:	d029      	beq.n	8009674 <_dtoa_r+0xabc>
 8009620:	f1b9 0f00 	cmp.w	r9, #0
 8009624:	dd01      	ble.n	800962a <_dtoa_r+0xa72>
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	3331      	adds	r3, #49	; 0x31
 800962a:	9a02      	ldr	r2, [sp, #8]
 800962c:	7013      	strb	r3, [r2, #0]
 800962e:	e774      	b.n	800951a <_dtoa_r+0x962>
 8009630:	4638      	mov	r0, r7
 8009632:	e7b9      	b.n	80095a8 <_dtoa_r+0x9f0>
 8009634:	2201      	movs	r2, #1
 8009636:	e7e2      	b.n	80095fe <_dtoa_r+0xa46>
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	db06      	blt.n	800964c <_dtoa_r+0xa94>
 800963e:	9905      	ldr	r1, [sp, #20]
 8009640:	ea41 0909 	orr.w	r9, r1, r9
 8009644:	9906      	ldr	r1, [sp, #24]
 8009646:	ea59 0101 	orrs.w	r1, r9, r1
 800964a:	d120      	bne.n	800968e <_dtoa_r+0xad6>
 800964c:	2a00      	cmp	r2, #0
 800964e:	ddec      	ble.n	800962a <_dtoa_r+0xa72>
 8009650:	4659      	mov	r1, fp
 8009652:	2201      	movs	r2, #1
 8009654:	4620      	mov	r0, r4
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	f000 fac6 	bl	8009be8 <__lshift>
 800965c:	4631      	mov	r1, r6
 800965e:	4683      	mov	fp, r0
 8009660:	f000 fb2e 	bl	8009cc0 <__mcmp>
 8009664:	2800      	cmp	r0, #0
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	dc02      	bgt.n	8009670 <_dtoa_r+0xab8>
 800966a:	d1de      	bne.n	800962a <_dtoa_r+0xa72>
 800966c:	07da      	lsls	r2, r3, #31
 800966e:	d5dc      	bpl.n	800962a <_dtoa_r+0xa72>
 8009670:	2b39      	cmp	r3, #57	; 0x39
 8009672:	d1d8      	bne.n	8009626 <_dtoa_r+0xa6e>
 8009674:	9a02      	ldr	r2, [sp, #8]
 8009676:	2339      	movs	r3, #57	; 0x39
 8009678:	7013      	strb	r3, [r2, #0]
 800967a:	462b      	mov	r3, r5
 800967c:	461d      	mov	r5, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009684:	2a39      	cmp	r2, #57	; 0x39
 8009686:	d050      	beq.n	800972a <_dtoa_r+0xb72>
 8009688:	3201      	adds	r2, #1
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	e745      	b.n	800951a <_dtoa_r+0x962>
 800968e:	2a00      	cmp	r2, #0
 8009690:	dd03      	ble.n	800969a <_dtoa_r+0xae2>
 8009692:	2b39      	cmp	r3, #57	; 0x39
 8009694:	d0ee      	beq.n	8009674 <_dtoa_r+0xabc>
 8009696:	3301      	adds	r3, #1
 8009698:	e7c7      	b.n	800962a <_dtoa_r+0xa72>
 800969a:	9a01      	ldr	r2, [sp, #4]
 800969c:	9907      	ldr	r1, [sp, #28]
 800969e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096a2:	428a      	cmp	r2, r1
 80096a4:	d02a      	beq.n	80096fc <_dtoa_r+0xb44>
 80096a6:	4659      	mov	r1, fp
 80096a8:	2300      	movs	r3, #0
 80096aa:	220a      	movs	r2, #10
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 f8eb 	bl	8009888 <__multadd>
 80096b2:	45b8      	cmp	r8, r7
 80096b4:	4683      	mov	fp, r0
 80096b6:	f04f 0300 	mov.w	r3, #0
 80096ba:	f04f 020a 	mov.w	r2, #10
 80096be:	4641      	mov	r1, r8
 80096c0:	4620      	mov	r0, r4
 80096c2:	d107      	bne.n	80096d4 <_dtoa_r+0xb1c>
 80096c4:	f000 f8e0 	bl	8009888 <__multadd>
 80096c8:	4680      	mov	r8, r0
 80096ca:	4607      	mov	r7, r0
 80096cc:	9b01      	ldr	r3, [sp, #4]
 80096ce:	3301      	adds	r3, #1
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	e775      	b.n	80095c0 <_dtoa_r+0xa08>
 80096d4:	f000 f8d8 	bl	8009888 <__multadd>
 80096d8:	4639      	mov	r1, r7
 80096da:	4680      	mov	r8, r0
 80096dc:	2300      	movs	r3, #0
 80096de:	220a      	movs	r2, #10
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 f8d1 	bl	8009888 <__multadd>
 80096e6:	4607      	mov	r7, r0
 80096e8:	e7f0      	b.n	80096cc <_dtoa_r+0xb14>
 80096ea:	f1b9 0f00 	cmp.w	r9, #0
 80096ee:	9a00      	ldr	r2, [sp, #0]
 80096f0:	bfcc      	ite	gt
 80096f2:	464d      	movgt	r5, r9
 80096f4:	2501      	movle	r5, #1
 80096f6:	4415      	add	r5, r2
 80096f8:	f04f 0800 	mov.w	r8, #0
 80096fc:	4659      	mov	r1, fp
 80096fe:	2201      	movs	r2, #1
 8009700:	4620      	mov	r0, r4
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f000 fa70 	bl	8009be8 <__lshift>
 8009708:	4631      	mov	r1, r6
 800970a:	4683      	mov	fp, r0
 800970c:	f000 fad8 	bl	8009cc0 <__mcmp>
 8009710:	2800      	cmp	r0, #0
 8009712:	dcb2      	bgt.n	800967a <_dtoa_r+0xac2>
 8009714:	d102      	bne.n	800971c <_dtoa_r+0xb64>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d4ae      	bmi.n	800967a <_dtoa_r+0xac2>
 800971c:	462b      	mov	r3, r5
 800971e:	461d      	mov	r5, r3
 8009720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009724:	2a30      	cmp	r2, #48	; 0x30
 8009726:	d0fa      	beq.n	800971e <_dtoa_r+0xb66>
 8009728:	e6f7      	b.n	800951a <_dtoa_r+0x962>
 800972a:	9a00      	ldr	r2, [sp, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d1a5      	bne.n	800967c <_dtoa_r+0xac4>
 8009730:	f10a 0a01 	add.w	sl, sl, #1
 8009734:	2331      	movs	r3, #49	; 0x31
 8009736:	e779      	b.n	800962c <_dtoa_r+0xa74>
 8009738:	4b13      	ldr	r3, [pc, #76]	; (8009788 <_dtoa_r+0xbd0>)
 800973a:	f7ff baaf 	b.w	8008c9c <_dtoa_r+0xe4>
 800973e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009740:	2b00      	cmp	r3, #0
 8009742:	f47f aa86 	bne.w	8008c52 <_dtoa_r+0x9a>
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <_dtoa_r+0xbd4>)
 8009748:	f7ff baa8 	b.w	8008c9c <_dtoa_r+0xe4>
 800974c:	f1b9 0f00 	cmp.w	r9, #0
 8009750:	dc03      	bgt.n	800975a <_dtoa_r+0xba2>
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	2b02      	cmp	r3, #2
 8009756:	f73f aec9 	bgt.w	80094ec <_dtoa_r+0x934>
 800975a:	9d00      	ldr	r5, [sp, #0]
 800975c:	4631      	mov	r1, r6
 800975e:	4658      	mov	r0, fp
 8009760:	f7ff f99e 	bl	8008aa0 <quorem>
 8009764:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009768:	f805 3b01 	strb.w	r3, [r5], #1
 800976c:	9a00      	ldr	r2, [sp, #0]
 800976e:	1aaa      	subs	r2, r5, r2
 8009770:	4591      	cmp	r9, r2
 8009772:	ddba      	ble.n	80096ea <_dtoa_r+0xb32>
 8009774:	4659      	mov	r1, fp
 8009776:	2300      	movs	r3, #0
 8009778:	220a      	movs	r2, #10
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f884 	bl	8009888 <__multadd>
 8009780:	4683      	mov	fp, r0
 8009782:	e7eb      	b.n	800975c <_dtoa_r+0xba4>
 8009784:	0800b0d4 	.word	0x0800b0d4
 8009788:	0800af2c 	.word	0x0800af2c
 800978c:	0800b051 	.word	0x0800b051

08009790 <_localeconv_r>:
 8009790:	4800      	ldr	r0, [pc, #0]	; (8009794 <_localeconv_r+0x4>)
 8009792:	4770      	bx	lr
 8009794:	20000164 	.word	0x20000164

08009798 <malloc>:
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <malloc+0xc>)
 800979a:	4601      	mov	r1, r0
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f000 bbef 	b.w	8009f80 <_malloc_r>
 80097a2:	bf00      	nop
 80097a4:	20000010 	.word	0x20000010

080097a8 <memcpy>:
 80097a8:	440a      	add	r2, r1
 80097aa:	4291      	cmp	r1, r2
 80097ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80097b0:	d100      	bne.n	80097b4 <memcpy+0xc>
 80097b2:	4770      	bx	lr
 80097b4:	b510      	push	{r4, lr}
 80097b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097be:	4291      	cmp	r1, r2
 80097c0:	d1f9      	bne.n	80097b6 <memcpy+0xe>
 80097c2:	bd10      	pop	{r4, pc}

080097c4 <_Balloc>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	b976      	cbnz	r6, 80097ec <_Balloc+0x28>
 80097ce:	2010      	movs	r0, #16
 80097d0:	f7ff ffe2 	bl	8009798 <malloc>
 80097d4:	4602      	mov	r2, r0
 80097d6:	6260      	str	r0, [r4, #36]	; 0x24
 80097d8:	b920      	cbnz	r0, 80097e4 <_Balloc+0x20>
 80097da:	4b18      	ldr	r3, [pc, #96]	; (800983c <_Balloc+0x78>)
 80097dc:	4818      	ldr	r0, [pc, #96]	; (8009840 <_Balloc+0x7c>)
 80097de:	2166      	movs	r1, #102	; 0x66
 80097e0:	f000 fd94 	bl	800a30c <__assert_func>
 80097e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097e8:	6006      	str	r6, [r0, #0]
 80097ea:	60c6      	str	r6, [r0, #12]
 80097ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097ee:	68f3      	ldr	r3, [r6, #12]
 80097f0:	b183      	cbz	r3, 8009814 <_Balloc+0x50>
 80097f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097fa:	b9b8      	cbnz	r0, 800982c <_Balloc+0x68>
 80097fc:	2101      	movs	r1, #1
 80097fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009802:	1d72      	adds	r2, r6, #5
 8009804:	0092      	lsls	r2, r2, #2
 8009806:	4620      	mov	r0, r4
 8009808:	f000 fb5a 	bl	8009ec0 <_calloc_r>
 800980c:	b160      	cbz	r0, 8009828 <_Balloc+0x64>
 800980e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009812:	e00e      	b.n	8009832 <_Balloc+0x6e>
 8009814:	2221      	movs	r2, #33	; 0x21
 8009816:	2104      	movs	r1, #4
 8009818:	4620      	mov	r0, r4
 800981a:	f000 fb51 	bl	8009ec0 <_calloc_r>
 800981e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009820:	60f0      	str	r0, [r6, #12]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e4      	bne.n	80097f2 <_Balloc+0x2e>
 8009828:	2000      	movs	r0, #0
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	6802      	ldr	r2, [r0, #0]
 800982e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009832:	2300      	movs	r3, #0
 8009834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009838:	e7f7      	b.n	800982a <_Balloc+0x66>
 800983a:	bf00      	nop
 800983c:	0800b05e 	.word	0x0800b05e
 8009840:	0800b0e5 	.word	0x0800b0e5

08009844 <_Bfree>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009848:	4605      	mov	r5, r0
 800984a:	460c      	mov	r4, r1
 800984c:	b976      	cbnz	r6, 800986c <_Bfree+0x28>
 800984e:	2010      	movs	r0, #16
 8009850:	f7ff ffa2 	bl	8009798 <malloc>
 8009854:	4602      	mov	r2, r0
 8009856:	6268      	str	r0, [r5, #36]	; 0x24
 8009858:	b920      	cbnz	r0, 8009864 <_Bfree+0x20>
 800985a:	4b09      	ldr	r3, [pc, #36]	; (8009880 <_Bfree+0x3c>)
 800985c:	4809      	ldr	r0, [pc, #36]	; (8009884 <_Bfree+0x40>)
 800985e:	218a      	movs	r1, #138	; 0x8a
 8009860:	f000 fd54 	bl	800a30c <__assert_func>
 8009864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009868:	6006      	str	r6, [r0, #0]
 800986a:	60c6      	str	r6, [r0, #12]
 800986c:	b13c      	cbz	r4, 800987e <_Bfree+0x3a>
 800986e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009870:	6862      	ldr	r2, [r4, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009878:	6021      	str	r1, [r4, #0]
 800987a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	0800b05e 	.word	0x0800b05e
 8009884:	0800b0e5 	.word	0x0800b0e5

08009888 <__multadd>:
 8009888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988c:	690e      	ldr	r6, [r1, #16]
 800988e:	4607      	mov	r7, r0
 8009890:	4698      	mov	r8, r3
 8009892:	460c      	mov	r4, r1
 8009894:	f101 0014 	add.w	r0, r1, #20
 8009898:	2300      	movs	r3, #0
 800989a:	6805      	ldr	r5, [r0, #0]
 800989c:	b2a9      	uxth	r1, r5
 800989e:	fb02 8101 	mla	r1, r2, r1, r8
 80098a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098a6:	0c2d      	lsrs	r5, r5, #16
 80098a8:	fb02 c505 	mla	r5, r2, r5, ip
 80098ac:	b289      	uxth	r1, r1
 80098ae:	3301      	adds	r3, #1
 80098b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098b4:	429e      	cmp	r6, r3
 80098b6:	f840 1b04 	str.w	r1, [r0], #4
 80098ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098be:	dcec      	bgt.n	800989a <__multadd+0x12>
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d022      	beq.n	800990c <__multadd+0x84>
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	42b3      	cmp	r3, r6
 80098ca:	dc19      	bgt.n	8009900 <__multadd+0x78>
 80098cc:	6861      	ldr	r1, [r4, #4]
 80098ce:	4638      	mov	r0, r7
 80098d0:	3101      	adds	r1, #1
 80098d2:	f7ff ff77 	bl	80097c4 <_Balloc>
 80098d6:	4605      	mov	r5, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__multadd+0x5e>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <__multadd+0x8c>)
 80098de:	480e      	ldr	r0, [pc, #56]	; (8009918 <__multadd+0x90>)
 80098e0:	21b5      	movs	r1, #181	; 0xb5
 80098e2:	f000 fd13 	bl	800a30c <__assert_func>
 80098e6:	6922      	ldr	r2, [r4, #16]
 80098e8:	3202      	adds	r2, #2
 80098ea:	f104 010c 	add.w	r1, r4, #12
 80098ee:	0092      	lsls	r2, r2, #2
 80098f0:	300c      	adds	r0, #12
 80098f2:	f7ff ff59 	bl	80097a8 <memcpy>
 80098f6:	4621      	mov	r1, r4
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7ff ffa3 	bl	8009844 <_Bfree>
 80098fe:	462c      	mov	r4, r5
 8009900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009904:	3601      	adds	r6, #1
 8009906:	f8c3 8014 	str.w	r8, [r3, #20]
 800990a:	6126      	str	r6, [r4, #16]
 800990c:	4620      	mov	r0, r4
 800990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009912:	bf00      	nop
 8009914:	0800b0d4 	.word	0x0800b0d4
 8009918:	0800b0e5 	.word	0x0800b0e5

0800991c <__hi0bits>:
 800991c:	0c03      	lsrs	r3, r0, #16
 800991e:	041b      	lsls	r3, r3, #16
 8009920:	b9d3      	cbnz	r3, 8009958 <__hi0bits+0x3c>
 8009922:	0400      	lsls	r0, r0, #16
 8009924:	2310      	movs	r3, #16
 8009926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800992a:	bf04      	itt	eq
 800992c:	0200      	lsleq	r0, r0, #8
 800992e:	3308      	addeq	r3, #8
 8009930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009934:	bf04      	itt	eq
 8009936:	0100      	lsleq	r0, r0, #4
 8009938:	3304      	addeq	r3, #4
 800993a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800993e:	bf04      	itt	eq
 8009940:	0080      	lsleq	r0, r0, #2
 8009942:	3302      	addeq	r3, #2
 8009944:	2800      	cmp	r0, #0
 8009946:	db05      	blt.n	8009954 <__hi0bits+0x38>
 8009948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800994c:	f103 0301 	add.w	r3, r3, #1
 8009950:	bf08      	it	eq
 8009952:	2320      	moveq	r3, #32
 8009954:	4618      	mov	r0, r3
 8009956:	4770      	bx	lr
 8009958:	2300      	movs	r3, #0
 800995a:	e7e4      	b.n	8009926 <__hi0bits+0xa>

0800995c <__lo0bits>:
 800995c:	6803      	ldr	r3, [r0, #0]
 800995e:	f013 0207 	ands.w	r2, r3, #7
 8009962:	4601      	mov	r1, r0
 8009964:	d00b      	beq.n	800997e <__lo0bits+0x22>
 8009966:	07da      	lsls	r2, r3, #31
 8009968:	d424      	bmi.n	80099b4 <__lo0bits+0x58>
 800996a:	0798      	lsls	r0, r3, #30
 800996c:	bf49      	itett	mi
 800996e:	085b      	lsrmi	r3, r3, #1
 8009970:	089b      	lsrpl	r3, r3, #2
 8009972:	2001      	movmi	r0, #1
 8009974:	600b      	strmi	r3, [r1, #0]
 8009976:	bf5c      	itt	pl
 8009978:	600b      	strpl	r3, [r1, #0]
 800997a:	2002      	movpl	r0, #2
 800997c:	4770      	bx	lr
 800997e:	b298      	uxth	r0, r3
 8009980:	b9b0      	cbnz	r0, 80099b0 <__lo0bits+0x54>
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	2010      	movs	r0, #16
 8009986:	f013 0fff 	tst.w	r3, #255	; 0xff
 800998a:	bf04      	itt	eq
 800998c:	0a1b      	lsreq	r3, r3, #8
 800998e:	3008      	addeq	r0, #8
 8009990:	071a      	lsls	r2, r3, #28
 8009992:	bf04      	itt	eq
 8009994:	091b      	lsreq	r3, r3, #4
 8009996:	3004      	addeq	r0, #4
 8009998:	079a      	lsls	r2, r3, #30
 800999a:	bf04      	itt	eq
 800999c:	089b      	lsreq	r3, r3, #2
 800999e:	3002      	addeq	r0, #2
 80099a0:	07da      	lsls	r2, r3, #31
 80099a2:	d403      	bmi.n	80099ac <__lo0bits+0x50>
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	f100 0001 	add.w	r0, r0, #1
 80099aa:	d005      	beq.n	80099b8 <__lo0bits+0x5c>
 80099ac:	600b      	str	r3, [r1, #0]
 80099ae:	4770      	bx	lr
 80099b0:	4610      	mov	r0, r2
 80099b2:	e7e8      	b.n	8009986 <__lo0bits+0x2a>
 80099b4:	2000      	movs	r0, #0
 80099b6:	4770      	bx	lr
 80099b8:	2020      	movs	r0, #32
 80099ba:	4770      	bx	lr

080099bc <__i2b>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	460c      	mov	r4, r1
 80099c0:	2101      	movs	r1, #1
 80099c2:	f7ff feff 	bl	80097c4 <_Balloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	b928      	cbnz	r0, 80099d6 <__i2b+0x1a>
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <__i2b+0x24>)
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <__i2b+0x28>)
 80099ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099d2:	f000 fc9b 	bl	800a30c <__assert_func>
 80099d6:	2301      	movs	r3, #1
 80099d8:	6144      	str	r4, [r0, #20]
 80099da:	6103      	str	r3, [r0, #16]
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	bf00      	nop
 80099e0:	0800b0d4 	.word	0x0800b0d4
 80099e4:	0800b0e5 	.word	0x0800b0e5

080099e8 <__multiply>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	4614      	mov	r4, r2
 80099ee:	690a      	ldr	r2, [r1, #16]
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bfb8      	it	lt
 80099f6:	460b      	movlt	r3, r1
 80099f8:	460d      	mov	r5, r1
 80099fa:	bfbc      	itt	lt
 80099fc:	4625      	movlt	r5, r4
 80099fe:	461c      	movlt	r4, r3
 8009a00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a08:	68ab      	ldr	r3, [r5, #8]
 8009a0a:	6869      	ldr	r1, [r5, #4]
 8009a0c:	eb0a 0709 	add.w	r7, sl, r9
 8009a10:	42bb      	cmp	r3, r7
 8009a12:	b085      	sub	sp, #20
 8009a14:	bfb8      	it	lt
 8009a16:	3101      	addlt	r1, #1
 8009a18:	f7ff fed4 	bl	80097c4 <_Balloc>
 8009a1c:	b930      	cbnz	r0, 8009a2c <__multiply+0x44>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b42      	ldr	r3, [pc, #264]	; (8009b2c <__multiply+0x144>)
 8009a22:	4843      	ldr	r0, [pc, #268]	; (8009b30 <__multiply+0x148>)
 8009a24:	f240 115d 	movw	r1, #349	; 0x15d
 8009a28:	f000 fc70 	bl	800a30c <__assert_func>
 8009a2c:	f100 0614 	add.w	r6, r0, #20
 8009a30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a34:	4633      	mov	r3, r6
 8009a36:	2200      	movs	r2, #0
 8009a38:	4543      	cmp	r3, r8
 8009a3a:	d31e      	bcc.n	8009a7a <__multiply+0x92>
 8009a3c:	f105 0c14 	add.w	ip, r5, #20
 8009a40:	f104 0314 	add.w	r3, r4, #20
 8009a44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a4c:	9202      	str	r2, [sp, #8]
 8009a4e:	ebac 0205 	sub.w	r2, ip, r5
 8009a52:	3a15      	subs	r2, #21
 8009a54:	f022 0203 	bic.w	r2, r2, #3
 8009a58:	3204      	adds	r2, #4
 8009a5a:	f105 0115 	add.w	r1, r5, #21
 8009a5e:	458c      	cmp	ip, r1
 8009a60:	bf38      	it	cc
 8009a62:	2204      	movcc	r2, #4
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	9a02      	ldr	r2, [sp, #8]
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d808      	bhi.n	8009a80 <__multiply+0x98>
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	dc55      	bgt.n	8009b1e <__multiply+0x136>
 8009a72:	6107      	str	r7, [r0, #16]
 8009a74:	b005      	add	sp, #20
 8009a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7a:	f843 2b04 	str.w	r2, [r3], #4
 8009a7e:	e7db      	b.n	8009a38 <__multiply+0x50>
 8009a80:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a84:	f1ba 0f00 	cmp.w	sl, #0
 8009a88:	d020      	beq.n	8009acc <__multiply+0xe4>
 8009a8a:	f105 0e14 	add.w	lr, r5, #20
 8009a8e:	46b1      	mov	r9, r6
 8009a90:	2200      	movs	r2, #0
 8009a92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a96:	f8d9 b000 	ldr.w	fp, [r9]
 8009a9a:	b2a1      	uxth	r1, r4
 8009a9c:	fa1f fb8b 	uxth.w	fp, fp
 8009aa0:	fb0a b101 	mla	r1, sl, r1, fp
 8009aa4:	4411      	add	r1, r2
 8009aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8009aaa:	0c24      	lsrs	r4, r4, #16
 8009aac:	0c12      	lsrs	r2, r2, #16
 8009aae:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ab2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ab6:	b289      	uxth	r1, r1
 8009ab8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009abc:	45f4      	cmp	ip, lr
 8009abe:	f849 1b04 	str.w	r1, [r9], #4
 8009ac2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ac6:	d8e4      	bhi.n	8009a92 <__multiply+0xaa>
 8009ac8:	9901      	ldr	r1, [sp, #4]
 8009aca:	5072      	str	r2, [r6, r1]
 8009acc:	9a03      	ldr	r2, [sp, #12]
 8009ace:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	f1b9 0f00 	cmp.w	r9, #0
 8009ad8:	d01f      	beq.n	8009b1a <__multiply+0x132>
 8009ada:	6834      	ldr	r4, [r6, #0]
 8009adc:	f105 0114 	add.w	r1, r5, #20
 8009ae0:	46b6      	mov	lr, r6
 8009ae2:	f04f 0a00 	mov.w	sl, #0
 8009ae6:	880a      	ldrh	r2, [r1, #0]
 8009ae8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009aec:	fb09 b202 	mla	r2, r9, r2, fp
 8009af0:	4492      	add	sl, r2
 8009af2:	b2a4      	uxth	r4, r4
 8009af4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009af8:	f84e 4b04 	str.w	r4, [lr], #4
 8009afc:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b00:	f8be 2000 	ldrh.w	r2, [lr]
 8009b04:	0c24      	lsrs	r4, r4, #16
 8009b06:	fb09 2404 	mla	r4, r9, r4, r2
 8009b0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b0e:	458c      	cmp	ip, r1
 8009b10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b14:	d8e7      	bhi.n	8009ae6 <__multiply+0xfe>
 8009b16:	9a01      	ldr	r2, [sp, #4]
 8009b18:	50b4      	str	r4, [r6, r2]
 8009b1a:	3604      	adds	r6, #4
 8009b1c:	e7a3      	b.n	8009a66 <__multiply+0x7e>
 8009b1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1a5      	bne.n	8009a72 <__multiply+0x8a>
 8009b26:	3f01      	subs	r7, #1
 8009b28:	e7a1      	b.n	8009a6e <__multiply+0x86>
 8009b2a:	bf00      	nop
 8009b2c:	0800b0d4 	.word	0x0800b0d4
 8009b30:	0800b0e5 	.word	0x0800b0e5

08009b34 <__pow5mult>:
 8009b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b38:	4615      	mov	r5, r2
 8009b3a:	f012 0203 	ands.w	r2, r2, #3
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	d007      	beq.n	8009b54 <__pow5mult+0x20>
 8009b44:	4c25      	ldr	r4, [pc, #148]	; (8009bdc <__pow5mult+0xa8>)
 8009b46:	3a01      	subs	r2, #1
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b4e:	f7ff fe9b 	bl	8009888 <__multadd>
 8009b52:	4607      	mov	r7, r0
 8009b54:	10ad      	asrs	r5, r5, #2
 8009b56:	d03d      	beq.n	8009bd4 <__pow5mult+0xa0>
 8009b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b5a:	b97c      	cbnz	r4, 8009b7c <__pow5mult+0x48>
 8009b5c:	2010      	movs	r0, #16
 8009b5e:	f7ff fe1b 	bl	8009798 <malloc>
 8009b62:	4602      	mov	r2, r0
 8009b64:	6270      	str	r0, [r6, #36]	; 0x24
 8009b66:	b928      	cbnz	r0, 8009b74 <__pow5mult+0x40>
 8009b68:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <__pow5mult+0xac>)
 8009b6a:	481e      	ldr	r0, [pc, #120]	; (8009be4 <__pow5mult+0xb0>)
 8009b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b70:	f000 fbcc 	bl	800a30c <__assert_func>
 8009b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b78:	6004      	str	r4, [r0, #0]
 8009b7a:	60c4      	str	r4, [r0, #12]
 8009b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b84:	b94c      	cbnz	r4, 8009b9a <__pow5mult+0x66>
 8009b86:	f240 2171 	movw	r1, #625	; 0x271
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff ff16 	bl	80099bc <__i2b>
 8009b90:	2300      	movs	r3, #0
 8009b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b96:	4604      	mov	r4, r0
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	07eb      	lsls	r3, r5, #31
 8009ba0:	d50a      	bpl.n	8009bb8 <__pow5mult+0x84>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff ff1e 	bl	80099e8 <__multiply>
 8009bac:	4639      	mov	r1, r7
 8009bae:	4680      	mov	r8, r0
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f7ff fe47 	bl	8009844 <_Bfree>
 8009bb6:	4647      	mov	r7, r8
 8009bb8:	106d      	asrs	r5, r5, #1
 8009bba:	d00b      	beq.n	8009bd4 <__pow5mult+0xa0>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	b938      	cbnz	r0, 8009bd0 <__pow5mult+0x9c>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ff0f 	bl	80099e8 <__multiply>
 8009bca:	6020      	str	r0, [r4, #0]
 8009bcc:	f8c0 9000 	str.w	r9, [r0]
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	e7e4      	b.n	8009b9e <__pow5mult+0x6a>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bda:	bf00      	nop
 8009bdc:	0800b238 	.word	0x0800b238
 8009be0:	0800b05e 	.word	0x0800b05e
 8009be4:	0800b0e5 	.word	0x0800b0e5

08009be8 <__lshift>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	6849      	ldr	r1, [r1, #4]
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	4691      	mov	r9, r2
 8009bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c00:	f108 0601 	add.w	r6, r8, #1
 8009c04:	42b3      	cmp	r3, r6
 8009c06:	db0b      	blt.n	8009c20 <__lshift+0x38>
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff fddb 	bl	80097c4 <_Balloc>
 8009c0e:	4605      	mov	r5, r0
 8009c10:	b948      	cbnz	r0, 8009c26 <__lshift+0x3e>
 8009c12:	4602      	mov	r2, r0
 8009c14:	4b28      	ldr	r3, [pc, #160]	; (8009cb8 <__lshift+0xd0>)
 8009c16:	4829      	ldr	r0, [pc, #164]	; (8009cbc <__lshift+0xd4>)
 8009c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c1c:	f000 fb76 	bl	800a30c <__assert_func>
 8009c20:	3101      	adds	r1, #1
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	e7ee      	b.n	8009c04 <__lshift+0x1c>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f100 0114 	add.w	r1, r0, #20
 8009c2c:	f100 0210 	add.w	r2, r0, #16
 8009c30:	4618      	mov	r0, r3
 8009c32:	4553      	cmp	r3, sl
 8009c34:	db33      	blt.n	8009c9e <__lshift+0xb6>
 8009c36:	6920      	ldr	r0, [r4, #16]
 8009c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c3c:	f104 0314 	add.w	r3, r4, #20
 8009c40:	f019 091f 	ands.w	r9, r9, #31
 8009c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c4c:	d02b      	beq.n	8009ca6 <__lshift+0xbe>
 8009c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c52:	468a      	mov	sl, r1
 8009c54:	2200      	movs	r2, #0
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	fa00 f009 	lsl.w	r0, r0, r9
 8009c5c:	4302      	orrs	r2, r0
 8009c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c66:	459c      	cmp	ip, r3
 8009c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c6c:	d8f3      	bhi.n	8009c56 <__lshift+0x6e>
 8009c6e:	ebac 0304 	sub.w	r3, ip, r4
 8009c72:	3b15      	subs	r3, #21
 8009c74:	f023 0303 	bic.w	r3, r3, #3
 8009c78:	3304      	adds	r3, #4
 8009c7a:	f104 0015 	add.w	r0, r4, #21
 8009c7e:	4584      	cmp	ip, r0
 8009c80:	bf38      	it	cc
 8009c82:	2304      	movcc	r3, #4
 8009c84:	50ca      	str	r2, [r1, r3]
 8009c86:	b10a      	cbz	r2, 8009c8c <__lshift+0xa4>
 8009c88:	f108 0602 	add.w	r6, r8, #2
 8009c8c:	3e01      	subs	r6, #1
 8009c8e:	4638      	mov	r0, r7
 8009c90:	612e      	str	r6, [r5, #16]
 8009c92:	4621      	mov	r1, r4
 8009c94:	f7ff fdd6 	bl	8009844 <_Bfree>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	e7c5      	b.n	8009c32 <__lshift+0x4a>
 8009ca6:	3904      	subs	r1, #4
 8009ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cb0:	459c      	cmp	ip, r3
 8009cb2:	d8f9      	bhi.n	8009ca8 <__lshift+0xc0>
 8009cb4:	e7ea      	b.n	8009c8c <__lshift+0xa4>
 8009cb6:	bf00      	nop
 8009cb8:	0800b0d4 	.word	0x0800b0d4
 8009cbc:	0800b0e5 	.word	0x0800b0e5

08009cc0 <__mcmp>:
 8009cc0:	b530      	push	{r4, r5, lr}
 8009cc2:	6902      	ldr	r2, [r0, #16]
 8009cc4:	690c      	ldr	r4, [r1, #16]
 8009cc6:	1b12      	subs	r2, r2, r4
 8009cc8:	d10e      	bne.n	8009ce8 <__mcmp+0x28>
 8009cca:	f100 0314 	add.w	r3, r0, #20
 8009cce:	3114      	adds	r1, #20
 8009cd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ce0:	42a5      	cmp	r5, r4
 8009ce2:	d003      	beq.n	8009cec <__mcmp+0x2c>
 8009ce4:	d305      	bcc.n	8009cf2 <__mcmp+0x32>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4610      	mov	r0, r2
 8009cea:	bd30      	pop	{r4, r5, pc}
 8009cec:	4283      	cmp	r3, r0
 8009cee:	d3f3      	bcc.n	8009cd8 <__mcmp+0x18>
 8009cf0:	e7fa      	b.n	8009ce8 <__mcmp+0x28>
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	e7f7      	b.n	8009ce8 <__mcmp+0x28>

08009cf8 <__mdiff>:
 8009cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	4606      	mov	r6, r0
 8009d00:	4611      	mov	r1, r2
 8009d02:	4620      	mov	r0, r4
 8009d04:	4617      	mov	r7, r2
 8009d06:	f7ff ffdb 	bl	8009cc0 <__mcmp>
 8009d0a:	1e05      	subs	r5, r0, #0
 8009d0c:	d110      	bne.n	8009d30 <__mdiff+0x38>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4630      	mov	r0, r6
 8009d12:	f7ff fd57 	bl	80097c4 <_Balloc>
 8009d16:	b930      	cbnz	r0, 8009d26 <__mdiff+0x2e>
 8009d18:	4b39      	ldr	r3, [pc, #228]	; (8009e00 <__mdiff+0x108>)
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	f240 2132 	movw	r1, #562	; 0x232
 8009d20:	4838      	ldr	r0, [pc, #224]	; (8009e04 <__mdiff+0x10c>)
 8009d22:	f000 faf3 	bl	800a30c <__assert_func>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d30:	bfa4      	itt	ge
 8009d32:	463b      	movge	r3, r7
 8009d34:	4627      	movge	r7, r4
 8009d36:	4630      	mov	r0, r6
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	bfa6      	itte	ge
 8009d3c:	461c      	movge	r4, r3
 8009d3e:	2500      	movge	r5, #0
 8009d40:	2501      	movlt	r5, #1
 8009d42:	f7ff fd3f 	bl	80097c4 <_Balloc>
 8009d46:	b920      	cbnz	r0, 8009d52 <__mdiff+0x5a>
 8009d48:	4b2d      	ldr	r3, [pc, #180]	; (8009e00 <__mdiff+0x108>)
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d50:	e7e6      	b.n	8009d20 <__mdiff+0x28>
 8009d52:	693e      	ldr	r6, [r7, #16]
 8009d54:	60c5      	str	r5, [r0, #12]
 8009d56:	6925      	ldr	r5, [r4, #16]
 8009d58:	f107 0114 	add.w	r1, r7, #20
 8009d5c:	f104 0914 	add.w	r9, r4, #20
 8009d60:	f100 0e14 	add.w	lr, r0, #20
 8009d64:	f107 0210 	add.w	r2, r7, #16
 8009d68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d70:	46f2      	mov	sl, lr
 8009d72:	2700      	movs	r7, #0
 8009d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d7c:	fa1f f883 	uxth.w	r8, r3
 8009d80:	fa17 f78b 	uxtah	r7, r7, fp
 8009d84:	0c1b      	lsrs	r3, r3, #16
 8009d86:	eba7 0808 	sub.w	r8, r7, r8
 8009d8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d92:	fa1f f888 	uxth.w	r8, r8
 8009d96:	141f      	asrs	r7, r3, #16
 8009d98:	454d      	cmp	r5, r9
 8009d9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8009da2:	d8e7      	bhi.n	8009d74 <__mdiff+0x7c>
 8009da4:	1b2b      	subs	r3, r5, r4
 8009da6:	3b15      	subs	r3, #21
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	3304      	adds	r3, #4
 8009dae:	3415      	adds	r4, #21
 8009db0:	42a5      	cmp	r5, r4
 8009db2:	bf38      	it	cc
 8009db4:	2304      	movcc	r3, #4
 8009db6:	4419      	add	r1, r3
 8009db8:	4473      	add	r3, lr
 8009dba:	469e      	mov	lr, r3
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4565      	cmp	r5, ip
 8009dc0:	d30e      	bcc.n	8009de0 <__mdiff+0xe8>
 8009dc2:	f10c 0203 	add.w	r2, ip, #3
 8009dc6:	1a52      	subs	r2, r2, r1
 8009dc8:	f022 0203 	bic.w	r2, r2, #3
 8009dcc:	3903      	subs	r1, #3
 8009dce:	458c      	cmp	ip, r1
 8009dd0:	bf38      	it	cc
 8009dd2:	2200      	movcc	r2, #0
 8009dd4:	441a      	add	r2, r3
 8009dd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dda:	b17b      	cbz	r3, 8009dfc <__mdiff+0x104>
 8009ddc:	6106      	str	r6, [r0, #16]
 8009dde:	e7a5      	b.n	8009d2c <__mdiff+0x34>
 8009de0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009de4:	fa17 f488 	uxtah	r4, r7, r8
 8009de8:	1422      	asrs	r2, r4, #16
 8009dea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dee:	b2a4      	uxth	r4, r4
 8009df0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009df4:	f84e 4b04 	str.w	r4, [lr], #4
 8009df8:	1417      	asrs	r7, r2, #16
 8009dfa:	e7e0      	b.n	8009dbe <__mdiff+0xc6>
 8009dfc:	3e01      	subs	r6, #1
 8009dfe:	e7ea      	b.n	8009dd6 <__mdiff+0xde>
 8009e00:	0800b0d4 	.word	0x0800b0d4
 8009e04:	0800b0e5 	.word	0x0800b0e5

08009e08 <__d2b>:
 8009e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	4689      	mov	r9, r1
 8009e0e:	2101      	movs	r1, #1
 8009e10:	ec57 6b10 	vmov	r6, r7, d0
 8009e14:	4690      	mov	r8, r2
 8009e16:	f7ff fcd5 	bl	80097c4 <_Balloc>
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	b930      	cbnz	r0, 8009e2c <__d2b+0x24>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b25      	ldr	r3, [pc, #148]	; (8009eb8 <__d2b+0xb0>)
 8009e22:	4826      	ldr	r0, [pc, #152]	; (8009ebc <__d2b+0xb4>)
 8009e24:	f240 310a 	movw	r1, #778	; 0x30a
 8009e28:	f000 fa70 	bl	800a30c <__assert_func>
 8009e2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e34:	bb35      	cbnz	r5, 8009e84 <__d2b+0x7c>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	d028      	beq.n	8009e8e <__d2b+0x86>
 8009e3c:	4668      	mov	r0, sp
 8009e3e:	9600      	str	r6, [sp, #0]
 8009e40:	f7ff fd8c 	bl	800995c <__lo0bits>
 8009e44:	9900      	ldr	r1, [sp, #0]
 8009e46:	b300      	cbz	r0, 8009e8a <__d2b+0x82>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	f1c0 0320 	rsb	r3, r0, #32
 8009e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e52:	430b      	orrs	r3, r1
 8009e54:	40c2      	lsrs	r2, r0
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	61a3      	str	r3, [r4, #24]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bf14      	ite	ne
 8009e62:	2202      	movne	r2, #2
 8009e64:	2201      	moveq	r2, #1
 8009e66:	6122      	str	r2, [r4, #16]
 8009e68:	b1d5      	cbz	r5, 8009ea0 <__d2b+0x98>
 8009e6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e6e:	4405      	add	r5, r0
 8009e70:	f8c9 5000 	str.w	r5, [r9]
 8009e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e78:	f8c8 0000 	str.w	r0, [r8]
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	b003      	add	sp, #12
 8009e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e88:	e7d5      	b.n	8009e36 <__d2b+0x2e>
 8009e8a:	6161      	str	r1, [r4, #20]
 8009e8c:	e7e5      	b.n	8009e5a <__d2b+0x52>
 8009e8e:	a801      	add	r0, sp, #4
 8009e90:	f7ff fd64 	bl	800995c <__lo0bits>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	6163      	str	r3, [r4, #20]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	6122      	str	r2, [r4, #16]
 8009e9c:	3020      	adds	r0, #32
 8009e9e:	e7e3      	b.n	8009e68 <__d2b+0x60>
 8009ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ea8:	f8c9 0000 	str.w	r0, [r9]
 8009eac:	6918      	ldr	r0, [r3, #16]
 8009eae:	f7ff fd35 	bl	800991c <__hi0bits>
 8009eb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009eb6:	e7df      	b.n	8009e78 <__d2b+0x70>
 8009eb8:	0800b0d4 	.word	0x0800b0d4
 8009ebc:	0800b0e5 	.word	0x0800b0e5

08009ec0 <_calloc_r>:
 8009ec0:	b513      	push	{r0, r1, r4, lr}
 8009ec2:	434a      	muls	r2, r1
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	9201      	str	r2, [sp, #4]
 8009ec8:	f000 f85a 	bl	8009f80 <_malloc_r>
 8009ecc:	4604      	mov	r4, r0
 8009ece:	b118      	cbz	r0, 8009ed8 <_calloc_r+0x18>
 8009ed0:	9a01      	ldr	r2, [sp, #4]
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	f7fe f8c4 	bl	8008060 <memset>
 8009ed8:	4620      	mov	r0, r4
 8009eda:	b002      	add	sp, #8
 8009edc:	bd10      	pop	{r4, pc}
	...

08009ee0 <_free_r>:
 8009ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	d048      	beq.n	8009f78 <_free_r+0x98>
 8009ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eea:	9001      	str	r0, [sp, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef2:	bfb8      	it	lt
 8009ef4:	18e4      	addlt	r4, r4, r3
 8009ef6:	f000 fa65 	bl	800a3c4 <__malloc_lock>
 8009efa:	4a20      	ldr	r2, [pc, #128]	; (8009f7c <_free_r+0x9c>)
 8009efc:	9801      	ldr	r0, [sp, #4]
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	4615      	mov	r5, r2
 8009f02:	b933      	cbnz	r3, 8009f12 <_free_r+0x32>
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	6014      	str	r4, [r2, #0]
 8009f08:	b003      	add	sp, #12
 8009f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f0e:	f000 ba5f 	b.w	800a3d0 <__malloc_unlock>
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	d90b      	bls.n	8009f2e <_free_r+0x4e>
 8009f16:	6821      	ldr	r1, [r4, #0]
 8009f18:	1862      	adds	r2, r4, r1
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bf04      	itt	eq
 8009f1e:	681a      	ldreq	r2, [r3, #0]
 8009f20:	685b      	ldreq	r3, [r3, #4]
 8009f22:	6063      	str	r3, [r4, #4]
 8009f24:	bf04      	itt	eq
 8009f26:	1852      	addeq	r2, r2, r1
 8009f28:	6022      	streq	r2, [r4, #0]
 8009f2a:	602c      	str	r4, [r5, #0]
 8009f2c:	e7ec      	b.n	8009f08 <_free_r+0x28>
 8009f2e:	461a      	mov	r2, r3
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b10b      	cbz	r3, 8009f38 <_free_r+0x58>
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	d9fa      	bls.n	8009f2e <_free_r+0x4e>
 8009f38:	6811      	ldr	r1, [r2, #0]
 8009f3a:	1855      	adds	r5, r2, r1
 8009f3c:	42a5      	cmp	r5, r4
 8009f3e:	d10b      	bne.n	8009f58 <_free_r+0x78>
 8009f40:	6824      	ldr	r4, [r4, #0]
 8009f42:	4421      	add	r1, r4
 8009f44:	1854      	adds	r4, r2, r1
 8009f46:	42a3      	cmp	r3, r4
 8009f48:	6011      	str	r1, [r2, #0]
 8009f4a:	d1dd      	bne.n	8009f08 <_free_r+0x28>
 8009f4c:	681c      	ldr	r4, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	6053      	str	r3, [r2, #4]
 8009f52:	4421      	add	r1, r4
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	e7d7      	b.n	8009f08 <_free_r+0x28>
 8009f58:	d902      	bls.n	8009f60 <_free_r+0x80>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	6003      	str	r3, [r0, #0]
 8009f5e:	e7d3      	b.n	8009f08 <_free_r+0x28>
 8009f60:	6825      	ldr	r5, [r4, #0]
 8009f62:	1961      	adds	r1, r4, r5
 8009f64:	428b      	cmp	r3, r1
 8009f66:	bf04      	itt	eq
 8009f68:	6819      	ldreq	r1, [r3, #0]
 8009f6a:	685b      	ldreq	r3, [r3, #4]
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	bf04      	itt	eq
 8009f70:	1949      	addeq	r1, r1, r5
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	6054      	str	r4, [r2, #4]
 8009f76:	e7c7      	b.n	8009f08 <_free_r+0x28>
 8009f78:	b003      	add	sp, #12
 8009f7a:	bd30      	pop	{r4, r5, pc}
 8009f7c:	20000218 	.word	0x20000218

08009f80 <_malloc_r>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	1ccd      	adds	r5, r1, #3
 8009f84:	f025 0503 	bic.w	r5, r5, #3
 8009f88:	3508      	adds	r5, #8
 8009f8a:	2d0c      	cmp	r5, #12
 8009f8c:	bf38      	it	cc
 8009f8e:	250c      	movcc	r5, #12
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	4606      	mov	r6, r0
 8009f94:	db01      	blt.n	8009f9a <_malloc_r+0x1a>
 8009f96:	42a9      	cmp	r1, r5
 8009f98:	d903      	bls.n	8009fa2 <_malloc_r+0x22>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa2:	f000 fa0f 	bl	800a3c4 <__malloc_lock>
 8009fa6:	4921      	ldr	r1, [pc, #132]	; (800a02c <_malloc_r+0xac>)
 8009fa8:	680a      	ldr	r2, [r1, #0]
 8009faa:	4614      	mov	r4, r2
 8009fac:	b99c      	cbnz	r4, 8009fd6 <_malloc_r+0x56>
 8009fae:	4f20      	ldr	r7, [pc, #128]	; (800a030 <_malloc_r+0xb0>)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	b923      	cbnz	r3, 8009fbe <_malloc_r+0x3e>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 f998 	bl	800a2ec <_sbrk_r>
 8009fbc:	6038      	str	r0, [r7, #0]
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f993 	bl	800a2ec <_sbrk_r>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d123      	bne.n	800a012 <_malloc_r+0x92>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f000 f9fe 	bl	800a3d0 <__malloc_unlock>
 8009fd4:	e7e3      	b.n	8009f9e <_malloc_r+0x1e>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	1b5b      	subs	r3, r3, r5
 8009fda:	d417      	bmi.n	800a00c <_malloc_r+0x8c>
 8009fdc:	2b0b      	cmp	r3, #11
 8009fde:	d903      	bls.n	8009fe8 <_malloc_r+0x68>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	441c      	add	r4, r3
 8009fe4:	6025      	str	r5, [r4, #0]
 8009fe6:	e004      	b.n	8009ff2 <_malloc_r+0x72>
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	42a2      	cmp	r2, r4
 8009fec:	bf0c      	ite	eq
 8009fee:	600b      	streq	r3, [r1, #0]
 8009ff0:	6053      	strne	r3, [r2, #4]
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f9ec 	bl	800a3d0 <__malloc_unlock>
 8009ff8:	f104 000b 	add.w	r0, r4, #11
 8009ffc:	1d23      	adds	r3, r4, #4
 8009ffe:	f020 0007 	bic.w	r0, r0, #7
 800a002:	1ac2      	subs	r2, r0, r3
 800a004:	d0cc      	beq.n	8009fa0 <_malloc_r+0x20>
 800a006:	1a1b      	subs	r3, r3, r0
 800a008:	50a3      	str	r3, [r4, r2]
 800a00a:	e7c9      	b.n	8009fa0 <_malloc_r+0x20>
 800a00c:	4622      	mov	r2, r4
 800a00e:	6864      	ldr	r4, [r4, #4]
 800a010:	e7cc      	b.n	8009fac <_malloc_r+0x2c>
 800a012:	1cc4      	adds	r4, r0, #3
 800a014:	f024 0403 	bic.w	r4, r4, #3
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d0e3      	beq.n	8009fe4 <_malloc_r+0x64>
 800a01c:	1a21      	subs	r1, r4, r0
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 f964 	bl	800a2ec <_sbrk_r>
 800a024:	3001      	adds	r0, #1
 800a026:	d1dd      	bne.n	8009fe4 <_malloc_r+0x64>
 800a028:	e7cf      	b.n	8009fca <_malloc_r+0x4a>
 800a02a:	bf00      	nop
 800a02c:	20000218 	.word	0x20000218
 800a030:	2000021c 	.word	0x2000021c

0800a034 <__ssputs_r>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	688e      	ldr	r6, [r1, #8]
 800a03a:	429e      	cmp	r6, r3
 800a03c:	4682      	mov	sl, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	4690      	mov	r8, r2
 800a042:	461f      	mov	r7, r3
 800a044:	d838      	bhi.n	800a0b8 <__ssputs_r+0x84>
 800a046:	898a      	ldrh	r2, [r1, #12]
 800a048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a04c:	d032      	beq.n	800a0b4 <__ssputs_r+0x80>
 800a04e:	6825      	ldr	r5, [r4, #0]
 800a050:	6909      	ldr	r1, [r1, #16]
 800a052:	eba5 0901 	sub.w	r9, r5, r1
 800a056:	6965      	ldr	r5, [r4, #20]
 800a058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a060:	3301      	adds	r3, #1
 800a062:	444b      	add	r3, r9
 800a064:	106d      	asrs	r5, r5, #1
 800a066:	429d      	cmp	r5, r3
 800a068:	bf38      	it	cc
 800a06a:	461d      	movcc	r5, r3
 800a06c:	0553      	lsls	r3, r2, #21
 800a06e:	d531      	bpl.n	800a0d4 <__ssputs_r+0xa0>
 800a070:	4629      	mov	r1, r5
 800a072:	f7ff ff85 	bl	8009f80 <_malloc_r>
 800a076:	4606      	mov	r6, r0
 800a078:	b950      	cbnz	r0, 800a090 <__ssputs_r+0x5c>
 800a07a:	230c      	movs	r3, #12
 800a07c:	f8ca 3000 	str.w	r3, [sl]
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a090:	6921      	ldr	r1, [r4, #16]
 800a092:	464a      	mov	r2, r9
 800a094:	f7ff fb88 	bl	80097a8 <memcpy>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	6126      	str	r6, [r4, #16]
 800a0a6:	6165      	str	r5, [r4, #20]
 800a0a8:	444e      	add	r6, r9
 800a0aa:	eba5 0509 	sub.w	r5, r5, r9
 800a0ae:	6026      	str	r6, [r4, #0]
 800a0b0:	60a5      	str	r5, [r4, #8]
 800a0b2:	463e      	mov	r6, r7
 800a0b4:	42be      	cmp	r6, r7
 800a0b6:	d900      	bls.n	800a0ba <__ssputs_r+0x86>
 800a0b8:	463e      	mov	r6, r7
 800a0ba:	4632      	mov	r2, r6
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	4641      	mov	r1, r8
 800a0c0:	f000 f966 	bl	800a390 <memmove>
 800a0c4:	68a3      	ldr	r3, [r4, #8]
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	1b9b      	subs	r3, r3, r6
 800a0ca:	4432      	add	r2, r6
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6022      	str	r2, [r4, #0]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	e7db      	b.n	800a08c <__ssputs_r+0x58>
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	f000 f981 	bl	800a3dc <_realloc_r>
 800a0da:	4606      	mov	r6, r0
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d1e1      	bne.n	800a0a4 <__ssputs_r+0x70>
 800a0e0:	6921      	ldr	r1, [r4, #16]
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	f7ff fefc 	bl	8009ee0 <_free_r>
 800a0e8:	e7c7      	b.n	800a07a <__ssputs_r+0x46>
	...

0800a0ec <_svfiprintf_r>:
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	4698      	mov	r8, r3
 800a0f2:	898b      	ldrh	r3, [r1, #12]
 800a0f4:	061b      	lsls	r3, r3, #24
 800a0f6:	b09d      	sub	sp, #116	; 0x74
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	d50e      	bpl.n	800a11e <_svfiprintf_r+0x32>
 800a100:	690b      	ldr	r3, [r1, #16]
 800a102:	b963      	cbnz	r3, 800a11e <_svfiprintf_r+0x32>
 800a104:	2140      	movs	r1, #64	; 0x40
 800a106:	f7ff ff3b 	bl	8009f80 <_malloc_r>
 800a10a:	6028      	str	r0, [r5, #0]
 800a10c:	6128      	str	r0, [r5, #16]
 800a10e:	b920      	cbnz	r0, 800a11a <_svfiprintf_r+0x2e>
 800a110:	230c      	movs	r3, #12
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	f04f 30ff 	mov.w	r0, #4294967295
 800a118:	e0d1      	b.n	800a2be <_svfiprintf_r+0x1d2>
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	616b      	str	r3, [r5, #20]
 800a11e:	2300      	movs	r3, #0
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	2320      	movs	r3, #32
 800a124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a128:	f8cd 800c 	str.w	r8, [sp, #12]
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2d8 <_svfiprintf_r+0x1ec>
 800a132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a136:	f04f 0901 	mov.w	r9, #1
 800a13a:	4623      	mov	r3, r4
 800a13c:	469a      	mov	sl, r3
 800a13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a142:	b10a      	cbz	r2, 800a148 <_svfiprintf_r+0x5c>
 800a144:	2a25      	cmp	r2, #37	; 0x25
 800a146:	d1f9      	bne.n	800a13c <_svfiprintf_r+0x50>
 800a148:	ebba 0b04 	subs.w	fp, sl, r4
 800a14c:	d00b      	beq.n	800a166 <_svfiprintf_r+0x7a>
 800a14e:	465b      	mov	r3, fp
 800a150:	4622      	mov	r2, r4
 800a152:	4629      	mov	r1, r5
 800a154:	4638      	mov	r0, r7
 800a156:	f7ff ff6d 	bl	800a034 <__ssputs_r>
 800a15a:	3001      	adds	r0, #1
 800a15c:	f000 80aa 	beq.w	800a2b4 <_svfiprintf_r+0x1c8>
 800a160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a162:	445a      	add	r2, fp
 800a164:	9209      	str	r2, [sp, #36]	; 0x24
 800a166:	f89a 3000 	ldrb.w	r3, [sl]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80a2 	beq.w	800a2b4 <_svfiprintf_r+0x1c8>
 800a170:	2300      	movs	r3, #0
 800a172:	f04f 32ff 	mov.w	r2, #4294967295
 800a176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a17a:	f10a 0a01 	add.w	sl, sl, #1
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	9307      	str	r3, [sp, #28]
 800a182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a186:	931a      	str	r3, [sp, #104]	; 0x68
 800a188:	4654      	mov	r4, sl
 800a18a:	2205      	movs	r2, #5
 800a18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a190:	4851      	ldr	r0, [pc, #324]	; (800a2d8 <_svfiprintf_r+0x1ec>)
 800a192:	f7f6 f845 	bl	8000220 <memchr>
 800a196:	9a04      	ldr	r2, [sp, #16]
 800a198:	b9d8      	cbnz	r0, 800a1d2 <_svfiprintf_r+0xe6>
 800a19a:	06d0      	lsls	r0, r2, #27
 800a19c:	bf44      	itt	mi
 800a19e:	2320      	movmi	r3, #32
 800a1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a4:	0711      	lsls	r1, r2, #28
 800a1a6:	bf44      	itt	mi
 800a1a8:	232b      	movmi	r3, #43	; 0x2b
 800a1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b4:	d015      	beq.n	800a1e2 <_svfiprintf_r+0xf6>
 800a1b6:	9a07      	ldr	r2, [sp, #28]
 800a1b8:	4654      	mov	r4, sl
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f04f 0c0a 	mov.w	ip, #10
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c6:	3b30      	subs	r3, #48	; 0x30
 800a1c8:	2b09      	cmp	r3, #9
 800a1ca:	d94e      	bls.n	800a26a <_svfiprintf_r+0x17e>
 800a1cc:	b1b0      	cbz	r0, 800a1fc <_svfiprintf_r+0x110>
 800a1ce:	9207      	str	r2, [sp, #28]
 800a1d0:	e014      	b.n	800a1fc <_svfiprintf_r+0x110>
 800a1d2:	eba0 0308 	sub.w	r3, r0, r8
 800a1d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	46a2      	mov	sl, r4
 800a1e0:	e7d2      	b.n	800a188 <_svfiprintf_r+0x9c>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	1d19      	adds	r1, r3, #4
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	9103      	str	r1, [sp, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfbb      	ittet	lt
 800a1ee:	425b      	neglt	r3, r3
 800a1f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f4:	9307      	strge	r3, [sp, #28]
 800a1f6:	9307      	strlt	r3, [sp, #28]
 800a1f8:	bfb8      	it	lt
 800a1fa:	9204      	strlt	r2, [sp, #16]
 800a1fc:	7823      	ldrb	r3, [r4, #0]
 800a1fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a200:	d10c      	bne.n	800a21c <_svfiprintf_r+0x130>
 800a202:	7863      	ldrb	r3, [r4, #1]
 800a204:	2b2a      	cmp	r3, #42	; 0x2a
 800a206:	d135      	bne.n	800a274 <_svfiprintf_r+0x188>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9203      	str	r2, [sp, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfb8      	it	lt
 800a214:	f04f 33ff 	movlt.w	r3, #4294967295
 800a218:	3402      	adds	r4, #2
 800a21a:	9305      	str	r3, [sp, #20]
 800a21c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2e8 <_svfiprintf_r+0x1fc>
 800a220:	7821      	ldrb	r1, [r4, #0]
 800a222:	2203      	movs	r2, #3
 800a224:	4650      	mov	r0, sl
 800a226:	f7f5 fffb 	bl	8000220 <memchr>
 800a22a:	b140      	cbz	r0, 800a23e <_svfiprintf_r+0x152>
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	eba0 000a 	sub.w	r0, r0, sl
 800a232:	fa03 f000 	lsl.w	r0, r3, r0
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	4303      	orrs	r3, r0
 800a23a:	3401      	adds	r4, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	4826      	ldr	r0, [pc, #152]	; (800a2dc <_svfiprintf_r+0x1f0>)
 800a244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a248:	2206      	movs	r2, #6
 800a24a:	f7f5 ffe9 	bl	8000220 <memchr>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d038      	beq.n	800a2c4 <_svfiprintf_r+0x1d8>
 800a252:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <_svfiprintf_r+0x1f4>)
 800a254:	bb1b      	cbnz	r3, 800a29e <_svfiprintf_r+0x1b2>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	3307      	adds	r3, #7
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	3308      	adds	r3, #8
 800a260:	9303      	str	r3, [sp, #12]
 800a262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a264:	4433      	add	r3, r6
 800a266:	9309      	str	r3, [sp, #36]	; 0x24
 800a268:	e767      	b.n	800a13a <_svfiprintf_r+0x4e>
 800a26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a26e:	460c      	mov	r4, r1
 800a270:	2001      	movs	r0, #1
 800a272:	e7a5      	b.n	800a1c0 <_svfiprintf_r+0xd4>
 800a274:	2300      	movs	r3, #0
 800a276:	3401      	adds	r4, #1
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	4619      	mov	r1, r3
 800a27c:	f04f 0c0a 	mov.w	ip, #10
 800a280:	4620      	mov	r0, r4
 800a282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a286:	3a30      	subs	r2, #48	; 0x30
 800a288:	2a09      	cmp	r2, #9
 800a28a:	d903      	bls.n	800a294 <_svfiprintf_r+0x1a8>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0c5      	beq.n	800a21c <_svfiprintf_r+0x130>
 800a290:	9105      	str	r1, [sp, #20]
 800a292:	e7c3      	b.n	800a21c <_svfiprintf_r+0x130>
 800a294:	fb0c 2101 	mla	r1, ip, r1, r2
 800a298:	4604      	mov	r4, r0
 800a29a:	2301      	movs	r3, #1
 800a29c:	e7f0      	b.n	800a280 <_svfiprintf_r+0x194>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <_svfiprintf_r+0x1f8>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7fd ff81 	bl	80081b0 <_printf_float>
 800a2ae:	1c42      	adds	r2, r0, #1
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	d1d6      	bne.n	800a262 <_svfiprintf_r+0x176>
 800a2b4:	89ab      	ldrh	r3, [r5, #12]
 800a2b6:	065b      	lsls	r3, r3, #25
 800a2b8:	f53f af2c 	bmi.w	800a114 <_svfiprintf_r+0x28>
 800a2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2be:	b01d      	add	sp, #116	; 0x74
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <_svfiprintf_r+0x1f8>)
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7fe fa12 	bl	80086f8 <_printf_i>
 800a2d4:	e7eb      	b.n	800a2ae <_svfiprintf_r+0x1c2>
 800a2d6:	bf00      	nop
 800a2d8:	0800b244 	.word	0x0800b244
 800a2dc:	0800b24e 	.word	0x0800b24e
 800a2e0:	080081b1 	.word	0x080081b1
 800a2e4:	0800a035 	.word	0x0800a035
 800a2e8:	0800b24a 	.word	0x0800b24a

0800a2ec <_sbrk_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d06      	ldr	r5, [pc, #24]	; (800a308 <_sbrk_r+0x1c>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f7 fcfc 	bl	8001cf4 <_sbrk>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_sbrk_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_sbrk_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	200004c4 	.word	0x200004c4

0800a30c <__assert_func>:
 800a30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a30e:	4614      	mov	r4, r2
 800a310:	461a      	mov	r2, r3
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <__assert_func+0x2c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4605      	mov	r5, r0
 800a318:	68d8      	ldr	r0, [r3, #12]
 800a31a:	b14c      	cbz	r4, 800a330 <__assert_func+0x24>
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <__assert_func+0x30>)
 800a31e:	9100      	str	r1, [sp, #0]
 800a320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a324:	4906      	ldr	r1, [pc, #24]	; (800a340 <__assert_func+0x34>)
 800a326:	462b      	mov	r3, r5
 800a328:	f000 f80e 	bl	800a348 <fiprintf>
 800a32c:	f000 faa4 	bl	800a878 <abort>
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <__assert_func+0x38>)
 800a332:	461c      	mov	r4, r3
 800a334:	e7f3      	b.n	800a31e <__assert_func+0x12>
 800a336:	bf00      	nop
 800a338:	20000010 	.word	0x20000010
 800a33c:	0800b255 	.word	0x0800b255
 800a340:	0800b262 	.word	0x0800b262
 800a344:	0800b290 	.word	0x0800b290

0800a348 <fiprintf>:
 800a348:	b40e      	push	{r1, r2, r3}
 800a34a:	b503      	push	{r0, r1, lr}
 800a34c:	4601      	mov	r1, r0
 800a34e:	ab03      	add	r3, sp, #12
 800a350:	4805      	ldr	r0, [pc, #20]	; (800a368 <fiprintf+0x20>)
 800a352:	f853 2b04 	ldr.w	r2, [r3], #4
 800a356:	6800      	ldr	r0, [r0, #0]
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	f000 f88f 	bl	800a47c <_vfiprintf_r>
 800a35e:	b002      	add	sp, #8
 800a360:	f85d eb04 	ldr.w	lr, [sp], #4
 800a364:	b003      	add	sp, #12
 800a366:	4770      	bx	lr
 800a368:	20000010 	.word	0x20000010

0800a36c <__ascii_mbtowc>:
 800a36c:	b082      	sub	sp, #8
 800a36e:	b901      	cbnz	r1, 800a372 <__ascii_mbtowc+0x6>
 800a370:	a901      	add	r1, sp, #4
 800a372:	b142      	cbz	r2, 800a386 <__ascii_mbtowc+0x1a>
 800a374:	b14b      	cbz	r3, 800a38a <__ascii_mbtowc+0x1e>
 800a376:	7813      	ldrb	r3, [r2, #0]
 800a378:	600b      	str	r3, [r1, #0]
 800a37a:	7812      	ldrb	r2, [r2, #0]
 800a37c:	1e10      	subs	r0, r2, #0
 800a37e:	bf18      	it	ne
 800a380:	2001      	movne	r0, #1
 800a382:	b002      	add	sp, #8
 800a384:	4770      	bx	lr
 800a386:	4610      	mov	r0, r2
 800a388:	e7fb      	b.n	800a382 <__ascii_mbtowc+0x16>
 800a38a:	f06f 0001 	mvn.w	r0, #1
 800a38e:	e7f8      	b.n	800a382 <__ascii_mbtowc+0x16>

0800a390 <memmove>:
 800a390:	4288      	cmp	r0, r1
 800a392:	b510      	push	{r4, lr}
 800a394:	eb01 0402 	add.w	r4, r1, r2
 800a398:	d902      	bls.n	800a3a0 <memmove+0x10>
 800a39a:	4284      	cmp	r4, r0
 800a39c:	4623      	mov	r3, r4
 800a39e:	d807      	bhi.n	800a3b0 <memmove+0x20>
 800a3a0:	1e43      	subs	r3, r0, #1
 800a3a2:	42a1      	cmp	r1, r4
 800a3a4:	d008      	beq.n	800a3b8 <memmove+0x28>
 800a3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ae:	e7f8      	b.n	800a3a2 <memmove+0x12>
 800a3b0:	4402      	add	r2, r0
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d100      	bne.n	800a3ba <memmove+0x2a>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3c2:	e7f7      	b.n	800a3b4 <memmove+0x24>

0800a3c4 <__malloc_lock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_lock+0x8>)
 800a3c6:	f000 bc17 	b.w	800abf8 <__retarget_lock_acquire_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	200004cc 	.word	0x200004cc

0800a3d0 <__malloc_unlock>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__malloc_unlock+0x8>)
 800a3d2:	f000 bc12 	b.w	800abfa <__retarget_lock_release_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	200004cc 	.word	0x200004cc

0800a3dc <_realloc_r>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	4607      	mov	r7, r0
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	460e      	mov	r6, r1
 800a3e4:	b921      	cbnz	r1, 800a3f0 <_realloc_r+0x14>
 800a3e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	f7ff bdc8 	b.w	8009f80 <_malloc_r>
 800a3f0:	b922      	cbnz	r2, 800a3fc <_realloc_r+0x20>
 800a3f2:	f7ff fd75 	bl	8009ee0 <_free_r>
 800a3f6:	4625      	mov	r5, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fc:	f000 fc62 	bl	800acc4 <_malloc_usable_size_r>
 800a400:	42a0      	cmp	r0, r4
 800a402:	d20f      	bcs.n	800a424 <_realloc_r+0x48>
 800a404:	4621      	mov	r1, r4
 800a406:	4638      	mov	r0, r7
 800a408:	f7ff fdba 	bl	8009f80 <_malloc_r>
 800a40c:	4605      	mov	r5, r0
 800a40e:	2800      	cmp	r0, #0
 800a410:	d0f2      	beq.n	800a3f8 <_realloc_r+0x1c>
 800a412:	4631      	mov	r1, r6
 800a414:	4622      	mov	r2, r4
 800a416:	f7ff f9c7 	bl	80097a8 <memcpy>
 800a41a:	4631      	mov	r1, r6
 800a41c:	4638      	mov	r0, r7
 800a41e:	f7ff fd5f 	bl	8009ee0 <_free_r>
 800a422:	e7e9      	b.n	800a3f8 <_realloc_r+0x1c>
 800a424:	4635      	mov	r5, r6
 800a426:	e7e7      	b.n	800a3f8 <_realloc_r+0x1c>

0800a428 <__sfputc_r>:
 800a428:	6893      	ldr	r3, [r2, #8]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	b410      	push	{r4}
 800a430:	6093      	str	r3, [r2, #8]
 800a432:	da08      	bge.n	800a446 <__sfputc_r+0x1e>
 800a434:	6994      	ldr	r4, [r2, #24]
 800a436:	42a3      	cmp	r3, r4
 800a438:	db01      	blt.n	800a43e <__sfputc_r+0x16>
 800a43a:	290a      	cmp	r1, #10
 800a43c:	d103      	bne.n	800a446 <__sfputc_r+0x1e>
 800a43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a442:	f000 b94b 	b.w	800a6dc <__swbuf_r>
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	1c58      	adds	r0, r3, #1
 800a44a:	6010      	str	r0, [r2, #0]
 800a44c:	7019      	strb	r1, [r3, #0]
 800a44e:	4608      	mov	r0, r1
 800a450:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <__sfputs_r>:
 800a456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a458:	4606      	mov	r6, r0
 800a45a:	460f      	mov	r7, r1
 800a45c:	4614      	mov	r4, r2
 800a45e:	18d5      	adds	r5, r2, r3
 800a460:	42ac      	cmp	r4, r5
 800a462:	d101      	bne.n	800a468 <__sfputs_r+0x12>
 800a464:	2000      	movs	r0, #0
 800a466:	e007      	b.n	800a478 <__sfputs_r+0x22>
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	463a      	mov	r2, r7
 800a46e:	4630      	mov	r0, r6
 800a470:	f7ff ffda 	bl	800a428 <__sfputc_r>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d1f3      	bne.n	800a460 <__sfputs_r+0xa>
 800a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a47c <_vfiprintf_r>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	460d      	mov	r5, r1
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	4614      	mov	r4, r2
 800a486:	4698      	mov	r8, r3
 800a488:	4606      	mov	r6, r0
 800a48a:	b118      	cbz	r0, 800a494 <_vfiprintf_r+0x18>
 800a48c:	6983      	ldr	r3, [r0, #24]
 800a48e:	b90b      	cbnz	r3, 800a494 <_vfiprintf_r+0x18>
 800a490:	f000 fb14 	bl	800aabc <__sinit>
 800a494:	4b89      	ldr	r3, [pc, #548]	; (800a6bc <_vfiprintf_r+0x240>)
 800a496:	429d      	cmp	r5, r3
 800a498:	d11b      	bne.n	800a4d2 <_vfiprintf_r+0x56>
 800a49a:	6875      	ldr	r5, [r6, #4]
 800a49c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a49e:	07d9      	lsls	r1, r3, #31
 800a4a0:	d405      	bmi.n	800a4ae <_vfiprintf_r+0x32>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	059a      	lsls	r2, r3, #22
 800a4a6:	d402      	bmi.n	800a4ae <_vfiprintf_r+0x32>
 800a4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4aa:	f000 fba5 	bl	800abf8 <__retarget_lock_acquire_recursive>
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	071b      	lsls	r3, r3, #28
 800a4b2:	d501      	bpl.n	800a4b8 <_vfiprintf_r+0x3c>
 800a4b4:	692b      	ldr	r3, [r5, #16]
 800a4b6:	b9eb      	cbnz	r3, 800a4f4 <_vfiprintf_r+0x78>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 f96e 	bl	800a79c <__swsetup_r>
 800a4c0:	b1c0      	cbz	r0, 800a4f4 <_vfiprintf_r+0x78>
 800a4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4c4:	07dc      	lsls	r4, r3, #31
 800a4c6:	d50e      	bpl.n	800a4e6 <_vfiprintf_r+0x6a>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b01d      	add	sp, #116	; 0x74
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	4b7b      	ldr	r3, [pc, #492]	; (800a6c0 <_vfiprintf_r+0x244>)
 800a4d4:	429d      	cmp	r5, r3
 800a4d6:	d101      	bne.n	800a4dc <_vfiprintf_r+0x60>
 800a4d8:	68b5      	ldr	r5, [r6, #8]
 800a4da:	e7df      	b.n	800a49c <_vfiprintf_r+0x20>
 800a4dc:	4b79      	ldr	r3, [pc, #484]	; (800a6c4 <_vfiprintf_r+0x248>)
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	bf08      	it	eq
 800a4e2:	68f5      	ldreq	r5, [r6, #12]
 800a4e4:	e7da      	b.n	800a49c <_vfiprintf_r+0x20>
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	0598      	lsls	r0, r3, #22
 800a4ea:	d4ed      	bmi.n	800a4c8 <_vfiprintf_r+0x4c>
 800a4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ee:	f000 fb84 	bl	800abfa <__retarget_lock_release_recursive>
 800a4f2:	e7e9      	b.n	800a4c8 <_vfiprintf_r+0x4c>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a502:	2330      	movs	r3, #48	; 0x30
 800a504:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6c8 <_vfiprintf_r+0x24c>
 800a508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a50c:	f04f 0901 	mov.w	r9, #1
 800a510:	4623      	mov	r3, r4
 800a512:	469a      	mov	sl, r3
 800a514:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a518:	b10a      	cbz	r2, 800a51e <_vfiprintf_r+0xa2>
 800a51a:	2a25      	cmp	r2, #37	; 0x25
 800a51c:	d1f9      	bne.n	800a512 <_vfiprintf_r+0x96>
 800a51e:	ebba 0b04 	subs.w	fp, sl, r4
 800a522:	d00b      	beq.n	800a53c <_vfiprintf_r+0xc0>
 800a524:	465b      	mov	r3, fp
 800a526:	4622      	mov	r2, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff93 	bl	800a456 <__sfputs_r>
 800a530:	3001      	adds	r0, #1
 800a532:	f000 80aa 	beq.w	800a68a <_vfiprintf_r+0x20e>
 800a536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a538:	445a      	add	r2, fp
 800a53a:	9209      	str	r2, [sp, #36]	; 0x24
 800a53c:	f89a 3000 	ldrb.w	r3, [sl]
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 80a2 	beq.w	800a68a <_vfiprintf_r+0x20e>
 800a546:	2300      	movs	r3, #0
 800a548:	f04f 32ff 	mov.w	r2, #4294967295
 800a54c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a550:	f10a 0a01 	add.w	sl, sl, #1
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	9307      	str	r3, [sp, #28]
 800a558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a55c:	931a      	str	r3, [sp, #104]	; 0x68
 800a55e:	4654      	mov	r4, sl
 800a560:	2205      	movs	r2, #5
 800a562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a566:	4858      	ldr	r0, [pc, #352]	; (800a6c8 <_vfiprintf_r+0x24c>)
 800a568:	f7f5 fe5a 	bl	8000220 <memchr>
 800a56c:	9a04      	ldr	r2, [sp, #16]
 800a56e:	b9d8      	cbnz	r0, 800a5a8 <_vfiprintf_r+0x12c>
 800a570:	06d1      	lsls	r1, r2, #27
 800a572:	bf44      	itt	mi
 800a574:	2320      	movmi	r3, #32
 800a576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57a:	0713      	lsls	r3, r2, #28
 800a57c:	bf44      	itt	mi
 800a57e:	232b      	movmi	r3, #43	; 0x2b
 800a580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a584:	f89a 3000 	ldrb.w	r3, [sl]
 800a588:	2b2a      	cmp	r3, #42	; 0x2a
 800a58a:	d015      	beq.n	800a5b8 <_vfiprintf_r+0x13c>
 800a58c:	9a07      	ldr	r2, [sp, #28]
 800a58e:	4654      	mov	r4, sl
 800a590:	2000      	movs	r0, #0
 800a592:	f04f 0c0a 	mov.w	ip, #10
 800a596:	4621      	mov	r1, r4
 800a598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a59c:	3b30      	subs	r3, #48	; 0x30
 800a59e:	2b09      	cmp	r3, #9
 800a5a0:	d94e      	bls.n	800a640 <_vfiprintf_r+0x1c4>
 800a5a2:	b1b0      	cbz	r0, 800a5d2 <_vfiprintf_r+0x156>
 800a5a4:	9207      	str	r2, [sp, #28]
 800a5a6:	e014      	b.n	800a5d2 <_vfiprintf_r+0x156>
 800a5a8:	eba0 0308 	sub.w	r3, r0, r8
 800a5ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	9304      	str	r3, [sp, #16]
 800a5b4:	46a2      	mov	sl, r4
 800a5b6:	e7d2      	b.n	800a55e <_vfiprintf_r+0xe2>
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	1d19      	adds	r1, r3, #4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	9103      	str	r1, [sp, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bfbb      	ittet	lt
 800a5c4:	425b      	neglt	r3, r3
 800a5c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ca:	9307      	strge	r3, [sp, #28]
 800a5cc:	9307      	strlt	r3, [sp, #28]
 800a5ce:	bfb8      	it	lt
 800a5d0:	9204      	strlt	r2, [sp, #16]
 800a5d2:	7823      	ldrb	r3, [r4, #0]
 800a5d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5d6:	d10c      	bne.n	800a5f2 <_vfiprintf_r+0x176>
 800a5d8:	7863      	ldrb	r3, [r4, #1]
 800a5da:	2b2a      	cmp	r3, #42	; 0x2a
 800a5dc:	d135      	bne.n	800a64a <_vfiprintf_r+0x1ce>
 800a5de:	9b03      	ldr	r3, [sp, #12]
 800a5e0:	1d1a      	adds	r2, r3, #4
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	9203      	str	r2, [sp, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bfb8      	it	lt
 800a5ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5ee:	3402      	adds	r4, #2
 800a5f0:	9305      	str	r3, [sp, #20]
 800a5f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6d8 <_vfiprintf_r+0x25c>
 800a5f6:	7821      	ldrb	r1, [r4, #0]
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	4650      	mov	r0, sl
 800a5fc:	f7f5 fe10 	bl	8000220 <memchr>
 800a600:	b140      	cbz	r0, 800a614 <_vfiprintf_r+0x198>
 800a602:	2340      	movs	r3, #64	; 0x40
 800a604:	eba0 000a 	sub.w	r0, r0, sl
 800a608:	fa03 f000 	lsl.w	r0, r3, r0
 800a60c:	9b04      	ldr	r3, [sp, #16]
 800a60e:	4303      	orrs	r3, r0
 800a610:	3401      	adds	r4, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a618:	482c      	ldr	r0, [pc, #176]	; (800a6cc <_vfiprintf_r+0x250>)
 800a61a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a61e:	2206      	movs	r2, #6
 800a620:	f7f5 fdfe 	bl	8000220 <memchr>
 800a624:	2800      	cmp	r0, #0
 800a626:	d03f      	beq.n	800a6a8 <_vfiprintf_r+0x22c>
 800a628:	4b29      	ldr	r3, [pc, #164]	; (800a6d0 <_vfiprintf_r+0x254>)
 800a62a:	bb1b      	cbnz	r3, 800a674 <_vfiprintf_r+0x1f8>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	3307      	adds	r3, #7
 800a630:	f023 0307 	bic.w	r3, r3, #7
 800a634:	3308      	adds	r3, #8
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63a:	443b      	add	r3, r7
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	e767      	b.n	800a510 <_vfiprintf_r+0x94>
 800a640:	fb0c 3202 	mla	r2, ip, r2, r3
 800a644:	460c      	mov	r4, r1
 800a646:	2001      	movs	r0, #1
 800a648:	e7a5      	b.n	800a596 <_vfiprintf_r+0x11a>
 800a64a:	2300      	movs	r3, #0
 800a64c:	3401      	adds	r4, #1
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	4619      	mov	r1, r3
 800a652:	f04f 0c0a 	mov.w	ip, #10
 800a656:	4620      	mov	r0, r4
 800a658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a65c:	3a30      	subs	r2, #48	; 0x30
 800a65e:	2a09      	cmp	r2, #9
 800a660:	d903      	bls.n	800a66a <_vfiprintf_r+0x1ee>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0c5      	beq.n	800a5f2 <_vfiprintf_r+0x176>
 800a666:	9105      	str	r1, [sp, #20]
 800a668:	e7c3      	b.n	800a5f2 <_vfiprintf_r+0x176>
 800a66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a66e:	4604      	mov	r4, r0
 800a670:	2301      	movs	r3, #1
 800a672:	e7f0      	b.n	800a656 <_vfiprintf_r+0x1da>
 800a674:	ab03      	add	r3, sp, #12
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	462a      	mov	r2, r5
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <_vfiprintf_r+0x258>)
 800a67c:	a904      	add	r1, sp, #16
 800a67e:	4630      	mov	r0, r6
 800a680:	f7fd fd96 	bl	80081b0 <_printf_float>
 800a684:	4607      	mov	r7, r0
 800a686:	1c78      	adds	r0, r7, #1
 800a688:	d1d6      	bne.n	800a638 <_vfiprintf_r+0x1bc>
 800a68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a68c:	07d9      	lsls	r1, r3, #31
 800a68e:	d405      	bmi.n	800a69c <_vfiprintf_r+0x220>
 800a690:	89ab      	ldrh	r3, [r5, #12]
 800a692:	059a      	lsls	r2, r3, #22
 800a694:	d402      	bmi.n	800a69c <_vfiprintf_r+0x220>
 800a696:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a698:	f000 faaf 	bl	800abfa <__retarget_lock_release_recursive>
 800a69c:	89ab      	ldrh	r3, [r5, #12]
 800a69e:	065b      	lsls	r3, r3, #25
 800a6a0:	f53f af12 	bmi.w	800a4c8 <_vfiprintf_r+0x4c>
 800a6a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6a6:	e711      	b.n	800a4cc <_vfiprintf_r+0x50>
 800a6a8:	ab03      	add	r3, sp, #12
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <_vfiprintf_r+0x258>)
 800a6b0:	a904      	add	r1, sp, #16
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7fe f820 	bl	80086f8 <_printf_i>
 800a6b8:	e7e4      	b.n	800a684 <_vfiprintf_r+0x208>
 800a6ba:	bf00      	nop
 800a6bc:	0800b2bc 	.word	0x0800b2bc
 800a6c0:	0800b2dc 	.word	0x0800b2dc
 800a6c4:	0800b29c 	.word	0x0800b29c
 800a6c8:	0800b244 	.word	0x0800b244
 800a6cc:	0800b24e 	.word	0x0800b24e
 800a6d0:	080081b1 	.word	0x080081b1
 800a6d4:	0800a457 	.word	0x0800a457
 800a6d8:	0800b24a 	.word	0x0800b24a

0800a6dc <__swbuf_r>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	460e      	mov	r6, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	b118      	cbz	r0, 800a6ee <__swbuf_r+0x12>
 800a6e6:	6983      	ldr	r3, [r0, #24]
 800a6e8:	b90b      	cbnz	r3, 800a6ee <__swbuf_r+0x12>
 800a6ea:	f000 f9e7 	bl	800aabc <__sinit>
 800a6ee:	4b21      	ldr	r3, [pc, #132]	; (800a774 <__swbuf_r+0x98>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d12b      	bne.n	800a74c <__swbuf_r+0x70>
 800a6f4:	686c      	ldr	r4, [r5, #4]
 800a6f6:	69a3      	ldr	r3, [r4, #24]
 800a6f8:	60a3      	str	r3, [r4, #8]
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	071a      	lsls	r2, r3, #28
 800a6fe:	d52f      	bpl.n	800a760 <__swbuf_r+0x84>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	b36b      	cbz	r3, 800a760 <__swbuf_r+0x84>
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	6820      	ldr	r0, [r4, #0]
 800a708:	1ac0      	subs	r0, r0, r3
 800a70a:	6963      	ldr	r3, [r4, #20]
 800a70c:	b2f6      	uxtb	r6, r6
 800a70e:	4283      	cmp	r3, r0
 800a710:	4637      	mov	r7, r6
 800a712:	dc04      	bgt.n	800a71e <__swbuf_r+0x42>
 800a714:	4621      	mov	r1, r4
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f93c 	bl	800a994 <_fflush_r>
 800a71c:	bb30      	cbnz	r0, 800a76c <__swbuf_r+0x90>
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	3b01      	subs	r3, #1
 800a722:	60a3      	str	r3, [r4, #8]
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	6022      	str	r2, [r4, #0]
 800a72a:	701e      	strb	r6, [r3, #0]
 800a72c:	6963      	ldr	r3, [r4, #20]
 800a72e:	3001      	adds	r0, #1
 800a730:	4283      	cmp	r3, r0
 800a732:	d004      	beq.n	800a73e <__swbuf_r+0x62>
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	07db      	lsls	r3, r3, #31
 800a738:	d506      	bpl.n	800a748 <__swbuf_r+0x6c>
 800a73a:	2e0a      	cmp	r6, #10
 800a73c:	d104      	bne.n	800a748 <__swbuf_r+0x6c>
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f000 f927 	bl	800a994 <_fflush_r>
 800a746:	b988      	cbnz	r0, 800a76c <__swbuf_r+0x90>
 800a748:	4638      	mov	r0, r7
 800a74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a74c:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <__swbuf_r+0x9c>)
 800a74e:	429c      	cmp	r4, r3
 800a750:	d101      	bne.n	800a756 <__swbuf_r+0x7a>
 800a752:	68ac      	ldr	r4, [r5, #8]
 800a754:	e7cf      	b.n	800a6f6 <__swbuf_r+0x1a>
 800a756:	4b09      	ldr	r3, [pc, #36]	; (800a77c <__swbuf_r+0xa0>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	bf08      	it	eq
 800a75c:	68ec      	ldreq	r4, [r5, #12]
 800a75e:	e7ca      	b.n	800a6f6 <__swbuf_r+0x1a>
 800a760:	4621      	mov	r1, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f81a 	bl	800a79c <__swsetup_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d0cb      	beq.n	800a704 <__swbuf_r+0x28>
 800a76c:	f04f 37ff 	mov.w	r7, #4294967295
 800a770:	e7ea      	b.n	800a748 <__swbuf_r+0x6c>
 800a772:	bf00      	nop
 800a774:	0800b2bc 	.word	0x0800b2bc
 800a778:	0800b2dc 	.word	0x0800b2dc
 800a77c:	0800b29c 	.word	0x0800b29c

0800a780 <__ascii_wctomb>:
 800a780:	b149      	cbz	r1, 800a796 <__ascii_wctomb+0x16>
 800a782:	2aff      	cmp	r2, #255	; 0xff
 800a784:	bf85      	ittet	hi
 800a786:	238a      	movhi	r3, #138	; 0x8a
 800a788:	6003      	strhi	r3, [r0, #0]
 800a78a:	700a      	strbls	r2, [r1, #0]
 800a78c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a790:	bf98      	it	ls
 800a792:	2001      	movls	r0, #1
 800a794:	4770      	bx	lr
 800a796:	4608      	mov	r0, r1
 800a798:	4770      	bx	lr
	...

0800a79c <__swsetup_r>:
 800a79c:	4b32      	ldr	r3, [pc, #200]	; (800a868 <__swsetup_r+0xcc>)
 800a79e:	b570      	push	{r4, r5, r6, lr}
 800a7a0:	681d      	ldr	r5, [r3, #0]
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	b125      	cbz	r5, 800a7b2 <__swsetup_r+0x16>
 800a7a8:	69ab      	ldr	r3, [r5, #24]
 800a7aa:	b913      	cbnz	r3, 800a7b2 <__swsetup_r+0x16>
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f000 f985 	bl	800aabc <__sinit>
 800a7b2:	4b2e      	ldr	r3, [pc, #184]	; (800a86c <__swsetup_r+0xd0>)
 800a7b4:	429c      	cmp	r4, r3
 800a7b6:	d10f      	bne.n	800a7d8 <__swsetup_r+0x3c>
 800a7b8:	686c      	ldr	r4, [r5, #4]
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7c0:	0719      	lsls	r1, r3, #28
 800a7c2:	d42c      	bmi.n	800a81e <__swsetup_r+0x82>
 800a7c4:	06dd      	lsls	r5, r3, #27
 800a7c6:	d411      	bmi.n	800a7ec <__swsetup_r+0x50>
 800a7c8:	2309      	movs	r3, #9
 800a7ca:	6033      	str	r3, [r6, #0]
 800a7cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	e03e      	b.n	800a856 <__swsetup_r+0xba>
 800a7d8:	4b25      	ldr	r3, [pc, #148]	; (800a870 <__swsetup_r+0xd4>)
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	d101      	bne.n	800a7e2 <__swsetup_r+0x46>
 800a7de:	68ac      	ldr	r4, [r5, #8]
 800a7e0:	e7eb      	b.n	800a7ba <__swsetup_r+0x1e>
 800a7e2:	4b24      	ldr	r3, [pc, #144]	; (800a874 <__swsetup_r+0xd8>)
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	bf08      	it	eq
 800a7e8:	68ec      	ldreq	r4, [r5, #12]
 800a7ea:	e7e6      	b.n	800a7ba <__swsetup_r+0x1e>
 800a7ec:	0758      	lsls	r0, r3, #29
 800a7ee:	d512      	bpl.n	800a816 <__swsetup_r+0x7a>
 800a7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f2:	b141      	cbz	r1, 800a806 <__swsetup_r+0x6a>
 800a7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	d002      	beq.n	800a802 <__swsetup_r+0x66>
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7ff fb6f 	bl	8009ee0 <_free_r>
 800a802:	2300      	movs	r3, #0
 800a804:	6363      	str	r3, [r4, #52]	; 0x34
 800a806:	89a3      	ldrh	r3, [r4, #12]
 800a808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a80c:	81a3      	strh	r3, [r4, #12]
 800a80e:	2300      	movs	r3, #0
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f043 0308 	orr.w	r3, r3, #8
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	b94b      	cbnz	r3, 800a836 <__swsetup_r+0x9a>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a82c:	d003      	beq.n	800a836 <__swsetup_r+0x9a>
 800a82e:	4621      	mov	r1, r4
 800a830:	4630      	mov	r0, r6
 800a832:	f000 fa07 	bl	800ac44 <__smakebuf_r>
 800a836:	89a0      	ldrh	r0, [r4, #12]
 800a838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a83c:	f010 0301 	ands.w	r3, r0, #1
 800a840:	d00a      	beq.n	800a858 <__swsetup_r+0xbc>
 800a842:	2300      	movs	r3, #0
 800a844:	60a3      	str	r3, [r4, #8]
 800a846:	6963      	ldr	r3, [r4, #20]
 800a848:	425b      	negs	r3, r3
 800a84a:	61a3      	str	r3, [r4, #24]
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	b943      	cbnz	r3, 800a862 <__swsetup_r+0xc6>
 800a850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a854:	d1ba      	bne.n	800a7cc <__swsetup_r+0x30>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	0781      	lsls	r1, r0, #30
 800a85a:	bf58      	it	pl
 800a85c:	6963      	ldrpl	r3, [r4, #20]
 800a85e:	60a3      	str	r3, [r4, #8]
 800a860:	e7f4      	b.n	800a84c <__swsetup_r+0xb0>
 800a862:	2000      	movs	r0, #0
 800a864:	e7f7      	b.n	800a856 <__swsetup_r+0xba>
 800a866:	bf00      	nop
 800a868:	20000010 	.word	0x20000010
 800a86c:	0800b2bc 	.word	0x0800b2bc
 800a870:	0800b2dc 	.word	0x0800b2dc
 800a874:	0800b29c 	.word	0x0800b29c

0800a878 <abort>:
 800a878:	b508      	push	{r3, lr}
 800a87a:	2006      	movs	r0, #6
 800a87c:	f000 fa52 	bl	800ad24 <raise>
 800a880:	2001      	movs	r0, #1
 800a882:	f7f7 f9bf 	bl	8001c04 <_exit>
	...

0800a888 <__sflush_r>:
 800a888:	898a      	ldrh	r2, [r1, #12]
 800a88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88e:	4605      	mov	r5, r0
 800a890:	0710      	lsls	r0, r2, #28
 800a892:	460c      	mov	r4, r1
 800a894:	d458      	bmi.n	800a948 <__sflush_r+0xc0>
 800a896:	684b      	ldr	r3, [r1, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dc05      	bgt.n	800a8a8 <__sflush_r+0x20>
 800a89c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dc02      	bgt.n	800a8a8 <__sflush_r+0x20>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8aa:	2e00      	cmp	r6, #0
 800a8ac:	d0f9      	beq.n	800a8a2 <__sflush_r+0x1a>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8b4:	682f      	ldr	r7, [r5, #0]
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	d032      	beq.n	800a920 <__sflush_r+0x98>
 800a8ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	075a      	lsls	r2, r3, #29
 800a8c0:	d505      	bpl.n	800a8ce <__sflush_r+0x46>
 800a8c2:	6863      	ldr	r3, [r4, #4]
 800a8c4:	1ac0      	subs	r0, r0, r3
 800a8c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8c8:	b10b      	cbz	r3, 800a8ce <__sflush_r+0x46>
 800a8ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8cc:	1ac0      	subs	r0, r0, r3
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d4:	6a21      	ldr	r1, [r4, #32]
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b0      	blx	r6
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	d106      	bne.n	800a8ee <__sflush_r+0x66>
 800a8e0:	6829      	ldr	r1, [r5, #0]
 800a8e2:	291d      	cmp	r1, #29
 800a8e4:	d82c      	bhi.n	800a940 <__sflush_r+0xb8>
 800a8e6:	4a2a      	ldr	r2, [pc, #168]	; (800a990 <__sflush_r+0x108>)
 800a8e8:	40ca      	lsrs	r2, r1
 800a8ea:	07d6      	lsls	r6, r2, #31
 800a8ec:	d528      	bpl.n	800a940 <__sflush_r+0xb8>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	6062      	str	r2, [r4, #4]
 800a8f2:	04d9      	lsls	r1, r3, #19
 800a8f4:	6922      	ldr	r2, [r4, #16]
 800a8f6:	6022      	str	r2, [r4, #0]
 800a8f8:	d504      	bpl.n	800a904 <__sflush_r+0x7c>
 800a8fa:	1c42      	adds	r2, r0, #1
 800a8fc:	d101      	bne.n	800a902 <__sflush_r+0x7a>
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	b903      	cbnz	r3, 800a904 <__sflush_r+0x7c>
 800a902:	6560      	str	r0, [r4, #84]	; 0x54
 800a904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a906:	602f      	str	r7, [r5, #0]
 800a908:	2900      	cmp	r1, #0
 800a90a:	d0ca      	beq.n	800a8a2 <__sflush_r+0x1a>
 800a90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a910:	4299      	cmp	r1, r3
 800a912:	d002      	beq.n	800a91a <__sflush_r+0x92>
 800a914:	4628      	mov	r0, r5
 800a916:	f7ff fae3 	bl	8009ee0 <_free_r>
 800a91a:	2000      	movs	r0, #0
 800a91c:	6360      	str	r0, [r4, #52]	; 0x34
 800a91e:	e7c1      	b.n	800a8a4 <__sflush_r+0x1c>
 800a920:	6a21      	ldr	r1, [r4, #32]
 800a922:	2301      	movs	r3, #1
 800a924:	4628      	mov	r0, r5
 800a926:	47b0      	blx	r6
 800a928:	1c41      	adds	r1, r0, #1
 800a92a:	d1c7      	bne.n	800a8bc <__sflush_r+0x34>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0c4      	beq.n	800a8bc <__sflush_r+0x34>
 800a932:	2b1d      	cmp	r3, #29
 800a934:	d001      	beq.n	800a93a <__sflush_r+0xb2>
 800a936:	2b16      	cmp	r3, #22
 800a938:	d101      	bne.n	800a93e <__sflush_r+0xb6>
 800a93a:	602f      	str	r7, [r5, #0]
 800a93c:	e7b1      	b.n	800a8a2 <__sflush_r+0x1a>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	e7ad      	b.n	800a8a4 <__sflush_r+0x1c>
 800a948:	690f      	ldr	r7, [r1, #16]
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	d0a9      	beq.n	800a8a2 <__sflush_r+0x1a>
 800a94e:	0793      	lsls	r3, r2, #30
 800a950:	680e      	ldr	r6, [r1, #0]
 800a952:	bf08      	it	eq
 800a954:	694b      	ldreq	r3, [r1, #20]
 800a956:	600f      	str	r7, [r1, #0]
 800a958:	bf18      	it	ne
 800a95a:	2300      	movne	r3, #0
 800a95c:	eba6 0807 	sub.w	r8, r6, r7
 800a960:	608b      	str	r3, [r1, #8]
 800a962:	f1b8 0f00 	cmp.w	r8, #0
 800a966:	dd9c      	ble.n	800a8a2 <__sflush_r+0x1a>
 800a968:	6a21      	ldr	r1, [r4, #32]
 800a96a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a96c:	4643      	mov	r3, r8
 800a96e:	463a      	mov	r2, r7
 800a970:	4628      	mov	r0, r5
 800a972:	47b0      	blx	r6
 800a974:	2800      	cmp	r0, #0
 800a976:	dc06      	bgt.n	800a986 <__sflush_r+0xfe>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	e78e      	b.n	800a8a4 <__sflush_r+0x1c>
 800a986:	4407      	add	r7, r0
 800a988:	eba8 0800 	sub.w	r8, r8, r0
 800a98c:	e7e9      	b.n	800a962 <__sflush_r+0xda>
 800a98e:	bf00      	nop
 800a990:	20400001 	.word	0x20400001

0800a994 <_fflush_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	690b      	ldr	r3, [r1, #16]
 800a998:	4605      	mov	r5, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	b913      	cbnz	r3, 800a9a4 <_fflush_r+0x10>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	b118      	cbz	r0, 800a9ae <_fflush_r+0x1a>
 800a9a6:	6983      	ldr	r3, [r0, #24]
 800a9a8:	b90b      	cbnz	r3, 800a9ae <_fflush_r+0x1a>
 800a9aa:	f000 f887 	bl	800aabc <__sinit>
 800a9ae:	4b14      	ldr	r3, [pc, #80]	; (800aa00 <_fflush_r+0x6c>)
 800a9b0:	429c      	cmp	r4, r3
 800a9b2:	d11b      	bne.n	800a9ec <_fflush_r+0x58>
 800a9b4:	686c      	ldr	r4, [r5, #4]
 800a9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0ef      	beq.n	800a99e <_fflush_r+0xa>
 800a9be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9c0:	07d0      	lsls	r0, r2, #31
 800a9c2:	d404      	bmi.n	800a9ce <_fflush_r+0x3a>
 800a9c4:	0599      	lsls	r1, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_fflush_r+0x3a>
 800a9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ca:	f000 f915 	bl	800abf8 <__retarget_lock_acquire_recursive>
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	f7ff ff59 	bl	800a888 <__sflush_r>
 800a9d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d8:	07da      	lsls	r2, r3, #31
 800a9da:	4605      	mov	r5, r0
 800a9dc:	d4e0      	bmi.n	800a9a0 <_fflush_r+0xc>
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	059b      	lsls	r3, r3, #22
 800a9e2:	d4dd      	bmi.n	800a9a0 <_fflush_r+0xc>
 800a9e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9e6:	f000 f908 	bl	800abfa <__retarget_lock_release_recursive>
 800a9ea:	e7d9      	b.n	800a9a0 <_fflush_r+0xc>
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <_fflush_r+0x70>)
 800a9ee:	429c      	cmp	r4, r3
 800a9f0:	d101      	bne.n	800a9f6 <_fflush_r+0x62>
 800a9f2:	68ac      	ldr	r4, [r5, #8]
 800a9f4:	e7df      	b.n	800a9b6 <_fflush_r+0x22>
 800a9f6:	4b04      	ldr	r3, [pc, #16]	; (800aa08 <_fflush_r+0x74>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	bf08      	it	eq
 800a9fc:	68ec      	ldreq	r4, [r5, #12]
 800a9fe:	e7da      	b.n	800a9b6 <_fflush_r+0x22>
 800aa00:	0800b2bc 	.word	0x0800b2bc
 800aa04:	0800b2dc 	.word	0x0800b2dc
 800aa08:	0800b29c 	.word	0x0800b29c

0800aa0c <std>:
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	4604      	mov	r4, r0
 800aa12:	e9c0 3300 	strd	r3, r3, [r0]
 800aa16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa1a:	6083      	str	r3, [r0, #8]
 800aa1c:	8181      	strh	r1, [r0, #12]
 800aa1e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa20:	81c2      	strh	r2, [r0, #14]
 800aa22:	6183      	str	r3, [r0, #24]
 800aa24:	4619      	mov	r1, r3
 800aa26:	2208      	movs	r2, #8
 800aa28:	305c      	adds	r0, #92	; 0x5c
 800aa2a:	f7fd fb19 	bl	8008060 <memset>
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std+0x38>)
 800aa30:	6263      	str	r3, [r4, #36]	; 0x24
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <std+0x3c>)
 800aa34:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <std+0x40>)
 800aa38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <std+0x44>)
 800aa3c:	6224      	str	r4, [r4, #32]
 800aa3e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	bf00      	nop
 800aa44:	0800ad5d 	.word	0x0800ad5d
 800aa48:	0800ad7f 	.word	0x0800ad7f
 800aa4c:	0800adb7 	.word	0x0800adb7
 800aa50:	0800addb 	.word	0x0800addb

0800aa54 <_cleanup_r>:
 800aa54:	4901      	ldr	r1, [pc, #4]	; (800aa5c <_cleanup_r+0x8>)
 800aa56:	f000 b8af 	b.w	800abb8 <_fwalk_reent>
 800aa5a:	bf00      	nop
 800aa5c:	0800a995 	.word	0x0800a995

0800aa60 <__sfmoreglue>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	1e4a      	subs	r2, r1, #1
 800aa64:	2568      	movs	r5, #104	; 0x68
 800aa66:	4355      	muls	r5, r2
 800aa68:	460e      	mov	r6, r1
 800aa6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa6e:	f7ff fa87 	bl	8009f80 <_malloc_r>
 800aa72:	4604      	mov	r4, r0
 800aa74:	b140      	cbz	r0, 800aa88 <__sfmoreglue+0x28>
 800aa76:	2100      	movs	r1, #0
 800aa78:	e9c0 1600 	strd	r1, r6, [r0]
 800aa7c:	300c      	adds	r0, #12
 800aa7e:	60a0      	str	r0, [r4, #8]
 800aa80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa84:	f7fd faec 	bl	8008060 <memset>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}

0800aa8c <__sfp_lock_acquire>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sfp_lock_acquire+0x8>)
 800aa8e:	f000 b8b3 	b.w	800abf8 <__retarget_lock_acquire_recursive>
 800aa92:	bf00      	nop
 800aa94:	200004d0 	.word	0x200004d0

0800aa98 <__sfp_lock_release>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sfp_lock_release+0x8>)
 800aa9a:	f000 b8ae 	b.w	800abfa <__retarget_lock_release_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	200004d0 	.word	0x200004d0

0800aaa4 <__sinit_lock_acquire>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sinit_lock_acquire+0x8>)
 800aaa6:	f000 b8a7 	b.w	800abf8 <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	200004cb 	.word	0x200004cb

0800aab0 <__sinit_lock_release>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__sinit_lock_release+0x8>)
 800aab2:	f000 b8a2 	b.w	800abfa <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	200004cb 	.word	0x200004cb

0800aabc <__sinit>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4604      	mov	r4, r0
 800aac0:	f7ff fff0 	bl	800aaa4 <__sinit_lock_acquire>
 800aac4:	69a3      	ldr	r3, [r4, #24]
 800aac6:	b11b      	cbz	r3, 800aad0 <__sinit+0x14>
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f7ff bff0 	b.w	800aab0 <__sinit_lock_release>
 800aad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aad4:	6523      	str	r3, [r4, #80]	; 0x50
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <__sinit+0x68>)
 800aad8:	4a13      	ldr	r2, [pc, #76]	; (800ab28 <__sinit+0x6c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aade:	42a3      	cmp	r3, r4
 800aae0:	bf04      	itt	eq
 800aae2:	2301      	moveq	r3, #1
 800aae4:	61a3      	streq	r3, [r4, #24]
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 f820 	bl	800ab2c <__sfp>
 800aaec:	6060      	str	r0, [r4, #4]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 f81c 	bl	800ab2c <__sfp>
 800aaf4:	60a0      	str	r0, [r4, #8]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 f818 	bl	800ab2c <__sfp>
 800aafc:	2200      	movs	r2, #0
 800aafe:	60e0      	str	r0, [r4, #12]
 800ab00:	2104      	movs	r1, #4
 800ab02:	6860      	ldr	r0, [r4, #4]
 800ab04:	f7ff ff82 	bl	800aa0c <std>
 800ab08:	68a0      	ldr	r0, [r4, #8]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	2109      	movs	r1, #9
 800ab0e:	f7ff ff7d 	bl	800aa0c <std>
 800ab12:	68e0      	ldr	r0, [r4, #12]
 800ab14:	2202      	movs	r2, #2
 800ab16:	2112      	movs	r1, #18
 800ab18:	f7ff ff78 	bl	800aa0c <std>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	61a3      	str	r3, [r4, #24]
 800ab20:	e7d2      	b.n	800aac8 <__sinit+0xc>
 800ab22:	bf00      	nop
 800ab24:	0800af18 	.word	0x0800af18
 800ab28:	0800aa55 	.word	0x0800aa55

0800ab2c <__sfp>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	4607      	mov	r7, r0
 800ab30:	f7ff ffac 	bl	800aa8c <__sfp_lock_acquire>
 800ab34:	4b1e      	ldr	r3, [pc, #120]	; (800abb0 <__sfp+0x84>)
 800ab36:	681e      	ldr	r6, [r3, #0]
 800ab38:	69b3      	ldr	r3, [r6, #24]
 800ab3a:	b913      	cbnz	r3, 800ab42 <__sfp+0x16>
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7ff ffbd 	bl	800aabc <__sinit>
 800ab42:	3648      	adds	r6, #72	; 0x48
 800ab44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	d503      	bpl.n	800ab54 <__sfp+0x28>
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	b30b      	cbz	r3, 800ab94 <__sfp+0x68>
 800ab50:	6836      	ldr	r6, [r6, #0]
 800ab52:	e7f7      	b.n	800ab44 <__sfp+0x18>
 800ab54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab58:	b9d5      	cbnz	r5, 800ab90 <__sfp+0x64>
 800ab5a:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <__sfp+0x88>)
 800ab5c:	60e3      	str	r3, [r4, #12]
 800ab5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab62:	6665      	str	r5, [r4, #100]	; 0x64
 800ab64:	f000 f847 	bl	800abf6 <__retarget_lock_init_recursive>
 800ab68:	f7ff ff96 	bl	800aa98 <__sfp_lock_release>
 800ab6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab74:	6025      	str	r5, [r4, #0]
 800ab76:	61a5      	str	r5, [r4, #24]
 800ab78:	2208      	movs	r2, #8
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab80:	f7fd fa6e 	bl	8008060 <memset>
 800ab84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab90:	3468      	adds	r4, #104	; 0x68
 800ab92:	e7d9      	b.n	800ab48 <__sfp+0x1c>
 800ab94:	2104      	movs	r1, #4
 800ab96:	4638      	mov	r0, r7
 800ab98:	f7ff ff62 	bl	800aa60 <__sfmoreglue>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	6030      	str	r0, [r6, #0]
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d1d5      	bne.n	800ab50 <__sfp+0x24>
 800aba4:	f7ff ff78 	bl	800aa98 <__sfp_lock_release>
 800aba8:	230c      	movs	r3, #12
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	e7ee      	b.n	800ab8c <__sfp+0x60>
 800abae:	bf00      	nop
 800abb0:	0800af18 	.word	0x0800af18
 800abb4:	ffff0001 	.word	0xffff0001

0800abb8 <_fwalk_reent>:
 800abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abbc:	4606      	mov	r6, r0
 800abbe:	4688      	mov	r8, r1
 800abc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abc4:	2700      	movs	r7, #0
 800abc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abca:	f1b9 0901 	subs.w	r9, r9, #1
 800abce:	d505      	bpl.n	800abdc <_fwalk_reent+0x24>
 800abd0:	6824      	ldr	r4, [r4, #0]
 800abd2:	2c00      	cmp	r4, #0
 800abd4:	d1f7      	bne.n	800abc6 <_fwalk_reent+0xe>
 800abd6:	4638      	mov	r0, r7
 800abd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abdc:	89ab      	ldrh	r3, [r5, #12]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d907      	bls.n	800abf2 <_fwalk_reent+0x3a>
 800abe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abe6:	3301      	adds	r3, #1
 800abe8:	d003      	beq.n	800abf2 <_fwalk_reent+0x3a>
 800abea:	4629      	mov	r1, r5
 800abec:	4630      	mov	r0, r6
 800abee:	47c0      	blx	r8
 800abf0:	4307      	orrs	r7, r0
 800abf2:	3568      	adds	r5, #104	; 0x68
 800abf4:	e7e9      	b.n	800abca <_fwalk_reent+0x12>

0800abf6 <__retarget_lock_init_recursive>:
 800abf6:	4770      	bx	lr

0800abf8 <__retarget_lock_acquire_recursive>:
 800abf8:	4770      	bx	lr

0800abfa <__retarget_lock_release_recursive>:
 800abfa:	4770      	bx	lr

0800abfc <__swhatbuf_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	b096      	sub	sp, #88	; 0x58
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	da07      	bge.n	800ac1e <__swhatbuf_r+0x22>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	89b3      	ldrh	r3, [r6, #12]
 800ac14:	061a      	lsls	r2, r3, #24
 800ac16:	d410      	bmi.n	800ac3a <__swhatbuf_r+0x3e>
 800ac18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1c:	e00e      	b.n	800ac3c <__swhatbuf_r+0x40>
 800ac1e:	466a      	mov	r2, sp
 800ac20:	f000 f902 	bl	800ae28 <_fstat_r>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	dbf2      	blt.n	800ac0e <__swhatbuf_r+0x12>
 800ac28:	9a01      	ldr	r2, [sp, #4]
 800ac2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac32:	425a      	negs	r2, r3
 800ac34:	415a      	adcs	r2, r3
 800ac36:	602a      	str	r2, [r5, #0]
 800ac38:	e7ee      	b.n	800ac18 <__swhatbuf_r+0x1c>
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	b016      	add	sp, #88	; 0x58
 800ac42:	bd70      	pop	{r4, r5, r6, pc}

0800ac44 <__smakebuf_r>:
 800ac44:	898b      	ldrh	r3, [r1, #12]
 800ac46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac48:	079d      	lsls	r5, r3, #30
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	d507      	bpl.n	800ac60 <__smakebuf_r+0x1c>
 800ac50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	6123      	str	r3, [r4, #16]
 800ac58:	2301      	movs	r3, #1
 800ac5a:	6163      	str	r3, [r4, #20]
 800ac5c:	b002      	add	sp, #8
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	ab01      	add	r3, sp, #4
 800ac62:	466a      	mov	r2, sp
 800ac64:	f7ff ffca 	bl	800abfc <__swhatbuf_r>
 800ac68:	9900      	ldr	r1, [sp, #0]
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff f987 	bl	8009f80 <_malloc_r>
 800ac72:	b948      	cbnz	r0, 800ac88 <__smakebuf_r+0x44>
 800ac74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac78:	059a      	lsls	r2, r3, #22
 800ac7a:	d4ef      	bmi.n	800ac5c <__smakebuf_r+0x18>
 800ac7c:	f023 0303 	bic.w	r3, r3, #3
 800ac80:	f043 0302 	orr.w	r3, r3, #2
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e7e3      	b.n	800ac50 <__smakebuf_r+0xc>
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <__smakebuf_r+0x7c>)
 800ac8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	6020      	str	r0, [r4, #0]
 800ac90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	6163      	str	r3, [r4, #20]
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	6120      	str	r0, [r4, #16]
 800ac9e:	b15b      	cbz	r3, 800acb8 <__smakebuf_r+0x74>
 800aca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca4:	4630      	mov	r0, r6
 800aca6:	f000 f8d1 	bl	800ae4c <_isatty_r>
 800acaa:	b128      	cbz	r0, 800acb8 <__smakebuf_r+0x74>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	81a3      	strh	r3, [r4, #12]
 800acb8:	89a0      	ldrh	r0, [r4, #12]
 800acba:	4305      	orrs	r5, r0
 800acbc:	81a5      	strh	r5, [r4, #12]
 800acbe:	e7cd      	b.n	800ac5c <__smakebuf_r+0x18>
 800acc0:	0800aa55 	.word	0x0800aa55

0800acc4 <_malloc_usable_size_r>:
 800acc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc8:	1f18      	subs	r0, r3, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	bfbc      	itt	lt
 800acce:	580b      	ldrlt	r3, [r1, r0]
 800acd0:	18c0      	addlt	r0, r0, r3
 800acd2:	4770      	bx	lr

0800acd4 <_raise_r>:
 800acd4:	291f      	cmp	r1, #31
 800acd6:	b538      	push	{r3, r4, r5, lr}
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	d904      	bls.n	800ace8 <_raise_r+0x14>
 800acde:	2316      	movs	r3, #22
 800ace0:	6003      	str	r3, [r0, #0]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acea:	b112      	cbz	r2, 800acf2 <_raise_r+0x1e>
 800acec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf0:	b94b      	cbnz	r3, 800ad06 <_raise_r+0x32>
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f830 	bl	800ad58 <_getpid_r>
 800acf8:	462a      	mov	r2, r5
 800acfa:	4601      	mov	r1, r0
 800acfc:	4620      	mov	r0, r4
 800acfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad02:	f000 b817 	b.w	800ad34 <_kill_r>
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d00a      	beq.n	800ad20 <_raise_r+0x4c>
 800ad0a:	1c59      	adds	r1, r3, #1
 800ad0c:	d103      	bne.n	800ad16 <_raise_r+0x42>
 800ad0e:	2316      	movs	r3, #22
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	2001      	movs	r0, #1
 800ad14:	e7e7      	b.n	800ace6 <_raise_r+0x12>
 800ad16:	2400      	movs	r4, #0
 800ad18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	4798      	blx	r3
 800ad20:	2000      	movs	r0, #0
 800ad22:	e7e0      	b.n	800ace6 <_raise_r+0x12>

0800ad24 <raise>:
 800ad24:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <raise+0xc>)
 800ad26:	4601      	mov	r1, r0
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f7ff bfd3 	b.w	800acd4 <_raise_r>
 800ad2e:	bf00      	nop
 800ad30:	20000010 	.word	0x20000010

0800ad34 <_kill_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	; (800ad54 <_kill_r+0x20>)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	4611      	mov	r1, r2
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	f7f6 ff4f 	bl	8001be4 <_kill>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d102      	bne.n	800ad50 <_kill_r+0x1c>
 800ad4a:	682b      	ldr	r3, [r5, #0]
 800ad4c:	b103      	cbz	r3, 800ad50 <_kill_r+0x1c>
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	bf00      	nop
 800ad54:	200004c4 	.word	0x200004c4

0800ad58 <_getpid_r>:
 800ad58:	f7f6 bf3c 	b.w	8001bd4 <_getpid>

0800ad5c <__sread>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	f000 f894 	bl	800ae90 <_read_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bfab      	itete	ge
 800ad6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad70:	181b      	addge	r3, r3, r0
 800ad72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad76:	bfac      	ite	ge
 800ad78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad7a:	81a3      	strhlt	r3, [r4, #12]
 800ad7c:	bd10      	pop	{r4, pc}

0800ad7e <__swrite>:
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	461f      	mov	r7, r3
 800ad84:	898b      	ldrh	r3, [r1, #12]
 800ad86:	05db      	lsls	r3, r3, #23
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	d505      	bpl.n	800ad9c <__swrite+0x1e>
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2302      	movs	r3, #2
 800ad96:	2200      	movs	r2, #0
 800ad98:	f000 f868 	bl	800ae6c <_lseek_r>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	4628      	mov	r0, r5
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	f000 b817 	b.w	800ade4 <_write_r>

0800adb6 <__sseek>:
 800adb6:	b510      	push	{r4, lr}
 800adb8:	460c      	mov	r4, r1
 800adba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbe:	f000 f855 	bl	800ae6c <_lseek_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	bf15      	itete	ne
 800adc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800add2:	81a3      	strheq	r3, [r4, #12]
 800add4:	bf18      	it	ne
 800add6:	81a3      	strhne	r3, [r4, #12]
 800add8:	bd10      	pop	{r4, pc}

0800adda <__sclose>:
 800adda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adde:	f000 b813 	b.w	800ae08 <_close_r>
	...

0800ade4 <_write_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	; (800ae04 <_write_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f6 ff2d 	bl	8001c52 <_write>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_write_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_write_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	200004c4 	.word	0x200004c4

0800ae08 <_close_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d06      	ldr	r5, [pc, #24]	; (800ae24 <_close_r+0x1c>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	f7f6 ff39 	bl	8001c8a <_close>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_close_r+0x1a>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_close_r+0x1a>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	200004c4 	.word	0x200004c4

0800ae28 <_fstat_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_fstat_r+0x20>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	4611      	mov	r1, r2
 800ae34:	602b      	str	r3, [r5, #0]
 800ae36:	f7f6 ff34 	bl	8001ca2 <_fstat>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d102      	bne.n	800ae44 <_fstat_r+0x1c>
 800ae3e:	682b      	ldr	r3, [r5, #0]
 800ae40:	b103      	cbz	r3, 800ae44 <_fstat_r+0x1c>
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop
 800ae48:	200004c4 	.word	0x200004c4

0800ae4c <_isatty_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d06      	ldr	r5, [pc, #24]	; (800ae68 <_isatty_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	602b      	str	r3, [r5, #0]
 800ae58:	f7f6 ff33 	bl	8001cc2 <_isatty>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_isatty_r+0x1a>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_isatty_r+0x1a>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	200004c4 	.word	0x200004c4

0800ae6c <_lseek_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	; (800ae8c <_lseek_r+0x20>)
 800ae70:	4604      	mov	r4, r0
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	2200      	movs	r2, #0
 800ae78:	602a      	str	r2, [r5, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f7f6 ff2c 	bl	8001cd8 <_lseek>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_lseek_r+0x1e>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_lseek_r+0x1e>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	200004c4 	.word	0x200004c4

0800ae90 <_read_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_read_r+0x20>)
 800ae94:	4604      	mov	r4, r0
 800ae96:	4608      	mov	r0, r1
 800ae98:	4611      	mov	r1, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f6 feba 	bl	8001c18 <_read>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_read_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_read_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	200004c4 	.word	0x200004c4

0800aeb4 <_init>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr

0800aec0 <_fini>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr
