
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800af18  0800af18  0001af18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b334  0800b334  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b33c  0800b33c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b340  0800b340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e0  0800b524  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800b524  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aad5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a1  00000000  00000000  0003ace5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029086  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019672  00000000  00000000  000696c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8642  00000000  00000000  00082d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b37a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  0017b3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aefc 	.word	0x0800aefc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aefc 	.word	0x0800aefc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <pid_init>:
 */

#include "PID_controller.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float dt_init, int anti_windup_limit_init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6178      	str	r0, [r7, #20]
 8000ee8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eec:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ef0:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ef4:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	pid_data->previous_error = 0;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
	pid_data->previous_integral = 0;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]

	pid_data->Kp = kp_init;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	615a      	str	r2, [r3, #20]
	pid_data->Ki = ki_init;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	619a      	str	r2, [r3, #24]
	pid_data->Kd = kd_init;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	61da      	str	r2, [r3, #28]
	pid_data->dt = dt_init;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	621a      	str	r2, [r3, #32]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <pid_calculate>:

int pid_calculate(pid_str *pid_data, int setpoint, int frequency)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b08b      	sub	sp, #44	; 0x2c
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;
	uint16_t PID;

	  error = setpoint - frequency;
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	61fb      	str	r3, [r7, #28]

	  p_term = (float)(pid_data->Kp * error);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5e:	edc7 7a06 	vstr	s15, [r7, #24]

	  pid_data->integral = pid_data->previous_integral + (error + pid_data->previous_error);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	441a      	add	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	60da      	str	r2, [r3, #12]
	  pid_data->previous_integral = pid_data->integral;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	609a      	str	r2, [r3, #8]
	  i_term = pid_data->Ki*pid_data->integral*(pid_data->dt/2);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 6a08 	vldr	s13, [r3, #32]
 8000f98:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000f9c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  pid_data->derivative = (error - pid_data->previous_error)/pid_data->dt;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 2a90 	vmov	r2, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
	  pid_data->previous_error = error;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	601a      	str	r2, [r3, #0]
	  d_term = pid_data->Kd*pid_data->derivative;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	edc7 7a05 	vstr	s15, [r7, #20]

	  if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	db08      	blt.n	800101a <pid_calculate+0xe4>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001018:	e016      	b.n	8001048 <pid_calculate+0x112>
	  else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	425b      	negs	r3, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800102c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d808      	bhi.n	8001048 <pid_calculate+0x112>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	425b      	negs	r3, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  PID = (uint16_t)(p_term + i_term + d_term);
 8001048:	ed97 7a06 	vldr	s14, [r7, #24]
 800104c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	edd7 7a05 	vldr	s15, [r7, #20]
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001060:	ee17 3a90 	vmov	r3, s15
 8001064:	847b      	strh	r3, [r7, #34]	; 0x22

	  if (PID > 1000)
 8001066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106c:	d902      	bls.n	8001074 <pid_calculate+0x13e>
	  {
		  PID = 1000;
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	847b      	strh	r3, [r7, #34]	; 0x22
	  else if(PID < 0)
	  {
		  PID = 0;
	  }

	  return PID;
 8001074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8001076:	4618      	mov	r0, r3
 8001078:	372c      	adds	r7, #44	; 0x2c
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC1_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_ADC1_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC1_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC1_Init+0x98>)
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_ADC1_Init+0xa0>)
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC1_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_ADC1_Init+0x98>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x98>)
 80010de:	2201      	movs	r2, #1
 80010e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <MX_ADC1_Init+0x98>)
 80010e4:	f001 fa3a 	bl	800255c <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 fd0f 	bl	8001b10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f2:	2303      	movs	r3, #3
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_ADC1_Init+0x98>)
 8001104:	f001 fa6e 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110e:	f000 fcff 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000224 	.word	0x20000224
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x74>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d123      	bne.n	8001192 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0x78>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117a:	2308      	movs	r3, #8
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x7c>)
 800118e:	f001 fe1d 	bl	8002dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <MX_GPIO_Init+0x21c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a62      	ldr	r2, [pc, #392]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a5c      	ldr	r2, [pc, #368]	; (80013c4 <MX_GPIO_Init+0x21c>)
 8001254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <MX_GPIO_Init+0x21c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f244 0181 	movw	r1, #16513	; 0x4081
 800126c:	4856      	ldr	r0, [pc, #344]	; (80013c8 <MX_GPIO_Init+0x220>)
 800126e:	f001 ff59 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4855      	ldr	r0, [pc, #340]	; (80013cc <MX_GPIO_Init+0x224>)
 8001278:	f001 ff54 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	484f      	ldr	r0, [pc, #316]	; (80013d0 <MX_GPIO_Init+0x228>)
 8001294:	f001 fd9a 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001298:	2332      	movs	r3, #50	; 0x32
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4847      	ldr	r0, [pc, #284]	; (80013d0 <MX_GPIO_Init+0x228>)
 80012b4:	f001 fd8a 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b8:	2386      	movs	r3, #134	; 0x86
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c8:	230b      	movs	r3, #11
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4840      	ldr	r0, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x22c>)
 80012d4:	f001 fd7a 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <MX_GPIO_Init+0x220>)
 80012f2:	f001 fd6b 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001308:	230b      	movs	r3, #11
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <MX_GPIO_Init+0x220>)
 8001314:	f001 fd5a 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <MX_GPIO_Init+0x224>)
 8001330:	f001 fd4c 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <MX_GPIO_Init+0x224>)
 8001348:	f001 fd40 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800134c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800135e:	230a      	movs	r3, #10
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_GPIO_Init+0x22c>)
 800136a:	f001 fd2f 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_GPIO_Init+0x22c>)
 8001384:	f001 fd22 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001388:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139a:	230b      	movs	r3, #11
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <MX_GPIO_Init+0x224>)
 80013a6:	f001 fd11 	bl	8002dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f001 fc43 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f001 fc5c 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3730      	adds	r7, #48	; 0x30
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000

080013d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <MX_I2C1_Init+0x7c>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_I2C1_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_I2C1_Init+0x74>)
 8001414:	f001 fec4 	bl	80031a0 <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800141e:	f000 fb77 	bl	8001b10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001426:	f002 fa3d 	bl	80038a4 <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001430:	f000 fb6e 	bl	8001b10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_I2C1_Init+0x74>)
 8001438:	f002 fa7f 	bl	800393a <HAL_I2CEx_ConfigDigitalFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 fb65 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000026c 	.word	0x2000026c
 8001450:	40005400 	.word	0x40005400
 8001454:	00808cd2 	.word	0x00808cd2

08001458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x7c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d128      	bne.n	80014cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001492:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a4:	2304      	movs	r3, #4
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <HAL_I2C_MspInit+0x84>)
 80014b0:	f001 fc8c 	bl	8002dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_I2C_MspInit+0x80>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80014f6:	2308      	movs	r3, #8
 80014f8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f001 f80a 	bl	8002514 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	2130      	movs	r1, #48	; 0x30
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f829 	bl	8001560 <lcd_write>
	HAL_Delay(5);
 800150e:	2005      	movs	r0, #5
 8001510:	f001 f800 	bl	8002514 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	2130      	movs	r1, #48	; 0x30
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f81f 	bl	8001560 <lcd_write>
	HAL_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 fff6 	bl	8002514 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	2130      	movs	r1, #48	; 0x30
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f815 	bl	8001560 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f80e 	bl	8001560 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	210c      	movs	r1, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f807 	bl	8001560 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f89f 	bl	8001696 <lcd_clear>

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2da      	uxtb	r2, r3
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001588:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800158c:	f023 030f 	bic.w	r3, r3, #15
 8001590:	b25a      	sxtb	r2, r3
 8001592:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001596:	4313      	orrs	r3, r2
 8001598:	b25b      	sxtb	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	797b      	ldrb	r3, [r7, #5]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f107 020c 	add.w	r2, r7, #12
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2304      	movs	r3, #4
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <lcd_write+0x88>)
 80015d4:	f001 fe74 	bl	80032c0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80015d8:	2005      	movs	r0, #5
 80015da:	f000 ff9b 	bl	8002514 <HAL_Delay>
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000026c 	.word	0x2000026c

080015ec <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	2300      	movs	r3, #0
 80015fa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001606:	2308      	movs	r3, #8
 8001608:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f843 	bl	8001696 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffa1 	bl	8001560 <lcd_write>
	while(lcd->f_line[i])
 800161e:	e00f      	b.n	8001640 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7818      	ldrb	r0, [r3, #0]
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	7859      	ldrb	r1, [r3, #1]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff ff93 	bl	8001560 <lcd_write>
		i++;
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	3301      	adds	r3, #1
 800163e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	21c0      	movs	r1, #192	; 0xc0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff81 	bl	8001560 <lcd_write>
	while(lcd->s_line[i])
 800165e:	e00f      	b.n	8001680 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7818      	ldrb	r0, [r3, #0]
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	7c99      	ldrb	r1, [r3, #18]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	f7ff ff73 	bl	8001560 <lcd_write>
		i++;
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	3301      	adds	r3, #1
 800167e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	7c9b      	ldrb	r3, [r3, #18]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e9      	bne.n	8001660 <lcd_display+0x74>
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80016ac:	2308      	movs	r3, #8
 80016ae:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	2101      	movs	r1, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff51 	bl	8001560 <lcd_write>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_UART_RxCpltCallback>:

//LCD
struct lcd_disp disp;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_UART_RxCpltCallback+0x4c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d118      	bne.n	800170c <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_UART_RxCpltCallback+0x50>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_UART_RxCpltCallback+0x54>)
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <HAL_UART_RxCpltCallback+0x58>)
 80016e6:	f005 f9f7 	bl	8006ad8 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg_str, msg_len);
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_UART_RxCpltCallback+0x50>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	490a      	ldr	r1, [pc, #40]	; (800171c <HAL_UART_RxCpltCallback+0x54>)
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <HAL_UART_RxCpltCallback+0x58>)
 80016f6:	f005 f981 	bl	80069fc <HAL_UART_Transmit_IT>
		counter_usart = atoi(msg_str);
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_UART_RxCpltCallback+0x54>)
 80016fc:	f006 fca4 	bl	8008048 <atoi>
 8001700:	4603      	mov	r3, r0
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_UART_RxCpltCallback+0x5c>)
 8001704:	6013      	str	r3, [r2, #0]
		flag = 1;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_UART_RxCpltCallback+0x60>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	}
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004800 	.word	0x40004800
 8001718:	20000000 	.word	0x20000000
 800171c:	200002c8 	.word	0x200002c8
 8001720:	20000444 	.word	0x20000444
 8001724:	20000210 	.word	0x20000210
 8001728:	20000214 	.word	0x20000214

0800172c <HAL_TIM_IC_CaptureCallback>:

// INPUT CAPTURE FUNCTION
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d148      	bne.n	80017ce <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f004 fa96 	bl	8005c78 <HAL_TIM_ReadCapturedValue>
 800174c:	4603      	mov	r3, r0
 800174e:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001750:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e039      	b.n	80017ce <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800175a:	2100      	movs	r1, #0
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f004 fa8b 	bl	8005c78 <HAL_TIM_ReadCapturedValue>
 8001762:	4603      	mov	r3, r0
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001766:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xc0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d907      	bls.n	8001784 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xc0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00d      	b.n	80017a0 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d907      	bls.n	80017a0 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800179e:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80017a2:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]


		}
	}

	  if(output == 0)
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	  }
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000208 	.word	0x20000208
 80017ec:	200001fc 	.word	0x200001fc
 80017f0:	20000200 	.word	0x20000200
 80017f4:	20000204 	.word	0x20000204
 80017f8:	49742400 	.word	0x49742400
 80017fc:	2000020c 	.word	0x2000020c
 8001800:	200002c0 	.word	0x200002c0

08001804 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af04      	add	r7, sp, #16
 800180a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a31      	ldr	r2, [pc, #196]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d15c      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0xcc>
  {
//	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint16_t)(readADC_f));


	  	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001820:	801a      	strh	r2, [r3, #0]

	  	  if (flag == 1)
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <HAL_TIM_PeriodElapsedCallback+0x38>
	  	  {
	  		u = counter_usart;
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001830:	6013      	str	r3, [r2, #0]
	  		counter = counter_usart;
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800183a:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if (temp_counter != counter) {
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	461a      	mov	r2, r3
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d007      	beq.n	800185c <HAL_TIM_PeriodElapsedCallback+0x58>
			flag = 0;
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			u = counter;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800185a:	601a      	str	r2, [r3, #0]
		}

	  	temp_counter = __HAL_TIM_GET_COUNTER(&htim3);
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	b21a      	sxth	r2, r3
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001866:	801a      	strh	r2, [r3, #0]

	  	output = pid_calculate(&(pid_controller), u, frequency);
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800186e:	edd2 7a00 	vldr	s15, [r2]
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 2a90 	vmov	r2, s15
 800187a:	4619      	mov	r1, r3
 800187c:	481e      	ldr	r0, [pc, #120]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800187e:	f7ff fb5a 	bl	8000f36 <pid_calculate>
 8001882:	4603      	mov	r3, r0
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001886:	6013      	str	r3, [r2, #0]
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, output);
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c

//
//  		n = sprintf(data_msg, " U:%4d, V:%.2f, Y:%4d,\r\n", (int)output, frequency, (int)u);
  		n = sprintf(data_msg, "%.2f\r\n", (int)output, frequency, (int)u);
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001894:	681c      	ldr	r4, [r3, #0]
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe74 	bl	8000588 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4911      	ldr	r1, [pc, #68]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018a6:	6809      	ldr	r1, [r1, #0]
 80018a8:	9102      	str	r1, [sp, #8]
 80018aa:	e9cd 2300 	strd	r2, r3, [sp]
 80018ae:	4622      	mov	r2, r4
 80018b0:	4914      	ldr	r1, [pc, #80]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80018b2:	4815      	ldr	r0, [pc, #84]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018b4:	f007 f868 	bl	8008988 <siprintf>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018be:	701a      	strb	r2, [r3, #0]
  		HAL_UART_Transmit_IT(&huart3, (uint8_t*)data_msg, n);
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	490f      	ldr	r1, [pc, #60]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018cc:	f005 f896 	bl	80069fc <HAL_UART_Transmit_IT>
  }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	40010000 	.word	0x40010000
 80018dc:	20000360 	.word	0x20000360
 80018e0:	200002c6 	.word	0x200002c6
 80018e4:	20000214 	.word	0x20000214
 80018e8:	20000210 	.word	0x20000210
 80018ec:	200002f8 	.word	0x200002f8
 80018f0:	200002bc 	.word	0x200002bc
 80018f4:	2000020c 	.word	0x2000020c
 80018f8:	200002cc 	.word	0x200002cc
 80018fc:	200002c0 	.word	0x200002c0
 8001900:	200003ac 	.word	0x200003ac
 8001904:	0800af18 	.word	0x0800af18
 8001908:	20000320 	.word	0x20000320
 800190c:	20000001 	.word	0x20000001
 8001910:	20000444 	.word	0x20000444

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f000 fd9f 	bl	800245a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f86a 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001920:	f7ff fc42 	bl	80011a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001924:	f000 fa50 	bl	8001dc8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001928:	f7ff fbac 	bl	8001084 <MX_ADC1_Init>
  MX_TIM2_Init();
 800192c:	f000 fafa 	bl	8001f24 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001930:	f7ff fd52 	bl	80013d8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001934:	f000 fb72 	bl	800201c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001938:	f000 fcea 	bl	8002310 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800193c:	481e      	ldr	r0, [pc, #120]	; (80019b8 <main+0xa4>)
 800193e:	f003 f947 	bl	8004bd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001942:	2108      	movs	r1, #8
 8001944:	481c      	ldr	r0, [pc, #112]	; (80019b8 <main+0xa4>)
 8001946:	f003 fa1d 	bl	8004d84 <HAL_TIM_PWM_Start>

//PID
  pid_init(&(pid_controller), FAN_Kp, FAN_Ki, FAN_Kd, FAN_dt, FAN_ANTI_WINDUP);
 800194a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800194e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80019bc <main+0xa8>
 8001952:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80019c0 <main+0xac>
 8001956:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80019c4 <main+0xb0>
 800195a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80019c8 <main+0xb4>
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <main+0xb8>)
 8001960:	f7ff fabe 	bl	8000ee0 <pid_init>

// Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	481a      	ldr	r0, [pc, #104]	; (80019d0 <main+0xbc>)
 8001968:	f003 fb68 	bl	800503c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800196c:	2108      	movs	r1, #8
 800196e:	4818      	ldr	r0, [pc, #96]	; (80019d0 <main+0xbc>)
 8001970:	f003 fb64 	bl	800503c <HAL_TIM_IC_Start_IT>

//  Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001974:	213c      	movs	r1, #60	; 0x3c
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <main+0xc0>)
 8001978:	f003 fd56 	bl	8005428 <HAL_TIM_Encoder_Start>
//USART
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <main+0xc4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4915      	ldr	r1, [pc, #84]	; (80019dc <main+0xc8>)
 8001986:	4816      	ldr	r0, [pc, #88]	; (80019e0 <main+0xcc>)
 8001988:	f005 f8a6 	bl	8006ad8 <HAL_UART_Receive_IT>


  // LCD init
  disp.addr = (0x27 << 1);
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <main+0xd0>)
 800198e:	224e      	movs	r2, #78	; 0x4e
 8001990:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <main+0xd0>)
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <main+0xd0>)
 800199c:	f7ff fda0 	bl	80014e0 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 80019a0:	4911      	ldr	r1, [pc, #68]	; (80019e8 <main+0xd4>)
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <main+0xd8>)
 80019a4:	f006 fff0 	bl	8008988 <siprintf>
  sprintf((char *)&disp.s_line, "################");
 80019a8:	490f      	ldr	r1, [pc, #60]	; (80019e8 <main+0xd4>)
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <main+0xdc>)
 80019ac:	f006 ffec 	bl	8008988 <siprintf>

  lcd_display(&disp);
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <main+0xd0>)
 80019b2:	f7ff fe1b 	bl	80015ec <lcd_display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <main+0xa2>
 80019b8:	200003ac 	.word	0x200003ac
 80019bc:	3a83126f 	.word	0x3a83126f
 80019c0:	00000000 	.word	0x00000000
 80019c4:	41073d08 	.word	0x41073d08
 80019c8:	3ec313be 	.word	0x3ec313be
 80019cc:	200002cc 	.word	0x200002cc
 80019d0:	200003f8 	.word	0x200003f8
 80019d4:	20000360 	.word	0x20000360
 80019d8:	20000000 	.word	0x20000000
 80019dc:	200002c8 	.word	0x200002c8
 80019e0:	20000444 	.word	0x20000444
 80019e4:	200002fc 	.word	0x200002fc
 80019e8:	0800af20 	.word	0x0800af20
 80019ec:	200002fd 	.word	0x200002fd
 80019f0:	2000030e 	.word	0x2000030e

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0b4      	sub	sp, #208	; 0xd0
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019fe:	2230      	movs	r2, #48	; 0x30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fb4e 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2284      	movs	r2, #132	; 0x84
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f006 fb3f 	bl	80080a4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a26:	f001 ffd5 	bl	80039d4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <SystemClock_Config+0x114>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <SystemClock_Config+0x114>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <SystemClock_Config+0x114>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <SystemClock_Config+0x118>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <SystemClock_Config+0x118>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <SystemClock_Config+0x118>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a80:	2348      	movs	r3, #72	; 0x48
 8001a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 ffac 	bl	80039f4 <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001aa2:	f000 f835 	bl	8001b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001aca:	2102      	movs	r1, #2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fa35 	bl	8003f3c <HAL_RCC_ClockConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001ad8:	f000 f81a 	bl	8001b10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001adc:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001ae0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fc26 	bl	8004340 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001afa:	f000 f809 	bl	8001b10 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	37d0      	adds	r7, #208	; 0xd0
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>
	...

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 fc90 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bbe:	f003 fcc1 	bl	8005544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003ac 	.word	0x200003ac

08001bcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <TIM2_IRQHandler+0x10>)
 8001bd2:	f003 fcb7 	bl	8005544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200003f8 	.word	0x200003f8

08001be0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM3_IRQHandler+0x10>)
 8001be6:	f003 fcad 	bl	8005544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000360 	.word	0x20000360

08001bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <USART3_IRQHandler+0x10>)
 8001bfa:	f004 ffbb 	bl	8006b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000444 	.word	0x20000444

08001c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c10:	f001 faa2 	bl	8003158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_kill>:

int _kill(int pid, int sig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c32:	f006 fa0d 	bl	8008050 <__errno>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_exit>:

void _exit (int status)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe7 	bl	8001c28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c5a:	e7fe      	b.n	8001c5a <_exit+0x12>

08001c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
	}

return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
	}
	return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f006 f972 	bl	8008050 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20050000 	.word	0x20050000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	20000218 	.word	0x20000218
 8001da0:	200004e0 	.word	0x200004e0

08001da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b09a      	sub	sp, #104	; 0x68
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	222c      	movs	r2, #44	; 0x2c
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f006 f94e 	bl	80080a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e08:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_TIM1_Init+0x158>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e10:	2247      	movs	r2, #71	; 0x47
 8001e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e28:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e34:	4839      	ldr	r0, [pc, #228]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e36:	f002 fe73 	bl	8004b20 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e40:	f7ff fe66 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4832      	ldr	r0, [pc, #200]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e52:	f003 fe47 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e5c:	f7ff fe58 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e60:	482e      	ldr	r0, [pc, #184]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e62:	f002 ff2d 	bl	8004cc0 <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e6c:	f7ff fe50 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4826      	ldr	r0, [pc, #152]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001e84:	f004 fc42 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e8e:	f7ff fe3f 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e92:	2360      	movs	r3, #96	; 0x60
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001e96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4818      	ldr	r0, [pc, #96]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001eba:	f003 fcff 	bl	80058bc <HAL_TIM_PWM_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ec4:	f7ff fe24 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001efe:	f004 fc93 	bl	8006828 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001f08:	f7ff fe02 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <MX_TIM1_Init+0x154>)
 8001f0e:	f000 f9c7 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 8001f12:	bf00      	nop
 8001f14:	3768      	adds	r7, #104	; 0x68
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003ac 	.word	0x200003ac
 8001f20:	40010000 	.word	0x40010000

08001f24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f5a:	2247      	movs	r2, #71	; 0x47
 8001f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f78:	4827      	ldr	r0, [pc, #156]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f7a:	f002 fdd1 	bl	8004b20 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001f84:	f7ff fdc4 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	4619      	mov	r1, r3
 8001f94:	4820      	ldr	r0, [pc, #128]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001f96:	f003 fda5 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001fa0:	f7ff fdb6 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001fa4:	481c      	ldr	r0, [pc, #112]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001fa6:	f002 ffe7 	bl	8004f78 <HAL_TIM_IC_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001fb0:	f7ff fdae 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4815      	ldr	r0, [pc, #84]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001fc4:	f004 fba2 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001fce:	f7ff fd9f 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <MX_TIM2_Init+0xf4>)
 8001fea:	f003 fbca 	bl	8005782 <HAL_TIM_IC_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001ff4:	f7ff fd8c 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_TIM2_Init+0xf4>)
 8002000:	f003 fbbf 	bl	8005782 <HAL_TIM_IC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800200a:	f7ff fd81 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200003f8 	.word	0x200003f8

0800201c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f006 f83a 	bl	80080a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_TIM3_Init+0xa0>)
 800203c:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <MX_TIM3_Init+0xa4>)
 800203e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_TIM3_Init+0xa0>)
 8002042:	2200      	movs	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MX_TIM3_Init+0xa0>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_TIM3_Init+0xa0>)
 800204e:	2264      	movs	r2, #100	; 0x64
 8002050:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_TIM3_Init+0xa0>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <MX_TIM3_Init+0xa0>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800205e:	2303      	movs	r3, #3
 8002060:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002066:	2301      	movs	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002076:	2301      	movs	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	4619      	mov	r1, r3
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <MX_TIM3_Init+0xa0>)
 800208a:	f003 f927 	bl	80052dc <HAL_TIM_Encoder_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002094:	f7ff fd3c 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_TIM3_Init+0xa0>)
 80020a6:	f004 fb31 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020b0:	f7ff fd2e 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	3730      	adds	r7, #48	; 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000360 	.word	0x20000360
 80020c0:	40000400 	.word	0x40000400

080020c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a36      	ldr	r2, [pc, #216]	; (80021bc <HAL_TIM_Base_MspInit+0xf8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d114      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2019      	movs	r0, #25
 8002104:	f000 fd99 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002108:	2019      	movs	r0, #25
 800210a:	f000 fdb2 	bl	8002c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800210e:	e051      	b.n	80021b4 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d14c      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_TIM_Base_MspInit+0xfc>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216a:	2301      	movs	r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002172:	2301      	movs	r3, #1
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4811      	ldr	r0, [pc, #68]	; (80021c4 <HAL_TIM_Base_MspInit+0x100>)
 800217e:	f000 fe25 	bl	8002dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	480a      	ldr	r0, [pc, #40]	; (80021c8 <HAL_TIM_Base_MspInit+0x104>)
 80021a0:	f000 fe14 	bl	8002dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	201c      	movs	r0, #28
 80021aa:	f000 fd46 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ae:	201c      	movs	r0, #28
 80021b0:	f000 fd5f 	bl	8002c72 <HAL_NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a29      	ldr	r2, [pc, #164]	; (8002290 <HAL_TIM_Encoder_MspInit+0xc4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d14b      	bne.n	8002286 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_TIM_Encoder_MspInit+0xc8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4811      	ldr	r0, [pc, #68]	; (8002298 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002252:	f000 fdbb 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002266:	2302      	movs	r3, #2
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	480a      	ldr	r0, [pc, #40]	; (800229c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002272:	f000 fdab 	bl	8002dcc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	201d      	movs	r0, #29
 800227c:	f000 fcdd 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002280:	201d      	movs	r0, #29
 8002282:	f000 fcf6 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40000400 	.word	0x40000400
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020800 	.word	0x40020800

080022a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_TIM_MspPostInit+0x64>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11c      	bne.n	80022fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022f8:	f000 fd68 	bl	8002dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40010000 	.word	0x40010000
 8002308:	40023800 	.word	0x40023800
 800230c:	40021000 	.word	0x40021000

08002310 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <MX_USART3_UART_Init+0x5c>)
 8002318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_USART3_UART_Init+0x58>)
 800231c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_USART3_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_USART3_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_USART3_UART_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_USART3_UART_Init+0x58>)
 8002354:	f004 fb04 	bl	8006960 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800235e:	f7ff fbd7 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000444 	.word	0x20000444
 800236c:	40004800 	.word	0x40004800

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_UART_MspInit+0x8c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d130      	bne.n	80023f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_UART_MspInit+0x90>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <HAL_UART_MspInit+0x90>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_UART_MspInit+0x90>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0x90>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_UART_MspInit+0x90>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_UART_MspInit+0x90>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d4:	2307      	movs	r3, #7
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_UART_MspInit+0x94>)
 80023e0:	f000 fcf4 	bl	8002dcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	2027      	movs	r0, #39	; 0x27
 80023ea:	f000 fc26 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023ee:	2027      	movs	r0, #39	; 0x27
 80023f0:	f000 fc3f 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40004800 	.word	0x40004800
 8002400:	40023800 	.word	0x40023800
 8002404:	40020c00 	.word	0x40020c00

08002408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800240e:	490e      	ldr	r1, [pc, #56]	; (8002448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002424:	4c0b      	ldr	r4, [pc, #44]	; (8002454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002432:	f7ff fcb7 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002436:	f005 fe11 	bl	800805c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243a:	f7ff fa6b 	bl	8001914 <main>
  bx  lr    
 800243e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800244c:	0800b344 	.word	0x0800b344
  ldr r2, =_sbss
 8002450:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002454:	200004dc 	.word	0x200004dc

08002458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>

0800245a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245e:	2003      	movs	r0, #3
 8002460:	f000 fbe0 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002464:	2000      	movs	r0, #0
 8002466:	f000 f805 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246a:	f7ff fb57 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fbfb 	bl	8002c8e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 fbc3 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000004 	.word	0x20000004
 80024cc:	2000000c 	.word	0x2000000c
 80024d0:	20000008 	.word	0x20000008

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	200004c8 	.word	0x200004c8

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200004c8 	.word	0x200004c8

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000000c 	.word	0x2000000c

0800255c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e031      	b.n	80025d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fdd4 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_ADC_Init+0x84>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f970 	bl	8002890 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	ffffeefd 	.word	0xffffeefd

080025e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e136      	b.n	800286e <HAL_ADC_ConfigChannel+0x28a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d93a      	bls.n	8002686 <HAL_ADC_ConfigChannel+0xa2>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002618:	d035      	beq.n	8002686 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68d9      	ldr	r1, [r3, #12]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3b1e      	subs	r3, #30
 8002630:	2207      	movs	r2, #7
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a8d      	ldr	r2, [pc, #564]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10a      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	061a      	lsls	r2, r3, #24
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265e:	e035      	b.n	80026cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	4603      	mov	r3, r0
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4403      	add	r3, r0
 8002678:	3b1e      	subs	r3, #30
 800267a:	409a      	lsls	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002684:	e022      	b.n	80026cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	2207      	movs	r2, #7
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	4603      	mov	r3, r0
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4403      	add	r3, r0
 80026c2:	409a      	lsls	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d824      	bhi.n	800271e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b05      	subs	r3, #5
 80026e6:	221f      	movs	r2, #31
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43da      	mvns	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	400a      	ands	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b05      	subs	r3, #5
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
 800271c:	e04c      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d824      	bhi.n	8002770 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b23      	subs	r3, #35	; 0x23
 8002738:	221f      	movs	r2, #31
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b23      	subs	r3, #35	; 0x23
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	e023      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b41      	subs	r3, #65	; 0x41
 8002782:	221f      	movs	r2, #31
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43da      	mvns	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	400a      	ands	r2, r1
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b41      	subs	r3, #65	; 0x41
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10a      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1f4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d105      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10f      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d10b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002800:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12b      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <HAL_ADC_ConfigChannel+0x23a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b11      	cmp	r3, #17
 800281c:	d122      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002824:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002828:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002834:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_ADC_ConfigChannel+0x2a4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_ADC_ConfigChannel+0x2a8>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9a      	lsrs	r2, r3, #18
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002856:	e002      	b.n	800285e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b01      	subs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	10000012 	.word	0x10000012
 8002880:	40012000 	.word	0x40012000
 8002884:	40012300 	.word	0x40012300
 8002888:	20000004 	.word	0x20000004
 800288c:	431bde83 	.word	0x431bde83

08002890 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <ADC_Init+0x1ec>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <ADC_Init+0x1ec>)
 800289e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028a4:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <ADC_Init+0x1ec>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4973      	ldr	r1, [pc, #460]	; (8002a7c <ADC_Init+0x1ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <ADC_Init+0x1f0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e00f      	b.n	800298a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0202 	bic.w	r2, r2, #2
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	005a      	lsls	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	035a      	lsls	r2, r3, #13
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	051a      	lsls	r2, r3, #20
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a42:	025a      	lsls	r2, r3, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	029a      	lsls	r2, r3, #10
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40012300 	.word	0x40012300
 8002a80:	0f000001 	.word	0x0f000001

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff3e 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff8e 	bl	8002b78 <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5d 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff31 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffa2 	bl	8002be0 <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff fc22 	bl	80024fc <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d008      	beq.n	8002cd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e052      	b.n	8002d7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0216 	bic.w	r2, r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <HAL_DMA_Abort+0x62>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d28:	e013      	b.n	8002d52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d2a:	f7ff fbe7 	bl	80024fc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d90c      	bls.n	8002d52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e015      	b.n	8002d7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e4      	bne.n	8002d2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	223f      	movs	r2, #63	; 0x3f
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e00c      	b.n	8002dbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2205      	movs	r2, #5
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e175      	b.n	80030d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 8164 	bne.w	80030d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x56>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80be 	beq.w	80030d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f6e:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <HAL_GPIO_Init+0x328>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_GPIO_Init+0x32c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d037      	beq.n	800300a <HAL_GPIO_Init+0x23e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_GPIO_Init+0x330>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d031      	beq.n	8003006 <HAL_GPIO_Init+0x23a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_GPIO_Init+0x334>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d02b      	beq.n	8003002 <HAL_GPIO_Init+0x236>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_GPIO_Init+0x338>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d025      	beq.n	8002ffe <HAL_GPIO_Init+0x232>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x33c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01f      	beq.n	8002ffa <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	; (800310c <HAL_GPIO_Init+0x340>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x22a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x344>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_GPIO_Init+0x348>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x222>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_GPIO_Init+0x34c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x21e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_GPIO_Init+0x350>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x21a>
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	e012      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fe6:	230a      	movs	r3, #10
 8002fe8:	e010      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fea:	2308      	movs	r3, #8
 8002fec:	e00e      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fee:	2307      	movs	r3, #7
 8002ff0:	e00c      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	e00a      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	e008      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ffe:	2303      	movs	r3, #3
 8003000:	e004      	b.n	800300c <HAL_GPIO_Init+0x240>
 8003002:	2302      	movs	r3, #2
 8003004:	e002      	b.n	800300c <HAL_GPIO_Init+0x240>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_GPIO_Init+0x240>
 800300a:	2300      	movs	r3, #0
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	f002 0203 	and.w	r2, r2, #3
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	4093      	lsls	r3, r2
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800301c:	4935      	ldr	r1, [pc, #212]	; (80030f4 <HAL_GPIO_Init+0x328>)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_GPIO_Init+0x354>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_GPIO_Init+0x354>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3301      	adds	r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	f67f ae86 	bls.w	8002dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	40020400 	.word	0x40020400
 8003100:	40020800 	.word	0x40020800
 8003104:	40020c00 	.word	0x40020c00
 8003108:	40021000 	.word	0x40021000
 800310c:	40021400 	.word	0x40021400
 8003110:	40021800 	.word	0x40021800
 8003114:	40021c00 	.word	0x40021c00
 8003118:	40022000 	.word	0x40022000
 800311c:	40022400 	.word	0x40022400
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316e:	4a05      	ldr	r2, [pc, #20]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f806 	bl	8003188 <HAL_GPIO_EXTI_Callback>
  }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe f946 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e006      	b.n	8003228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003238:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_I2C_Init+0x11c>)
 8003246:	430b      	orrs	r3, r1
 8003248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	02008000 	.word	0x02008000

080032c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	817b      	strh	r3, [r7, #10]
 80032d0:	4613      	mov	r3, r2
 80032d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	f040 80da 	bne.w	8003496 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2C_Master_Transmit+0x30>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0d3      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032f8:	f7ff f900 	bl	80024fc <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2319      	movs	r3, #25
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8f0 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0be      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2221      	movs	r2, #33	; 0x21
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2210      	movs	r2, #16
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2bff      	cmp	r3, #255	; 0xff
 800334a:	d90e      	bls.n	800336a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	b2da      	uxtb	r2, r3
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa6c 	bl	8003840 <I2C_TransferConfig>
 8003368:	e06c      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa5b 	bl	8003840 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800338a:	e05b      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f8ed 	bl	8003570 <I2C_WaitOnTXISFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e07b      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d034      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x184>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d130      	bne.n	8003444 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f87f 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04d      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d90e      	bls.n	8003424 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	b2da      	uxtb	r2, r3
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fa0f 	bl	8003840 <I2C_TransferConfig>
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f9fe 	bl	8003840 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d19e      	bne.n	800338c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8cc 	bl	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e01a      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	80002000 	.word	0x80002000
 80034a4:	fe00e800 	.word	0xfe00e800

080034a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d007      	beq.n	80034e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	619a      	str	r2, [r3, #24]
  }
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e022      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d01e      	beq.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe fff7 	bl	80024fc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d113      	bne.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00f      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d0cd      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800357c:	e02c      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f870 	bl	8003668 <I2C_IsErrorOccurred>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02a      	b.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d01e      	beq.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe ffaf 	bl	80024fc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d1cb      	bne.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fc:	e028      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f830 	bl	8003668 <I2C_IsErrorOccurred>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e026      	b.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fe ff73 	bl	80024fc <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d1cf      	bne.n	80035fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d075      	beq.n	8003780 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2210      	movs	r2, #16
 800369a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800369c:	e056      	b.n	800374c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d052      	beq.n	800374c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe ff29 	bl	80024fc <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_IsErrorOccurred+0x54>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d147      	bne.n	800374c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d12e      	bne.n	800373e <I2C_IsErrorOccurred+0xd6>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e6:	d02a      	beq.n	800373e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d027      	beq.n	800373e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036fe:	f7fe fefd 	bl	80024fc <HAL_GetTick>
 8003702:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003704:	e01b      	b.n	800373e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003706:	f7fe fef9 	bl	80024fc <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b19      	cmp	r3, #25
 8003712:	d914      	bls.n	800373e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b20      	cmp	r3, #32
 800374a:	d1dc      	bne.n	8003706 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d003      	beq.n	8003762 <I2C_IsErrorOccurred+0xfa>
 800375a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375e:	2b00      	cmp	r3, #0
 8003760:	d09d      	beq.n	800369e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2220      	movs	r2, #32
 8003770:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01c      	beq.n	8003830 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fe56 	bl	80034a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <I2C_IsErrorOccurred+0x1d4>)
 8003808:	400b      	ands	r3, r1
 800380a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	4613      	mov	r3, r2
 8003850:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003858:	7a7b      	ldrb	r3, [r7, #9]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003860:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	4313      	orrs	r3, r2
 800386a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800386e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	0d5b      	lsrs	r3, r3, #21
 800387a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <I2C_TransferConfig+0x60>)
 8003880:	430b      	orrs	r3, r1
 8003882:	43db      	mvns	r3, r3
 8003884:	ea02 0103 	and.w	r1, r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	03ff63ff 	.word	0x03ff63ff

080038a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d138      	bne.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e032      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b20      	cmp	r3, #32
 800394e:	d139      	bne.n	80039c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800395a:	2302      	movs	r3, #2
 800395c:	e033      	b.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	; 0x24
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800398c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40007000 	.word	0x40007000

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e291      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8087 	beq.w	8003b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	4b96      	ldr	r3, [pc, #600]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d00c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a24:	4b93      	ldr	r3, [pc, #588]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d112      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
 8003a30:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x130>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d168      	bne.n	8003b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e26b      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x7a>
 8003a60:	4b84      	ldr	r3, [pc, #528]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a83      	ldr	r2, [pc, #524]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e02e      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x9c>
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b7c      	ldr	r3, [pc, #496]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xc0>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b73      	ldr	r3, [pc, #460]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fd12 	bl	80024fc <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fd0e 	bl	80024fc <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e21f      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe8>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fcfe 	bl	80024fc <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fcfa 	bl	80024fc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e20b      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x110>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d069      	beq.n	8003c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1df      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	493d      	ldr	r1, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d023      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fcb0 	bl	80024fc <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fcac 	bl	80024fc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1bd      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4929      	ldr	r1, [pc, #164]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fc8c 	bl	80024fc <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe fc88 	bl	80024fc <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e199      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d038      	beq.n	8003c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fe fc69 	bl	80024fc <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fc65 	bl	80024fc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e176      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x23a>
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fc4f 	bl	80024fc <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fc4b 	bl	80024fc <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d903      	bls.n	8003c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e15c      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
 8003c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a4 	beq.w	8003dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a87      	ldr	r2, [pc, #540]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cc6:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a7e      	ldr	r2, [pc, #504]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fc13 	bl	80024fc <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe fc0f 	bl	80024fc <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e120      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cec:	4b75      	ldr	r3, [pc, #468]	; (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x31a>
 8003d00:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e02d      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x33c>
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	e01c      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d10c      	bne.n	8003d52 <HAL_RCC_OscConfig+0x35e>
 8003d38:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a60      	ldr	r2, [pc, #384]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	f043 0304 	orr.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e00b      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d52:	4b5b      	ldr	r3, [pc, #364]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d015      	beq.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fe fbc3 	bl	80024fc <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fbbf 	bl	80024fc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0ce      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ee      	beq.n	8003d7a <HAL_RCC_OscConfig+0x386>
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fbad 	bl	80024fc <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe fba9 	bl	80024fc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ee      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d105      	bne.n	8003dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dce:	4b3c      	ldr	r3, [pc, #240]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a4 	beq.w	8003f2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d06b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d149      	bne.n	8003e8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fb7a 	bl	80024fc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe fb76 	bl	80024fc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e087      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fb4a 	bl	80024fc <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fe fb46 	bl	80024fc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e057      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x478>
 8003e8a:	e04f      	b.n	8003f2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fb30 	bl	80024fc <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fb2c 	bl	80024fc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e03d      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4ac>
 8003ebe:	e035      	b.n	8003f2c <HAL_RCC_OscConfig+0x538>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x544>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d121      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d11a      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003efe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0d0      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d910      	bls.n	8003f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b67      	ldr	r3, [pc, #412]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	4965      	ldr	r1, [pc, #404]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0b8      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	494d      	ldr	r1, [pc, #308]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d040      	beq.n	8004060 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07f      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e073      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06b      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4936      	ldr	r1, [pc, #216]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004030:	f7fe fa64 	bl	80024fc <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fe fa60 	bl	80024fc <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e053      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d210      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e032      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4916      	ldr	r1, [pc, #88]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	490e      	ldr	r1, [pc, #56]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ce:	f000 f821 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040d2:	4602      	mov	r2, r0
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	490a      	ldr	r1, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x1cc>)
 80040e0:	5ccb      	ldrb	r3, [r1, r3]
 80040e2:	fa22 f303 	lsr.w	r3, r2, r3
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1d0>)
 80040e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1d4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f9c0 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023c00 	.word	0x40023c00
 8004104:	40023800 	.word	0x40023800
 8004108:	0800af34 	.word	0x0800af34
 800410c:	20000004 	.word	0x20000004
 8004110:	20000008 	.word	0x20000008

08004114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	2300      	movs	r3, #0
 8004126:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800412c:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d00d      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x40>
 8004138:	2b08      	cmp	r3, #8
 800413a:	f200 80bd 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x34>
 8004142:	2b04      	cmp	r3, #4
 8004144:	d003      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x3a>
 8004146:	e0b7      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800414a:	60bb      	str	r3, [r7, #8]
      break;
 800414c:	e0b7      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004150:	60bb      	str	r3, [r7, #8]
      break;
 8004152:	e0b4      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004154:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800415e:	4b5b      	ldr	r3, [pc, #364]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d04d      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416a:	4b58      	ldr	r3, [pc, #352]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	461a      	mov	r2, r3
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	ea02 0800 	and.w	r8, r2, r0
 8004182:	ea03 0901 	and.w	r9, r3, r1
 8004186:	4640      	mov	r0, r8
 8004188:	4649      	mov	r1, r9
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	014b      	lsls	r3, r1, #5
 8004194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004198:	0142      	lsls	r2, r0, #5
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	ebb0 0008 	subs.w	r0, r0, r8
 80041a2:	eb61 0109 	sbc.w	r1, r1, r9
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041b4:	0182      	lsls	r2, r0, #6
 80041b6:	1a12      	subs	r2, r2, r0
 80041b8:	eb63 0301 	sbc.w	r3, r3, r1
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	00d9      	lsls	r1, r3, #3
 80041c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ca:	00d0      	lsls	r0, r2, #3
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	eb12 0208 	adds.w	r2, r2, r8
 80041d4:	eb43 0309 	adc.w	r3, r3, r9
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	0259      	lsls	r1, r3, #9
 80041e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041e6:	0250      	lsls	r0, r2, #9
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	f7fc fcf6 	bl	8000be8 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e04a      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	461a      	mov	r2, r3
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	ea02 0400 	and.w	r4, r2, r0
 800421e:	ea03 0501 	and.w	r5, r3, r1
 8004222:	4620      	mov	r0, r4
 8004224:	4629      	mov	r1, r5
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	014b      	lsls	r3, r1, #5
 8004230:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004234:	0142      	lsls	r2, r0, #5
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	1b00      	subs	r0, r0, r4
 800423c:	eb61 0105 	sbc.w	r1, r1, r5
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	018b      	lsls	r3, r1, #6
 800424a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800424e:	0182      	lsls	r2, r0, #6
 8004250:	1a12      	subs	r2, r2, r0
 8004252:	eb63 0301 	sbc.w	r3, r3, r1
 8004256:	f04f 0000 	mov.w	r0, #0
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	00d9      	lsls	r1, r3, #3
 8004260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004264:	00d0      	lsls	r0, r2, #3
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	1912      	adds	r2, r2, r4
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	0299      	lsls	r1, r3, #10
 800427a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800427e:	0290      	lsls	r0, r2, #10
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	f7fc fcaa 	bl	8000be8 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	60bb      	str	r3, [r7, #8]
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ba:	60bb      	str	r3, [r7, #8]
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	68bb      	ldr	r3, [r7, #8]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000004 	.word	0x20000004

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	0800af44 	.word	0x0800af44

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800431c:	f7ff ffdc 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0b5b      	lsrs	r3, r3, #13
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	0800af44 	.word	0x0800af44

08004340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004368:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a68      	ldr	r2, [pc, #416]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	4964      	ldr	r1, [pc, #400]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800438a:	2301      	movs	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	4959      	ldr	r1, [pc, #356]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b8:	d101      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043d6:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	494a      	ldr	r1, [pc, #296]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 808b 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	4b3a      	ldr	r3, [pc, #232]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	4a39      	ldr	r2, [pc, #228]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a34      	ldr	r2, [pc, #208]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fe f858 	bl	80024fc <HAL_GetTick>
 800444c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fe f854 	bl	80024fc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e357      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004462:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d035      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d02e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d114      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fe f81c 	bl	80024fc <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fe f818 	bl	80024fc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e319      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ee      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f6:	d111      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004506:	400b      	ands	r3, r1
 8004508:	4901      	ldr	r1, [pc, #4]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
 800450e:	e00b      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	0ffffcff 	.word	0x0ffffcff
 800451c:	4bb1      	ldr	r3, [pc, #708]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4ab0      	ldr	r2, [pc, #704]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	4bae      	ldr	r3, [pc, #696]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800452a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	49ab      	ldr	r1, [pc, #684]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d010      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004546:	4ba7      	ldr	r3, [pc, #668]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	4aa5      	ldr	r2, [pc, #660]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004556:	4ba3      	ldr	r3, [pc, #652]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	49a0      	ldr	r1, [pc, #640]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004574:	4b9b      	ldr	r3, [pc, #620]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004582:	4998      	ldr	r1, [pc, #608]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004596:	4b93      	ldr	r3, [pc, #588]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	498f      	ldr	r1, [pc, #572]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045b8:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	4987      	ldr	r1, [pc, #540]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	497e      	ldr	r1, [pc, #504]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045fc:	4b79      	ldr	r3, [pc, #484]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	4976      	ldr	r1, [pc, #472]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800461e:	4b71      	ldr	r3, [pc, #452]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f023 020c 	bic.w	r2, r3, #12
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	496d      	ldr	r1, [pc, #436]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004640:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	4965      	ldr	r1, [pc, #404]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004662:	4b60      	ldr	r3, [pc, #384]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	495c      	ldr	r1, [pc, #368]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004684:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	4954      	ldr	r1, [pc, #336]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046a6:	4b4f      	ldr	r3, [pc, #316]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	494b      	ldr	r1, [pc, #300]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046c8:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	4943      	ldr	r1, [pc, #268]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	493a      	ldr	r1, [pc, #232]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471a:	4932      	ldr	r1, [pc, #200]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800472e:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	4929      	ldr	r1, [pc, #164]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800476e:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	4919      	ldr	r1, [pc, #100]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a0:	4910      	ldr	r1, [pc, #64]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d006      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80d9 	beq.w	800496e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fd fe98 	bl	80024fc <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ce:	e00b      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047d0:	f7fd fe94 	bl	80024fc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d904      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e197      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047e8:	4b6c      	ldr	r3, [pc, #432]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ed      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d021      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11d      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004808:	4b64      	ldr	r3, [pc, #400]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004816:	4b61      	ldr	r3, [pc, #388]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	019a      	lsls	r2, r3, #6
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	431a      	orrs	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	071b      	lsls	r3, r3, #28
 800483c:	4957      	ldr	r1, [pc, #348]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486e:	d129      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004870:	4b4a      	ldr	r3, [pc, #296]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800487e:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004884:	0f1b      	lsrs	r3, r3, #28
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	019a      	lsls	r2, r3, #6
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	431a      	orrs	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	071b      	lsls	r3, r3, #28
 80048a4:	493d      	ldr	r1, [pc, #244]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b2:	f023 021f 	bic.w	r2, r3, #31
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	3b01      	subs	r3, #1
 80048bc:	4937      	ldr	r1, [pc, #220]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	0e1b      	lsrs	r3, r3, #24
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e4:	0f1b      	lsrs	r3, r3, #28
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	431a      	orrs	r2, r3
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	071b      	lsls	r3, r3, #28
 8004904:	4925      	ldr	r1, [pc, #148]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	019a      	lsls	r2, r3, #6
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	071b      	lsls	r3, r3, #28
 8004934:	4919      	ldr	r1, [pc, #100]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004948:	f7fd fdd8 	bl	80024fc <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004950:	f7fd fdd4 	bl	80024fc <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0d7      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b01      	cmp	r3, #1
 8004972:	f040 80cd 	bne.w	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a08      	ldr	r2, [pc, #32]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fd fdbb 	bl	80024fc <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004988:	e00a      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800498a:	f7fd fdb7 	bl	80024fc <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b64      	cmp	r3, #100	; 0x64
 8004996:	d903      	bls.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ba      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800499c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a0:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ac:	d0ed      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d02e      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d12a      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049d6:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049e4:	4b4d      	ldr	r3, [pc, #308]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	0f1b      	lsrs	r3, r3, #28
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	019a      	lsls	r2, r3, #6
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	4944      	ldr	r1, [pc, #272]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	493d      	ldr	r1, [pc, #244]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d022      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a40:	d11d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	0e1b      	lsrs	r3, r3, #24
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a50:	4b32      	ldr	r3, [pc, #200]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	0f1b      	lsrs	r3, r3, #28
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	019a      	lsls	r2, r3, #6
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	071b      	lsls	r3, r3, #28
 8004a76:	4929      	ldr	r1, [pc, #164]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d028      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a98:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	019a      	lsls	r2, r3, #6
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	071b      	lsls	r3, r3, #28
 8004abe:	4917      	ldr	r1, [pc, #92]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4911      	ldr	r1, [pc, #68]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae8:	f7fd fd08 	bl	80024fc <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af0:	f7fd fd04 	bl	80024fc <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e007      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0e:	d1ef      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800

08004b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e049      	b.n	8004bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd fabc 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f001 f8ec 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d001      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e054      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d01d      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_TIM_Base_Start_IT+0xdc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d115      	bne.n	8004c7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <HAL_TIM_Base_Start_IT+0xec>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d015      	beq.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d011      	beq.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800
 8004cbc:	00010007 	.word	0x00010007

08004cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e049      	b.n	8004d66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f841 	bl	8004d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f001 f81c 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start+0x24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e03c      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x3e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e02f      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e022      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e015      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e008      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e092      	b.n	8004f50 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xb6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xc6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	e01b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0xe6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xf6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 fc18 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <HAL_TIM_PWM_Start+0x1d4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_PWM_Start+0x120>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <HAL_TIM_PWM_Start+0x1d8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x124>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_PWM_Start+0x126>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_TIM_PWM_Start+0x1d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_TIM_PWM_Start+0x1dc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_TIM_PWM_Start+0x1e4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_TIM_PWM_Start+0x1d8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_PWM_Start+0x1e8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_TIM_PWM_Start+0x1ec>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d115      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_TIM_PWM_Start+0x1f0>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d015      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f26:	d011      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	e008      	b.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e000      	b.n	8004f4e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40001800 	.word	0x40001800
 8004f74:	00010007 	.word	0x00010007

08004f78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e049      	b.n	800501e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f841 	bl	8005026 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f000 fec0 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x1e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e023      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x66>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x2e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e01b      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x66>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x3e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e013      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x66>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0x4e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e00b      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x66>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b10      	cmp	r3, #16
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_IT+0x5e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e003      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x66>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x78>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e013      	b.n	80050dc <HAL_TIM_IC_Start_IT+0xa0>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d104      	bne.n	80050c4 <HAL_TIM_IC_Start_IT+0x88>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e00b      	b.n	80050dc <HAL_TIM_IC_Start_IT+0xa0>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d104      	bne.n	80050d4 <HAL_TIM_IC_Start_IT+0x98>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e003      	b.n	80050dc <HAL_TIM_IC_Start_IT+0xa0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	7bbb      	ldrb	r3, [r7, #14]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d102      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e4:	7b7b      	ldrb	r3, [r7, #13]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0e2      	b.n	80052b4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xc2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	e023      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x10a>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xd2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	e01b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x10a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0xe2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	e013      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x10a>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d104      	bne.n	800512e <HAL_TIM_IC_Start_IT+0xf2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800512c:	e00b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x10a>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b10      	cmp	r3, #16
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start_IT+0x102>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800513c:	e003      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x10a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x11a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	e013      	b.n	800517e <HAL_TIM_IC_Start_IT+0x142>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x12a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005164:	e00b      	b.n	800517e <HAL_TIM_IC_Start_IT+0x142>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0x13a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	e003      	b.n	800517e <HAL_TIM_IC_Start_IT+0x142>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d841      	bhi.n	8005208 <HAL_TIM_IC_Start_IT+0x1cc>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_TIM_IC_Start_IT+0x150>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051c1 	.word	0x080051c1
 8005190:	08005209 	.word	0x08005209
 8005194:	08005209 	.word	0x08005209
 8005198:	08005209 	.word	0x08005209
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	08005209 	.word	0x08005209
 80051a4:	08005209 	.word	0x08005209
 80051a8:	08005209 	.word	0x08005209
 80051ac:	080051e5 	.word	0x080051e5
 80051b0:	08005209 	.word	0x08005209
 80051b4:	08005209 	.word	0x08005209
 80051b8:	08005209 	.word	0x08005209
 80051bc:	080051f7 	.word	0x080051f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0202 	orr.w	r2, r2, #2
 80051ce:	60da      	str	r2, [r3, #12]
      break;
 80051d0:	e01d      	b.n	800520e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0204 	orr.w	r2, r2, #4
 80051e0:	60da      	str	r2, [r3, #12]
      break;
 80051e2:	e014      	b.n	800520e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	60da      	str	r2, [r3, #12]
      break;
 80051f4:	e00b      	b.n	800520e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0210 	orr.w	r2, r2, #16
 8005204:	60da      	str	r2, [r3, #12]
      break;
 8005206:	e002      	b.n	800520e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	bf00      	nop
  }

  if (status == HAL_OK)
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d14e      	bne.n	80052b2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f001 fa4f 	bl	80066c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_TIM_IC_Start_IT+0x280>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01d      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_TIM_IC_Start_IT+0x284>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_TIM_IC_Start_IT+0x288>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_TIM_IC_Start_IT+0x290>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <HAL_TIM_IC_Start_IT+0x294>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0x236>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_IC_Start_IT+0x298>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d115      	bne.n	800529e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_TIM_IC_Start_IT+0x29c>)
 800527a:	4013      	ands	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d015      	beq.n	80052b0 <HAL_TIM_IC_Start_IT+0x274>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528a:	d011      	beq.n	80052b0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	e008      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40010400 	.word	0x40010400
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40001800 	.word	0x40001800
 80052d8:	00010007 	.word	0x00010007

080052dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e08f      	b.n	8005410 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fc ff61 	bl	80021cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_TIM_Encoder_Init+0x13c>)
 800531e:	400b      	ands	r3, r1
 8005320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 fd05 	bl	8005d3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4b31      	ldr	r3, [pc, #196]	; (800541c <HAL_TIM_Encoder_Init+0x140>)
 8005358:	4013      	ands	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	4313      	orrs	r3, r2
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <HAL_TIM_Encoder_Init+0x144>)
 8005372:	4013      	ands	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <HAL_TIM_Encoder_Init+0x148>)
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4313      	orrs	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	031b      	lsls	r3, r3, #12
 800539c:	4313      	orrs	r3, r2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4313      	orrs	r3, r2
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	fffebff8 	.word	0xfffebff8
 800541c:	fffffcfc 	.word	0xfffffcfc
 8005420:	fffff3f3 	.word	0xfffff3f3
 8005424:	ffff0f0f 	.word	0xffff0f0f

08005428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d110      	bne.n	800547a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d102      	bne.n	8005464 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800545e:	7b7b      	ldrb	r3, [r7, #13]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d001      	beq.n	8005468 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e069      	b.n	800553c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005478:	e031      	b.n	80054de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d110      	bne.n	80054a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005486:	7b3b      	ldrb	r3, [r7, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e055      	b.n	800553c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a0:	e01d      	b.n	80054de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d108      	bne.n	80054ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ae:	7b7b      	ldrb	r3, [r7, #13]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d102      	bne.n	80054ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b4:	7b3b      	ldrb	r3, [r7, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d001      	beq.n	80054be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e03e      	b.n	800553c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_TIM_Encoder_Start+0xc4>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d008      	beq.n	80054fc <HAL_TIM_Encoder_Start+0xd4>
 80054ea:	e00f      	b.n	800550c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f8e3 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 80054fa:	e016      	b.n	800552a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	2104      	movs	r1, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f001 f8db 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 800550a:	e00e      	b.n	800552a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f8d3 	bl	80066c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	2104      	movs	r1, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f8cc 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 8005528:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0202 	mvn.w	r2, #2
 8005570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc f8d0 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fbb6 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fbbd 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d122      	bne.n	80055f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d11b      	bne.n	80055f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0204 	mvn.w	r2, #4
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc f8a6 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fb8c 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fb93 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d122      	bne.n	8005648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d11b      	bne.n	8005648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0208 	mvn.w	r2, #8
 8005618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2204      	movs	r2, #4
 800561e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc f87c 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8005634:	e005      	b.n	8005642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fb62 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb69 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b10      	cmp	r3, #16
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	2b10      	cmp	r3, #16
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0210 	mvn.w	r2, #16
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2208      	movs	r2, #8
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc f852 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fb38 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb3f 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0201 	mvn.w	r2, #1
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc f89e 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 f922 	bl	8006938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	d10e      	bne.n	8005722 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d107      	bne.n	8005722 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f915 	bl	800694c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 faed 	bl	8005d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0220 	mvn.w	r2, #32
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f8d5 	bl	8006924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800579c:	2302      	movs	r3, #2
 800579e:	e088      	b.n	80058b2 <HAL_TIM_IC_ConfigChannel+0x130>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d11b      	bne.n	80057e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 fdbb 	bl	8006338 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 020c 	bic.w	r2, r2, #12
 80057d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6999      	ldr	r1, [r3, #24]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	619a      	str	r2, [r3, #24]
 80057e4:	e060      	b.n	80058a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d11c      	bne.n	8005826 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f000 fe3f 	bl	800647e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800580e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6999      	ldr	r1, [r3, #24]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	619a      	str	r2, [r3, #24]
 8005824:	e040      	b.n	80058a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 fe8c 	bl	8006558 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020c 	bic.w	r2, r2, #12
 800584e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69d9      	ldr	r1, [r3, #28]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	61da      	str	r2, [r3, #28]
 8005862:	e021      	b.n	80058a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b0c      	cmp	r3, #12
 8005868:	d11c      	bne.n	80058a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f000 fea9 	bl	80065d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800588c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	61da      	str	r2, [r3, #28]
 80058a2:	e001      	b.n	80058a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e0ff      	b.n	8005ada <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b14      	cmp	r3, #20
 80058e6:	f200 80f0 	bhi.w	8005aca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005acb 	.word	0x08005acb
 80058f8:	08005acb 	.word	0x08005acb
 80058fc:	08005acb 	.word	0x08005acb
 8005900:	08005985 	.word	0x08005985
 8005904:	08005acb 	.word	0x08005acb
 8005908:	08005acb 	.word	0x08005acb
 800590c:	08005acb 	.word	0x08005acb
 8005910:	080059c7 	.word	0x080059c7
 8005914:	08005acb 	.word	0x08005acb
 8005918:	08005acb 	.word	0x08005acb
 800591c:	08005acb 	.word	0x08005acb
 8005920:	08005a07 	.word	0x08005a07
 8005924:	08005acb 	.word	0x08005acb
 8005928:	08005acb 	.word	0x08005acb
 800592c:	08005acb 	.word	0x08005acb
 8005930:	08005a49 	.word	0x08005a49
 8005934:	08005acb 	.word	0x08005acb
 8005938:	08005acb 	.word	0x08005acb
 800593c:	08005acb 	.word	0x08005acb
 8005940:	08005a89 	.word	0x08005a89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa96 	bl	8005e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0208 	orr.w	r2, r2, #8
 800595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	619a      	str	r2, [r3, #24]
      break;
 8005982:	e0a5      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fae8 	bl	8005f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6999      	ldr	r1, [r3, #24]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	021a      	lsls	r2, r3, #8
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	619a      	str	r2, [r3, #24]
      break;
 80059c4:	e084      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fb3f 	bl	8006050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0208 	orr.w	r2, r2, #8
 80059e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0204 	bic.w	r2, r2, #4
 80059f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	61da      	str	r2, [r3, #28]
      break;
 8005a04:	e064      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fb95 	bl	800613c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	021a      	lsls	r2, r3, #8
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	61da      	str	r2, [r3, #28]
      break;
 8005a46:	e043      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fbcc 	bl	80061ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a86:	e023      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fbfe 	bl	8006290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ac8:	e002      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop

08005ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_ConfigClockSource+0x1c>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0b4      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x186>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <HAL_TIM_ConfigClockSource+0x190>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d03e      	beq.n	8005bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3e:	f200 8087 	bhi.w	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	f000 8086 	beq.w	8005c56 <HAL_TIM_ConfigClockSource+0x172>
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4e:	d87f      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b70      	cmp	r3, #112	; 0x70
 8005b52:	d01a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0xa6>
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d87b      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b60      	cmp	r3, #96	; 0x60
 8005b5a:	d050      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x11a>
 8005b5c:	2b60      	cmp	r3, #96	; 0x60
 8005b5e:	d877      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b50      	cmp	r3, #80	; 0x50
 8005b62:	d03c      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0xfa>
 8005b64:	2b50      	cmp	r3, #80	; 0x50
 8005b66:	d873      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d058      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x13a>
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d86f      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d064      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x15a>
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d86b      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d060      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x15a>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d867      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05c      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x15a>
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d05a      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x15a>
 8005b88:	e062      	b.n	8005c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6899      	ldr	r1, [r3, #8]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f000 fd71 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	609a      	str	r2, [r3, #8]
      break;
 8005bb6:	e04f      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6899      	ldr	r1, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f000 fd5a 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bda:	609a      	str	r2, [r3, #8]
      break;
 8005bdc:	e03c      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fc18 	bl	8006420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2150      	movs	r1, #80	; 0x50
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fd27 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e02c      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fc74 	bl	80064f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2160      	movs	r1, #96	; 0x60
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fd17 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e01c      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 fbf8 	bl	8006420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fd07 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8005c3c:	e00c      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f000 fcfe 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8005c4e:	e003      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
      break;
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	fffeff88 	.word	0xfffeff88

08005c78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d831      	bhi.n	8005cf0 <HAL_TIM_ReadCapturedValue+0x78>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cc9 	.word	0x08005cc9
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005ce7 	.word	0x08005ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	60fb      	str	r3, [r7, #12]

      break;
 8005cd0:	e00f      	b.n	8005cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	60fb      	str	r3, [r7, #12]

      break;
 8005cda:	e00a      	b.n	8005cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	60fb      	str	r3, [r7, #12]

      break;
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	60fb      	str	r3, [r7, #12]

      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005cf0:	bf00      	nop
  }

  return tmpreg;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a40      	ldr	r2, [pc, #256]	; (8005e50 <TIM_Base_SetConfig+0x114>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d00f      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <TIM_Base_SetConfig+0x118>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00b      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <TIM_Base_SetConfig+0x11c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <TIM_Base_SetConfig+0x120>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3a      	ldr	r2, [pc, #232]	; (8005e60 <TIM_Base_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2f      	ldr	r2, [pc, #188]	; (8005e50 <TIM_Base_SetConfig+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d027      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <TIM_Base_SetConfig+0x118>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d023      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2b      	ldr	r2, [pc, #172]	; (8005e58 <TIM_Base_SetConfig+0x11c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <TIM_Base_SetConfig+0x120>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <TIM_Base_SetConfig+0x124>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <TIM_Base_SetConfig+0x128>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a27      	ldr	r2, [pc, #156]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a26      	ldr	r2, [pc, #152]	; (8005e6c <TIM_Base_SetConfig+0x130>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <TIM_Base_SetConfig+0x134>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <TIM_Base_SetConfig+0x138>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a23      	ldr	r2, [pc, #140]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <TIM_Base_SetConfig+0x114>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <TIM_Base_SetConfig+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800
 8005e70:	40001800 	.word	0x40001800
 8005e74:	40001c00 	.word	0x40001c00
 8005e78:	40002000 	.word	0x40002000

08005e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4b2b      	ldr	r3, [pc, #172]	; (8005f54 <TIM_OC1_SetConfig+0xd8>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 0302 	bic.w	r3, r3, #2
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <TIM_OC1_SetConfig+0xdc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC1_SetConfig+0x64>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <TIM_OC1_SetConfig+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0308 	bic.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <TIM_OC1_SetConfig+0xdc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC1_SetConfig+0x8e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <TIM_OC1_SetConfig+0xe0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d111      	bne.n	8005f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	621a      	str	r2, [r3, #32]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	fffeff8f 	.word	0xfffeff8f
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400

08005f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0210 	bic.w	r2, r3, #16
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4b2e      	ldr	r3, [pc, #184]	; (8006044 <TIM_OC2_SetConfig+0xe4>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0320 	bic.w	r3, r3, #32
 8005faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a23      	ldr	r2, [pc, #140]	; (8006048 <TIM_OC2_SetConfig+0xe8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC2_SetConfig+0x68>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a22      	ldr	r2, [pc, #136]	; (800604c <TIM_OC2_SetConfig+0xec>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10d      	bne.n	8005fe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <TIM_OC2_SetConfig+0xe8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x94>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC2_SetConfig+0xec>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d113      	bne.n	800601c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	feff8fff 	.word	0xfeff8fff
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400

08006050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <TIM_OC3_SetConfig+0xe0>)
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a22      	ldr	r2, [pc, #136]	; (8006134 <TIM_OC3_SetConfig+0xe4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_OC3_SetConfig+0x66>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a21      	ldr	r2, [pc, #132]	; (8006138 <TIM_OC3_SetConfig+0xe8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10d      	bne.n	80060d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <TIM_OC3_SetConfig+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_OC3_SetConfig+0x92>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <TIM_OC3_SetConfig+0xe8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d113      	bne.n	800610a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	621a      	str	r2, [r3, #32]
}
 8006124:	bf00      	nop
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	fffeff8f 	.word	0xfffeff8f
 8006134:	40010000 	.word	0x40010000
 8006138:	40010400 	.word	0x40010400

0800613c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <TIM_OC4_SetConfig+0xa4>)
 8006168:	4013      	ands	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <TIM_OC4_SetConfig+0xa8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC4_SetConfig+0x68>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a12      	ldr	r2, [pc, #72]	; (80061e8 <TIM_OC4_SetConfig+0xac>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d109      	bne.n	80061b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	019b      	lsls	r3, r3, #6
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	feff8fff 	.word	0xfeff8fff
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400

080061ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <TIM_OC5_SetConfig+0x98>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800622c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a12      	ldr	r2, [pc, #72]	; (8006288 <TIM_OC5_SetConfig+0x9c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d003      	beq.n	800624a <TIM_OC5_SetConfig+0x5e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <TIM_OC5_SetConfig+0xa0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d109      	bne.n	800625e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	621a      	str	r2, [r3, #32]
}
 8006278:	bf00      	nop
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	fffeff8f 	.word	0xfffeff8f
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4b1c      	ldr	r3, [pc, #112]	; (800632c <TIM_OC6_SetConfig+0x9c>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a13      	ldr	r2, [pc, #76]	; (8006330 <TIM_OC6_SetConfig+0xa0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC6_SetConfig+0x60>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <TIM_OC6_SetConfig+0xa4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d109      	bne.n	8006304 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	feff8fff 	.word	0xfeff8fff
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400

08006338 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a28      	ldr	r2, [pc, #160]	; (8006404 <TIM_TI1_SetConfig+0xcc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01b      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d017      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a25      	ldr	r2, [pc, #148]	; (8006408 <TIM_TI1_SetConfig+0xd0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a24      	ldr	r2, [pc, #144]	; (800640c <TIM_TI1_SetConfig+0xd4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <TIM_TI1_SetConfig+0xd8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a22      	ldr	r2, [pc, #136]	; (8006414 <TIM_TI1_SetConfig+0xdc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a21      	ldr	r2, [pc, #132]	; (8006418 <TIM_TI1_SetConfig+0xe0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_TI1_SetConfig+0x66>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <TIM_TI1_SetConfig+0xe4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <TIM_TI1_SetConfig+0x6a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <TIM_TI1_SetConfig+0x6c>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e003      	b.n	80063c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f023 030a 	bic.w	r3, r3, #10
 80063dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f003 030a 	and.w	r3, r3, #10
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	621a      	str	r2, [r3, #32]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40010400 	.word	0x40010400
 8006418:	40014000 	.word	0x40014000
 800641c:	40001800 	.word	0x40001800

08006420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 030a 	bic.w	r3, r3, #10
 800645c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	f023 0210 	bic.w	r2, r3, #16
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f023 0210 	bic.w	r2, r3, #16
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	031b      	lsls	r3, r3, #12
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	b2db      	uxtb	r3, r3
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	621a      	str	r2, [r3, #32]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	b29b      	uxth	r3, r3
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006622:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	031b      	lsls	r3, r3, #12
 8006628:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	f043 0307 	orr.w	r3, r3, #7
 800666c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2201      	movs	r2, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e06d      	b.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a30      	ldr	r2, [pc, #192]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2f      	ldr	r2, [pc, #188]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d108      	bne.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800675e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d022      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d01d      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d018      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1a      	ldr	r2, [pc, #104]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a15      	ldr	r2, [pc, #84]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40014000 	.word	0x40014000
 8006824:	40001800 	.word	0x40001800

08006828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006840:	2302      	movs	r3, #2
 8006842:	e065      	b.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d115      	bne.n	80068fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	051b      	lsls	r3, r3, #20
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e040      	b.n	80069f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fb fcf4 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fbd2 	bl	8007148 <UART_SetConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fe28 	bl	800760c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 feaf 	bl	8007750 <UART_CheckIdleState>
 80069f2:	4603      	mov	r3, r0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b08b      	sub	sp, #44	; 0x2c
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d156      	bne.n	8006ac0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_UART_Transmit_IT+0x22>
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e04f      	b.n	8006ac2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_UART_Transmit_IT+0x34>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e048      	b.n	8006ac2 <HAL_UART_Transmit_IT+0xc6>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	88fa      	ldrh	r2, [r7, #6]
 8006a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2221      	movs	r2, #33	; 0x21
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d107      	bne.n	8006a7c <HAL_UART_Transmit_IT+0x80>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <HAL_UART_Transmit_IT+0xd4>)
 8006a78:	669a      	str	r2, [r3, #104]	; 0x68
 8006a7a:	e002      	b.n	8006a82 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_UART_Transmit_IT+0xd8>)
 8006a80:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e000      	b.n	8006ac2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	372c      	adds	r7, #44	; 0x2c
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	08007c7d 	.word	0x08007c7d
 8006ad4:	08007bc7 	.word	0x08007bc7

08006ad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d13d      	bne.n	8006b6a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_UART_Receive_IT+0x22>
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e036      	b.n	8006b6c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Receive_IT+0x34>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e02f      	b.n	8006b6c <HAL_UART_Receive_IT+0x94>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	613b      	str	r3, [r7, #16]
   return(result);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	623b      	str	r3, [r7, #32]
 8006b48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	69f9      	ldr	r1, [r7, #28]
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 feed 	bl	8007940 <UART_Start_Receive_IT>
 8006b66:	4603      	mov	r3, r0
 8006b68:	e000      	b.n	8006b6c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3728      	adds	r7, #40	; 0x28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b0ba      	sub	sp, #232	; 0xe8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d115      	bne.n	8006bdc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00f      	beq.n	8006bdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 828f 	beq.w	80070f0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
      }
      return;
 8006bda:	e289      	b.n	80070f0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8117 	beq.w	8006e14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bf6:	4b85      	ldr	r3, [pc, #532]	; (8006e0c <HAL_UART_IRQHandler+0x298>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 810a 	beq.w	8006e14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d011      	beq.n	8006c30 <HAL_UART_IRQHandler+0xbc>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c26:	f043 0201 	orr.w	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d011      	beq.n	8006c60 <HAL_UART_IRQHandler+0xec>
 8006c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c56:	f043 0204 	orr.w	r2, r3, #4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d011      	beq.n	8006c90 <HAL_UART_IRQHandler+0x11c>
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c86:	f043 0202 	orr.w	r2, r3, #2
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d017      	beq.n	8006ccc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc2:	f043 0208 	orr.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d012      	beq.n	8006cfe <HAL_UART_IRQHandler+0x18a>
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	f043 0220 	orr.w	r2, r3, #32
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 81f5 	beq.w	80070f4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00d      	beq.n	8006d32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d04f      	beq.n	8006df6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 febc 	bl	8007ad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d141      	bne.n	8006dee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1d9      	bne.n	8006d6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d013      	beq.n	8006de6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <HAL_UART_IRQHandler+0x29c>)
 8006dc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fb ffdb 	bl	8002d86 <HAL_DMA_Abort_IT>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d017      	beq.n	8006e06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e00f      	b.n	8006e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f998 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	e00b      	b.n	8006e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f994 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	e007      	b.n	8006e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f990 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e04:	e176      	b.n	80070f4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	bf00      	nop
    return;
 8006e08:	e174      	b.n	80070f4 <HAL_UART_IRQHandler+0x580>
 8006e0a:	bf00      	nop
 8006e0c:	04000120 	.word	0x04000120
 8006e10:	08007b9b 	.word	0x08007b9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	f040 8144 	bne.w	80070a6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 813d 	beq.w	80070a6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8136 	beq.w	80070a6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2210      	movs	r2, #16
 8006e40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	f040 80b2 	bne.w	8006fb6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8148 	beq.w	80070f8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e72:	429a      	cmp	r2, r3
 8006e74:	f080 8140 	bcs.w	80070f8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8c:	f000 8085 	beq.w	8006f9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ebe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1da      	bne.n	8006e90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e1      	bne.n	8006eda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e3      	bne.n	8006f16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e4      	bne.n	8006f5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fb fe86 	bl	8002ca6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f8be 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fb4:	e0a0      	b.n	80070f8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8092 	beq.w	80070fc <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 808d 	beq.w	80070fc <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007004:	647b      	str	r3, [r7, #68]	; 0x44
 8007006:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800700a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e4      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	623b      	str	r3, [r7, #32]
   return(result);
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800703c:	633a      	str	r2, [r7, #48]	; 0x30
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e3      	bne.n	8007018 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	617b      	str	r3, [r7, #20]
   return(result);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e4      	bne.n	8007062 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f846 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070a4:	e02a      	b.n	80070fc <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01c      	beq.n	8007100 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
    }
    return;
 80070ce:	e017      	b.n	8007100 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <HAL_UART_IRQHandler+0x58e>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fe27 	bl	8007d3c <UART_EndTransmit_IT>
    return;
 80070ee:	e008      	b.n	8007102 <HAL_UART_IRQHandler+0x58e>
      return;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <HAL_UART_IRQHandler+0x58e>
    return;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <HAL_UART_IRQHandler+0x58e>
      return;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <HAL_UART_IRQHandler+0x58e>
      return;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_UART_IRQHandler+0x58e>
    return;
 8007100:	bf00      	nop
  }

}
 8007102:	37e8      	adds	r7, #232	; 0xe8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4ba7      	ldr	r3, [pc, #668]	; (8007410 <UART_SetConfig+0x2c8>)
 8007174:	4013      	ands	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	6979      	ldr	r1, [r7, #20]
 800717c:	430b      	orrs	r3, r1
 800717e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a95      	ldr	r2, [pc, #596]	; (8007414 <UART_SetConfig+0x2cc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d120      	bne.n	8007206 <UART_SetConfig+0xbe>
 80071c4:	4b94      	ldr	r3, [pc, #592]	; (8007418 <UART_SetConfig+0x2d0>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d816      	bhi.n	8007200 <UART_SetConfig+0xb8>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <UART_SetConfig+0x90>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071f5 	.word	0x080071f5
 80071e0:	080071ef 	.word	0x080071ef
 80071e4:	080071fb 	.word	0x080071fb
 80071e8:	2301      	movs	r3, #1
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e14f      	b.n	800748e <UART_SetConfig+0x346>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e14c      	b.n	800748e <UART_SetConfig+0x346>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e149      	b.n	800748e <UART_SetConfig+0x346>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e146      	b.n	800748e <UART_SetConfig+0x346>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e143      	b.n	800748e <UART_SetConfig+0x346>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a84      	ldr	r2, [pc, #528]	; (800741c <UART_SetConfig+0x2d4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d132      	bne.n	8007276 <UART_SetConfig+0x12e>
 8007210:	4b81      	ldr	r3, [pc, #516]	; (8007418 <UART_SetConfig+0x2d0>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d828      	bhi.n	8007270 <UART_SetConfig+0x128>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <UART_SetConfig+0xdc>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007259 	.word	0x08007259
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007265 	.word	0x08007265
 8007238:	08007271 	.word	0x08007271
 800723c:	08007271 	.word	0x08007271
 8007240:	08007271 	.word	0x08007271
 8007244:	0800725f 	.word	0x0800725f
 8007248:	08007271 	.word	0x08007271
 800724c:	08007271 	.word	0x08007271
 8007250:	08007271 	.word	0x08007271
 8007254:	0800726b 	.word	0x0800726b
 8007258:	2300      	movs	r3, #0
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e117      	b.n	800748e <UART_SetConfig+0x346>
 800725e:	2302      	movs	r3, #2
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e114      	b.n	800748e <UART_SetConfig+0x346>
 8007264:	2304      	movs	r3, #4
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e111      	b.n	800748e <UART_SetConfig+0x346>
 800726a:	2308      	movs	r3, #8
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e10e      	b.n	800748e <UART_SetConfig+0x346>
 8007270:	2310      	movs	r3, #16
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e10b      	b.n	800748e <UART_SetConfig+0x346>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a69      	ldr	r2, [pc, #420]	; (8007420 <UART_SetConfig+0x2d8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d120      	bne.n	80072c2 <UART_SetConfig+0x17a>
 8007280:	4b65      	ldr	r3, [pc, #404]	; (8007418 <UART_SetConfig+0x2d0>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800728a:	2b30      	cmp	r3, #48	; 0x30
 800728c:	d013      	beq.n	80072b6 <UART_SetConfig+0x16e>
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	d814      	bhi.n	80072bc <UART_SetConfig+0x174>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d009      	beq.n	80072aa <UART_SetConfig+0x162>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d810      	bhi.n	80072bc <UART_SetConfig+0x174>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <UART_SetConfig+0x15c>
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d006      	beq.n	80072b0 <UART_SetConfig+0x168>
 80072a2:	e00b      	b.n	80072bc <UART_SetConfig+0x174>
 80072a4:	2300      	movs	r3, #0
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e0f1      	b.n	800748e <UART_SetConfig+0x346>
 80072aa:	2302      	movs	r3, #2
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	e0ee      	b.n	800748e <UART_SetConfig+0x346>
 80072b0:	2304      	movs	r3, #4
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e0eb      	b.n	800748e <UART_SetConfig+0x346>
 80072b6:	2308      	movs	r3, #8
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e0e8      	b.n	800748e <UART_SetConfig+0x346>
 80072bc:	2310      	movs	r3, #16
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e0e5      	b.n	800748e <UART_SetConfig+0x346>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a57      	ldr	r2, [pc, #348]	; (8007424 <UART_SetConfig+0x2dc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d120      	bne.n	800730e <UART_SetConfig+0x1c6>
 80072cc:	4b52      	ldr	r3, [pc, #328]	; (8007418 <UART_SetConfig+0x2d0>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072d6:	2bc0      	cmp	r3, #192	; 0xc0
 80072d8:	d013      	beq.n	8007302 <UART_SetConfig+0x1ba>
 80072da:	2bc0      	cmp	r3, #192	; 0xc0
 80072dc:	d814      	bhi.n	8007308 <UART_SetConfig+0x1c0>
 80072de:	2b80      	cmp	r3, #128	; 0x80
 80072e0:	d009      	beq.n	80072f6 <UART_SetConfig+0x1ae>
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d810      	bhi.n	8007308 <UART_SetConfig+0x1c0>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <UART_SetConfig+0x1a8>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d006      	beq.n	80072fc <UART_SetConfig+0x1b4>
 80072ee:	e00b      	b.n	8007308 <UART_SetConfig+0x1c0>
 80072f0:	2300      	movs	r3, #0
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e0cb      	b.n	800748e <UART_SetConfig+0x346>
 80072f6:	2302      	movs	r3, #2
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e0c8      	b.n	800748e <UART_SetConfig+0x346>
 80072fc:	2304      	movs	r3, #4
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e0c5      	b.n	800748e <UART_SetConfig+0x346>
 8007302:	2308      	movs	r3, #8
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0c2      	b.n	800748e <UART_SetConfig+0x346>
 8007308:	2310      	movs	r3, #16
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e0bf      	b.n	800748e <UART_SetConfig+0x346>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a45      	ldr	r2, [pc, #276]	; (8007428 <UART_SetConfig+0x2e0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d125      	bne.n	8007364 <UART_SetConfig+0x21c>
 8007318:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <UART_SetConfig+0x2d0>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007326:	d017      	beq.n	8007358 <UART_SetConfig+0x210>
 8007328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732c:	d817      	bhi.n	800735e <UART_SetConfig+0x216>
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	d00b      	beq.n	800734c <UART_SetConfig+0x204>
 8007334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007338:	d811      	bhi.n	800735e <UART_SetConfig+0x216>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <UART_SetConfig+0x1fe>
 800733e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007342:	d006      	beq.n	8007352 <UART_SetConfig+0x20a>
 8007344:	e00b      	b.n	800735e <UART_SetConfig+0x216>
 8007346:	2300      	movs	r3, #0
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e0a0      	b.n	800748e <UART_SetConfig+0x346>
 800734c:	2302      	movs	r3, #2
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e09d      	b.n	800748e <UART_SetConfig+0x346>
 8007352:	2304      	movs	r3, #4
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e09a      	b.n	800748e <UART_SetConfig+0x346>
 8007358:	2308      	movs	r3, #8
 800735a:	77fb      	strb	r3, [r7, #31]
 800735c:	e097      	b.n	800748e <UART_SetConfig+0x346>
 800735e:	2310      	movs	r3, #16
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e094      	b.n	800748e <UART_SetConfig+0x346>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a30      	ldr	r2, [pc, #192]	; (800742c <UART_SetConfig+0x2e4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d125      	bne.n	80073ba <UART_SetConfig+0x272>
 800736e:	4b2a      	ldr	r3, [pc, #168]	; (8007418 <UART_SetConfig+0x2d0>)
 8007370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800737c:	d017      	beq.n	80073ae <UART_SetConfig+0x266>
 800737e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007382:	d817      	bhi.n	80073b4 <UART_SetConfig+0x26c>
 8007384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007388:	d00b      	beq.n	80073a2 <UART_SetConfig+0x25a>
 800738a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738e:	d811      	bhi.n	80073b4 <UART_SetConfig+0x26c>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <UART_SetConfig+0x254>
 8007394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007398:	d006      	beq.n	80073a8 <UART_SetConfig+0x260>
 800739a:	e00b      	b.n	80073b4 <UART_SetConfig+0x26c>
 800739c:	2301      	movs	r3, #1
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e075      	b.n	800748e <UART_SetConfig+0x346>
 80073a2:	2302      	movs	r3, #2
 80073a4:	77fb      	strb	r3, [r7, #31]
 80073a6:	e072      	b.n	800748e <UART_SetConfig+0x346>
 80073a8:	2304      	movs	r3, #4
 80073aa:	77fb      	strb	r3, [r7, #31]
 80073ac:	e06f      	b.n	800748e <UART_SetConfig+0x346>
 80073ae:	2308      	movs	r3, #8
 80073b0:	77fb      	strb	r3, [r7, #31]
 80073b2:	e06c      	b.n	800748e <UART_SetConfig+0x346>
 80073b4:	2310      	movs	r3, #16
 80073b6:	77fb      	strb	r3, [r7, #31]
 80073b8:	e069      	b.n	800748e <UART_SetConfig+0x346>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <UART_SetConfig+0x2e8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d137      	bne.n	8007434 <UART_SetConfig+0x2ec>
 80073c4:	4b14      	ldr	r3, [pc, #80]	; (8007418 <UART_SetConfig+0x2d0>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073d2:	d017      	beq.n	8007404 <UART_SetConfig+0x2bc>
 80073d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073d8:	d817      	bhi.n	800740a <UART_SetConfig+0x2c2>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d00b      	beq.n	80073f8 <UART_SetConfig+0x2b0>
 80073e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e4:	d811      	bhi.n	800740a <UART_SetConfig+0x2c2>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <UART_SetConfig+0x2aa>
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ee:	d006      	beq.n	80073fe <UART_SetConfig+0x2b6>
 80073f0:	e00b      	b.n	800740a <UART_SetConfig+0x2c2>
 80073f2:	2300      	movs	r3, #0
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e04a      	b.n	800748e <UART_SetConfig+0x346>
 80073f8:	2302      	movs	r3, #2
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e047      	b.n	800748e <UART_SetConfig+0x346>
 80073fe:	2304      	movs	r3, #4
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e044      	b.n	800748e <UART_SetConfig+0x346>
 8007404:	2308      	movs	r3, #8
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e041      	b.n	800748e <UART_SetConfig+0x346>
 800740a:	2310      	movs	r3, #16
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e03e      	b.n	800748e <UART_SetConfig+0x346>
 8007410:	efff69f3 	.word	0xefff69f3
 8007414:	40011000 	.word	0x40011000
 8007418:	40023800 	.word	0x40023800
 800741c:	40004400 	.word	0x40004400
 8007420:	40004800 	.word	0x40004800
 8007424:	40004c00 	.word	0x40004c00
 8007428:	40005000 	.word	0x40005000
 800742c:	40011400 	.word	0x40011400
 8007430:	40007800 	.word	0x40007800
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a71      	ldr	r2, [pc, #452]	; (8007600 <UART_SetConfig+0x4b8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d125      	bne.n	800748a <UART_SetConfig+0x342>
 800743e:	4b71      	ldr	r3, [pc, #452]	; (8007604 <UART_SetConfig+0x4bc>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800744c:	d017      	beq.n	800747e <UART_SetConfig+0x336>
 800744e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007452:	d817      	bhi.n	8007484 <UART_SetConfig+0x33c>
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007458:	d00b      	beq.n	8007472 <UART_SetConfig+0x32a>
 800745a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745e:	d811      	bhi.n	8007484 <UART_SetConfig+0x33c>
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <UART_SetConfig+0x324>
 8007464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007468:	d006      	beq.n	8007478 <UART_SetConfig+0x330>
 800746a:	e00b      	b.n	8007484 <UART_SetConfig+0x33c>
 800746c:	2300      	movs	r3, #0
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x346>
 8007472:	2302      	movs	r3, #2
 8007474:	77fb      	strb	r3, [r7, #31]
 8007476:	e00a      	b.n	800748e <UART_SetConfig+0x346>
 8007478:	2304      	movs	r3, #4
 800747a:	77fb      	strb	r3, [r7, #31]
 800747c:	e007      	b.n	800748e <UART_SetConfig+0x346>
 800747e:	2308      	movs	r3, #8
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e004      	b.n	800748e <UART_SetConfig+0x346>
 8007484:	2310      	movs	r3, #16
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e001      	b.n	800748e <UART_SetConfig+0x346>
 800748a:	2310      	movs	r3, #16
 800748c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007496:	d15a      	bne.n	800754e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b08      	cmp	r3, #8
 800749c:	d827      	bhi.n	80074ee <UART_SetConfig+0x3a6>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0x35c>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074ef 	.word	0x080074ef
 80074b4:	080074df 	.word	0x080074df
 80074b8:	080074ef 	.word	0x080074ef
 80074bc:	080074ef 	.word	0x080074ef
 80074c0:	080074ef 	.word	0x080074ef
 80074c4:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c8:	f7fc ff12 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 80074cc:	61b8      	str	r0, [r7, #24]
        break;
 80074ce:	e013      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fc ff22 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 80074d4:	61b8      	str	r0, [r7, #24]
        break;
 80074d6:	e00f      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <UART_SetConfig+0x4c0>)
 80074da:	61bb      	str	r3, [r7, #24]
        break;
 80074dc:	e00c      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fc fe19 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80074e2:	61b8      	str	r0, [r7, #24]
        break;
 80074e4:	e008      	b.n	80074f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61bb      	str	r3, [r7, #24]
        break;
 80074ec:	e004      	b.n	80074f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	77bb      	strb	r3, [r7, #30]
        break;
 80074f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d074      	beq.n	80075e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	005a      	lsls	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	441a      	add	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d916      	bls.n	8007548 <UART_SetConfig+0x400>
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007520:	d212      	bcs.n	8007548 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	b29a      	uxth	r2, r3
 8007538:	89fb      	ldrh	r3, [r7, #14]
 800753a:	4313      	orrs	r3, r2
 800753c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	89fa      	ldrh	r2, [r7, #14]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	e04f      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	77bb      	strb	r3, [r7, #30]
 800754c:	e04c      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800754e:	7ffb      	ldrb	r3, [r7, #31]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d828      	bhi.n	80075a6 <UART_SetConfig+0x45e>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x414>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	080075a7 	.word	0x080075a7
 800756c:	08007597 	.word	0x08007597
 8007570:	080075a7 	.word	0x080075a7
 8007574:	080075a7 	.word	0x080075a7
 8007578:	080075a7 	.word	0x080075a7
 800757c:	0800759f 	.word	0x0800759f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007580:	f7fc feb6 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007584:	61b8      	str	r0, [r7, #24]
        break;
 8007586:	e013      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fc fec6 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 800758c:	61b8      	str	r0, [r7, #24]
        break;
 800758e:	e00f      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <UART_SetConfig+0x4c0>)
 8007592:	61bb      	str	r3, [r7, #24]
        break;
 8007594:	e00c      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007596:	f7fc fdbd 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 800759a:	61b8      	str	r0, [r7, #24]
        break;
 800759c:	e008      	b.n	80075b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a2:	61bb      	str	r3, [r7, #24]
        break;
 80075a4:	e004      	b.n	80075b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77bb      	strb	r3, [r7, #30]
        break;
 80075ae:	bf00      	nop
    }

    if (pclk != 0U)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	085a      	lsrs	r2, r3, #1
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b0f      	cmp	r3, #15
 80075ce:	d909      	bls.n	80075e4 <UART_SetConfig+0x49c>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d6:	d205      	bcs.n	80075e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	e001      	b.n	80075e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40007c00 	.word	0x40007c00
 8007604:	40023800 	.word	0x40023800
 8007608:	00f42400 	.word	0x00f42400

0800760c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770a:	d10a      	bne.n	8007722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007760:	f7fa fecc 	bl	80024fc <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10e      	bne.n	8007792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f817 	bl	80077b6 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e00d      	b.n	80077ae <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b09c      	sub	sp, #112	; 0x70
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	4613      	mov	r3, r2
 80077c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c6:	e0a5      	b.n	8007914 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ce:	f000 80a1 	beq.w	8007914 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d2:	f7fa fe93 	bl	80024fc <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077de:	429a      	cmp	r2, r3
 80077e0:	d302      	bcc.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80077e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d13e      	bne.n	8007866 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077fc:	667b      	str	r3, [r7, #100]	; 0x64
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007808:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800780c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	663b      	str	r3, [r7, #96]	; 0x60
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800783a:	64ba      	str	r2, [r7, #72]	; 0x48
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e067      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d04f      	beq.n	8007914 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007882:	d147      	bne.n	8007914 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800788c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
 80078ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	613b      	str	r3, [r7, #16]
   return(result);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078e0:	623a      	str	r2, [r7, #32]
 80078e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69f9      	ldr	r1, [r7, #28]
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e5      	bne.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e010      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69da      	ldr	r2, [r3, #28]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	4013      	ands	r3, r2
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	429a      	cmp	r2, r3
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	429a      	cmp	r2, r3
 8007930:	f43f af4a 	beq.w	80077c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3770      	adds	r7, #112	; 0x70
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007940:	b480      	push	{r7}
 8007942:	b097      	sub	sp, #92	; 0x5c
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007972:	d10e      	bne.n	8007992 <UART_Start_Receive_IT+0x52>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <UART_Start_Receive_IT+0x48>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007986:	e02d      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	; 0xff
 800798c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007990:	e028      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10d      	bne.n	80079b6 <UART_Start_Receive_IT+0x76>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <UART_Start_Receive_IT+0x6c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	22ff      	movs	r2, #255	; 0xff
 80079a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079aa:	e01b      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	227f      	movs	r2, #127	; 0x7f
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b4:	e016      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079be:	d10d      	bne.n	80079dc <UART_Start_Receive_IT+0x9c>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <UART_Start_Receive_IT+0x92>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	227f      	movs	r2, #127	; 0x7f
 80079cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d0:	e008      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	223f      	movs	r2, #63	; 0x3f
 80079d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079da:	e003      	b.n	80079e4 <UART_Start_Receive_IT+0xa4>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2222      	movs	r2, #34	; 0x22
 80079f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	657b      	str	r3, [r7, #84]	; 0x54
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2e:	d107      	bne.n	8007a40 <UART_Start_Receive_IT+0x100>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a24      	ldr	r2, [pc, #144]	; (8007acc <UART_Start_Receive_IT+0x18c>)
 8007a3c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a3e:	e002      	b.n	8007a46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <UART_Start_Receive_IT+0x190>)
 8007a44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d019      	beq.n	8007a8a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
 8007a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_Start_Receive_IT+0x116>
 8007a88:	e018      	b.n	8007abc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	613b      	str	r3, [r7, #16]
   return(result);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f043 0320 	orr.w	r3, r3, #32
 8007a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	69f9      	ldr	r1, [r7, #28]
 8007aae:	6a3a      	ldr	r2, [r7, #32]
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	375c      	adds	r7, #92	; 0x5c
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	08007eed 	.word	0x08007eed
 8007ad0:	08007d91 	.word	0x08007d91

08007ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b095      	sub	sp, #84	; 0x54
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afa:	643b      	str	r3, [r7, #64]	; 0x40
 8007afc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e6      	bne.n	8007adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e5      	bne.n	8007b0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d118      	bne.n	8007b7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6979      	ldr	r1, [r7, #20]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	613b      	str	r3, [r7, #16]
   return(result);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b8e:	bf00      	nop
 8007b90:	3754      	adds	r7, #84	; 0x54
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff faaf 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b08f      	sub	sp, #60	; 0x3c
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bd2:	2b21      	cmp	r3, #33	; 0x21
 8007bd4:	d14c      	bne.n	8007c70 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d132      	bne.n	8007c48 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c02:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c28:	633b      	str	r3, [r7, #48]	; 0x30
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6979      	ldr	r1, [r7, #20]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e6      	bne.n	8007c14 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c46:	e013      	b.n	8007c70 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c70:	bf00      	nop
 8007c72:	373c      	adds	r7, #60	; 0x3c
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b091      	sub	sp, #68	; 0x44
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c88:	2b21      	cmp	r3, #33	; 0x21
 8007c8a:	d151      	bne.n	8007d30 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d132      	bne.n	8007cfe <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e6      	bne.n	8007cca <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007cfc:	e018      	b.n	8007d30 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d18:	1c9a      	adds	r2, r3, #2
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d30:	bf00      	nop
 8007d32:	3744      	adds	r7, #68	; 0x44
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff f9c0 	bl	8007108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d88:	bf00      	nop
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b096      	sub	sp, #88	; 0x58
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	2b22      	cmp	r3, #34	; 0x22
 8007da8:	f040 8094 	bne.w	8007ed4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007db6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007dba:	b2d9      	uxtb	r1, r3
 8007dbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	400a      	ands	r2, r1
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d177      	bne.n	8007ee4 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e08:	653b      	str	r3, [r7, #80]	; 0x50
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44
 8007e14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e6      	bne.n	8007df4 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	623b      	str	r3, [r7, #32]
   return(result);
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e46:	633a      	str	r2, [r7, #48]	; 0x30
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e5      	bne.n	8007e26 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d12e      	bne.n	8007ecc <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0310 	bic.w	r3, r3, #16
 8007e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	69b9      	ldr	r1, [r7, #24]
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d103      	bne.n	8007ebc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2210      	movs	r2, #16
 8007eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff f933 	bl	8007130 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eca:	e00b      	b.n	8007ee4 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7f9 fbfb 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 8007ed2:	e007      	b.n	8007ee4 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0208 	orr.w	r2, r2, #8
 8007ee2:	619a      	str	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	3758      	adds	r7, #88	; 0x58
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b096      	sub	sp, #88	; 0x58
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007efa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f02:	2b22      	cmp	r3, #34	; 0x22
 8007f04:	f040 8094 	bne.w	8008030 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f20:	4013      	ands	r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2c:	1c9a      	adds	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d177      	bne.n	8008040 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d12e      	bne.n	8008028 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f023 0310 	bic.w	r3, r3, #16
 8007fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d103      	bne.n	8008018 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2210      	movs	r2, #16
 8008016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff f885 	bl	8007130 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008026:	e00b      	b.n	8008040 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7f9 fb4d 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 800802e:	e007      	b.n	8008040 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0208 	orr.w	r2, r2, #8
 800803e:	619a      	str	r2, [r3, #24]
}
 8008040:	bf00      	nop
 8008042:	3758      	adds	r7, #88	; 0x58
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <atoi>:
 8008048:	220a      	movs	r2, #10
 800804a:	2100      	movs	r1, #0
 800804c:	f000 bd40 	b.w	8008ad0 <strtol>

08008050 <__errno>:
 8008050:	4b01      	ldr	r3, [pc, #4]	; (8008058 <__errno+0x8>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000010 	.word	0x20000010

0800805c <__libc_init_array>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	4d0d      	ldr	r5, [pc, #52]	; (8008094 <__libc_init_array+0x38>)
 8008060:	4c0d      	ldr	r4, [pc, #52]	; (8008098 <__libc_init_array+0x3c>)
 8008062:	1b64      	subs	r4, r4, r5
 8008064:	10a4      	asrs	r4, r4, #2
 8008066:	2600      	movs	r6, #0
 8008068:	42a6      	cmp	r6, r4
 800806a:	d109      	bne.n	8008080 <__libc_init_array+0x24>
 800806c:	4d0b      	ldr	r5, [pc, #44]	; (800809c <__libc_init_array+0x40>)
 800806e:	4c0c      	ldr	r4, [pc, #48]	; (80080a0 <__libc_init_array+0x44>)
 8008070:	f002 ff44 	bl	800aefc <_init>
 8008074:	1b64      	subs	r4, r4, r5
 8008076:	10a4      	asrs	r4, r4, #2
 8008078:	2600      	movs	r6, #0
 800807a:	42a6      	cmp	r6, r4
 800807c:	d105      	bne.n	800808a <__libc_init_array+0x2e>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	f855 3b04 	ldr.w	r3, [r5], #4
 8008084:	4798      	blx	r3
 8008086:	3601      	adds	r6, #1
 8008088:	e7ee      	b.n	8008068 <__libc_init_array+0xc>
 800808a:	f855 3b04 	ldr.w	r3, [r5], #4
 800808e:	4798      	blx	r3
 8008090:	3601      	adds	r6, #1
 8008092:	e7f2      	b.n	800807a <__libc_init_array+0x1e>
 8008094:	0800b33c 	.word	0x0800b33c
 8008098:	0800b33c 	.word	0x0800b33c
 800809c:	0800b33c 	.word	0x0800b33c
 80080a0:	0800b340 	.word	0x0800b340

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__cvt>:
 80080b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	ec55 4b10 	vmov	r4, r5, d0
 80080bc:	2d00      	cmp	r5, #0
 80080be:	460e      	mov	r6, r1
 80080c0:	4619      	mov	r1, r3
 80080c2:	462b      	mov	r3, r5
 80080c4:	bfbb      	ittet	lt
 80080c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ca:	461d      	movlt	r5, r3
 80080cc:	2300      	movge	r3, #0
 80080ce:	232d      	movlt	r3, #45	; 0x2d
 80080d0:	700b      	strb	r3, [r1, #0]
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d8:	4691      	mov	r9, r2
 80080da:	f023 0820 	bic.w	r8, r3, #32
 80080de:	bfbc      	itt	lt
 80080e0:	4622      	movlt	r2, r4
 80080e2:	4614      	movlt	r4, r2
 80080e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e8:	d005      	beq.n	80080f6 <__cvt+0x42>
 80080ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ee:	d100      	bne.n	80080f2 <__cvt+0x3e>
 80080f0:	3601      	adds	r6, #1
 80080f2:	2102      	movs	r1, #2
 80080f4:	e000      	b.n	80080f8 <__cvt+0x44>
 80080f6:	2103      	movs	r1, #3
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab02      	add	r3, sp, #8
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	ec45 4b10 	vmov	d0, r4, r5
 8008104:	4653      	mov	r3, sl
 8008106:	4632      	mov	r2, r6
 8008108:	f000 fd7a 	bl	8008c00 <_dtoa_r>
 800810c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008110:	4607      	mov	r7, r0
 8008112:	d102      	bne.n	800811a <__cvt+0x66>
 8008114:	f019 0f01 	tst.w	r9, #1
 8008118:	d022      	beq.n	8008160 <__cvt+0xac>
 800811a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800811e:	eb07 0906 	add.w	r9, r7, r6
 8008122:	d110      	bne.n	8008146 <__cvt+0x92>
 8008124:	783b      	ldrb	r3, [r7, #0]
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d10a      	bne.n	8008140 <__cvt+0x8c>
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8008136:	b918      	cbnz	r0, 8008140 <__cvt+0x8c>
 8008138:	f1c6 0601 	rsb	r6, r6, #1
 800813c:	f8ca 6000 	str.w	r6, [sl]
 8008140:	f8da 3000 	ldr.w	r3, [sl]
 8008144:	4499      	add	r9, r3
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8008152:	b108      	cbz	r0, 8008158 <__cvt+0xa4>
 8008154:	f8cd 900c 	str.w	r9, [sp, #12]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	454b      	cmp	r3, r9
 800815e:	d307      	bcc.n	8008170 <__cvt+0xbc>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008164:	1bdb      	subs	r3, r3, r7
 8008166:	4638      	mov	r0, r7
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e7f0      	b.n	800815a <__cvt+0xa6>

08008178 <__exponent>:
 8008178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817a:	4603      	mov	r3, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	bfb8      	it	lt
 8008180:	4249      	neglt	r1, r1
 8008182:	f803 2b02 	strb.w	r2, [r3], #2
 8008186:	bfb4      	ite	lt
 8008188:	222d      	movlt	r2, #45	; 0x2d
 800818a:	222b      	movge	r2, #43	; 0x2b
 800818c:	2909      	cmp	r1, #9
 800818e:	7042      	strb	r2, [r0, #1]
 8008190:	dd2a      	ble.n	80081e8 <__exponent+0x70>
 8008192:	f10d 0407 	add.w	r4, sp, #7
 8008196:	46a4      	mov	ip, r4
 8008198:	270a      	movs	r7, #10
 800819a:	46a6      	mov	lr, r4
 800819c:	460a      	mov	r2, r1
 800819e:	fb91 f6f7 	sdiv	r6, r1, r7
 80081a2:	fb07 1516 	mls	r5, r7, r6, r1
 80081a6:	3530      	adds	r5, #48	; 0x30
 80081a8:	2a63      	cmp	r2, #99	; 0x63
 80081aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80081ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081b2:	4631      	mov	r1, r6
 80081b4:	dcf1      	bgt.n	800819a <__exponent+0x22>
 80081b6:	3130      	adds	r1, #48	; 0x30
 80081b8:	f1ae 0502 	sub.w	r5, lr, #2
 80081bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c0:	1c44      	adds	r4, r0, #1
 80081c2:	4629      	mov	r1, r5
 80081c4:	4561      	cmp	r1, ip
 80081c6:	d30a      	bcc.n	80081de <__exponent+0x66>
 80081c8:	f10d 0209 	add.w	r2, sp, #9
 80081cc:	eba2 020e 	sub.w	r2, r2, lr
 80081d0:	4565      	cmp	r5, ip
 80081d2:	bf88      	it	hi
 80081d4:	2200      	movhi	r2, #0
 80081d6:	4413      	add	r3, r2
 80081d8:	1a18      	subs	r0, r3, r0
 80081da:	b003      	add	sp, #12
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081e6:	e7ed      	b.n	80081c4 <__exponent+0x4c>
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	3130      	adds	r1, #48	; 0x30
 80081ec:	7083      	strb	r3, [r0, #2]
 80081ee:	70c1      	strb	r1, [r0, #3]
 80081f0:	1d03      	adds	r3, r0, #4
 80081f2:	e7f1      	b.n	80081d8 <__exponent+0x60>

080081f4 <_printf_float>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b02 	vpush	{d8}
 80081fc:	b08d      	sub	sp, #52	; 0x34
 80081fe:	460c      	mov	r4, r1
 8008200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008204:	4616      	mov	r6, r2
 8008206:	461f      	mov	r7, r3
 8008208:	4605      	mov	r5, r0
 800820a:	f001 fae5 	bl	80097d8 <_localeconv_r>
 800820e:	f8d0 a000 	ldr.w	sl, [r0]
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 fffc 	bl	8000210 <strlen>
 8008218:	2300      	movs	r3, #0
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8d8 3000 	ldr.w	r3, [r8]
 8008224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008228:	3307      	adds	r3, #7
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	f8c8 2000 	str.w	r2, [r8]
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800823e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f8cd 8018 	str.w	r8, [sp, #24]
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	4b9f      	ldr	r3, [pc, #636]	; (80084d0 <_printf_float+0x2dc>)
 8008252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc87 	bl	8000b6c <__aeabi_dcmpun>
 800825e:	bb88      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <_printf_float+0x2dc>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc61 	bl	8000b30 <__aeabi_dcmple>
 800826e:	bb48      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800827c:	b110      	cbz	r0, 8008284 <_printf_float+0x90>
 800827e:	232d      	movs	r3, #45	; 0x2d
 8008280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008284:	4b93      	ldr	r3, [pc, #588]	; (80084d4 <_printf_float+0x2e0>)
 8008286:	4894      	ldr	r0, [pc, #592]	; (80084d8 <_printf_float+0x2e4>)
 8008288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800828c:	bf94      	ite	ls
 800828e:	4698      	movls	r8, r3
 8008290:	4680      	movhi	r8, r0
 8008292:	2303      	movs	r3, #3
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f023 0204 	bic.w	r2, r3, #4
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	9700      	str	r7, [sp, #0]
 80082a4:	4633      	mov	r3, r6
 80082a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9d8 	bl	8008660 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1e2>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b00d      	add	sp, #52	; 0x34
 80082bc:	ecbd 8b02 	vpop	{d8}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc4e 	bl	8000b6c <__aeabi_dcmpun>
 80082d0:	b140      	cbz	r0, 80082e4 <_printf_float+0xf0>
 80082d2:	464b      	mov	r3, r9
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfbc      	itt	lt
 80082d8:	232d      	movlt	r3, #45	; 0x2d
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082de:	487f      	ldr	r0, [pc, #508]	; (80084dc <_printf_float+0x2e8>)
 80082e0:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <_printf_float+0x2ec>)
 80082e2:	e7d1      	b.n	8008288 <_printf_float+0x94>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ea:	9206      	str	r2, [sp, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	d13f      	bne.n	8008370 <_printf_float+0x17c>
 80082f0:	2306      	movs	r3, #6
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	ab0a      	add	r3, sp, #40	; 0x28
 8008302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008306:	ab09      	add	r3, sp, #36	; 0x24
 8008308:	ec49 8b10 	vmov	d0, r8, r9
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fecd 	bl	80080b4 <__cvt>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	2b47      	cmp	r3, #71	; 0x47
 8008320:	4680      	mov	r8, r0
 8008322:	d108      	bne.n	8008336 <_printf_float+0x142>
 8008324:	1cc8      	adds	r0, r1, #3
 8008326:	db02      	blt.n	800832e <_printf_float+0x13a>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	dd41      	ble.n	80083b2 <_printf_float+0x1be>
 800832e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008332:	fa5f fb8b 	uxtb.w	fp, fp
 8008336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800833a:	d820      	bhi.n	800837e <_printf_float+0x18a>
 800833c:	3901      	subs	r1, #1
 800833e:	465a      	mov	r2, fp
 8008340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	f7ff ff17 	bl	8008178 <__exponent>
 800834a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834c:	1813      	adds	r3, r2, r0
 800834e:	2a01      	cmp	r2, #1
 8008350:	4681      	mov	r9, r0
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	dc02      	bgt.n	800835c <_printf_float+0x168>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d501      	bpl.n	8008360 <_printf_float+0x16c>
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008364:	2b00      	cmp	r3, #0
 8008366:	d09c      	beq.n	80082a2 <_printf_float+0xae>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e798      	b.n	80082a2 <_printf_float+0xae>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a47      	cmp	r2, #71	; 0x47
 8008374:	d1be      	bne.n	80082f4 <_printf_float+0x100>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_printf_float+0x100>
 800837a:	2301      	movs	r3, #1
 800837c:	e7b9      	b.n	80082f2 <_printf_float+0xfe>
 800837e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1c2>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1ae>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x1a0>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x1a6>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	65a1      	str	r1, [r4, #88]	; 0x58
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e7de      	b.n	8008360 <_printf_float+0x16c>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1b6>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1ba>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x1a4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x1a4>
 80083b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1d4>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x1a6>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x1a4>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfd4      	ite	le
 80083cc:	f1c1 0202 	rsble	r2, r1, #2
 80083d0:	2201      	movgt	r2, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x1a4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1f8>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12c      	bne.n	8008444 <_printf_float+0x250>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xc2>
 80083ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f0:	f240 80e0 	bls.w	80085b4 <_printf_float+0x3c0>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d034      	beq.n	800846e <_printf_float+0x27a>
 8008404:	4a37      	ldr	r2, [pc, #220]	; (80084e4 <_printf_float+0x2f0>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xc2>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x22e>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d510      	bpl.n	8008444 <_printf_float+0x250>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af41 	beq.w	80082b6 <_printf_float+0xc2>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	f104 091a 	add.w	r9, r4, #26
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	3b01      	subs	r3, #1
 8008440:	4543      	cmp	r3, r8
 8008442:	dc09      	bgt.n	8008458 <_printf_float+0x264>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	f100 8105 	bmi.w	8008656 <_printf_float+0x462>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e730      	b.n	80082ba <_printf_float+0xc6>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af27 	beq.w	80082b6 <_printf_float+0xc2>
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	e7e6      	b.n	800843c <_printf_float+0x248>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc39      	bgt.n	80084e8 <_printf_float+0x2f4>
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <_printf_float+0x2f0>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af19 	beq.w	80082b6 <_printf_float+0xc2>
 8008484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008488:	4313      	orrs	r3, r2
 800848a:	d102      	bne.n	8008492 <_printf_float+0x29e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d8      	bpl.n	8008444 <_printf_float+0x250>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af09 	beq.w	80082b6 <_printf_float+0xc2>
 80084a4:	f04f 0900 	mov.w	r9, #0
 80084a8:	f104 0a1a 	add.w	sl, r4, #26
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	425b      	negs	r3, r3
 80084b0:	454b      	cmp	r3, r9
 80084b2:	dc01      	bgt.n	80084b8 <_printf_float+0x2c4>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	e792      	b.n	80083de <_printf_float+0x1ea>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f aef7 	beq.w	80082b6 <_printf_float+0xc2>
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	e7ee      	b.n	80084ac <_printf_float+0x2b8>
 80084ce:	bf00      	nop
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	0800af50 	.word	0x0800af50
 80084d8:	0800af54 	.word	0x0800af54
 80084dc:	0800af5c 	.word	0x0800af5c
 80084e0:	0800af58 	.word	0x0800af58
 80084e4:	0800af60 	.word	0x0800af60
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bfa8      	it	ge
 80084f0:	461a      	movge	r2, r3
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	4691      	mov	r9, r2
 80084f6:	dc37      	bgt.n	8008568 <_printf_float+0x374>
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008500:	f104 021a 	add.w	r2, r4, #26
 8008504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	455b      	cmp	r3, fp
 800850e:	dc33      	bgt.n	8008578 <_printf_float+0x384>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	429a      	cmp	r2, r3
 8008516:	db3b      	blt.n	8008590 <_printf_float+0x39c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d438      	bmi.n	8008590 <_printf_float+0x39c>
 800851e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	eba2 0901 	sub.w	r9, r2, r1
 800852a:	4599      	cmp	r9, r3
 800852c:	bfa8      	it	ge
 800852e:	4699      	movge	r9, r3
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	dc35      	bgt.n	80085a2 <_printf_float+0x3ae>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853e:	f104 0a1a 	add.w	sl, r4, #26
 8008542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	eba3 0309 	sub.w	r3, r3, r9
 800854c:	4543      	cmp	r3, r8
 800854e:	f77f af79 	ble.w	8008444 <_printf_float+0x250>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f aeaa 	beq.w	80082b6 <_printf_float+0xc2>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	e7ec      	b.n	8008542 <_printf_float+0x34e>
 8008568:	4613      	mov	r3, r2
 800856a:	4631      	mov	r1, r6
 800856c:	4642      	mov	r2, r8
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	d1c0      	bne.n	80084f8 <_printf_float+0x304>
 8008576:	e69e      	b.n	80082b6 <_printf_float+0xc2>
 8008578:	2301      	movs	r3, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae97 	beq.w	80082b6 <_printf_float+0xc2>
 8008588:	9a05      	ldr	r2, [sp, #20]
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e7b9      	b.n	8008504 <_printf_float+0x310>
 8008590:	ee18 3a10 	vmov	r3, s16
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1be      	bne.n	800851e <_printf_float+0x32a>
 80085a0:	e689      	b.n	80082b6 <_printf_float+0xc2>
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	464b      	mov	r3, r9
 80085a6:	4442      	add	r2, r8
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1c1      	bne.n	8008536 <_printf_float+0x342>
 80085b2:	e680      	b.n	80082b6 <_printf_float+0xc2>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	2a01      	cmp	r2, #1
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x3ca>
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d538      	bpl.n	8008630 <_printf_float+0x43c>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae74 	beq.w	80082b6 <_printf_float+0xc2>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae6b 	beq.w	80082b6 <_printf_float+0xc2>
 80085e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	f7f8 fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80085ec:	b9d8      	cbnz	r0, 8008626 <_printf_float+0x432>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	f108 0201 	add.w	r2, r8, #1
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	d10e      	bne.n	800861e <_printf_float+0x42a>
 8008600:	e659      	b.n	80082b6 <_printf_float+0xc2>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae52 	beq.w	80082b6 <_printf_float+0xc2>
 8008612:	f108 0801 	add.w	r8, r8, #1
 8008616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008618:	3b01      	subs	r3, #1
 800861a:	4543      	cmp	r3, r8
 800861c:	dcf1      	bgt.n	8008602 <_printf_float+0x40e>
 800861e:	464b      	mov	r3, r9
 8008620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008624:	e6dc      	b.n	80083e0 <_printf_float+0x1ec>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	f104 0a1a 	add.w	sl, r4, #26
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x422>
 8008630:	2301      	movs	r3, #1
 8008632:	4642      	mov	r2, r8
 8008634:	e7df      	b.n	80085f6 <_printf_float+0x402>
 8008636:	2301      	movs	r3, #1
 8008638:	464a      	mov	r2, r9
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae38 	beq.w	80082b6 <_printf_float+0xc2>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864e:	1a5b      	subs	r3, r3, r1
 8008650:	4543      	cmp	r3, r8
 8008652:	dcf0      	bgt.n	8008636 <_printf_float+0x442>
 8008654:	e6fa      	b.n	800844c <_printf_float+0x258>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0919 	add.w	r9, r4, #25
 800865e:	e7f4      	b.n	800864a <_printf_float+0x456>

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4699      	mov	r9, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008670:	4293      	cmp	r3, r2
 8008672:	bfb8      	it	lt
 8008674:	4613      	movlt	r3, r2
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800867c:	4607      	mov	r7, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc26      	bgt.n	80086f6 <_printf_common+0x96>
 80086a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ac:	1e13      	subs	r3, r2, #0
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d42b      	bmi.n	8008710 <_printf_common+0xb0>
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d01e      	beq.n	8008704 <_printf_common+0xa4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	68e5      	ldr	r5, [r4, #12]
 80086ca:	6832      	ldr	r2, [r6, #0]
 80086cc:	f003 0306 	and.w	r3, r3, #6
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	bf08      	it	eq
 80086d4:	1aad      	subeq	r5, r5, r2
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	bf0c      	ite	eq
 80086dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e0:	2500      	movne	r5, #0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bfc4      	itt	gt
 80086e6:	1a9b      	subgt	r3, r3, r2
 80086e8:	18ed      	addgt	r5, r5, r3
 80086ea:	2600      	movs	r6, #0
 80086ec:	341a      	adds	r4, #26
 80086ee:	42b5      	cmp	r5, r6
 80086f0:	d11a      	bne.n	8008728 <_printf_common+0xc8>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e008      	b.n	8008708 <_printf_common+0xa8>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4649      	mov	r1, r9
 80086fc:	4638      	mov	r0, r7
 80086fe:	47c0      	blx	r8
 8008700:	3001      	adds	r0, #1
 8008702:	d103      	bne.n	800870c <_printf_common+0xac>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	3501      	adds	r5, #1
 800870e:	e7c6      	b.n	800869e <_printf_common+0x3e>
 8008710:	18e1      	adds	r1, r4, r3
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	2030      	movs	r0, #48	; 0x30
 8008716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871a:	4422      	add	r2, r4
 800871c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008724:	3302      	adds	r3, #2
 8008726:	e7c7      	b.n	80086b8 <_printf_common+0x58>
 8008728:	2301      	movs	r3, #1
 800872a:	4622      	mov	r2, r4
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d0e6      	beq.n	8008704 <_printf_common+0xa4>
 8008736:	3601      	adds	r6, #1
 8008738:	e7d9      	b.n	80086ee <_printf_common+0x8e>
	...

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	4691      	mov	r9, r2
 8008744:	7e27      	ldrb	r7, [r4, #24]
 8008746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008748:	2f78      	cmp	r7, #120	; 0x78
 800874a:	4680      	mov	r8, r0
 800874c:	469a      	mov	sl, r3
 800874e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	; 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d8 	beq.w	800890e <_printf_i+0x1d2>
 800875e:	2f58      	cmp	r7, #88	; 0x58
 8008760:	f000 80a3 	beq.w	80088aa <_printf_i+0x16e>
 8008764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a001      	add	r0, pc, #4	; (adr r0, 800877c <_printf_i+0x40>)
 8008778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088f5 	.word	0x080088f5
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080088d7 	.word	0x080088d7
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008917 	.word	0x08008917
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088df 	.word	0x080088df
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	600a      	str	r2, [r1, #0]
 80087dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0a3      	b.n	8008930 <_printf_i+0x1f4>
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	6808      	ldr	r0, [r1, #0]
 80087ec:	062e      	lsls	r6, r5, #24
 80087ee:	f100 0304 	add.w	r3, r0, #4
 80087f2:	d50a      	bpl.n	800880a <_printf_i+0xce>
 80087f4:	6805      	ldr	r5, [r0, #0]
 80087f6:	600b      	str	r3, [r1, #0]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xc8>
 80087fc:	232d      	movs	r3, #45	; 0x2d
 80087fe:	426d      	negs	r5, r5
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	485e      	ldr	r0, [pc, #376]	; (8008980 <_printf_i+0x244>)
 8008806:	230a      	movs	r3, #10
 8008808:	e019      	b.n	800883e <_printf_i+0x102>
 800880a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880e:	6805      	ldr	r5, [r0, #0]
 8008810:	600b      	str	r3, [r1, #0]
 8008812:	bf18      	it	ne
 8008814:	b22d      	sxthne	r5, r5
 8008816:	e7ef      	b.n	80087f8 <_printf_i+0xbc>
 8008818:	680b      	ldr	r3, [r1, #0]
 800881a:	6825      	ldr	r5, [r4, #0]
 800881c:	1d18      	adds	r0, r3, #4
 800881e:	6008      	str	r0, [r1, #0]
 8008820:	0628      	lsls	r0, r5, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xec>
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xf2>
 8008828:	0669      	lsls	r1, r5, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe8>
 800882c:	881d      	ldrh	r5, [r3, #0]
 800882e:	4854      	ldr	r0, [pc, #336]	; (8008980 <_printf_i+0x244>)
 8008830:	2f6f      	cmp	r7, #111	; 0x6f
 8008832:	bf0c      	ite	eq
 8008834:	2308      	moveq	r3, #8
 8008836:	230a      	movne	r3, #10
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6866      	ldr	r6, [r4, #4]
 8008840:	60a6      	str	r6, [r4, #8]
 8008842:	2e00      	cmp	r6, #0
 8008844:	bfa2      	ittt	ge
 8008846:	6821      	ldrge	r1, [r4, #0]
 8008848:	f021 0104 	bicge.w	r1, r1, #4
 800884c:	6021      	strge	r1, [r4, #0]
 800884e:	b90d      	cbnz	r5, 8008854 <_printf_i+0x118>
 8008850:	2e00      	cmp	r6, #0
 8008852:	d04d      	beq.n	80088f0 <_printf_i+0x1b4>
 8008854:	4616      	mov	r6, r2
 8008856:	fbb5 f1f3 	udiv	r1, r5, r3
 800885a:	fb03 5711 	mls	r7, r3, r1, r5
 800885e:	5dc7      	ldrb	r7, [r0, r7]
 8008860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008864:	462f      	mov	r7, r5
 8008866:	42bb      	cmp	r3, r7
 8008868:	460d      	mov	r5, r1
 800886a:	d9f4      	bls.n	8008856 <_printf_i+0x11a>
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10b      	bne.n	8008888 <_printf_i+0x14c>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07df      	lsls	r7, r3, #31
 8008874:	d508      	bpl.n	8008888 <_printf_i+0x14c>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	bfde      	ittt	le
 800887e:	2330      	movle	r3, #48	; 0x30
 8008880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008888:	1b92      	subs	r2, r2, r6
 800888a:	6122      	str	r2, [r4, #16]
 800888c:	f8cd a000 	str.w	sl, [sp]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fee2 	bl	8008660 <_printf_common>
 800889c:	3001      	adds	r0, #1
 800889e:	d14c      	bne.n	800893a <_printf_i+0x1fe>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b004      	add	sp, #16
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	4835      	ldr	r0, [pc, #212]	; (8008980 <_printf_i+0x244>)
 80088ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	680e      	ldr	r6, [r1, #0]
 80088b4:	061f      	lsls	r7, r3, #24
 80088b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088ba:	600e      	str	r6, [r1, #0]
 80088bc:	d514      	bpl.n	80088e8 <_printf_i+0x1ac>
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	bf44      	itt	mi
 80088c2:	f043 0320 	orrmi.w	r3, r3, #32
 80088c6:	6023      	strmi	r3, [r4, #0]
 80088c8:	b91d      	cbnz	r5, 80088d2 <_printf_i+0x196>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f023 0320 	bic.w	r3, r3, #32
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	2310      	movs	r3, #16
 80088d4:	e7b0      	b.n	8008838 <_printf_i+0xfc>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2378      	movs	r3, #120	; 0x78
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <_printf_i+0x248>)
 80088e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e6:	e7e3      	b.n	80088b0 <_printf_i+0x174>
 80088e8:	065e      	lsls	r6, r3, #25
 80088ea:	bf48      	it	mi
 80088ec:	b2ad      	uxthmi	r5, r5
 80088ee:	e7e6      	b.n	80088be <_printf_i+0x182>
 80088f0:	4616      	mov	r6, r2
 80088f2:	e7bb      	b.n	800886c <_printf_i+0x130>
 80088f4:	680b      	ldr	r3, [r1, #0]
 80088f6:	6826      	ldr	r6, [r4, #0]
 80088f8:	6960      	ldr	r0, [r4, #20]
 80088fa:	1d1d      	adds	r5, r3, #4
 80088fc:	600d      	str	r5, [r1, #0]
 80088fe:	0635      	lsls	r5, r6, #24
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	d501      	bpl.n	8008908 <_printf_i+0x1cc>
 8008904:	6018      	str	r0, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0x1d2>
 8008908:	0671      	lsls	r1, r6, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0x1c8>
 800890c:	8018      	strh	r0, [r3, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	4616      	mov	r6, r2
 8008914:	e7ba      	b.n	800888c <_printf_i+0x150>
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	600a      	str	r2, [r1, #0]
 800891c:	681e      	ldr	r6, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	2100      	movs	r1, #0
 8008922:	4630      	mov	r0, r6
 8008924:	f7f7 fc7c 	bl	8000220 <memchr>
 8008928:	b108      	cbz	r0, 800892e <_printf_i+0x1f2>
 800892a:	1b80      	subs	r0, r0, r6
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	2300      	movs	r3, #0
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	e7a8      	b.n	800888c <_printf_i+0x150>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d0ab      	beq.n	80088a0 <_printf_i+0x164>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d413      	bmi.n	8008976 <_printf_i+0x23a>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e7a4      	b.n	80088a4 <_printf_i+0x168>
 800895a:	2301      	movs	r3, #1
 800895c:	4632      	mov	r2, r6
 800895e:	4649      	mov	r1, r9
 8008960:	4640      	mov	r0, r8
 8008962:	47d0      	blx	sl
 8008964:	3001      	adds	r0, #1
 8008966:	d09b      	beq.n	80088a0 <_printf_i+0x164>
 8008968:	3501      	adds	r5, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	1a5b      	subs	r3, r3, r1
 8008970:	42ab      	cmp	r3, r5
 8008972:	dcf2      	bgt.n	800895a <_printf_i+0x21e>
 8008974:	e7eb      	b.n	800894e <_printf_i+0x212>
 8008976:	2500      	movs	r5, #0
 8008978:	f104 0619 	add.w	r6, r4, #25
 800897c:	e7f5      	b.n	800896a <_printf_i+0x22e>
 800897e:	bf00      	nop
 8008980:	0800af62 	.word	0x0800af62
 8008984:	0800af73 	.word	0x0800af73

08008988 <siprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	b500      	push	{lr}
 800898c:	b09c      	sub	sp, #112	; 0x70
 800898e:	ab1d      	add	r3, sp, #116	; 0x74
 8008990:	9002      	str	r0, [sp, #8]
 8008992:	9006      	str	r0, [sp, #24]
 8008994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008998:	4809      	ldr	r0, [pc, #36]	; (80089c0 <siprintf+0x38>)
 800899a:	9107      	str	r1, [sp, #28]
 800899c:	9104      	str	r1, [sp, #16]
 800899e:	4909      	ldr	r1, [pc, #36]	; (80089c4 <siprintf+0x3c>)
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	a902      	add	r1, sp, #8
 80089ac:	f001 fbc2 	bl	800a134 <_svfiprintf_r>
 80089b0:	9b02      	ldr	r3, [sp, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	b01c      	add	sp, #112	; 0x70
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	20000010 	.word	0x20000010
 80089c4:	ffff0208 	.word	0xffff0208

080089c8 <_strtol_l.isra.0>:
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ce:	d001      	beq.n	80089d4 <_strtol_l.isra.0+0xc>
 80089d0:	2b24      	cmp	r3, #36	; 0x24
 80089d2:	d906      	bls.n	80089e2 <_strtol_l.isra.0+0x1a>
 80089d4:	f7ff fb3c 	bl	8008050 <__errno>
 80089d8:	2316      	movs	r3, #22
 80089da:	6003      	str	r3, [r0, #0]
 80089dc:	2000      	movs	r0, #0
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	4f3a      	ldr	r7, [pc, #232]	; (8008acc <_strtol_l.isra.0+0x104>)
 80089e4:	468e      	mov	lr, r1
 80089e6:	4676      	mov	r6, lr
 80089e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80089ec:	5de5      	ldrb	r5, [r4, r7]
 80089ee:	f015 0508 	ands.w	r5, r5, #8
 80089f2:	d1f8      	bne.n	80089e6 <_strtol_l.isra.0+0x1e>
 80089f4:	2c2d      	cmp	r4, #45	; 0x2d
 80089f6:	d134      	bne.n	8008a62 <_strtol_l.isra.0+0x9a>
 80089f8:	f89e 4000 	ldrb.w	r4, [lr]
 80089fc:	f04f 0801 	mov.w	r8, #1
 8008a00:	f106 0e02 	add.w	lr, r6, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05c      	beq.n	8008ac2 <_strtol_l.isra.0+0xfa>
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d10c      	bne.n	8008a26 <_strtol_l.isra.0+0x5e>
 8008a0c:	2c30      	cmp	r4, #48	; 0x30
 8008a0e:	d10a      	bne.n	8008a26 <_strtol_l.isra.0+0x5e>
 8008a10:	f89e 4000 	ldrb.w	r4, [lr]
 8008a14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a18:	2c58      	cmp	r4, #88	; 0x58
 8008a1a:	d14d      	bne.n	8008ab8 <_strtol_l.isra.0+0xf0>
 8008a1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008a20:	2310      	movs	r3, #16
 8008a22:	f10e 0e02 	add.w	lr, lr, #2
 8008a26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008a2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a2e:	2600      	movs	r6, #0
 8008a30:	fbbc f9f3 	udiv	r9, ip, r3
 8008a34:	4635      	mov	r5, r6
 8008a36:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008a3e:	2f09      	cmp	r7, #9
 8008a40:	d818      	bhi.n	8008a74 <_strtol_l.isra.0+0xac>
 8008a42:	463c      	mov	r4, r7
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	dd24      	ble.n	8008a92 <_strtol_l.isra.0+0xca>
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	db1f      	blt.n	8008a8c <_strtol_l.isra.0+0xc4>
 8008a4c:	45a9      	cmp	r9, r5
 8008a4e:	d31d      	bcc.n	8008a8c <_strtol_l.isra.0+0xc4>
 8008a50:	d101      	bne.n	8008a56 <_strtol_l.isra.0+0x8e>
 8008a52:	45a2      	cmp	sl, r4
 8008a54:	db1a      	blt.n	8008a8c <_strtol_l.isra.0+0xc4>
 8008a56:	fb05 4503 	mla	r5, r5, r3, r4
 8008a5a:	2601      	movs	r6, #1
 8008a5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008a60:	e7eb      	b.n	8008a3a <_strtol_l.isra.0+0x72>
 8008a62:	2c2b      	cmp	r4, #43	; 0x2b
 8008a64:	bf08      	it	eq
 8008a66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008a6a:	46a8      	mov	r8, r5
 8008a6c:	bf08      	it	eq
 8008a6e:	f106 0e02 	addeq.w	lr, r6, #2
 8008a72:	e7c7      	b.n	8008a04 <_strtol_l.isra.0+0x3c>
 8008a74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008a78:	2f19      	cmp	r7, #25
 8008a7a:	d801      	bhi.n	8008a80 <_strtol_l.isra.0+0xb8>
 8008a7c:	3c37      	subs	r4, #55	; 0x37
 8008a7e:	e7e1      	b.n	8008a44 <_strtol_l.isra.0+0x7c>
 8008a80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008a84:	2f19      	cmp	r7, #25
 8008a86:	d804      	bhi.n	8008a92 <_strtol_l.isra.0+0xca>
 8008a88:	3c57      	subs	r4, #87	; 0x57
 8008a8a:	e7db      	b.n	8008a44 <_strtol_l.isra.0+0x7c>
 8008a8c:	f04f 36ff 	mov.w	r6, #4294967295
 8008a90:	e7e4      	b.n	8008a5c <_strtol_l.isra.0+0x94>
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	da05      	bge.n	8008aa2 <_strtol_l.isra.0+0xda>
 8008a96:	2322      	movs	r3, #34	; 0x22
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	4665      	mov	r5, ip
 8008a9c:	b942      	cbnz	r2, 8008ab0 <_strtol_l.isra.0+0xe8>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	e79d      	b.n	80089de <_strtol_l.isra.0+0x16>
 8008aa2:	f1b8 0f00 	cmp.w	r8, #0
 8008aa6:	d000      	beq.n	8008aaa <_strtol_l.isra.0+0xe2>
 8008aa8:	426d      	negs	r5, r5
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d0f7      	beq.n	8008a9e <_strtol_l.isra.0+0xd6>
 8008aae:	b10e      	cbz	r6, 8008ab4 <_strtol_l.isra.0+0xec>
 8008ab0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008ab4:	6011      	str	r1, [r2, #0]
 8008ab6:	e7f2      	b.n	8008a9e <_strtol_l.isra.0+0xd6>
 8008ab8:	2430      	movs	r4, #48	; 0x30
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1b3      	bne.n	8008a26 <_strtol_l.isra.0+0x5e>
 8008abe:	2308      	movs	r3, #8
 8008ac0:	e7b1      	b.n	8008a26 <_strtol_l.isra.0+0x5e>
 8008ac2:	2c30      	cmp	r4, #48	; 0x30
 8008ac4:	d0a4      	beq.n	8008a10 <_strtol_l.isra.0+0x48>
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	e7ad      	b.n	8008a26 <_strtol_l.isra.0+0x5e>
 8008aca:	bf00      	nop
 8008acc:	0800af85 	.word	0x0800af85

08008ad0 <strtol>:
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	460a      	mov	r2, r1
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4802      	ldr	r0, [pc, #8]	; (8008ae0 <strtol+0x10>)
 8008ad8:	6800      	ldr	r0, [r0, #0]
 8008ada:	f7ff bf75 	b.w	80089c8 <_strtol_l.isra.0>
 8008ade:	bf00      	nop
 8008ae0:	20000010 	.word	0x20000010

08008ae4 <quorem>:
 8008ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	6903      	ldr	r3, [r0, #16]
 8008aea:	690c      	ldr	r4, [r1, #16]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	4607      	mov	r7, r0
 8008af0:	f2c0 8081 	blt.w	8008bf6 <quorem+0x112>
 8008af4:	3c01      	subs	r4, #1
 8008af6:	f101 0814 	add.w	r8, r1, #20
 8008afa:	f100 0514 	add.w	r5, r0, #20
 8008afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b1c:	d331      	bcc.n	8008b82 <quorem+0x9e>
 8008b1e:	f04f 0e00 	mov.w	lr, #0
 8008b22:	4640      	mov	r0, r8
 8008b24:	46ac      	mov	ip, r5
 8008b26:	46f2      	mov	sl, lr
 8008b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b2c:	b293      	uxth	r3, r2
 8008b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ebaa 0303 	sub.w	r3, sl, r3
 8008b3c:	0c12      	lsrs	r2, r2, #16
 8008b3e:	f8dc a000 	ldr.w	sl, [ip]
 8008b42:	fb06 e202 	mla	r2, r6, r2, lr
 8008b46:	fa13 f38a 	uxtah	r3, r3, sl
 8008b4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b4e:	fa1f fa82 	uxth.w	sl, r2
 8008b52:	f8dc 2000 	ldr.w	r2, [ip]
 8008b56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b64:	4581      	cmp	r9, r0
 8008b66:	f84c 3b04 	str.w	r3, [ip], #4
 8008b6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b6e:	d2db      	bcs.n	8008b28 <quorem+0x44>
 8008b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b74:	b92b      	cbnz	r3, 8008b82 <quorem+0x9e>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	d32e      	bcc.n	8008bde <quorem+0xfa>
 8008b80:	613c      	str	r4, [r7, #16]
 8008b82:	4638      	mov	r0, r7
 8008b84:	f001 f8c0 	bl	8009d08 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	db24      	blt.n	8008bd6 <quorem+0xf2>
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b98:	f8d0 e000 	ldr.w	lr, [r0]
 8008b9c:	b293      	uxth	r3, r2
 8008b9e:	ebac 0303 	sub.w	r3, ip, r3
 8008ba2:	0c12      	lsrs	r2, r2, #16
 8008ba4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ba8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb6:	45c1      	cmp	r9, r8
 8008bb8:	f840 3b04 	str.w	r3, [r0], #4
 8008bbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc0:	d2e8      	bcs.n	8008b94 <quorem+0xb0>
 8008bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bca:	b922      	cbnz	r2, 8008bd6 <quorem+0xf2>
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	d30a      	bcc.n	8008bea <quorem+0x106>
 8008bd4:	613c      	str	r4, [r7, #16]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	b003      	add	sp, #12
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d1cc      	bne.n	8008b80 <quorem+0x9c>
 8008be6:	3c01      	subs	r4, #1
 8008be8:	e7c7      	b.n	8008b7a <quorem+0x96>
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <quorem+0xf0>
 8008bf2:	3c01      	subs	r4, #1
 8008bf4:	e7eb      	b.n	8008bce <quorem+0xea>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e7ee      	b.n	8008bd8 <quorem+0xf4>
 8008bfa:	0000      	movs	r0, r0
 8008bfc:	0000      	movs	r0, r0
	...

08008c00 <_dtoa_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ed2d 8b02 	vpush	{d8}
 8008c08:	ec57 6b10 	vmov	r6, r7, d0
 8008c0c:	b095      	sub	sp, #84	; 0x54
 8008c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c20:	b975      	cbnz	r5, 8008c40 <_dtoa_r+0x40>
 8008c22:	2010      	movs	r0, #16
 8008c24:	f000 fddc 	bl	80097e0 <malloc>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c2c:	b920      	cbnz	r0, 8008c38 <_dtoa_r+0x38>
 8008c2e:	4bb2      	ldr	r3, [pc, #712]	; (8008ef8 <_dtoa_r+0x2f8>)
 8008c30:	21ea      	movs	r1, #234	; 0xea
 8008c32:	48b2      	ldr	r0, [pc, #712]	; (8008efc <_dtoa_r+0x2fc>)
 8008c34:	f001 fb8e 	bl	800a354 <__assert_func>
 8008c38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c3c:	6005      	str	r5, [r0, #0]
 8008c3e:	60c5      	str	r5, [r0, #12]
 8008c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	b151      	cbz	r1, 8008c5c <_dtoa_r+0x5c>
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	604a      	str	r2, [r1, #4]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4093      	lsls	r3, r2
 8008c4e:	608b      	str	r3, [r1, #8]
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 fe1b 	bl	800988c <_Bfree>
 8008c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	1e3b      	subs	r3, r7, #0
 8008c5e:	bfb9      	ittee	lt
 8008c60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c64:	9303      	strlt	r3, [sp, #12]
 8008c66:	2300      	movge	r3, #0
 8008c68:	f8c8 3000 	strge.w	r3, [r8]
 8008c6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008c70:	4ba3      	ldr	r3, [pc, #652]	; (8008f00 <_dtoa_r+0x300>)
 8008c72:	bfbc      	itt	lt
 8008c74:	2201      	movlt	r2, #1
 8008c76:	f8c8 2000 	strlt.w	r2, [r8]
 8008c7a:	ea33 0309 	bics.w	r3, r3, r9
 8008c7e:	d11b      	bne.n	8008cb8 <_dtoa_r+0xb8>
 8008c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c82:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c8c:	4333      	orrs	r3, r6
 8008c8e:	f000 857a 	beq.w	8009786 <_dtoa_r+0xb86>
 8008c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c94:	b963      	cbnz	r3, 8008cb0 <_dtoa_r+0xb0>
 8008c96:	4b9b      	ldr	r3, [pc, #620]	; (8008f04 <_dtoa_r+0x304>)
 8008c98:	e024      	b.n	8008ce4 <_dtoa_r+0xe4>
 8008c9a:	4b9b      	ldr	r3, [pc, #620]	; (8008f08 <_dtoa_r+0x308>)
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	9800      	ldr	r0, [sp, #0]
 8008ca6:	b015      	add	sp, #84	; 0x54
 8008ca8:	ecbd 8b02 	vpop	{d8}
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb0:	4b94      	ldr	r3, [pc, #592]	; (8008f04 <_dtoa_r+0x304>)
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	3303      	adds	r3, #3
 8008cb6:	e7f3      	b.n	8008ca0 <_dtoa_r+0xa0>
 8008cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	ec51 0b17 	vmov	r0, r1, d7
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008cc8:	f7f7 ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 8008ccc:	4680      	mov	r8, r0
 8008cce:	b158      	cbz	r0, 8008ce8 <_dtoa_r+0xe8>
 8008cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8551 	beq.w	8009780 <_dtoa_r+0xb80>
 8008cde:	488b      	ldr	r0, [pc, #556]	; (8008f0c <_dtoa_r+0x30c>)
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	1e43      	subs	r3, r0, #1
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	e7dd      	b.n	8008ca4 <_dtoa_r+0xa4>
 8008ce8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008cec:	aa12      	add	r2, sp, #72	; 0x48
 8008cee:	a913      	add	r1, sp, #76	; 0x4c
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 f8ad 	bl	8009e50 <__d2b>
 8008cf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cfa:	4683      	mov	fp, r0
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	d07c      	beq.n	8008dfa <_dtoa_r+0x1fa>
 8008d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1a:	4b7d      	ldr	r3, [pc, #500]	; (8008f10 <_dtoa_r+0x310>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	f7f7 fad1 	bl	80002c8 <__aeabi_dsub>
 8008d26:	a36e      	add	r3, pc, #440	; (adr r3, 8008ee0 <_dtoa_r+0x2e0>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fc84 	bl	8000638 <__aeabi_dmul>
 8008d30:	a36d      	add	r3, pc, #436	; (adr r3, 8008ee8 <_dtoa_r+0x2e8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fac9 	bl	80002cc <__adddf3>
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	460f      	mov	r7, r1
 8008d40:	f7f7 fc10 	bl	8000564 <__aeabi_i2d>
 8008d44:	a36a      	add	r3, pc, #424	; (adr r3, 8008ef0 <_dtoa_r+0x2f0>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fc75 	bl	8000638 <__aeabi_dmul>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4630      	mov	r0, r6
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f7 fab9 	bl	80002cc <__adddf3>
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	f7f7 ff1b 	bl	8000b98 <__aeabi_d2iz>
 8008d62:	2200      	movs	r2, #0
 8008d64:	4682      	mov	sl, r0
 8008d66:	2300      	movs	r3, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fed6 	bl	8000b1c <__aeabi_dcmplt>
 8008d70:	b148      	cbz	r0, 8008d86 <_dtoa_r+0x186>
 8008d72:	4650      	mov	r0, sl
 8008d74:	f7f7 fbf6 	bl	8000564 <__aeabi_i2d>
 8008d78:	4632      	mov	r2, r6
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	f7f7 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8008d80:	b908      	cbnz	r0, 8008d86 <_dtoa_r+0x186>
 8008d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d86:	f1ba 0f16 	cmp.w	sl, #22
 8008d8a:	d854      	bhi.n	8008e36 <_dtoa_r+0x236>
 8008d8c:	4b61      	ldr	r3, [pc, #388]	; (8008f14 <_dtoa_r+0x314>)
 8008d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d9a:	f7f7 febf 	bl	8000b1c <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d04b      	beq.n	8008e3a <_dtoa_r+0x23a>
 8008da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008da6:	2300      	movs	r3, #0
 8008da8:	930e      	str	r3, [sp, #56]	; 0x38
 8008daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dac:	1b5d      	subs	r5, r3, r5
 8008dae:	1e6b      	subs	r3, r5, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	bf43      	ittte	mi
 8008db4:	2300      	movmi	r3, #0
 8008db6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008dba:	9304      	strmi	r3, [sp, #16]
 8008dbc:	f04f 0800 	movpl.w	r8, #0
 8008dc0:	f1ba 0f00 	cmp.w	sl, #0
 8008dc4:	db3b      	blt.n	8008e3e <_dtoa_r+0x23e>
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008dcc:	4453      	add	r3, sl
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9306      	str	r3, [sp, #24]
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	2b09      	cmp	r3, #9
 8008dd8:	d869      	bhi.n	8008eae <_dtoa_r+0x2ae>
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	bfc4      	itt	gt
 8008dde:	3b04      	subgt	r3, #4
 8008de0:	9305      	strgt	r3, [sp, #20]
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	f1a3 0302 	sub.w	r3, r3, #2
 8008de8:	bfcc      	ite	gt
 8008dea:	2500      	movgt	r5, #0
 8008dec:	2501      	movle	r5, #1
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d869      	bhi.n	8008ec6 <_dtoa_r+0x2c6>
 8008df2:	e8df f003 	tbb	[pc, r3]
 8008df6:	4e2c      	.short	0x4e2c
 8008df8:	5a4c      	.short	0x5a4c
 8008dfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008dfe:	441d      	add	r5, r3
 8008e00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	bfc1      	itttt	gt
 8008e08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e10:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e18:	bfda      	itte	le
 8008e1a:	f1c3 0320 	rsble	r3, r3, #32
 8008e1e:	fa06 f003 	lslle.w	r0, r6, r3
 8008e22:	4318      	orrgt	r0, r3
 8008e24:	f7f7 fb8e 	bl	8000544 <__aeabi_ui2d>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e30:	3d01      	subs	r5, #1
 8008e32:	9310      	str	r3, [sp, #64]	; 0x40
 8008e34:	e771      	b.n	8008d1a <_dtoa_r+0x11a>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7b6      	b.n	8008da8 <_dtoa_r+0x1a8>
 8008e3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008e3c:	e7b5      	b.n	8008daa <_dtoa_r+0x1aa>
 8008e3e:	f1ca 0300 	rsb	r3, sl, #0
 8008e42:	9306      	str	r3, [sp, #24]
 8008e44:	2300      	movs	r3, #0
 8008e46:	eba8 080a 	sub.w	r8, r8, sl
 8008e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e4c:	e7c2      	b.n	8008dd4 <_dtoa_r+0x1d4>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9308      	str	r3, [sp, #32]
 8008e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dc39      	bgt.n	8008ecc <_dtoa_r+0x2cc>
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e60:	464b      	mov	r3, r9
 8008e62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e68:	2200      	movs	r2, #0
 8008e6a:	6042      	str	r2, [r0, #4]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	f102 0614 	add.w	r6, r2, #20
 8008e72:	429e      	cmp	r6, r3
 8008e74:	6841      	ldr	r1, [r0, #4]
 8008e76:	d92f      	bls.n	8008ed8 <_dtoa_r+0x2d8>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fcc7 	bl	800980c <_Balloc>
 8008e7e:	9000      	str	r0, [sp, #0]
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d14b      	bne.n	8008f1c <_dtoa_r+0x31c>
 8008e84:	4b24      	ldr	r3, [pc, #144]	; (8008f18 <_dtoa_r+0x318>)
 8008e86:	4602      	mov	r2, r0
 8008e88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e8c:	e6d1      	b.n	8008c32 <_dtoa_r+0x32>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7de      	b.n	8008e50 <_dtoa_r+0x250>
 8008e92:	2300      	movs	r3, #0
 8008e94:	9308      	str	r3, [sp, #32]
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	eb0a 0903 	add.w	r9, sl, r3
 8008e9c:	f109 0301 	add.w	r3, r9, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	bfb8      	it	lt
 8008ea6:	2301      	movlt	r3, #1
 8008ea8:	e7dd      	b.n	8008e66 <_dtoa_r+0x266>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e7f2      	b.n	8008e94 <_dtoa_r+0x294>
 8008eae:	2501      	movs	r5, #1
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	9508      	str	r5, [sp, #32]
 8008eb6:	f04f 39ff 	mov.w	r9, #4294967295
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ec0:	2312      	movs	r3, #18
 8008ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec4:	e7cf      	b.n	8008e66 <_dtoa_r+0x266>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	e7f4      	b.n	8008eb6 <_dtoa_r+0x2b6>
 8008ecc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ed0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	e7c6      	b.n	8008e66 <_dtoa_r+0x266>
 8008ed8:	3101      	adds	r1, #1
 8008eda:	6041      	str	r1, [r0, #4]
 8008edc:	0052      	lsls	r2, r2, #1
 8008ede:	e7c6      	b.n	8008e6e <_dtoa_r+0x26e>
 8008ee0:	636f4361 	.word	0x636f4361
 8008ee4:	3fd287a7 	.word	0x3fd287a7
 8008ee8:	8b60c8b3 	.word	0x8b60c8b3
 8008eec:	3fc68a28 	.word	0x3fc68a28
 8008ef0:	509f79fb 	.word	0x509f79fb
 8008ef4:	3fd34413 	.word	0x3fd34413
 8008ef8:	0800b092 	.word	0x0800b092
 8008efc:	0800b0a9 	.word	0x0800b0a9
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	0800b08e 	.word	0x0800b08e
 8008f08:	0800b085 	.word	0x0800b085
 8008f0c:	0800af61 	.word	0x0800af61
 8008f10:	3ff80000 	.word	0x3ff80000
 8008f14:	0800b1a8 	.word	0x0800b1a8
 8008f18:	0800b108 	.word	0x0800b108
 8008f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f1e:	9a00      	ldr	r2, [sp, #0]
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	2b0e      	cmp	r3, #14
 8008f26:	f200 80ad 	bhi.w	8009084 <_dtoa_r+0x484>
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	f000 80aa 	beq.w	8009084 <_dtoa_r+0x484>
 8008f30:	f1ba 0f00 	cmp.w	sl, #0
 8008f34:	dd36      	ble.n	8008fa4 <_dtoa_r+0x3a4>
 8008f36:	4ac3      	ldr	r2, [pc, #780]	; (8009244 <_dtoa_r+0x644>)
 8008f38:	f00a 030f 	and.w	r3, sl, #15
 8008f3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f40:	ed93 7b00 	vldr	d7, [r3]
 8008f44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f4c:	eeb0 8a47 	vmov.f32	s16, s14
 8008f50:	eef0 8a67 	vmov.f32	s17, s15
 8008f54:	d016      	beq.n	8008f84 <_dtoa_r+0x384>
 8008f56:	4bbc      	ldr	r3, [pc, #752]	; (8009248 <_dtoa_r+0x648>)
 8008f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f60:	f7f7 fc94 	bl	800088c <__aeabi_ddiv>
 8008f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f68:	f007 070f 	and.w	r7, r7, #15
 8008f6c:	2503      	movs	r5, #3
 8008f6e:	4eb6      	ldr	r6, [pc, #728]	; (8009248 <_dtoa_r+0x648>)
 8008f70:	b957      	cbnz	r7, 8008f88 <_dtoa_r+0x388>
 8008f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f76:	ec53 2b18 	vmov	r2, r3, d8
 8008f7a:	f7f7 fc87 	bl	800088c <__aeabi_ddiv>
 8008f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f82:	e029      	b.n	8008fd8 <_dtoa_r+0x3d8>
 8008f84:	2502      	movs	r5, #2
 8008f86:	e7f2      	b.n	8008f6e <_dtoa_r+0x36e>
 8008f88:	07f9      	lsls	r1, r7, #31
 8008f8a:	d508      	bpl.n	8008f9e <_dtoa_r+0x39e>
 8008f8c:	ec51 0b18 	vmov	r0, r1, d8
 8008f90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f94:	f7f7 fb50 	bl	8000638 <__aeabi_dmul>
 8008f98:	ec41 0b18 	vmov	d8, r0, r1
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	107f      	asrs	r7, r7, #1
 8008fa0:	3608      	adds	r6, #8
 8008fa2:	e7e5      	b.n	8008f70 <_dtoa_r+0x370>
 8008fa4:	f000 80a6 	beq.w	80090f4 <_dtoa_r+0x4f4>
 8008fa8:	f1ca 0600 	rsb	r6, sl, #0
 8008fac:	4ba5      	ldr	r3, [pc, #660]	; (8009244 <_dtoa_r+0x644>)
 8008fae:	4fa6      	ldr	r7, [pc, #664]	; (8009248 <_dtoa_r+0x648>)
 8008fb0:	f006 020f 	and.w	r2, r6, #15
 8008fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fc0:	f7f7 fb3a 	bl	8000638 <__aeabi_dmul>
 8008fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc8:	1136      	asrs	r6, r6, #4
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2502      	movs	r5, #2
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	f040 8085 	bne.w	80090de <_dtoa_r+0x4de>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1d2      	bne.n	8008f7e <_dtoa_r+0x37e>
 8008fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 808c 	beq.w	80090f8 <_dtoa_r+0x4f8>
 8008fe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fe4:	4b99      	ldr	r3, [pc, #612]	; (800924c <_dtoa_r+0x64c>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 fd96 	bl	8000b1c <__aeabi_dcmplt>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f000 8081 	beq.w	80090f8 <_dtoa_r+0x4f8>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d07d      	beq.n	80090f8 <_dtoa_r+0x4f8>
 8008ffc:	f1b9 0f00 	cmp.w	r9, #0
 8009000:	dd3c      	ble.n	800907c <_dtoa_r+0x47c>
 8009002:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	2200      	movs	r2, #0
 800900a:	4b91      	ldr	r3, [pc, #580]	; (8009250 <_dtoa_r+0x650>)
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 fb12 	bl	8000638 <__aeabi_dmul>
 8009014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009018:	3501      	adds	r5, #1
 800901a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800901e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009022:	4628      	mov	r0, r5
 8009024:	f7f7 fa9e 	bl	8000564 <__aeabi_i2d>
 8009028:	4632      	mov	r2, r6
 800902a:	463b      	mov	r3, r7
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	4b88      	ldr	r3, [pc, #544]	; (8009254 <_dtoa_r+0x654>)
 8009032:	2200      	movs	r2, #0
 8009034:	f7f7 f94a 	bl	80002cc <__adddf3>
 8009038:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800903c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009044:	2b00      	cmp	r3, #0
 8009046:	d15c      	bne.n	8009102 <_dtoa_r+0x502>
 8009048:	4b83      	ldr	r3, [pc, #524]	; (8009258 <_dtoa_r+0x658>)
 800904a:	2200      	movs	r2, #0
 800904c:	4630      	mov	r0, r6
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 f93a 	bl	80002c8 <__aeabi_dsub>
 8009054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009058:	4606      	mov	r6, r0
 800905a:	460f      	mov	r7, r1
 800905c:	f7f7 fd7c 	bl	8000b58 <__aeabi_dcmpgt>
 8009060:	2800      	cmp	r0, #0
 8009062:	f040 8296 	bne.w	8009592 <_dtoa_r+0x992>
 8009066:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800906a:	4630      	mov	r0, r6
 800906c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 fd53 	bl	8000b1c <__aeabi_dcmplt>
 8009076:	2800      	cmp	r0, #0
 8009078:	f040 8288 	bne.w	800958c <_dtoa_r+0x98c>
 800907c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009086:	2b00      	cmp	r3, #0
 8009088:	f2c0 8158 	blt.w	800933c <_dtoa_r+0x73c>
 800908c:	f1ba 0f0e 	cmp.w	sl, #14
 8009090:	f300 8154 	bgt.w	800933c <_dtoa_r+0x73c>
 8009094:	4b6b      	ldr	r3, [pc, #428]	; (8009244 <_dtoa_r+0x644>)
 8009096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800909a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f280 80e3 	bge.w	800926c <_dtoa_r+0x66c>
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f300 80df 	bgt.w	800926c <_dtoa_r+0x66c>
 80090ae:	f040 826d 	bne.w	800958c <_dtoa_r+0x98c>
 80090b2:	4b69      	ldr	r3, [pc, #420]	; (8009258 <_dtoa_r+0x658>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 fabd 	bl	8000638 <__aeabi_dmul>
 80090be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090c2:	f7f7 fd3f 	bl	8000b44 <__aeabi_dcmpge>
 80090c6:	9e01      	ldr	r6, [sp, #4]
 80090c8:	4637      	mov	r7, r6
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f040 8243 	bne.w	8009556 <_dtoa_r+0x956>
 80090d0:	9d00      	ldr	r5, [sp, #0]
 80090d2:	2331      	movs	r3, #49	; 0x31
 80090d4:	f805 3b01 	strb.w	r3, [r5], #1
 80090d8:	f10a 0a01 	add.w	sl, sl, #1
 80090dc:	e23f      	b.n	800955e <_dtoa_r+0x95e>
 80090de:	07f2      	lsls	r2, r6, #31
 80090e0:	d505      	bpl.n	80090ee <_dtoa_r+0x4ee>
 80090e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e6:	f7f7 faa7 	bl	8000638 <__aeabi_dmul>
 80090ea:	3501      	adds	r5, #1
 80090ec:	2301      	movs	r3, #1
 80090ee:	1076      	asrs	r6, r6, #1
 80090f0:	3708      	adds	r7, #8
 80090f2:	e76c      	b.n	8008fce <_dtoa_r+0x3ce>
 80090f4:	2502      	movs	r5, #2
 80090f6:	e76f      	b.n	8008fd8 <_dtoa_r+0x3d8>
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80090fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009100:	e78d      	b.n	800901e <_dtoa_r+0x41e>
 8009102:	9900      	ldr	r1, [sp, #0]
 8009104:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009108:	4b4e      	ldr	r3, [pc, #312]	; (8009244 <_dtoa_r+0x644>)
 800910a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800910e:	4401      	add	r1, r0
 8009110:	9102      	str	r1, [sp, #8]
 8009112:	9908      	ldr	r1, [sp, #32]
 8009114:	eeb0 8a47 	vmov.f32	s16, s14
 8009118:	eef0 8a67 	vmov.f32	s17, s15
 800911c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009120:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009124:	2900      	cmp	r1, #0
 8009126:	d045      	beq.n	80091b4 <_dtoa_r+0x5b4>
 8009128:	494c      	ldr	r1, [pc, #304]	; (800925c <_dtoa_r+0x65c>)
 800912a:	2000      	movs	r0, #0
 800912c:	f7f7 fbae 	bl	800088c <__aeabi_ddiv>
 8009130:	ec53 2b18 	vmov	r2, r3, d8
 8009134:	f7f7 f8c8 	bl	80002c8 <__aeabi_dsub>
 8009138:	9d00      	ldr	r5, [sp, #0]
 800913a:	ec41 0b18 	vmov	d8, r0, r1
 800913e:	4639      	mov	r1, r7
 8009140:	4630      	mov	r0, r6
 8009142:	f7f7 fd29 	bl	8000b98 <__aeabi_d2iz>
 8009146:	900c      	str	r0, [sp, #48]	; 0x30
 8009148:	f7f7 fa0c 	bl	8000564 <__aeabi_i2d>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 f8b8 	bl	80002c8 <__aeabi_dsub>
 8009158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800915a:	3330      	adds	r3, #48	; 0x30
 800915c:	f805 3b01 	strb.w	r3, [r5], #1
 8009160:	ec53 2b18 	vmov	r2, r3, d8
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
 8009168:	f7f7 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800916c:	2800      	cmp	r0, #0
 800916e:	d165      	bne.n	800923c <_dtoa_r+0x63c>
 8009170:	4632      	mov	r2, r6
 8009172:	463b      	mov	r3, r7
 8009174:	4935      	ldr	r1, [pc, #212]	; (800924c <_dtoa_r+0x64c>)
 8009176:	2000      	movs	r0, #0
 8009178:	f7f7 f8a6 	bl	80002c8 <__aeabi_dsub>
 800917c:	ec53 2b18 	vmov	r2, r3, d8
 8009180:	f7f7 fccc 	bl	8000b1c <__aeabi_dcmplt>
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 80b9 	bne.w	80092fc <_dtoa_r+0x6fc>
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	429d      	cmp	r5, r3
 800918e:	f43f af75 	beq.w	800907c <_dtoa_r+0x47c>
 8009192:	4b2f      	ldr	r3, [pc, #188]	; (8009250 <_dtoa_r+0x650>)
 8009194:	ec51 0b18 	vmov	r0, r1, d8
 8009198:	2200      	movs	r2, #0
 800919a:	f7f7 fa4d 	bl	8000638 <__aeabi_dmul>
 800919e:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <_dtoa_r+0x650>)
 80091a0:	ec41 0b18 	vmov	d8, r0, r1
 80091a4:	2200      	movs	r2, #0
 80091a6:	4630      	mov	r0, r6
 80091a8:	4639      	mov	r1, r7
 80091aa:	f7f7 fa45 	bl	8000638 <__aeabi_dmul>
 80091ae:	4606      	mov	r6, r0
 80091b0:	460f      	mov	r7, r1
 80091b2:	e7c4      	b.n	800913e <_dtoa_r+0x53e>
 80091b4:	ec51 0b17 	vmov	r0, r1, d7
 80091b8:	f7f7 fa3e 	bl	8000638 <__aeabi_dmul>
 80091bc:	9b02      	ldr	r3, [sp, #8]
 80091be:	9d00      	ldr	r5, [sp, #0]
 80091c0:	930c      	str	r3, [sp, #48]	; 0x30
 80091c2:	ec41 0b18 	vmov	d8, r0, r1
 80091c6:	4639      	mov	r1, r7
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7f7 fce5 	bl	8000b98 <__aeabi_d2iz>
 80091ce:	9011      	str	r0, [sp, #68]	; 0x44
 80091d0:	f7f7 f9c8 	bl	8000564 <__aeabi_i2d>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 f874 	bl	80002c8 <__aeabi_dsub>
 80091e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091e2:	3330      	adds	r3, #48	; 0x30
 80091e4:	f805 3b01 	strb.w	r3, [r5], #1
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	429d      	cmp	r5, r3
 80091ec:	4606      	mov	r6, r0
 80091ee:	460f      	mov	r7, r1
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	d134      	bne.n	8009260 <_dtoa_r+0x660>
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <_dtoa_r+0x65c>)
 80091f8:	ec51 0b18 	vmov	r0, r1, d8
 80091fc:	f7f7 f866 	bl	80002cc <__adddf3>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f7 fca6 	bl	8000b58 <__aeabi_dcmpgt>
 800920c:	2800      	cmp	r0, #0
 800920e:	d175      	bne.n	80092fc <_dtoa_r+0x6fc>
 8009210:	ec53 2b18 	vmov	r2, r3, d8
 8009214:	4911      	ldr	r1, [pc, #68]	; (800925c <_dtoa_r+0x65c>)
 8009216:	2000      	movs	r0, #0
 8009218:	f7f7 f856 	bl	80002c8 <__aeabi_dsub>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 fc7a 	bl	8000b1c <__aeabi_dcmplt>
 8009228:	2800      	cmp	r0, #0
 800922a:	f43f af27 	beq.w	800907c <_dtoa_r+0x47c>
 800922e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009230:	1e6b      	subs	r3, r5, #1
 8009232:	930c      	str	r3, [sp, #48]	; 0x30
 8009234:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009238:	2b30      	cmp	r3, #48	; 0x30
 800923a:	d0f8      	beq.n	800922e <_dtoa_r+0x62e>
 800923c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009240:	e04a      	b.n	80092d8 <_dtoa_r+0x6d8>
 8009242:	bf00      	nop
 8009244:	0800b1a8 	.word	0x0800b1a8
 8009248:	0800b180 	.word	0x0800b180
 800924c:	3ff00000 	.word	0x3ff00000
 8009250:	40240000 	.word	0x40240000
 8009254:	401c0000 	.word	0x401c0000
 8009258:	40140000 	.word	0x40140000
 800925c:	3fe00000 	.word	0x3fe00000
 8009260:	4baf      	ldr	r3, [pc, #700]	; (8009520 <_dtoa_r+0x920>)
 8009262:	f7f7 f9e9 	bl	8000638 <__aeabi_dmul>
 8009266:	4606      	mov	r6, r0
 8009268:	460f      	mov	r7, r1
 800926a:	e7ac      	b.n	80091c6 <_dtoa_r+0x5c6>
 800926c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009270:	9d00      	ldr	r5, [sp, #0]
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 fb07 	bl	800088c <__aeabi_ddiv>
 800927e:	f7f7 fc8b 	bl	8000b98 <__aeabi_d2iz>
 8009282:	9002      	str	r0, [sp, #8]
 8009284:	f7f7 f96e 	bl	8000564 <__aeabi_i2d>
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	f7f7 f9d4 	bl	8000638 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4630      	mov	r0, r6
 8009296:	4639      	mov	r1, r7
 8009298:	f7f7 f816 	bl	80002c8 <__aeabi_dsub>
 800929c:	9e02      	ldr	r6, [sp, #8]
 800929e:	9f01      	ldr	r7, [sp, #4]
 80092a0:	3630      	adds	r6, #48	; 0x30
 80092a2:	f805 6b01 	strb.w	r6, [r5], #1
 80092a6:	9e00      	ldr	r6, [sp, #0]
 80092a8:	1bae      	subs	r6, r5, r6
 80092aa:	42b7      	cmp	r7, r6
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	d137      	bne.n	8009322 <_dtoa_r+0x722>
 80092b2:	f7f7 f80b 	bl	80002cc <__adddf3>
 80092b6:	4642      	mov	r2, r8
 80092b8:	464b      	mov	r3, r9
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	f7f7 fc4b 	bl	8000b58 <__aeabi_dcmpgt>
 80092c2:	b9c8      	cbnz	r0, 80092f8 <_dtoa_r+0x6f8>
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 80092d0:	b110      	cbz	r0, 80092d8 <_dtoa_r+0x6d8>
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	07d9      	lsls	r1, r3, #31
 80092d6:	d40f      	bmi.n	80092f8 <_dtoa_r+0x6f8>
 80092d8:	4620      	mov	r0, r4
 80092da:	4659      	mov	r1, fp
 80092dc:	f000 fad6 	bl	800988c <_Bfree>
 80092e0:	2300      	movs	r3, #0
 80092e2:	702b      	strb	r3, [r5, #0]
 80092e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092e6:	f10a 0001 	add.w	r0, sl, #1
 80092ea:	6018      	str	r0, [r3, #0]
 80092ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f43f acd8 	beq.w	8008ca4 <_dtoa_r+0xa4>
 80092f4:	601d      	str	r5, [r3, #0]
 80092f6:	e4d5      	b.n	8008ca4 <_dtoa_r+0xa4>
 80092f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80092fc:	462b      	mov	r3, r5
 80092fe:	461d      	mov	r5, r3
 8009300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009304:	2a39      	cmp	r2, #57	; 0x39
 8009306:	d108      	bne.n	800931a <_dtoa_r+0x71a>
 8009308:	9a00      	ldr	r2, [sp, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d1f7      	bne.n	80092fe <_dtoa_r+0x6fe>
 800930e:	9a07      	ldr	r2, [sp, #28]
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	3201      	adds	r2, #1
 8009314:	9207      	str	r2, [sp, #28]
 8009316:	2230      	movs	r2, #48	; 0x30
 8009318:	700a      	strb	r2, [r1, #0]
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	3201      	adds	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e78c      	b.n	800923c <_dtoa_r+0x63c>
 8009322:	4b7f      	ldr	r3, [pc, #508]	; (8009520 <_dtoa_r+0x920>)
 8009324:	2200      	movs	r2, #0
 8009326:	f7f7 f987 	bl	8000638 <__aeabi_dmul>
 800932a:	2200      	movs	r2, #0
 800932c:	2300      	movs	r3, #0
 800932e:	4606      	mov	r6, r0
 8009330:	460f      	mov	r7, r1
 8009332:	f7f7 fbe9 	bl	8000b08 <__aeabi_dcmpeq>
 8009336:	2800      	cmp	r0, #0
 8009338:	d09b      	beq.n	8009272 <_dtoa_r+0x672>
 800933a:	e7cd      	b.n	80092d8 <_dtoa_r+0x6d8>
 800933c:	9a08      	ldr	r2, [sp, #32]
 800933e:	2a00      	cmp	r2, #0
 8009340:	f000 80c4 	beq.w	80094cc <_dtoa_r+0x8cc>
 8009344:	9a05      	ldr	r2, [sp, #20]
 8009346:	2a01      	cmp	r2, #1
 8009348:	f300 80a8 	bgt.w	800949c <_dtoa_r+0x89c>
 800934c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800934e:	2a00      	cmp	r2, #0
 8009350:	f000 80a0 	beq.w	8009494 <_dtoa_r+0x894>
 8009354:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009358:	9e06      	ldr	r6, [sp, #24]
 800935a:	4645      	mov	r5, r8
 800935c:	9a04      	ldr	r2, [sp, #16]
 800935e:	2101      	movs	r1, #1
 8009360:	441a      	add	r2, r3
 8009362:	4620      	mov	r0, r4
 8009364:	4498      	add	r8, r3
 8009366:	9204      	str	r2, [sp, #16]
 8009368:	f000 fb4c 	bl	8009a04 <__i2b>
 800936c:	4607      	mov	r7, r0
 800936e:	2d00      	cmp	r5, #0
 8009370:	dd0b      	ble.n	800938a <_dtoa_r+0x78a>
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	dd08      	ble.n	800938a <_dtoa_r+0x78a>
 8009378:	42ab      	cmp	r3, r5
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	bfa8      	it	ge
 800937e:	462b      	movge	r3, r5
 8009380:	eba8 0803 	sub.w	r8, r8, r3
 8009384:	1aed      	subs	r5, r5, r3
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	b1fb      	cbz	r3, 80093ce <_dtoa_r+0x7ce>
 800938e:	9b08      	ldr	r3, [sp, #32]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 809f 	beq.w	80094d4 <_dtoa_r+0x8d4>
 8009396:	2e00      	cmp	r6, #0
 8009398:	dd11      	ble.n	80093be <_dtoa_r+0x7be>
 800939a:	4639      	mov	r1, r7
 800939c:	4632      	mov	r2, r6
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fbec 	bl	8009b7c <__pow5mult>
 80093a4:	465a      	mov	r2, fp
 80093a6:	4601      	mov	r1, r0
 80093a8:	4607      	mov	r7, r0
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fb40 	bl	8009a30 <__multiply>
 80093b0:	4659      	mov	r1, fp
 80093b2:	9007      	str	r0, [sp, #28]
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 fa69 	bl	800988c <_Bfree>
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	469b      	mov	fp, r3
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	1b9a      	subs	r2, r3, r6
 80093c2:	d004      	beq.n	80093ce <_dtoa_r+0x7ce>
 80093c4:	4659      	mov	r1, fp
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fbd8 	bl	8009b7c <__pow5mult>
 80093cc:	4683      	mov	fp, r0
 80093ce:	2101      	movs	r1, #1
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fb17 	bl	8009a04 <__i2b>
 80093d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d8:	2b00      	cmp	r3, #0
 80093da:	4606      	mov	r6, r0
 80093dc:	dd7c      	ble.n	80094d8 <_dtoa_r+0x8d8>
 80093de:	461a      	mov	r2, r3
 80093e0:	4601      	mov	r1, r0
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fbca 	bl	8009b7c <__pow5mult>
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	4606      	mov	r6, r0
 80093ee:	dd76      	ble.n	80094de <_dtoa_r+0x8de>
 80093f0:	2300      	movs	r3, #0
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	6933      	ldr	r3, [r6, #16]
 80093f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093fa:	6918      	ldr	r0, [r3, #16]
 80093fc:	f000 fab2 	bl	8009964 <__hi0bits>
 8009400:	f1c0 0020 	rsb	r0, r0, #32
 8009404:	9b04      	ldr	r3, [sp, #16]
 8009406:	4418      	add	r0, r3
 8009408:	f010 001f 	ands.w	r0, r0, #31
 800940c:	f000 8086 	beq.w	800951c <_dtoa_r+0x91c>
 8009410:	f1c0 0320 	rsb	r3, r0, #32
 8009414:	2b04      	cmp	r3, #4
 8009416:	dd7f      	ble.n	8009518 <_dtoa_r+0x918>
 8009418:	f1c0 001c 	rsb	r0, r0, #28
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	4403      	add	r3, r0
 8009420:	4480      	add	r8, r0
 8009422:	4405      	add	r5, r0
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	f1b8 0f00 	cmp.w	r8, #0
 800942a:	dd05      	ble.n	8009438 <_dtoa_r+0x838>
 800942c:	4659      	mov	r1, fp
 800942e:	4642      	mov	r2, r8
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fbfd 	bl	8009c30 <__lshift>
 8009436:	4683      	mov	fp, r0
 8009438:	9b04      	ldr	r3, [sp, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd05      	ble.n	800944a <_dtoa_r+0x84a>
 800943e:	4631      	mov	r1, r6
 8009440:	461a      	mov	r2, r3
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fbf4 	bl	8009c30 <__lshift>
 8009448:	4606      	mov	r6, r0
 800944a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944c:	2b00      	cmp	r3, #0
 800944e:	d069      	beq.n	8009524 <_dtoa_r+0x924>
 8009450:	4631      	mov	r1, r6
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fc58 	bl	8009d08 <__mcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	da63      	bge.n	8009524 <_dtoa_r+0x924>
 800945c:	2300      	movs	r3, #0
 800945e:	4659      	mov	r1, fp
 8009460:	220a      	movs	r2, #10
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fa34 	bl	80098d0 <__multadd>
 8009468:	9b08      	ldr	r3, [sp, #32]
 800946a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800946e:	4683      	mov	fp, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 818f 	beq.w	8009794 <_dtoa_r+0xb94>
 8009476:	4639      	mov	r1, r7
 8009478:	2300      	movs	r3, #0
 800947a:	220a      	movs	r2, #10
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fa27 	bl	80098d0 <__multadd>
 8009482:	f1b9 0f00 	cmp.w	r9, #0
 8009486:	4607      	mov	r7, r0
 8009488:	f300 808e 	bgt.w	80095a8 <_dtoa_r+0x9a8>
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	2b02      	cmp	r3, #2
 8009490:	dc50      	bgt.n	8009534 <_dtoa_r+0x934>
 8009492:	e089      	b.n	80095a8 <_dtoa_r+0x9a8>
 8009494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800949a:	e75d      	b.n	8009358 <_dtoa_r+0x758>
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	1e5e      	subs	r6, r3, #1
 80094a0:	9b06      	ldr	r3, [sp, #24]
 80094a2:	42b3      	cmp	r3, r6
 80094a4:	bfbf      	itttt	lt
 80094a6:	9b06      	ldrlt	r3, [sp, #24]
 80094a8:	9606      	strlt	r6, [sp, #24]
 80094aa:	1af2      	sublt	r2, r6, r3
 80094ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80094ae:	bfb6      	itet	lt
 80094b0:	189b      	addlt	r3, r3, r2
 80094b2:	1b9e      	subge	r6, r3, r6
 80094b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	bfb8      	it	lt
 80094ba:	2600      	movlt	r6, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfb5      	itete	lt
 80094c0:	eba8 0503 	sublt.w	r5, r8, r3
 80094c4:	9b01      	ldrge	r3, [sp, #4]
 80094c6:	2300      	movlt	r3, #0
 80094c8:	4645      	movge	r5, r8
 80094ca:	e747      	b.n	800935c <_dtoa_r+0x75c>
 80094cc:	9e06      	ldr	r6, [sp, #24]
 80094ce:	9f08      	ldr	r7, [sp, #32]
 80094d0:	4645      	mov	r5, r8
 80094d2:	e74c      	b.n	800936e <_dtoa_r+0x76e>
 80094d4:	9a06      	ldr	r2, [sp, #24]
 80094d6:	e775      	b.n	80093c4 <_dtoa_r+0x7c4>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	dc18      	bgt.n	8009510 <_dtoa_r+0x910>
 80094de:	9b02      	ldr	r3, [sp, #8]
 80094e0:	b9b3      	cbnz	r3, 8009510 <_dtoa_r+0x910>
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e8:	b9a3      	cbnz	r3, 8009514 <_dtoa_r+0x914>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094f0:	0d1b      	lsrs	r3, r3, #20
 80094f2:	051b      	lsls	r3, r3, #20
 80094f4:	b12b      	cbz	r3, 8009502 <_dtoa_r+0x902>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	f108 0801 	add.w	r8, r8, #1
 8009500:	2301      	movs	r3, #1
 8009502:	9306      	str	r3, [sp, #24]
 8009504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	f47f af74 	bne.w	80093f4 <_dtoa_r+0x7f4>
 800950c:	2001      	movs	r0, #1
 800950e:	e779      	b.n	8009404 <_dtoa_r+0x804>
 8009510:	2300      	movs	r3, #0
 8009512:	e7f6      	b.n	8009502 <_dtoa_r+0x902>
 8009514:	9b02      	ldr	r3, [sp, #8]
 8009516:	e7f4      	b.n	8009502 <_dtoa_r+0x902>
 8009518:	d085      	beq.n	8009426 <_dtoa_r+0x826>
 800951a:	4618      	mov	r0, r3
 800951c:	301c      	adds	r0, #28
 800951e:	e77d      	b.n	800941c <_dtoa_r+0x81c>
 8009520:	40240000 	.word	0x40240000
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dc38      	bgt.n	800959c <_dtoa_r+0x99c>
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	2b02      	cmp	r3, #2
 800952e:	dd35      	ble.n	800959c <_dtoa_r+0x99c>
 8009530:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	d10d      	bne.n	8009556 <_dtoa_r+0x956>
 800953a:	4631      	mov	r1, r6
 800953c:	464b      	mov	r3, r9
 800953e:	2205      	movs	r2, #5
 8009540:	4620      	mov	r0, r4
 8009542:	f000 f9c5 	bl	80098d0 <__multadd>
 8009546:	4601      	mov	r1, r0
 8009548:	4606      	mov	r6, r0
 800954a:	4658      	mov	r0, fp
 800954c:	f000 fbdc 	bl	8009d08 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	f73f adbd 	bgt.w	80090d0 <_dtoa_r+0x4d0>
 8009556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009558:	9d00      	ldr	r5, [sp, #0]
 800955a:	ea6f 0a03 	mvn.w	sl, r3
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	4631      	mov	r1, r6
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f991 	bl	800988c <_Bfree>
 800956a:	2f00      	cmp	r7, #0
 800956c:	f43f aeb4 	beq.w	80092d8 <_dtoa_r+0x6d8>
 8009570:	f1b8 0f00 	cmp.w	r8, #0
 8009574:	d005      	beq.n	8009582 <_dtoa_r+0x982>
 8009576:	45b8      	cmp	r8, r7
 8009578:	d003      	beq.n	8009582 <_dtoa_r+0x982>
 800957a:	4641      	mov	r1, r8
 800957c:	4620      	mov	r0, r4
 800957e:	f000 f985 	bl	800988c <_Bfree>
 8009582:	4639      	mov	r1, r7
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f981 	bl	800988c <_Bfree>
 800958a:	e6a5      	b.n	80092d8 <_dtoa_r+0x6d8>
 800958c:	2600      	movs	r6, #0
 800958e:	4637      	mov	r7, r6
 8009590:	e7e1      	b.n	8009556 <_dtoa_r+0x956>
 8009592:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009594:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009598:	4637      	mov	r7, r6
 800959a:	e599      	b.n	80090d0 <_dtoa_r+0x4d0>
 800959c:	9b08      	ldr	r3, [sp, #32]
 800959e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80fd 	beq.w	80097a2 <_dtoa_r+0xba2>
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	dd05      	ble.n	80095b8 <_dtoa_r+0x9b8>
 80095ac:	4639      	mov	r1, r7
 80095ae:	462a      	mov	r2, r5
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fb3d 	bl	8009c30 <__lshift>
 80095b6:	4607      	mov	r7, r0
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d05c      	beq.n	8009678 <_dtoa_r+0xa78>
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 f923 	bl	800980c <_Balloc>
 80095c6:	4605      	mov	r5, r0
 80095c8:	b928      	cbnz	r0, 80095d6 <_dtoa_r+0x9d6>
 80095ca:	4b80      	ldr	r3, [pc, #512]	; (80097cc <_dtoa_r+0xbcc>)
 80095cc:	4602      	mov	r2, r0
 80095ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095d2:	f7ff bb2e 	b.w	8008c32 <_dtoa_r+0x32>
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	3202      	adds	r2, #2
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	f107 010c 	add.w	r1, r7, #12
 80095e0:	300c      	adds	r0, #12
 80095e2:	f000 f905 	bl	80097f0 <memcpy>
 80095e6:	2201      	movs	r2, #1
 80095e8:	4629      	mov	r1, r5
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fb20 	bl	8009c30 <__lshift>
 80095f0:	9b00      	ldr	r3, [sp, #0]
 80095f2:	3301      	adds	r3, #1
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	444b      	add	r3, r9
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	9b02      	ldr	r3, [sp, #8]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	46b8      	mov	r8, r7
 8009604:	9306      	str	r3, [sp, #24]
 8009606:	4607      	mov	r7, r0
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	4631      	mov	r1, r6
 800960c:	3b01      	subs	r3, #1
 800960e:	4658      	mov	r0, fp
 8009610:	9302      	str	r3, [sp, #8]
 8009612:	f7ff fa67 	bl	8008ae4 <quorem>
 8009616:	4603      	mov	r3, r0
 8009618:	3330      	adds	r3, #48	; 0x30
 800961a:	9004      	str	r0, [sp, #16]
 800961c:	4641      	mov	r1, r8
 800961e:	4658      	mov	r0, fp
 8009620:	9308      	str	r3, [sp, #32]
 8009622:	f000 fb71 	bl	8009d08 <__mcmp>
 8009626:	463a      	mov	r2, r7
 8009628:	4681      	mov	r9, r0
 800962a:	4631      	mov	r1, r6
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fb87 	bl	8009d40 <__mdiff>
 8009632:	68c2      	ldr	r2, [r0, #12]
 8009634:	9b08      	ldr	r3, [sp, #32]
 8009636:	4605      	mov	r5, r0
 8009638:	bb02      	cbnz	r2, 800967c <_dtoa_r+0xa7c>
 800963a:	4601      	mov	r1, r0
 800963c:	4658      	mov	r0, fp
 800963e:	f000 fb63 	bl	8009d08 <__mcmp>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	4602      	mov	r2, r0
 8009646:	4629      	mov	r1, r5
 8009648:	4620      	mov	r0, r4
 800964a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800964e:	f000 f91d 	bl	800988c <_Bfree>
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009656:	9d01      	ldr	r5, [sp, #4]
 8009658:	ea43 0102 	orr.w	r1, r3, r2
 800965c:	9b06      	ldr	r3, [sp, #24]
 800965e:	430b      	orrs	r3, r1
 8009660:	9b08      	ldr	r3, [sp, #32]
 8009662:	d10d      	bne.n	8009680 <_dtoa_r+0xa80>
 8009664:	2b39      	cmp	r3, #57	; 0x39
 8009666:	d029      	beq.n	80096bc <_dtoa_r+0xabc>
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	dd01      	ble.n	8009672 <_dtoa_r+0xa72>
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	3331      	adds	r3, #49	; 0x31
 8009672:	9a02      	ldr	r2, [sp, #8]
 8009674:	7013      	strb	r3, [r2, #0]
 8009676:	e774      	b.n	8009562 <_dtoa_r+0x962>
 8009678:	4638      	mov	r0, r7
 800967a:	e7b9      	b.n	80095f0 <_dtoa_r+0x9f0>
 800967c:	2201      	movs	r2, #1
 800967e:	e7e2      	b.n	8009646 <_dtoa_r+0xa46>
 8009680:	f1b9 0f00 	cmp.w	r9, #0
 8009684:	db06      	blt.n	8009694 <_dtoa_r+0xa94>
 8009686:	9905      	ldr	r1, [sp, #20]
 8009688:	ea41 0909 	orr.w	r9, r1, r9
 800968c:	9906      	ldr	r1, [sp, #24]
 800968e:	ea59 0101 	orrs.w	r1, r9, r1
 8009692:	d120      	bne.n	80096d6 <_dtoa_r+0xad6>
 8009694:	2a00      	cmp	r2, #0
 8009696:	ddec      	ble.n	8009672 <_dtoa_r+0xa72>
 8009698:	4659      	mov	r1, fp
 800969a:	2201      	movs	r2, #1
 800969c:	4620      	mov	r0, r4
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	f000 fac6 	bl	8009c30 <__lshift>
 80096a4:	4631      	mov	r1, r6
 80096a6:	4683      	mov	fp, r0
 80096a8:	f000 fb2e 	bl	8009d08 <__mcmp>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	dc02      	bgt.n	80096b8 <_dtoa_r+0xab8>
 80096b2:	d1de      	bne.n	8009672 <_dtoa_r+0xa72>
 80096b4:	07da      	lsls	r2, r3, #31
 80096b6:	d5dc      	bpl.n	8009672 <_dtoa_r+0xa72>
 80096b8:	2b39      	cmp	r3, #57	; 0x39
 80096ba:	d1d8      	bne.n	800966e <_dtoa_r+0xa6e>
 80096bc:	9a02      	ldr	r2, [sp, #8]
 80096be:	2339      	movs	r3, #57	; 0x39
 80096c0:	7013      	strb	r3, [r2, #0]
 80096c2:	462b      	mov	r3, r5
 80096c4:	461d      	mov	r5, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096cc:	2a39      	cmp	r2, #57	; 0x39
 80096ce:	d050      	beq.n	8009772 <_dtoa_r+0xb72>
 80096d0:	3201      	adds	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e745      	b.n	8009562 <_dtoa_r+0x962>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	dd03      	ble.n	80096e2 <_dtoa_r+0xae2>
 80096da:	2b39      	cmp	r3, #57	; 0x39
 80096dc:	d0ee      	beq.n	80096bc <_dtoa_r+0xabc>
 80096de:	3301      	adds	r3, #1
 80096e0:	e7c7      	b.n	8009672 <_dtoa_r+0xa72>
 80096e2:	9a01      	ldr	r2, [sp, #4]
 80096e4:	9907      	ldr	r1, [sp, #28]
 80096e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096ea:	428a      	cmp	r2, r1
 80096ec:	d02a      	beq.n	8009744 <_dtoa_r+0xb44>
 80096ee:	4659      	mov	r1, fp
 80096f0:	2300      	movs	r3, #0
 80096f2:	220a      	movs	r2, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f8eb 	bl	80098d0 <__multadd>
 80096fa:	45b8      	cmp	r8, r7
 80096fc:	4683      	mov	fp, r0
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	f04f 020a 	mov.w	r2, #10
 8009706:	4641      	mov	r1, r8
 8009708:	4620      	mov	r0, r4
 800970a:	d107      	bne.n	800971c <_dtoa_r+0xb1c>
 800970c:	f000 f8e0 	bl	80098d0 <__multadd>
 8009710:	4680      	mov	r8, r0
 8009712:	4607      	mov	r7, r0
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	3301      	adds	r3, #1
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	e775      	b.n	8009608 <_dtoa_r+0xa08>
 800971c:	f000 f8d8 	bl	80098d0 <__multadd>
 8009720:	4639      	mov	r1, r7
 8009722:	4680      	mov	r8, r0
 8009724:	2300      	movs	r3, #0
 8009726:	220a      	movs	r2, #10
 8009728:	4620      	mov	r0, r4
 800972a:	f000 f8d1 	bl	80098d0 <__multadd>
 800972e:	4607      	mov	r7, r0
 8009730:	e7f0      	b.n	8009714 <_dtoa_r+0xb14>
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	9a00      	ldr	r2, [sp, #0]
 8009738:	bfcc      	ite	gt
 800973a:	464d      	movgt	r5, r9
 800973c:	2501      	movle	r5, #1
 800973e:	4415      	add	r5, r2
 8009740:	f04f 0800 	mov.w	r8, #0
 8009744:	4659      	mov	r1, fp
 8009746:	2201      	movs	r2, #1
 8009748:	4620      	mov	r0, r4
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	f000 fa70 	bl	8009c30 <__lshift>
 8009750:	4631      	mov	r1, r6
 8009752:	4683      	mov	fp, r0
 8009754:	f000 fad8 	bl	8009d08 <__mcmp>
 8009758:	2800      	cmp	r0, #0
 800975a:	dcb2      	bgt.n	80096c2 <_dtoa_r+0xac2>
 800975c:	d102      	bne.n	8009764 <_dtoa_r+0xb64>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	07db      	lsls	r3, r3, #31
 8009762:	d4ae      	bmi.n	80096c2 <_dtoa_r+0xac2>
 8009764:	462b      	mov	r3, r5
 8009766:	461d      	mov	r5, r3
 8009768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976c:	2a30      	cmp	r2, #48	; 0x30
 800976e:	d0fa      	beq.n	8009766 <_dtoa_r+0xb66>
 8009770:	e6f7      	b.n	8009562 <_dtoa_r+0x962>
 8009772:	9a00      	ldr	r2, [sp, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d1a5      	bne.n	80096c4 <_dtoa_r+0xac4>
 8009778:	f10a 0a01 	add.w	sl, sl, #1
 800977c:	2331      	movs	r3, #49	; 0x31
 800977e:	e779      	b.n	8009674 <_dtoa_r+0xa74>
 8009780:	4b13      	ldr	r3, [pc, #76]	; (80097d0 <_dtoa_r+0xbd0>)
 8009782:	f7ff baaf 	b.w	8008ce4 <_dtoa_r+0xe4>
 8009786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f aa86 	bne.w	8008c9a <_dtoa_r+0x9a>
 800978e:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <_dtoa_r+0xbd4>)
 8009790:	f7ff baa8 	b.w	8008ce4 <_dtoa_r+0xe4>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	dc03      	bgt.n	80097a2 <_dtoa_r+0xba2>
 800979a:	9b05      	ldr	r3, [sp, #20]
 800979c:	2b02      	cmp	r3, #2
 800979e:	f73f aec9 	bgt.w	8009534 <_dtoa_r+0x934>
 80097a2:	9d00      	ldr	r5, [sp, #0]
 80097a4:	4631      	mov	r1, r6
 80097a6:	4658      	mov	r0, fp
 80097a8:	f7ff f99c 	bl	8008ae4 <quorem>
 80097ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80097b0:	f805 3b01 	strb.w	r3, [r5], #1
 80097b4:	9a00      	ldr	r2, [sp, #0]
 80097b6:	1aaa      	subs	r2, r5, r2
 80097b8:	4591      	cmp	r9, r2
 80097ba:	ddba      	ble.n	8009732 <_dtoa_r+0xb32>
 80097bc:	4659      	mov	r1, fp
 80097be:	2300      	movs	r3, #0
 80097c0:	220a      	movs	r2, #10
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 f884 	bl	80098d0 <__multadd>
 80097c8:	4683      	mov	fp, r0
 80097ca:	e7eb      	b.n	80097a4 <_dtoa_r+0xba4>
 80097cc:	0800b108 	.word	0x0800b108
 80097d0:	0800af60 	.word	0x0800af60
 80097d4:	0800b085 	.word	0x0800b085

080097d8 <_localeconv_r>:
 80097d8:	4800      	ldr	r0, [pc, #0]	; (80097dc <_localeconv_r+0x4>)
 80097da:	4770      	bx	lr
 80097dc:	20000164 	.word	0x20000164

080097e0 <malloc>:
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <malloc+0xc>)
 80097e2:	4601      	mov	r1, r0
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f000 bbef 	b.w	8009fc8 <_malloc_r>
 80097ea:	bf00      	nop
 80097ec:	20000010 	.word	0x20000010

080097f0 <memcpy>:
 80097f0:	440a      	add	r2, r1
 80097f2:	4291      	cmp	r1, r2
 80097f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f8:	d100      	bne.n	80097fc <memcpy+0xc>
 80097fa:	4770      	bx	lr
 80097fc:	b510      	push	{r4, lr}
 80097fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009806:	4291      	cmp	r1, r2
 8009808:	d1f9      	bne.n	80097fe <memcpy+0xe>
 800980a:	bd10      	pop	{r4, pc}

0800980c <_Balloc>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009810:	4604      	mov	r4, r0
 8009812:	460d      	mov	r5, r1
 8009814:	b976      	cbnz	r6, 8009834 <_Balloc+0x28>
 8009816:	2010      	movs	r0, #16
 8009818:	f7ff ffe2 	bl	80097e0 <malloc>
 800981c:	4602      	mov	r2, r0
 800981e:	6260      	str	r0, [r4, #36]	; 0x24
 8009820:	b920      	cbnz	r0, 800982c <_Balloc+0x20>
 8009822:	4b18      	ldr	r3, [pc, #96]	; (8009884 <_Balloc+0x78>)
 8009824:	4818      	ldr	r0, [pc, #96]	; (8009888 <_Balloc+0x7c>)
 8009826:	2166      	movs	r1, #102	; 0x66
 8009828:	f000 fd94 	bl	800a354 <__assert_func>
 800982c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009830:	6006      	str	r6, [r0, #0]
 8009832:	60c6      	str	r6, [r0, #12]
 8009834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009836:	68f3      	ldr	r3, [r6, #12]
 8009838:	b183      	cbz	r3, 800985c <_Balloc+0x50>
 800983a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009842:	b9b8      	cbnz	r0, 8009874 <_Balloc+0x68>
 8009844:	2101      	movs	r1, #1
 8009846:	fa01 f605 	lsl.w	r6, r1, r5
 800984a:	1d72      	adds	r2, r6, #5
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fb5a 	bl	8009f08 <_calloc_r>
 8009854:	b160      	cbz	r0, 8009870 <_Balloc+0x64>
 8009856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800985a:	e00e      	b.n	800987a <_Balloc+0x6e>
 800985c:	2221      	movs	r2, #33	; 0x21
 800985e:	2104      	movs	r1, #4
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fb51 	bl	8009f08 <_calloc_r>
 8009866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009868:	60f0      	str	r0, [r6, #12]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e4      	bne.n	800983a <_Balloc+0x2e>
 8009870:	2000      	movs	r0, #0
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	6802      	ldr	r2, [r0, #0]
 8009876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800987a:	2300      	movs	r3, #0
 800987c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009880:	e7f7      	b.n	8009872 <_Balloc+0x66>
 8009882:	bf00      	nop
 8009884:	0800b092 	.word	0x0800b092
 8009888:	0800b119 	.word	0x0800b119

0800988c <_Bfree>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009890:	4605      	mov	r5, r0
 8009892:	460c      	mov	r4, r1
 8009894:	b976      	cbnz	r6, 80098b4 <_Bfree+0x28>
 8009896:	2010      	movs	r0, #16
 8009898:	f7ff ffa2 	bl	80097e0 <malloc>
 800989c:	4602      	mov	r2, r0
 800989e:	6268      	str	r0, [r5, #36]	; 0x24
 80098a0:	b920      	cbnz	r0, 80098ac <_Bfree+0x20>
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <_Bfree+0x3c>)
 80098a4:	4809      	ldr	r0, [pc, #36]	; (80098cc <_Bfree+0x40>)
 80098a6:	218a      	movs	r1, #138	; 0x8a
 80098a8:	f000 fd54 	bl	800a354 <__assert_func>
 80098ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098b0:	6006      	str	r6, [r0, #0]
 80098b2:	60c6      	str	r6, [r0, #12]
 80098b4:	b13c      	cbz	r4, 80098c6 <_Bfree+0x3a>
 80098b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098b8:	6862      	ldr	r2, [r4, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098c0:	6021      	str	r1, [r4, #0]
 80098c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	0800b092 	.word	0x0800b092
 80098cc:	0800b119 	.word	0x0800b119

080098d0 <__multadd>:
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	690e      	ldr	r6, [r1, #16]
 80098d6:	4607      	mov	r7, r0
 80098d8:	4698      	mov	r8, r3
 80098da:	460c      	mov	r4, r1
 80098dc:	f101 0014 	add.w	r0, r1, #20
 80098e0:	2300      	movs	r3, #0
 80098e2:	6805      	ldr	r5, [r0, #0]
 80098e4:	b2a9      	uxth	r1, r5
 80098e6:	fb02 8101 	mla	r1, r2, r1, r8
 80098ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098ee:	0c2d      	lsrs	r5, r5, #16
 80098f0:	fb02 c505 	mla	r5, r2, r5, ip
 80098f4:	b289      	uxth	r1, r1
 80098f6:	3301      	adds	r3, #1
 80098f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098fc:	429e      	cmp	r6, r3
 80098fe:	f840 1b04 	str.w	r1, [r0], #4
 8009902:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009906:	dcec      	bgt.n	80098e2 <__multadd+0x12>
 8009908:	f1b8 0f00 	cmp.w	r8, #0
 800990c:	d022      	beq.n	8009954 <__multadd+0x84>
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	42b3      	cmp	r3, r6
 8009912:	dc19      	bgt.n	8009948 <__multadd+0x78>
 8009914:	6861      	ldr	r1, [r4, #4]
 8009916:	4638      	mov	r0, r7
 8009918:	3101      	adds	r1, #1
 800991a:	f7ff ff77 	bl	800980c <_Balloc>
 800991e:	4605      	mov	r5, r0
 8009920:	b928      	cbnz	r0, 800992e <__multadd+0x5e>
 8009922:	4602      	mov	r2, r0
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <__multadd+0x8c>)
 8009926:	480e      	ldr	r0, [pc, #56]	; (8009960 <__multadd+0x90>)
 8009928:	21b5      	movs	r1, #181	; 0xb5
 800992a:	f000 fd13 	bl	800a354 <__assert_func>
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	3202      	adds	r2, #2
 8009932:	f104 010c 	add.w	r1, r4, #12
 8009936:	0092      	lsls	r2, r2, #2
 8009938:	300c      	adds	r0, #12
 800993a:	f7ff ff59 	bl	80097f0 <memcpy>
 800993e:	4621      	mov	r1, r4
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff ffa3 	bl	800988c <_Bfree>
 8009946:	462c      	mov	r4, r5
 8009948:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800994c:	3601      	adds	r6, #1
 800994e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009952:	6126      	str	r6, [r4, #16]
 8009954:	4620      	mov	r0, r4
 8009956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995a:	bf00      	nop
 800995c:	0800b108 	.word	0x0800b108
 8009960:	0800b119 	.word	0x0800b119

08009964 <__hi0bits>:
 8009964:	0c03      	lsrs	r3, r0, #16
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	b9d3      	cbnz	r3, 80099a0 <__hi0bits+0x3c>
 800996a:	0400      	lsls	r0, r0, #16
 800996c:	2310      	movs	r3, #16
 800996e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009972:	bf04      	itt	eq
 8009974:	0200      	lsleq	r0, r0, #8
 8009976:	3308      	addeq	r3, #8
 8009978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800997c:	bf04      	itt	eq
 800997e:	0100      	lsleq	r0, r0, #4
 8009980:	3304      	addeq	r3, #4
 8009982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009986:	bf04      	itt	eq
 8009988:	0080      	lsleq	r0, r0, #2
 800998a:	3302      	addeq	r3, #2
 800998c:	2800      	cmp	r0, #0
 800998e:	db05      	blt.n	800999c <__hi0bits+0x38>
 8009990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009994:	f103 0301 	add.w	r3, r3, #1
 8009998:	bf08      	it	eq
 800999a:	2320      	moveq	r3, #32
 800999c:	4618      	mov	r0, r3
 800999e:	4770      	bx	lr
 80099a0:	2300      	movs	r3, #0
 80099a2:	e7e4      	b.n	800996e <__hi0bits+0xa>

080099a4 <__lo0bits>:
 80099a4:	6803      	ldr	r3, [r0, #0]
 80099a6:	f013 0207 	ands.w	r2, r3, #7
 80099aa:	4601      	mov	r1, r0
 80099ac:	d00b      	beq.n	80099c6 <__lo0bits+0x22>
 80099ae:	07da      	lsls	r2, r3, #31
 80099b0:	d424      	bmi.n	80099fc <__lo0bits+0x58>
 80099b2:	0798      	lsls	r0, r3, #30
 80099b4:	bf49      	itett	mi
 80099b6:	085b      	lsrmi	r3, r3, #1
 80099b8:	089b      	lsrpl	r3, r3, #2
 80099ba:	2001      	movmi	r0, #1
 80099bc:	600b      	strmi	r3, [r1, #0]
 80099be:	bf5c      	itt	pl
 80099c0:	600b      	strpl	r3, [r1, #0]
 80099c2:	2002      	movpl	r0, #2
 80099c4:	4770      	bx	lr
 80099c6:	b298      	uxth	r0, r3
 80099c8:	b9b0      	cbnz	r0, 80099f8 <__lo0bits+0x54>
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	2010      	movs	r0, #16
 80099ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099d2:	bf04      	itt	eq
 80099d4:	0a1b      	lsreq	r3, r3, #8
 80099d6:	3008      	addeq	r0, #8
 80099d8:	071a      	lsls	r2, r3, #28
 80099da:	bf04      	itt	eq
 80099dc:	091b      	lsreq	r3, r3, #4
 80099de:	3004      	addeq	r0, #4
 80099e0:	079a      	lsls	r2, r3, #30
 80099e2:	bf04      	itt	eq
 80099e4:	089b      	lsreq	r3, r3, #2
 80099e6:	3002      	addeq	r0, #2
 80099e8:	07da      	lsls	r2, r3, #31
 80099ea:	d403      	bmi.n	80099f4 <__lo0bits+0x50>
 80099ec:	085b      	lsrs	r3, r3, #1
 80099ee:	f100 0001 	add.w	r0, r0, #1
 80099f2:	d005      	beq.n	8009a00 <__lo0bits+0x5c>
 80099f4:	600b      	str	r3, [r1, #0]
 80099f6:	4770      	bx	lr
 80099f8:	4610      	mov	r0, r2
 80099fa:	e7e8      	b.n	80099ce <__lo0bits+0x2a>
 80099fc:	2000      	movs	r0, #0
 80099fe:	4770      	bx	lr
 8009a00:	2020      	movs	r0, #32
 8009a02:	4770      	bx	lr

08009a04 <__i2b>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	460c      	mov	r4, r1
 8009a08:	2101      	movs	r1, #1
 8009a0a:	f7ff feff 	bl	800980c <_Balloc>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <__i2b+0x1a>
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <__i2b+0x24>)
 8009a14:	4805      	ldr	r0, [pc, #20]	; (8009a2c <__i2b+0x28>)
 8009a16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a1a:	f000 fc9b 	bl	800a354 <__assert_func>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	6144      	str	r4, [r0, #20]
 8009a22:	6103      	str	r3, [r0, #16]
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	0800b108 	.word	0x0800b108
 8009a2c:	0800b119 	.word	0x0800b119

08009a30 <__multiply>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	4614      	mov	r4, r2
 8009a36:	690a      	ldr	r2, [r1, #16]
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	bfb8      	it	lt
 8009a3e:	460b      	movlt	r3, r1
 8009a40:	460d      	mov	r5, r1
 8009a42:	bfbc      	itt	lt
 8009a44:	4625      	movlt	r5, r4
 8009a46:	461c      	movlt	r4, r3
 8009a48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a50:	68ab      	ldr	r3, [r5, #8]
 8009a52:	6869      	ldr	r1, [r5, #4]
 8009a54:	eb0a 0709 	add.w	r7, sl, r9
 8009a58:	42bb      	cmp	r3, r7
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	bfb8      	it	lt
 8009a5e:	3101      	addlt	r1, #1
 8009a60:	f7ff fed4 	bl	800980c <_Balloc>
 8009a64:	b930      	cbnz	r0, 8009a74 <__multiply+0x44>
 8009a66:	4602      	mov	r2, r0
 8009a68:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <__multiply+0x144>)
 8009a6a:	4843      	ldr	r0, [pc, #268]	; (8009b78 <__multiply+0x148>)
 8009a6c:	f240 115d 	movw	r1, #349	; 0x15d
 8009a70:	f000 fc70 	bl	800a354 <__assert_func>
 8009a74:	f100 0614 	add.w	r6, r0, #20
 8009a78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a7c:	4633      	mov	r3, r6
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4543      	cmp	r3, r8
 8009a82:	d31e      	bcc.n	8009ac2 <__multiply+0x92>
 8009a84:	f105 0c14 	add.w	ip, r5, #20
 8009a88:	f104 0314 	add.w	r3, r4, #20
 8009a8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a94:	9202      	str	r2, [sp, #8]
 8009a96:	ebac 0205 	sub.w	r2, ip, r5
 8009a9a:	3a15      	subs	r2, #21
 8009a9c:	f022 0203 	bic.w	r2, r2, #3
 8009aa0:	3204      	adds	r2, #4
 8009aa2:	f105 0115 	add.w	r1, r5, #21
 8009aa6:	458c      	cmp	ip, r1
 8009aa8:	bf38      	it	cc
 8009aaa:	2204      	movcc	r2, #4
 8009aac:	9201      	str	r2, [sp, #4]
 8009aae:	9a02      	ldr	r2, [sp, #8]
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d808      	bhi.n	8009ac8 <__multiply+0x98>
 8009ab6:	2f00      	cmp	r7, #0
 8009ab8:	dc55      	bgt.n	8009b66 <__multiply+0x136>
 8009aba:	6107      	str	r7, [r0, #16]
 8009abc:	b005      	add	sp, #20
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	f843 2b04 	str.w	r2, [r3], #4
 8009ac6:	e7db      	b.n	8009a80 <__multiply+0x50>
 8009ac8:	f8b3 a000 	ldrh.w	sl, [r3]
 8009acc:	f1ba 0f00 	cmp.w	sl, #0
 8009ad0:	d020      	beq.n	8009b14 <__multiply+0xe4>
 8009ad2:	f105 0e14 	add.w	lr, r5, #20
 8009ad6:	46b1      	mov	r9, r6
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ade:	f8d9 b000 	ldr.w	fp, [r9]
 8009ae2:	b2a1      	uxth	r1, r4
 8009ae4:	fa1f fb8b 	uxth.w	fp, fp
 8009ae8:	fb0a b101 	mla	r1, sl, r1, fp
 8009aec:	4411      	add	r1, r2
 8009aee:	f8d9 2000 	ldr.w	r2, [r9]
 8009af2:	0c24      	lsrs	r4, r4, #16
 8009af4:	0c12      	lsrs	r2, r2, #16
 8009af6:	fb0a 2404 	mla	r4, sl, r4, r2
 8009afa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009afe:	b289      	uxth	r1, r1
 8009b00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b04:	45f4      	cmp	ip, lr
 8009b06:	f849 1b04 	str.w	r1, [r9], #4
 8009b0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b0e:	d8e4      	bhi.n	8009ada <__multiply+0xaa>
 8009b10:	9901      	ldr	r1, [sp, #4]
 8009b12:	5072      	str	r2, [r6, r1]
 8009b14:	9a03      	ldr	r2, [sp, #12]
 8009b16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	f1b9 0f00 	cmp.w	r9, #0
 8009b20:	d01f      	beq.n	8009b62 <__multiply+0x132>
 8009b22:	6834      	ldr	r4, [r6, #0]
 8009b24:	f105 0114 	add.w	r1, r5, #20
 8009b28:	46b6      	mov	lr, r6
 8009b2a:	f04f 0a00 	mov.w	sl, #0
 8009b2e:	880a      	ldrh	r2, [r1, #0]
 8009b30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b34:	fb09 b202 	mla	r2, r9, r2, fp
 8009b38:	4492      	add	sl, r2
 8009b3a:	b2a4      	uxth	r4, r4
 8009b3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b40:	f84e 4b04 	str.w	r4, [lr], #4
 8009b44:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b48:	f8be 2000 	ldrh.w	r2, [lr]
 8009b4c:	0c24      	lsrs	r4, r4, #16
 8009b4e:	fb09 2404 	mla	r4, r9, r4, r2
 8009b52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b56:	458c      	cmp	ip, r1
 8009b58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b5c:	d8e7      	bhi.n	8009b2e <__multiply+0xfe>
 8009b5e:	9a01      	ldr	r2, [sp, #4]
 8009b60:	50b4      	str	r4, [r6, r2]
 8009b62:	3604      	adds	r6, #4
 8009b64:	e7a3      	b.n	8009aae <__multiply+0x7e>
 8009b66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1a5      	bne.n	8009aba <__multiply+0x8a>
 8009b6e:	3f01      	subs	r7, #1
 8009b70:	e7a1      	b.n	8009ab6 <__multiply+0x86>
 8009b72:	bf00      	nop
 8009b74:	0800b108 	.word	0x0800b108
 8009b78:	0800b119 	.word	0x0800b119

08009b7c <__pow5mult>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	4615      	mov	r5, r2
 8009b82:	f012 0203 	ands.w	r2, r2, #3
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	d007      	beq.n	8009b9c <__pow5mult+0x20>
 8009b8c:	4c25      	ldr	r4, [pc, #148]	; (8009c24 <__pow5mult+0xa8>)
 8009b8e:	3a01      	subs	r2, #1
 8009b90:	2300      	movs	r3, #0
 8009b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b96:	f7ff fe9b 	bl	80098d0 <__multadd>
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	10ad      	asrs	r5, r5, #2
 8009b9e:	d03d      	beq.n	8009c1c <__pow5mult+0xa0>
 8009ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ba2:	b97c      	cbnz	r4, 8009bc4 <__pow5mult+0x48>
 8009ba4:	2010      	movs	r0, #16
 8009ba6:	f7ff fe1b 	bl	80097e0 <malloc>
 8009baa:	4602      	mov	r2, r0
 8009bac:	6270      	str	r0, [r6, #36]	; 0x24
 8009bae:	b928      	cbnz	r0, 8009bbc <__pow5mult+0x40>
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <__pow5mult+0xac>)
 8009bb2:	481e      	ldr	r0, [pc, #120]	; (8009c2c <__pow5mult+0xb0>)
 8009bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bb8:	f000 fbcc 	bl	800a354 <__assert_func>
 8009bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bc0:	6004      	str	r4, [r0, #0]
 8009bc2:	60c4      	str	r4, [r0, #12]
 8009bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bcc:	b94c      	cbnz	r4, 8009be2 <__pow5mult+0x66>
 8009bce:	f240 2171 	movw	r1, #625	; 0x271
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff ff16 	bl	8009a04 <__i2b>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bde:	4604      	mov	r4, r0
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	07eb      	lsls	r3, r5, #31
 8009be8:	d50a      	bpl.n	8009c00 <__pow5mult+0x84>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4622      	mov	r2, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ff1e 	bl	8009a30 <__multiply>
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fe47 	bl	800988c <_Bfree>
 8009bfe:	4647      	mov	r7, r8
 8009c00:	106d      	asrs	r5, r5, #1
 8009c02:	d00b      	beq.n	8009c1c <__pow5mult+0xa0>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	b938      	cbnz	r0, 8009c18 <__pow5mult+0x9c>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7ff ff0f 	bl	8009a30 <__multiply>
 8009c12:	6020      	str	r0, [r4, #0]
 8009c14:	f8c0 9000 	str.w	r9, [r0]
 8009c18:	4604      	mov	r4, r0
 8009c1a:	e7e4      	b.n	8009be6 <__pow5mult+0x6a>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c22:	bf00      	nop
 8009c24:	0800b270 	.word	0x0800b270
 8009c28:	0800b092 	.word	0x0800b092
 8009c2c:	0800b119 	.word	0x0800b119

08009c30 <__lshift>:
 8009c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	6849      	ldr	r1, [r1, #4]
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	4607      	mov	r7, r0
 8009c42:	4691      	mov	r9, r2
 8009c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c48:	f108 0601 	add.w	r6, r8, #1
 8009c4c:	42b3      	cmp	r3, r6
 8009c4e:	db0b      	blt.n	8009c68 <__lshift+0x38>
 8009c50:	4638      	mov	r0, r7
 8009c52:	f7ff fddb 	bl	800980c <_Balloc>
 8009c56:	4605      	mov	r5, r0
 8009c58:	b948      	cbnz	r0, 8009c6e <__lshift+0x3e>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <__lshift+0xd0>)
 8009c5e:	4829      	ldr	r0, [pc, #164]	; (8009d04 <__lshift+0xd4>)
 8009c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c64:	f000 fb76 	bl	800a354 <__assert_func>
 8009c68:	3101      	adds	r1, #1
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	e7ee      	b.n	8009c4c <__lshift+0x1c>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f100 0114 	add.w	r1, r0, #20
 8009c74:	f100 0210 	add.w	r2, r0, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	4553      	cmp	r3, sl
 8009c7c:	db33      	blt.n	8009ce6 <__lshift+0xb6>
 8009c7e:	6920      	ldr	r0, [r4, #16]
 8009c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c84:	f104 0314 	add.w	r3, r4, #20
 8009c88:	f019 091f 	ands.w	r9, r9, #31
 8009c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c94:	d02b      	beq.n	8009cee <__lshift+0xbe>
 8009c96:	f1c9 0e20 	rsb	lr, r9, #32
 8009c9a:	468a      	mov	sl, r1
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ca4:	4302      	orrs	r2, r0
 8009ca6:	f84a 2b04 	str.w	r2, [sl], #4
 8009caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cae:	459c      	cmp	ip, r3
 8009cb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cb4:	d8f3      	bhi.n	8009c9e <__lshift+0x6e>
 8009cb6:	ebac 0304 	sub.w	r3, ip, r4
 8009cba:	3b15      	subs	r3, #21
 8009cbc:	f023 0303 	bic.w	r3, r3, #3
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	f104 0015 	add.w	r0, r4, #21
 8009cc6:	4584      	cmp	ip, r0
 8009cc8:	bf38      	it	cc
 8009cca:	2304      	movcc	r3, #4
 8009ccc:	50ca      	str	r2, [r1, r3]
 8009cce:	b10a      	cbz	r2, 8009cd4 <__lshift+0xa4>
 8009cd0:	f108 0602 	add.w	r6, r8, #2
 8009cd4:	3e01      	subs	r6, #1
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	612e      	str	r6, [r5, #16]
 8009cda:	4621      	mov	r1, r4
 8009cdc:	f7ff fdd6 	bl	800988c <_Bfree>
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cea:	3301      	adds	r3, #1
 8009cec:	e7c5      	b.n	8009c7a <__lshift+0x4a>
 8009cee:	3904      	subs	r1, #4
 8009cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cf8:	459c      	cmp	ip, r3
 8009cfa:	d8f9      	bhi.n	8009cf0 <__lshift+0xc0>
 8009cfc:	e7ea      	b.n	8009cd4 <__lshift+0xa4>
 8009cfe:	bf00      	nop
 8009d00:	0800b108 	.word	0x0800b108
 8009d04:	0800b119 	.word	0x0800b119

08009d08 <__mcmp>:
 8009d08:	b530      	push	{r4, r5, lr}
 8009d0a:	6902      	ldr	r2, [r0, #16]
 8009d0c:	690c      	ldr	r4, [r1, #16]
 8009d0e:	1b12      	subs	r2, r2, r4
 8009d10:	d10e      	bne.n	8009d30 <__mcmp+0x28>
 8009d12:	f100 0314 	add.w	r3, r0, #20
 8009d16:	3114      	adds	r1, #20
 8009d18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d28:	42a5      	cmp	r5, r4
 8009d2a:	d003      	beq.n	8009d34 <__mcmp+0x2c>
 8009d2c:	d305      	bcc.n	8009d3a <__mcmp+0x32>
 8009d2e:	2201      	movs	r2, #1
 8009d30:	4610      	mov	r0, r2
 8009d32:	bd30      	pop	{r4, r5, pc}
 8009d34:	4283      	cmp	r3, r0
 8009d36:	d3f3      	bcc.n	8009d20 <__mcmp+0x18>
 8009d38:	e7fa      	b.n	8009d30 <__mcmp+0x28>
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	e7f7      	b.n	8009d30 <__mcmp+0x28>

08009d40 <__mdiff>:
 8009d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	460c      	mov	r4, r1
 8009d46:	4606      	mov	r6, r0
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	4617      	mov	r7, r2
 8009d4e:	f7ff ffdb 	bl	8009d08 <__mcmp>
 8009d52:	1e05      	subs	r5, r0, #0
 8009d54:	d110      	bne.n	8009d78 <__mdiff+0x38>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff fd57 	bl	800980c <_Balloc>
 8009d5e:	b930      	cbnz	r0, 8009d6e <__mdiff+0x2e>
 8009d60:	4b39      	ldr	r3, [pc, #228]	; (8009e48 <__mdiff+0x108>)
 8009d62:	4602      	mov	r2, r0
 8009d64:	f240 2132 	movw	r1, #562	; 0x232
 8009d68:	4838      	ldr	r0, [pc, #224]	; (8009e4c <__mdiff+0x10c>)
 8009d6a:	f000 faf3 	bl	800a354 <__assert_func>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	bfa4      	itt	ge
 8009d7a:	463b      	movge	r3, r7
 8009d7c:	4627      	movge	r7, r4
 8009d7e:	4630      	mov	r0, r6
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	bfa6      	itte	ge
 8009d84:	461c      	movge	r4, r3
 8009d86:	2500      	movge	r5, #0
 8009d88:	2501      	movlt	r5, #1
 8009d8a:	f7ff fd3f 	bl	800980c <_Balloc>
 8009d8e:	b920      	cbnz	r0, 8009d9a <__mdiff+0x5a>
 8009d90:	4b2d      	ldr	r3, [pc, #180]	; (8009e48 <__mdiff+0x108>)
 8009d92:	4602      	mov	r2, r0
 8009d94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d98:	e7e6      	b.n	8009d68 <__mdiff+0x28>
 8009d9a:	693e      	ldr	r6, [r7, #16]
 8009d9c:	60c5      	str	r5, [r0, #12]
 8009d9e:	6925      	ldr	r5, [r4, #16]
 8009da0:	f107 0114 	add.w	r1, r7, #20
 8009da4:	f104 0914 	add.w	r9, r4, #20
 8009da8:	f100 0e14 	add.w	lr, r0, #20
 8009dac:	f107 0210 	add.w	r2, r7, #16
 8009db0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009db4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009db8:	46f2      	mov	sl, lr
 8009dba:	2700      	movs	r7, #0
 8009dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dc4:	fa1f f883 	uxth.w	r8, r3
 8009dc8:	fa17 f78b 	uxtah	r7, r7, fp
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	eba7 0808 	sub.w	r8, r7, r8
 8009dd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dda:	fa1f f888 	uxth.w	r8, r8
 8009dde:	141f      	asrs	r7, r3, #16
 8009de0:	454d      	cmp	r5, r9
 8009de2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009de6:	f84a 3b04 	str.w	r3, [sl], #4
 8009dea:	d8e7      	bhi.n	8009dbc <__mdiff+0x7c>
 8009dec:	1b2b      	subs	r3, r5, r4
 8009dee:	3b15      	subs	r3, #21
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	3304      	adds	r3, #4
 8009df6:	3415      	adds	r4, #21
 8009df8:	42a5      	cmp	r5, r4
 8009dfa:	bf38      	it	cc
 8009dfc:	2304      	movcc	r3, #4
 8009dfe:	4419      	add	r1, r3
 8009e00:	4473      	add	r3, lr
 8009e02:	469e      	mov	lr, r3
 8009e04:	460d      	mov	r5, r1
 8009e06:	4565      	cmp	r5, ip
 8009e08:	d30e      	bcc.n	8009e28 <__mdiff+0xe8>
 8009e0a:	f10c 0203 	add.w	r2, ip, #3
 8009e0e:	1a52      	subs	r2, r2, r1
 8009e10:	f022 0203 	bic.w	r2, r2, #3
 8009e14:	3903      	subs	r1, #3
 8009e16:	458c      	cmp	ip, r1
 8009e18:	bf38      	it	cc
 8009e1a:	2200      	movcc	r2, #0
 8009e1c:	441a      	add	r2, r3
 8009e1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e22:	b17b      	cbz	r3, 8009e44 <__mdiff+0x104>
 8009e24:	6106      	str	r6, [r0, #16]
 8009e26:	e7a5      	b.n	8009d74 <__mdiff+0x34>
 8009e28:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e2c:	fa17 f488 	uxtah	r4, r7, r8
 8009e30:	1422      	asrs	r2, r4, #16
 8009e32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e36:	b2a4      	uxth	r4, r4
 8009e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e3c:	f84e 4b04 	str.w	r4, [lr], #4
 8009e40:	1417      	asrs	r7, r2, #16
 8009e42:	e7e0      	b.n	8009e06 <__mdiff+0xc6>
 8009e44:	3e01      	subs	r6, #1
 8009e46:	e7ea      	b.n	8009e1e <__mdiff+0xde>
 8009e48:	0800b108 	.word	0x0800b108
 8009e4c:	0800b119 	.word	0x0800b119

08009e50 <__d2b>:
 8009e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e54:	4689      	mov	r9, r1
 8009e56:	2101      	movs	r1, #1
 8009e58:	ec57 6b10 	vmov	r6, r7, d0
 8009e5c:	4690      	mov	r8, r2
 8009e5e:	f7ff fcd5 	bl	800980c <_Balloc>
 8009e62:	4604      	mov	r4, r0
 8009e64:	b930      	cbnz	r0, 8009e74 <__d2b+0x24>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <__d2b+0xb0>)
 8009e6a:	4826      	ldr	r0, [pc, #152]	; (8009f04 <__d2b+0xb4>)
 8009e6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009e70:	f000 fa70 	bl	800a354 <__assert_func>
 8009e74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e7c:	bb35      	cbnz	r5, 8009ecc <__d2b+0x7c>
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	d028      	beq.n	8009ed6 <__d2b+0x86>
 8009e84:	4668      	mov	r0, sp
 8009e86:	9600      	str	r6, [sp, #0]
 8009e88:	f7ff fd8c 	bl	80099a4 <__lo0bits>
 8009e8c:	9900      	ldr	r1, [sp, #0]
 8009e8e:	b300      	cbz	r0, 8009ed2 <__d2b+0x82>
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	f1c0 0320 	rsb	r3, r0, #32
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	40c2      	lsrs	r2, r0
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	61a3      	str	r3, [r4, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2202      	movne	r2, #2
 8009eac:	2201      	moveq	r2, #1
 8009eae:	6122      	str	r2, [r4, #16]
 8009eb0:	b1d5      	cbz	r5, 8009ee8 <__d2b+0x98>
 8009eb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eb6:	4405      	add	r5, r0
 8009eb8:	f8c9 5000 	str.w	r5, [r9]
 8009ebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec0:	f8c8 0000 	str.w	r0, [r8]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	b003      	add	sp, #12
 8009ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed0:	e7d5      	b.n	8009e7e <__d2b+0x2e>
 8009ed2:	6161      	str	r1, [r4, #20]
 8009ed4:	e7e5      	b.n	8009ea2 <__d2b+0x52>
 8009ed6:	a801      	add	r0, sp, #4
 8009ed8:	f7ff fd64 	bl	80099a4 <__lo0bits>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	6122      	str	r2, [r4, #16]
 8009ee4:	3020      	adds	r0, #32
 8009ee6:	e7e3      	b.n	8009eb0 <__d2b+0x60>
 8009ee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef0:	f8c9 0000 	str.w	r0, [r9]
 8009ef4:	6918      	ldr	r0, [r3, #16]
 8009ef6:	f7ff fd35 	bl	8009964 <__hi0bits>
 8009efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009efe:	e7df      	b.n	8009ec0 <__d2b+0x70>
 8009f00:	0800b108 	.word	0x0800b108
 8009f04:	0800b119 	.word	0x0800b119

08009f08 <_calloc_r>:
 8009f08:	b513      	push	{r0, r1, r4, lr}
 8009f0a:	434a      	muls	r2, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	9201      	str	r2, [sp, #4]
 8009f10:	f000 f85a 	bl	8009fc8 <_malloc_r>
 8009f14:	4604      	mov	r4, r0
 8009f16:	b118      	cbz	r0, 8009f20 <_calloc_r+0x18>
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	f7fe f8c2 	bl	80080a4 <memset>
 8009f20:	4620      	mov	r0, r4
 8009f22:	b002      	add	sp, #8
 8009f24:	bd10      	pop	{r4, pc}
	...

08009f28 <_free_r>:
 8009f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f2a:	2900      	cmp	r1, #0
 8009f2c:	d048      	beq.n	8009fc0 <_free_r+0x98>
 8009f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f32:	9001      	str	r0, [sp, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f1a1 0404 	sub.w	r4, r1, #4
 8009f3a:	bfb8      	it	lt
 8009f3c:	18e4      	addlt	r4, r4, r3
 8009f3e:	f000 fa65 	bl	800a40c <__malloc_lock>
 8009f42:	4a20      	ldr	r2, [pc, #128]	; (8009fc4 <_free_r+0x9c>)
 8009f44:	9801      	ldr	r0, [sp, #4]
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	4615      	mov	r5, r2
 8009f4a:	b933      	cbnz	r3, 8009f5a <_free_r+0x32>
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6014      	str	r4, [r2, #0]
 8009f50:	b003      	add	sp, #12
 8009f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f56:	f000 ba5f 	b.w	800a418 <__malloc_unlock>
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	d90b      	bls.n	8009f76 <_free_r+0x4e>
 8009f5e:	6821      	ldr	r1, [r4, #0]
 8009f60:	1862      	adds	r2, r4, r1
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bf04      	itt	eq
 8009f66:	681a      	ldreq	r2, [r3, #0]
 8009f68:	685b      	ldreq	r3, [r3, #4]
 8009f6a:	6063      	str	r3, [r4, #4]
 8009f6c:	bf04      	itt	eq
 8009f6e:	1852      	addeq	r2, r2, r1
 8009f70:	6022      	streq	r2, [r4, #0]
 8009f72:	602c      	str	r4, [r5, #0]
 8009f74:	e7ec      	b.n	8009f50 <_free_r+0x28>
 8009f76:	461a      	mov	r2, r3
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	b10b      	cbz	r3, 8009f80 <_free_r+0x58>
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	d9fa      	bls.n	8009f76 <_free_r+0x4e>
 8009f80:	6811      	ldr	r1, [r2, #0]
 8009f82:	1855      	adds	r5, r2, r1
 8009f84:	42a5      	cmp	r5, r4
 8009f86:	d10b      	bne.n	8009fa0 <_free_r+0x78>
 8009f88:	6824      	ldr	r4, [r4, #0]
 8009f8a:	4421      	add	r1, r4
 8009f8c:	1854      	adds	r4, r2, r1
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	d1dd      	bne.n	8009f50 <_free_r+0x28>
 8009f94:	681c      	ldr	r4, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	6053      	str	r3, [r2, #4]
 8009f9a:	4421      	add	r1, r4
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	e7d7      	b.n	8009f50 <_free_r+0x28>
 8009fa0:	d902      	bls.n	8009fa8 <_free_r+0x80>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	e7d3      	b.n	8009f50 <_free_r+0x28>
 8009fa8:	6825      	ldr	r5, [r4, #0]
 8009faa:	1961      	adds	r1, r4, r5
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf04      	itt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	6063      	str	r3, [r4, #4]
 8009fb6:	bf04      	itt	eq
 8009fb8:	1949      	addeq	r1, r1, r5
 8009fba:	6021      	streq	r1, [r4, #0]
 8009fbc:	6054      	str	r4, [r2, #4]
 8009fbe:	e7c7      	b.n	8009f50 <_free_r+0x28>
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bd30      	pop	{r4, r5, pc}
 8009fc4:	2000021c 	.word	0x2000021c

08009fc8 <_malloc_r>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	1ccd      	adds	r5, r1, #3
 8009fcc:	f025 0503 	bic.w	r5, r5, #3
 8009fd0:	3508      	adds	r5, #8
 8009fd2:	2d0c      	cmp	r5, #12
 8009fd4:	bf38      	it	cc
 8009fd6:	250c      	movcc	r5, #12
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	4606      	mov	r6, r0
 8009fdc:	db01      	blt.n	8009fe2 <_malloc_r+0x1a>
 8009fde:	42a9      	cmp	r1, r5
 8009fe0:	d903      	bls.n	8009fea <_malloc_r+0x22>
 8009fe2:	230c      	movs	r3, #12
 8009fe4:	6033      	str	r3, [r6, #0]
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fea:	f000 fa0f 	bl	800a40c <__malloc_lock>
 8009fee:	4921      	ldr	r1, [pc, #132]	; (800a074 <_malloc_r+0xac>)
 8009ff0:	680a      	ldr	r2, [r1, #0]
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	b99c      	cbnz	r4, 800a01e <_malloc_r+0x56>
 8009ff6:	4f20      	ldr	r7, [pc, #128]	; (800a078 <_malloc_r+0xb0>)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	b923      	cbnz	r3, 800a006 <_malloc_r+0x3e>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f998 	bl	800a334 <_sbrk_r>
 800a004:	6038      	str	r0, [r7, #0]
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f993 	bl	800a334 <_sbrk_r>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	d123      	bne.n	800a05a <_malloc_r+0x92>
 800a012:	230c      	movs	r3, #12
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	4630      	mov	r0, r6
 800a018:	f000 f9fe 	bl	800a418 <__malloc_unlock>
 800a01c:	e7e3      	b.n	8009fe6 <_malloc_r+0x1e>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	1b5b      	subs	r3, r3, r5
 800a022:	d417      	bmi.n	800a054 <_malloc_r+0x8c>
 800a024:	2b0b      	cmp	r3, #11
 800a026:	d903      	bls.n	800a030 <_malloc_r+0x68>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	441c      	add	r4, r3
 800a02c:	6025      	str	r5, [r4, #0]
 800a02e:	e004      	b.n	800a03a <_malloc_r+0x72>
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	42a2      	cmp	r2, r4
 800a034:	bf0c      	ite	eq
 800a036:	600b      	streq	r3, [r1, #0]
 800a038:	6053      	strne	r3, [r2, #4]
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 f9ec 	bl	800a418 <__malloc_unlock>
 800a040:	f104 000b 	add.w	r0, r4, #11
 800a044:	1d23      	adds	r3, r4, #4
 800a046:	f020 0007 	bic.w	r0, r0, #7
 800a04a:	1ac2      	subs	r2, r0, r3
 800a04c:	d0cc      	beq.n	8009fe8 <_malloc_r+0x20>
 800a04e:	1a1b      	subs	r3, r3, r0
 800a050:	50a3      	str	r3, [r4, r2]
 800a052:	e7c9      	b.n	8009fe8 <_malloc_r+0x20>
 800a054:	4622      	mov	r2, r4
 800a056:	6864      	ldr	r4, [r4, #4]
 800a058:	e7cc      	b.n	8009ff4 <_malloc_r+0x2c>
 800a05a:	1cc4      	adds	r4, r0, #3
 800a05c:	f024 0403 	bic.w	r4, r4, #3
 800a060:	42a0      	cmp	r0, r4
 800a062:	d0e3      	beq.n	800a02c <_malloc_r+0x64>
 800a064:	1a21      	subs	r1, r4, r0
 800a066:	4630      	mov	r0, r6
 800a068:	f000 f964 	bl	800a334 <_sbrk_r>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d1dd      	bne.n	800a02c <_malloc_r+0x64>
 800a070:	e7cf      	b.n	800a012 <_malloc_r+0x4a>
 800a072:	bf00      	nop
 800a074:	2000021c 	.word	0x2000021c
 800a078:	20000220 	.word	0x20000220

0800a07c <__ssputs_r>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	688e      	ldr	r6, [r1, #8]
 800a082:	429e      	cmp	r6, r3
 800a084:	4682      	mov	sl, r0
 800a086:	460c      	mov	r4, r1
 800a088:	4690      	mov	r8, r2
 800a08a:	461f      	mov	r7, r3
 800a08c:	d838      	bhi.n	800a100 <__ssputs_r+0x84>
 800a08e:	898a      	ldrh	r2, [r1, #12]
 800a090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a094:	d032      	beq.n	800a0fc <__ssputs_r+0x80>
 800a096:	6825      	ldr	r5, [r4, #0]
 800a098:	6909      	ldr	r1, [r1, #16]
 800a09a:	eba5 0901 	sub.w	r9, r5, r1
 800a09e:	6965      	ldr	r5, [r4, #20]
 800a0a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	444b      	add	r3, r9
 800a0ac:	106d      	asrs	r5, r5, #1
 800a0ae:	429d      	cmp	r5, r3
 800a0b0:	bf38      	it	cc
 800a0b2:	461d      	movcc	r5, r3
 800a0b4:	0553      	lsls	r3, r2, #21
 800a0b6:	d531      	bpl.n	800a11c <__ssputs_r+0xa0>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7ff ff85 	bl	8009fc8 <_malloc_r>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	b950      	cbnz	r0, 800a0d8 <__ssputs_r+0x5c>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	f8ca 3000 	str.w	r3, [sl]
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d8:	6921      	ldr	r1, [r4, #16]
 800a0da:	464a      	mov	r2, r9
 800a0dc:	f7ff fb88 	bl	80097f0 <memcpy>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	6126      	str	r6, [r4, #16]
 800a0ee:	6165      	str	r5, [r4, #20]
 800a0f0:	444e      	add	r6, r9
 800a0f2:	eba5 0509 	sub.w	r5, r5, r9
 800a0f6:	6026      	str	r6, [r4, #0]
 800a0f8:	60a5      	str	r5, [r4, #8]
 800a0fa:	463e      	mov	r6, r7
 800a0fc:	42be      	cmp	r6, r7
 800a0fe:	d900      	bls.n	800a102 <__ssputs_r+0x86>
 800a100:	463e      	mov	r6, r7
 800a102:	4632      	mov	r2, r6
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	4641      	mov	r1, r8
 800a108:	f000 f966 	bl	800a3d8 <memmove>
 800a10c:	68a3      	ldr	r3, [r4, #8]
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	1b9b      	subs	r3, r3, r6
 800a112:	4432      	add	r2, r6
 800a114:	60a3      	str	r3, [r4, #8]
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	2000      	movs	r0, #0
 800a11a:	e7db      	b.n	800a0d4 <__ssputs_r+0x58>
 800a11c:	462a      	mov	r2, r5
 800a11e:	f000 f981 	bl	800a424 <_realloc_r>
 800a122:	4606      	mov	r6, r0
 800a124:	2800      	cmp	r0, #0
 800a126:	d1e1      	bne.n	800a0ec <__ssputs_r+0x70>
 800a128:	6921      	ldr	r1, [r4, #16]
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7ff fefc 	bl	8009f28 <_free_r>
 800a130:	e7c7      	b.n	800a0c2 <__ssputs_r+0x46>
	...

0800a134 <_svfiprintf_r>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	4698      	mov	r8, r3
 800a13a:	898b      	ldrh	r3, [r1, #12]
 800a13c:	061b      	lsls	r3, r3, #24
 800a13e:	b09d      	sub	sp, #116	; 0x74
 800a140:	4607      	mov	r7, r0
 800a142:	460d      	mov	r5, r1
 800a144:	4614      	mov	r4, r2
 800a146:	d50e      	bpl.n	800a166 <_svfiprintf_r+0x32>
 800a148:	690b      	ldr	r3, [r1, #16]
 800a14a:	b963      	cbnz	r3, 800a166 <_svfiprintf_r+0x32>
 800a14c:	2140      	movs	r1, #64	; 0x40
 800a14e:	f7ff ff3b 	bl	8009fc8 <_malloc_r>
 800a152:	6028      	str	r0, [r5, #0]
 800a154:	6128      	str	r0, [r5, #16]
 800a156:	b920      	cbnz	r0, 800a162 <_svfiprintf_r+0x2e>
 800a158:	230c      	movs	r3, #12
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	e0d1      	b.n	800a306 <_svfiprintf_r+0x1d2>
 800a162:	2340      	movs	r3, #64	; 0x40
 800a164:	616b      	str	r3, [r5, #20]
 800a166:	2300      	movs	r3, #0
 800a168:	9309      	str	r3, [sp, #36]	; 0x24
 800a16a:	2320      	movs	r3, #32
 800a16c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a170:	f8cd 800c 	str.w	r8, [sp, #12]
 800a174:	2330      	movs	r3, #48	; 0x30
 800a176:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a320 <_svfiprintf_r+0x1ec>
 800a17a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a17e:	f04f 0901 	mov.w	r9, #1
 800a182:	4623      	mov	r3, r4
 800a184:	469a      	mov	sl, r3
 800a186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18a:	b10a      	cbz	r2, 800a190 <_svfiprintf_r+0x5c>
 800a18c:	2a25      	cmp	r2, #37	; 0x25
 800a18e:	d1f9      	bne.n	800a184 <_svfiprintf_r+0x50>
 800a190:	ebba 0b04 	subs.w	fp, sl, r4
 800a194:	d00b      	beq.n	800a1ae <_svfiprintf_r+0x7a>
 800a196:	465b      	mov	r3, fp
 800a198:	4622      	mov	r2, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7ff ff6d 	bl	800a07c <__ssputs_r>
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f000 80aa 	beq.w	800a2fc <_svfiprintf_r+0x1c8>
 800a1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1aa:	445a      	add	r2, fp
 800a1ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 80a2 	beq.w	800a2fc <_svfiprintf_r+0x1c8>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c2:	f10a 0a01 	add.w	sl, sl, #1
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	9307      	str	r3, [sp, #28]
 800a1ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d0:	4654      	mov	r4, sl
 800a1d2:	2205      	movs	r2, #5
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	4851      	ldr	r0, [pc, #324]	; (800a320 <_svfiprintf_r+0x1ec>)
 800a1da:	f7f6 f821 	bl	8000220 <memchr>
 800a1de:	9a04      	ldr	r2, [sp, #16]
 800a1e0:	b9d8      	cbnz	r0, 800a21a <_svfiprintf_r+0xe6>
 800a1e2:	06d0      	lsls	r0, r2, #27
 800a1e4:	bf44      	itt	mi
 800a1e6:	2320      	movmi	r3, #32
 800a1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ec:	0711      	lsls	r1, r2, #28
 800a1ee:	bf44      	itt	mi
 800a1f0:	232b      	movmi	r3, #43	; 0x2b
 800a1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fc:	d015      	beq.n	800a22a <_svfiprintf_r+0xf6>
 800a1fe:	9a07      	ldr	r2, [sp, #28]
 800a200:	4654      	mov	r4, sl
 800a202:	2000      	movs	r0, #0
 800a204:	f04f 0c0a 	mov.w	ip, #10
 800a208:	4621      	mov	r1, r4
 800a20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a20e:	3b30      	subs	r3, #48	; 0x30
 800a210:	2b09      	cmp	r3, #9
 800a212:	d94e      	bls.n	800a2b2 <_svfiprintf_r+0x17e>
 800a214:	b1b0      	cbz	r0, 800a244 <_svfiprintf_r+0x110>
 800a216:	9207      	str	r2, [sp, #28]
 800a218:	e014      	b.n	800a244 <_svfiprintf_r+0x110>
 800a21a:	eba0 0308 	sub.w	r3, r0, r8
 800a21e:	fa09 f303 	lsl.w	r3, r9, r3
 800a222:	4313      	orrs	r3, r2
 800a224:	9304      	str	r3, [sp, #16]
 800a226:	46a2      	mov	sl, r4
 800a228:	e7d2      	b.n	800a1d0 <_svfiprintf_r+0x9c>
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	1d19      	adds	r1, r3, #4
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	9103      	str	r1, [sp, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	bfbb      	ittet	lt
 800a236:	425b      	neglt	r3, r3
 800a238:	f042 0202 	orrlt.w	r2, r2, #2
 800a23c:	9307      	strge	r3, [sp, #28]
 800a23e:	9307      	strlt	r3, [sp, #28]
 800a240:	bfb8      	it	lt
 800a242:	9204      	strlt	r2, [sp, #16]
 800a244:	7823      	ldrb	r3, [r4, #0]
 800a246:	2b2e      	cmp	r3, #46	; 0x2e
 800a248:	d10c      	bne.n	800a264 <_svfiprintf_r+0x130>
 800a24a:	7863      	ldrb	r3, [r4, #1]
 800a24c:	2b2a      	cmp	r3, #42	; 0x2a
 800a24e:	d135      	bne.n	800a2bc <_svfiprintf_r+0x188>
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	1d1a      	adds	r2, r3, #4
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	9203      	str	r2, [sp, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfb8      	it	lt
 800a25c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a260:	3402      	adds	r4, #2
 800a262:	9305      	str	r3, [sp, #20]
 800a264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a330 <_svfiprintf_r+0x1fc>
 800a268:	7821      	ldrb	r1, [r4, #0]
 800a26a:	2203      	movs	r2, #3
 800a26c:	4650      	mov	r0, sl
 800a26e:	f7f5 ffd7 	bl	8000220 <memchr>
 800a272:	b140      	cbz	r0, 800a286 <_svfiprintf_r+0x152>
 800a274:	2340      	movs	r3, #64	; 0x40
 800a276:	eba0 000a 	sub.w	r0, r0, sl
 800a27a:	fa03 f000 	lsl.w	r0, r3, r0
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	4303      	orrs	r3, r0
 800a282:	3401      	adds	r4, #1
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28a:	4826      	ldr	r0, [pc, #152]	; (800a324 <_svfiprintf_r+0x1f0>)
 800a28c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a290:	2206      	movs	r2, #6
 800a292:	f7f5 ffc5 	bl	8000220 <memchr>
 800a296:	2800      	cmp	r0, #0
 800a298:	d038      	beq.n	800a30c <_svfiprintf_r+0x1d8>
 800a29a:	4b23      	ldr	r3, [pc, #140]	; (800a328 <_svfiprintf_r+0x1f4>)
 800a29c:	bb1b      	cbnz	r3, 800a2e6 <_svfiprintf_r+0x1b2>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	3307      	adds	r3, #7
 800a2a2:	f023 0307 	bic.w	r3, r3, #7
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ac:	4433      	add	r3, r6
 800a2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b0:	e767      	b.n	800a182 <_svfiprintf_r+0x4e>
 800a2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	e7a5      	b.n	800a208 <_svfiprintf_r+0xd4>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	3401      	adds	r4, #1
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	f04f 0c0a 	mov.w	ip, #10
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ce:	3a30      	subs	r2, #48	; 0x30
 800a2d0:	2a09      	cmp	r2, #9
 800a2d2:	d903      	bls.n	800a2dc <_svfiprintf_r+0x1a8>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0c5      	beq.n	800a264 <_svfiprintf_r+0x130>
 800a2d8:	9105      	str	r1, [sp, #20]
 800a2da:	e7c3      	b.n	800a264 <_svfiprintf_r+0x130>
 800a2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7f0      	b.n	800a2c8 <_svfiprintf_r+0x194>
 800a2e6:	ab03      	add	r3, sp, #12
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <_svfiprintf_r+0x1f8>)
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f7fd ff7f 	bl	80081f4 <_printf_float>
 800a2f6:	1c42      	adds	r2, r0, #1
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	d1d6      	bne.n	800a2aa <_svfiprintf_r+0x176>
 800a2fc:	89ab      	ldrh	r3, [r5, #12]
 800a2fe:	065b      	lsls	r3, r3, #25
 800a300:	f53f af2c 	bmi.w	800a15c <_svfiprintf_r+0x28>
 800a304:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a306:	b01d      	add	sp, #116	; 0x74
 800a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	462a      	mov	r2, r5
 800a312:	4b06      	ldr	r3, [pc, #24]	; (800a32c <_svfiprintf_r+0x1f8>)
 800a314:	a904      	add	r1, sp, #16
 800a316:	4638      	mov	r0, r7
 800a318:	f7fe fa10 	bl	800873c <_printf_i>
 800a31c:	e7eb      	b.n	800a2f6 <_svfiprintf_r+0x1c2>
 800a31e:	bf00      	nop
 800a320:	0800b27c 	.word	0x0800b27c
 800a324:	0800b286 	.word	0x0800b286
 800a328:	080081f5 	.word	0x080081f5
 800a32c:	0800a07d 	.word	0x0800a07d
 800a330:	0800b282 	.word	0x0800b282

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_sbrk_r+0x1c>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f7 fcfa 	bl	8001d38 <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	200004cc 	.word	0x200004cc

0800a354 <__assert_func>:
 800a354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a356:	4614      	mov	r4, r2
 800a358:	461a      	mov	r2, r3
 800a35a:	4b09      	ldr	r3, [pc, #36]	; (800a380 <__assert_func+0x2c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4605      	mov	r5, r0
 800a360:	68d8      	ldr	r0, [r3, #12]
 800a362:	b14c      	cbz	r4, 800a378 <__assert_func+0x24>
 800a364:	4b07      	ldr	r3, [pc, #28]	; (800a384 <__assert_func+0x30>)
 800a366:	9100      	str	r1, [sp, #0]
 800a368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a36c:	4906      	ldr	r1, [pc, #24]	; (800a388 <__assert_func+0x34>)
 800a36e:	462b      	mov	r3, r5
 800a370:	f000 f80e 	bl	800a390 <fiprintf>
 800a374:	f000 faa4 	bl	800a8c0 <abort>
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <__assert_func+0x38>)
 800a37a:	461c      	mov	r4, r3
 800a37c:	e7f3      	b.n	800a366 <__assert_func+0x12>
 800a37e:	bf00      	nop
 800a380:	20000010 	.word	0x20000010
 800a384:	0800b28d 	.word	0x0800b28d
 800a388:	0800b29a 	.word	0x0800b29a
 800a38c:	0800b2c8 	.word	0x0800b2c8

0800a390 <fiprintf>:
 800a390:	b40e      	push	{r1, r2, r3}
 800a392:	b503      	push	{r0, r1, lr}
 800a394:	4601      	mov	r1, r0
 800a396:	ab03      	add	r3, sp, #12
 800a398:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <fiprintf+0x20>)
 800a39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39e:	6800      	ldr	r0, [r0, #0]
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	f000 f88f 	bl	800a4c4 <_vfiprintf_r>
 800a3a6:	b002      	add	sp, #8
 800a3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ac:	b003      	add	sp, #12
 800a3ae:	4770      	bx	lr
 800a3b0:	20000010 	.word	0x20000010

0800a3b4 <__ascii_mbtowc>:
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	b901      	cbnz	r1, 800a3ba <__ascii_mbtowc+0x6>
 800a3b8:	a901      	add	r1, sp, #4
 800a3ba:	b142      	cbz	r2, 800a3ce <__ascii_mbtowc+0x1a>
 800a3bc:	b14b      	cbz	r3, 800a3d2 <__ascii_mbtowc+0x1e>
 800a3be:	7813      	ldrb	r3, [r2, #0]
 800a3c0:	600b      	str	r3, [r1, #0]
 800a3c2:	7812      	ldrb	r2, [r2, #0]
 800a3c4:	1e10      	subs	r0, r2, #0
 800a3c6:	bf18      	it	ne
 800a3c8:	2001      	movne	r0, #1
 800a3ca:	b002      	add	sp, #8
 800a3cc:	4770      	bx	lr
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	e7fb      	b.n	800a3ca <__ascii_mbtowc+0x16>
 800a3d2:	f06f 0001 	mvn.w	r0, #1
 800a3d6:	e7f8      	b.n	800a3ca <__ascii_mbtowc+0x16>

0800a3d8 <memmove>:
 800a3d8:	4288      	cmp	r0, r1
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	eb01 0402 	add.w	r4, r1, r2
 800a3e0:	d902      	bls.n	800a3e8 <memmove+0x10>
 800a3e2:	4284      	cmp	r4, r0
 800a3e4:	4623      	mov	r3, r4
 800a3e6:	d807      	bhi.n	800a3f8 <memmove+0x20>
 800a3e8:	1e43      	subs	r3, r0, #1
 800a3ea:	42a1      	cmp	r1, r4
 800a3ec:	d008      	beq.n	800a400 <memmove+0x28>
 800a3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3f6:	e7f8      	b.n	800a3ea <memmove+0x12>
 800a3f8:	4402      	add	r2, r0
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	d100      	bne.n	800a402 <memmove+0x2a>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a40a:	e7f7      	b.n	800a3fc <memmove+0x24>

0800a40c <__malloc_lock>:
 800a40c:	4801      	ldr	r0, [pc, #4]	; (800a414 <__malloc_lock+0x8>)
 800a40e:	f000 bc17 	b.w	800ac40 <__retarget_lock_acquire_recursive>
 800a412:	bf00      	nop
 800a414:	200004d4 	.word	0x200004d4

0800a418 <__malloc_unlock>:
 800a418:	4801      	ldr	r0, [pc, #4]	; (800a420 <__malloc_unlock+0x8>)
 800a41a:	f000 bc12 	b.w	800ac42 <__retarget_lock_release_recursive>
 800a41e:	bf00      	nop
 800a420:	200004d4 	.word	0x200004d4

0800a424 <_realloc_r>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	4607      	mov	r7, r0
 800a428:	4614      	mov	r4, r2
 800a42a:	460e      	mov	r6, r1
 800a42c:	b921      	cbnz	r1, 800a438 <_realloc_r+0x14>
 800a42e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a432:	4611      	mov	r1, r2
 800a434:	f7ff bdc8 	b.w	8009fc8 <_malloc_r>
 800a438:	b922      	cbnz	r2, 800a444 <_realloc_r+0x20>
 800a43a:	f7ff fd75 	bl	8009f28 <_free_r>
 800a43e:	4625      	mov	r5, r4
 800a440:	4628      	mov	r0, r5
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	f000 fc62 	bl	800ad0c <_malloc_usable_size_r>
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d20f      	bcs.n	800a46c <_realloc_r+0x48>
 800a44c:	4621      	mov	r1, r4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff fdba 	bl	8009fc8 <_malloc_r>
 800a454:	4605      	mov	r5, r0
 800a456:	2800      	cmp	r0, #0
 800a458:	d0f2      	beq.n	800a440 <_realloc_r+0x1c>
 800a45a:	4631      	mov	r1, r6
 800a45c:	4622      	mov	r2, r4
 800a45e:	f7ff f9c7 	bl	80097f0 <memcpy>
 800a462:	4631      	mov	r1, r6
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff fd5f 	bl	8009f28 <_free_r>
 800a46a:	e7e9      	b.n	800a440 <_realloc_r+0x1c>
 800a46c:	4635      	mov	r5, r6
 800a46e:	e7e7      	b.n	800a440 <_realloc_r+0x1c>

0800a470 <__sfputc_r>:
 800a470:	6893      	ldr	r3, [r2, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	b410      	push	{r4}
 800a478:	6093      	str	r3, [r2, #8]
 800a47a:	da08      	bge.n	800a48e <__sfputc_r+0x1e>
 800a47c:	6994      	ldr	r4, [r2, #24]
 800a47e:	42a3      	cmp	r3, r4
 800a480:	db01      	blt.n	800a486 <__sfputc_r+0x16>
 800a482:	290a      	cmp	r1, #10
 800a484:	d103      	bne.n	800a48e <__sfputc_r+0x1e>
 800a486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48a:	f000 b94b 	b.w	800a724 <__swbuf_r>
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	1c58      	adds	r0, r3, #1
 800a492:	6010      	str	r0, [r2, #0]
 800a494:	7019      	strb	r1, [r3, #0]
 800a496:	4608      	mov	r0, r1
 800a498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <__sfputs_r>:
 800a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	18d5      	adds	r5, r2, r3
 800a4a8:	42ac      	cmp	r4, r5
 800a4aa:	d101      	bne.n	800a4b0 <__sfputs_r+0x12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e007      	b.n	800a4c0 <__sfputs_r+0x22>
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ffda 	bl	800a470 <__sfputc_r>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d1f3      	bne.n	800a4a8 <__sfputs_r+0xa>
 800a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4c4 <_vfiprintf_r>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	b09d      	sub	sp, #116	; 0x74
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <_vfiprintf_r+0x18>
 800a4d4:	6983      	ldr	r3, [r0, #24]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <_vfiprintf_r+0x18>
 800a4d8:	f000 fb14 	bl	800ab04 <__sinit>
 800a4dc:	4b89      	ldr	r3, [pc, #548]	; (800a704 <_vfiprintf_r+0x240>)
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	d11b      	bne.n	800a51a <_vfiprintf_r+0x56>
 800a4e2:	6875      	ldr	r5, [r6, #4]
 800a4e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d405      	bmi.n	800a4f6 <_vfiprintf_r+0x32>
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	059a      	lsls	r2, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_vfiprintf_r+0x32>
 800a4f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f2:	f000 fba5 	bl	800ac40 <__retarget_lock_acquire_recursive>
 800a4f6:	89ab      	ldrh	r3, [r5, #12]
 800a4f8:	071b      	lsls	r3, r3, #28
 800a4fa:	d501      	bpl.n	800a500 <_vfiprintf_r+0x3c>
 800a4fc:	692b      	ldr	r3, [r5, #16]
 800a4fe:	b9eb      	cbnz	r3, 800a53c <_vfiprintf_r+0x78>
 800a500:	4629      	mov	r1, r5
 800a502:	4630      	mov	r0, r6
 800a504:	f000 f96e 	bl	800a7e4 <__swsetup_r>
 800a508:	b1c0      	cbz	r0, 800a53c <_vfiprintf_r+0x78>
 800a50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50c:	07dc      	lsls	r4, r3, #31
 800a50e:	d50e      	bpl.n	800a52e <_vfiprintf_r+0x6a>
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	b01d      	add	sp, #116	; 0x74
 800a516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51a:	4b7b      	ldr	r3, [pc, #492]	; (800a708 <_vfiprintf_r+0x244>)
 800a51c:	429d      	cmp	r5, r3
 800a51e:	d101      	bne.n	800a524 <_vfiprintf_r+0x60>
 800a520:	68b5      	ldr	r5, [r6, #8]
 800a522:	e7df      	b.n	800a4e4 <_vfiprintf_r+0x20>
 800a524:	4b79      	ldr	r3, [pc, #484]	; (800a70c <_vfiprintf_r+0x248>)
 800a526:	429d      	cmp	r5, r3
 800a528:	bf08      	it	eq
 800a52a:	68f5      	ldreq	r5, [r6, #12]
 800a52c:	e7da      	b.n	800a4e4 <_vfiprintf_r+0x20>
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	0598      	lsls	r0, r3, #22
 800a532:	d4ed      	bmi.n	800a510 <_vfiprintf_r+0x4c>
 800a534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a536:	f000 fb84 	bl	800ac42 <__retarget_lock_release_recursive>
 800a53a:	e7e9      	b.n	800a510 <_vfiprintf_r+0x4c>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	2320      	movs	r3, #32
 800a542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a546:	f8cd 800c 	str.w	r8, [sp, #12]
 800a54a:	2330      	movs	r3, #48	; 0x30
 800a54c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a710 <_vfiprintf_r+0x24c>
 800a550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a554:	f04f 0901 	mov.w	r9, #1
 800a558:	4623      	mov	r3, r4
 800a55a:	469a      	mov	sl, r3
 800a55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a560:	b10a      	cbz	r2, 800a566 <_vfiprintf_r+0xa2>
 800a562:	2a25      	cmp	r2, #37	; 0x25
 800a564:	d1f9      	bne.n	800a55a <_vfiprintf_r+0x96>
 800a566:	ebba 0b04 	subs.w	fp, sl, r4
 800a56a:	d00b      	beq.n	800a584 <_vfiprintf_r+0xc0>
 800a56c:	465b      	mov	r3, fp
 800a56e:	4622      	mov	r2, r4
 800a570:	4629      	mov	r1, r5
 800a572:	4630      	mov	r0, r6
 800a574:	f7ff ff93 	bl	800a49e <__sfputs_r>
 800a578:	3001      	adds	r0, #1
 800a57a:	f000 80aa 	beq.w	800a6d2 <_vfiprintf_r+0x20e>
 800a57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a580:	445a      	add	r2, fp
 800a582:	9209      	str	r2, [sp, #36]	; 0x24
 800a584:	f89a 3000 	ldrb.w	r3, [sl]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 80a2 	beq.w	800a6d2 <_vfiprintf_r+0x20e>
 800a58e:	2300      	movs	r3, #0
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a598:	f10a 0a01 	add.w	sl, sl, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	9307      	str	r3, [sp, #28]
 800a5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2205      	movs	r2, #5
 800a5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ae:	4858      	ldr	r0, [pc, #352]	; (800a710 <_vfiprintf_r+0x24c>)
 800a5b0:	f7f5 fe36 	bl	8000220 <memchr>
 800a5b4:	9a04      	ldr	r2, [sp, #16]
 800a5b6:	b9d8      	cbnz	r0, 800a5f0 <_vfiprintf_r+0x12c>
 800a5b8:	06d1      	lsls	r1, r2, #27
 800a5ba:	bf44      	itt	mi
 800a5bc:	2320      	movmi	r3, #32
 800a5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c2:	0713      	lsls	r3, r2, #28
 800a5c4:	bf44      	itt	mi
 800a5c6:	232b      	movmi	r3, #43	; 0x2b
 800a5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d015      	beq.n	800a600 <_vfiprintf_r+0x13c>
 800a5d4:	9a07      	ldr	r2, [sp, #28]
 800a5d6:	4654      	mov	r4, sl
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f04f 0c0a 	mov.w	ip, #10
 800a5de:	4621      	mov	r1, r4
 800a5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e4:	3b30      	subs	r3, #48	; 0x30
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d94e      	bls.n	800a688 <_vfiprintf_r+0x1c4>
 800a5ea:	b1b0      	cbz	r0, 800a61a <_vfiprintf_r+0x156>
 800a5ec:	9207      	str	r2, [sp, #28]
 800a5ee:	e014      	b.n	800a61a <_vfiprintf_r+0x156>
 800a5f0:	eba0 0308 	sub.w	r3, r0, r8
 800a5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	46a2      	mov	sl, r4
 800a5fe:	e7d2      	b.n	800a5a6 <_vfiprintf_r+0xe2>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	1d19      	adds	r1, r3, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	9103      	str	r1, [sp, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfbb      	ittet	lt
 800a60c:	425b      	neglt	r3, r3
 800a60e:	f042 0202 	orrlt.w	r2, r2, #2
 800a612:	9307      	strge	r3, [sp, #28]
 800a614:	9307      	strlt	r3, [sp, #28]
 800a616:	bfb8      	it	lt
 800a618:	9204      	strlt	r2, [sp, #16]
 800a61a:	7823      	ldrb	r3, [r4, #0]
 800a61c:	2b2e      	cmp	r3, #46	; 0x2e
 800a61e:	d10c      	bne.n	800a63a <_vfiprintf_r+0x176>
 800a620:	7863      	ldrb	r3, [r4, #1]
 800a622:	2b2a      	cmp	r3, #42	; 0x2a
 800a624:	d135      	bne.n	800a692 <_vfiprintf_r+0x1ce>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	1d1a      	adds	r2, r3, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	9203      	str	r2, [sp, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfb8      	it	lt
 800a632:	f04f 33ff 	movlt.w	r3, #4294967295
 800a636:	3402      	adds	r4, #2
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a720 <_vfiprintf_r+0x25c>
 800a63e:	7821      	ldrb	r1, [r4, #0]
 800a640:	2203      	movs	r2, #3
 800a642:	4650      	mov	r0, sl
 800a644:	f7f5 fdec 	bl	8000220 <memchr>
 800a648:	b140      	cbz	r0, 800a65c <_vfiprintf_r+0x198>
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	eba0 000a 	sub.w	r0, r0, sl
 800a650:	fa03 f000 	lsl.w	r0, r3, r0
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	4303      	orrs	r3, r0
 800a658:	3401      	adds	r4, #1
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a660:	482c      	ldr	r0, [pc, #176]	; (800a714 <_vfiprintf_r+0x250>)
 800a662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a666:	2206      	movs	r2, #6
 800a668:	f7f5 fdda 	bl	8000220 <memchr>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d03f      	beq.n	800a6f0 <_vfiprintf_r+0x22c>
 800a670:	4b29      	ldr	r3, [pc, #164]	; (800a718 <_vfiprintf_r+0x254>)
 800a672:	bb1b      	cbnz	r3, 800a6bc <_vfiprintf_r+0x1f8>
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	3307      	adds	r3, #7
 800a678:	f023 0307 	bic.w	r3, r3, #7
 800a67c:	3308      	adds	r3, #8
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	443b      	add	r3, r7
 800a684:	9309      	str	r3, [sp, #36]	; 0x24
 800a686:	e767      	b.n	800a558 <_vfiprintf_r+0x94>
 800a688:	fb0c 3202 	mla	r2, ip, r2, r3
 800a68c:	460c      	mov	r4, r1
 800a68e:	2001      	movs	r0, #1
 800a690:	e7a5      	b.n	800a5de <_vfiprintf_r+0x11a>
 800a692:	2300      	movs	r3, #0
 800a694:	3401      	adds	r4, #1
 800a696:	9305      	str	r3, [sp, #20]
 800a698:	4619      	mov	r1, r3
 800a69a:	f04f 0c0a 	mov.w	ip, #10
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a4:	3a30      	subs	r2, #48	; 0x30
 800a6a6:	2a09      	cmp	r2, #9
 800a6a8:	d903      	bls.n	800a6b2 <_vfiprintf_r+0x1ee>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0c5      	beq.n	800a63a <_vfiprintf_r+0x176>
 800a6ae:	9105      	str	r1, [sp, #20]
 800a6b0:	e7c3      	b.n	800a63a <_vfiprintf_r+0x176>
 800a6b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e7f0      	b.n	800a69e <_vfiprintf_r+0x1da>
 800a6bc:	ab03      	add	r3, sp, #12
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4b16      	ldr	r3, [pc, #88]	; (800a71c <_vfiprintf_r+0x258>)
 800a6c4:	a904      	add	r1, sp, #16
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7fd fd94 	bl	80081f4 <_printf_float>
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	1c78      	adds	r0, r7, #1
 800a6d0:	d1d6      	bne.n	800a680 <_vfiprintf_r+0x1bc>
 800a6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d4:	07d9      	lsls	r1, r3, #31
 800a6d6:	d405      	bmi.n	800a6e4 <_vfiprintf_r+0x220>
 800a6d8:	89ab      	ldrh	r3, [r5, #12]
 800a6da:	059a      	lsls	r2, r3, #22
 800a6dc:	d402      	bmi.n	800a6e4 <_vfiprintf_r+0x220>
 800a6de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e0:	f000 faaf 	bl	800ac42 <__retarget_lock_release_recursive>
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	065b      	lsls	r3, r3, #25
 800a6e8:	f53f af12 	bmi.w	800a510 <_vfiprintf_r+0x4c>
 800a6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ee:	e711      	b.n	800a514 <_vfiprintf_r+0x50>
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	4b09      	ldr	r3, [pc, #36]	; (800a71c <_vfiprintf_r+0x258>)
 800a6f8:	a904      	add	r1, sp, #16
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7fe f81e 	bl	800873c <_printf_i>
 800a700:	e7e4      	b.n	800a6cc <_vfiprintf_r+0x208>
 800a702:	bf00      	nop
 800a704:	0800b2f4 	.word	0x0800b2f4
 800a708:	0800b314 	.word	0x0800b314
 800a70c:	0800b2d4 	.word	0x0800b2d4
 800a710:	0800b27c 	.word	0x0800b27c
 800a714:	0800b286 	.word	0x0800b286
 800a718:	080081f5 	.word	0x080081f5
 800a71c:	0800a49f 	.word	0x0800a49f
 800a720:	0800b282 	.word	0x0800b282

0800a724 <__swbuf_r>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	460e      	mov	r6, r1
 800a728:	4614      	mov	r4, r2
 800a72a:	4605      	mov	r5, r0
 800a72c:	b118      	cbz	r0, 800a736 <__swbuf_r+0x12>
 800a72e:	6983      	ldr	r3, [r0, #24]
 800a730:	b90b      	cbnz	r3, 800a736 <__swbuf_r+0x12>
 800a732:	f000 f9e7 	bl	800ab04 <__sinit>
 800a736:	4b21      	ldr	r3, [pc, #132]	; (800a7bc <__swbuf_r+0x98>)
 800a738:	429c      	cmp	r4, r3
 800a73a:	d12b      	bne.n	800a794 <__swbuf_r+0x70>
 800a73c:	686c      	ldr	r4, [r5, #4]
 800a73e:	69a3      	ldr	r3, [r4, #24]
 800a740:	60a3      	str	r3, [r4, #8]
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	071a      	lsls	r2, r3, #28
 800a746:	d52f      	bpl.n	800a7a8 <__swbuf_r+0x84>
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	b36b      	cbz	r3, 800a7a8 <__swbuf_r+0x84>
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	6820      	ldr	r0, [r4, #0]
 800a750:	1ac0      	subs	r0, r0, r3
 800a752:	6963      	ldr	r3, [r4, #20]
 800a754:	b2f6      	uxtb	r6, r6
 800a756:	4283      	cmp	r3, r0
 800a758:	4637      	mov	r7, r6
 800a75a:	dc04      	bgt.n	800a766 <__swbuf_r+0x42>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f93c 	bl	800a9dc <_fflush_r>
 800a764:	bb30      	cbnz	r0, 800a7b4 <__swbuf_r+0x90>
 800a766:	68a3      	ldr	r3, [r4, #8]
 800a768:	3b01      	subs	r3, #1
 800a76a:	60a3      	str	r3, [r4, #8]
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	701e      	strb	r6, [r3, #0]
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	3001      	adds	r0, #1
 800a778:	4283      	cmp	r3, r0
 800a77a:	d004      	beq.n	800a786 <__swbuf_r+0x62>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	07db      	lsls	r3, r3, #31
 800a780:	d506      	bpl.n	800a790 <__swbuf_r+0x6c>
 800a782:	2e0a      	cmp	r6, #10
 800a784:	d104      	bne.n	800a790 <__swbuf_r+0x6c>
 800a786:	4621      	mov	r1, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 f927 	bl	800a9dc <_fflush_r>
 800a78e:	b988      	cbnz	r0, 800a7b4 <__swbuf_r+0x90>
 800a790:	4638      	mov	r0, r7
 800a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a794:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <__swbuf_r+0x9c>)
 800a796:	429c      	cmp	r4, r3
 800a798:	d101      	bne.n	800a79e <__swbuf_r+0x7a>
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	e7cf      	b.n	800a73e <__swbuf_r+0x1a>
 800a79e:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <__swbuf_r+0xa0>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	bf08      	it	eq
 800a7a4:	68ec      	ldreq	r4, [r5, #12]
 800a7a6:	e7ca      	b.n	800a73e <__swbuf_r+0x1a>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f000 f81a 	bl	800a7e4 <__swsetup_r>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0cb      	beq.n	800a74c <__swbuf_r+0x28>
 800a7b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a7b8:	e7ea      	b.n	800a790 <__swbuf_r+0x6c>
 800a7ba:	bf00      	nop
 800a7bc:	0800b2f4 	.word	0x0800b2f4
 800a7c0:	0800b314 	.word	0x0800b314
 800a7c4:	0800b2d4 	.word	0x0800b2d4

0800a7c8 <__ascii_wctomb>:
 800a7c8:	b149      	cbz	r1, 800a7de <__ascii_wctomb+0x16>
 800a7ca:	2aff      	cmp	r2, #255	; 0xff
 800a7cc:	bf85      	ittet	hi
 800a7ce:	238a      	movhi	r3, #138	; 0x8a
 800a7d0:	6003      	strhi	r3, [r0, #0]
 800a7d2:	700a      	strbls	r2, [r1, #0]
 800a7d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7d8:	bf98      	it	ls
 800a7da:	2001      	movls	r0, #1
 800a7dc:	4770      	bx	lr
 800a7de:	4608      	mov	r0, r1
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <__swsetup_r>:
 800a7e4:	4b32      	ldr	r3, [pc, #200]	; (800a8b0 <__swsetup_r+0xcc>)
 800a7e6:	b570      	push	{r4, r5, r6, lr}
 800a7e8:	681d      	ldr	r5, [r3, #0]
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	b125      	cbz	r5, 800a7fa <__swsetup_r+0x16>
 800a7f0:	69ab      	ldr	r3, [r5, #24]
 800a7f2:	b913      	cbnz	r3, 800a7fa <__swsetup_r+0x16>
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 f985 	bl	800ab04 <__sinit>
 800a7fa:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <__swsetup_r+0xd0>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	d10f      	bne.n	800a820 <__swsetup_r+0x3c>
 800a800:	686c      	ldr	r4, [r5, #4]
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a808:	0719      	lsls	r1, r3, #28
 800a80a:	d42c      	bmi.n	800a866 <__swsetup_r+0x82>
 800a80c:	06dd      	lsls	r5, r3, #27
 800a80e:	d411      	bmi.n	800a834 <__swsetup_r+0x50>
 800a810:	2309      	movs	r3, #9
 800a812:	6033      	str	r3, [r6, #0]
 800a814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	e03e      	b.n	800a89e <__swsetup_r+0xba>
 800a820:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <__swsetup_r+0xd4>)
 800a822:	429c      	cmp	r4, r3
 800a824:	d101      	bne.n	800a82a <__swsetup_r+0x46>
 800a826:	68ac      	ldr	r4, [r5, #8]
 800a828:	e7eb      	b.n	800a802 <__swsetup_r+0x1e>
 800a82a:	4b24      	ldr	r3, [pc, #144]	; (800a8bc <__swsetup_r+0xd8>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	bf08      	it	eq
 800a830:	68ec      	ldreq	r4, [r5, #12]
 800a832:	e7e6      	b.n	800a802 <__swsetup_r+0x1e>
 800a834:	0758      	lsls	r0, r3, #29
 800a836:	d512      	bpl.n	800a85e <__swsetup_r+0x7a>
 800a838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a83a:	b141      	cbz	r1, 800a84e <__swsetup_r+0x6a>
 800a83c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a840:	4299      	cmp	r1, r3
 800a842:	d002      	beq.n	800a84a <__swsetup_r+0x66>
 800a844:	4630      	mov	r0, r6
 800a846:	f7ff fb6f 	bl	8009f28 <_free_r>
 800a84a:	2300      	movs	r3, #0
 800a84c:	6363      	str	r3, [r4, #52]	; 0x34
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	2300      	movs	r3, #0
 800a858:	6063      	str	r3, [r4, #4]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0308 	orr.w	r3, r3, #8
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	b94b      	cbnz	r3, 800a87e <__swsetup_r+0x9a>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a874:	d003      	beq.n	800a87e <__swsetup_r+0x9a>
 800a876:	4621      	mov	r1, r4
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 fa07 	bl	800ac8c <__smakebuf_r>
 800a87e:	89a0      	ldrh	r0, [r4, #12]
 800a880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a884:	f010 0301 	ands.w	r3, r0, #1
 800a888:	d00a      	beq.n	800a8a0 <__swsetup_r+0xbc>
 800a88a:	2300      	movs	r3, #0
 800a88c:	60a3      	str	r3, [r4, #8]
 800a88e:	6963      	ldr	r3, [r4, #20]
 800a890:	425b      	negs	r3, r3
 800a892:	61a3      	str	r3, [r4, #24]
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	b943      	cbnz	r3, 800a8aa <__swsetup_r+0xc6>
 800a898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a89c:	d1ba      	bne.n	800a814 <__swsetup_r+0x30>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	0781      	lsls	r1, r0, #30
 800a8a2:	bf58      	it	pl
 800a8a4:	6963      	ldrpl	r3, [r4, #20]
 800a8a6:	60a3      	str	r3, [r4, #8]
 800a8a8:	e7f4      	b.n	800a894 <__swsetup_r+0xb0>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7f7      	b.n	800a89e <__swsetup_r+0xba>
 800a8ae:	bf00      	nop
 800a8b0:	20000010 	.word	0x20000010
 800a8b4:	0800b2f4 	.word	0x0800b2f4
 800a8b8:	0800b314 	.word	0x0800b314
 800a8bc:	0800b2d4 	.word	0x0800b2d4

0800a8c0 <abort>:
 800a8c0:	b508      	push	{r3, lr}
 800a8c2:	2006      	movs	r0, #6
 800a8c4:	f000 fa52 	bl	800ad6c <raise>
 800a8c8:	2001      	movs	r0, #1
 800a8ca:	f7f7 f9bd 	bl	8001c48 <_exit>
	...

0800a8d0 <__sflush_r>:
 800a8d0:	898a      	ldrh	r2, [r1, #12]
 800a8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	0710      	lsls	r0, r2, #28
 800a8da:	460c      	mov	r4, r1
 800a8dc:	d458      	bmi.n	800a990 <__sflush_r+0xc0>
 800a8de:	684b      	ldr	r3, [r1, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc05      	bgt.n	800a8f0 <__sflush_r+0x20>
 800a8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	dc02      	bgt.n	800a8f0 <__sflush_r+0x20>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	d0f9      	beq.n	800a8ea <__sflush_r+0x1a>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8fc:	682f      	ldr	r7, [r5, #0]
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	d032      	beq.n	800a968 <__sflush_r+0x98>
 800a902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	075a      	lsls	r2, r3, #29
 800a908:	d505      	bpl.n	800a916 <__sflush_r+0x46>
 800a90a:	6863      	ldr	r3, [r4, #4]
 800a90c:	1ac0      	subs	r0, r0, r3
 800a90e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a910:	b10b      	cbz	r3, 800a916 <__sflush_r+0x46>
 800a912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a914:	1ac0      	subs	r0, r0, r3
 800a916:	2300      	movs	r3, #0
 800a918:	4602      	mov	r2, r0
 800a91a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a91c:	6a21      	ldr	r1, [r4, #32]
 800a91e:	4628      	mov	r0, r5
 800a920:	47b0      	blx	r6
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	d106      	bne.n	800a936 <__sflush_r+0x66>
 800a928:	6829      	ldr	r1, [r5, #0]
 800a92a:	291d      	cmp	r1, #29
 800a92c:	d82c      	bhi.n	800a988 <__sflush_r+0xb8>
 800a92e:	4a2a      	ldr	r2, [pc, #168]	; (800a9d8 <__sflush_r+0x108>)
 800a930:	40ca      	lsrs	r2, r1
 800a932:	07d6      	lsls	r6, r2, #31
 800a934:	d528      	bpl.n	800a988 <__sflush_r+0xb8>
 800a936:	2200      	movs	r2, #0
 800a938:	6062      	str	r2, [r4, #4]
 800a93a:	04d9      	lsls	r1, r3, #19
 800a93c:	6922      	ldr	r2, [r4, #16]
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	d504      	bpl.n	800a94c <__sflush_r+0x7c>
 800a942:	1c42      	adds	r2, r0, #1
 800a944:	d101      	bne.n	800a94a <__sflush_r+0x7a>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	b903      	cbnz	r3, 800a94c <__sflush_r+0x7c>
 800a94a:	6560      	str	r0, [r4, #84]	; 0x54
 800a94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94e:	602f      	str	r7, [r5, #0]
 800a950:	2900      	cmp	r1, #0
 800a952:	d0ca      	beq.n	800a8ea <__sflush_r+0x1a>
 800a954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a958:	4299      	cmp	r1, r3
 800a95a:	d002      	beq.n	800a962 <__sflush_r+0x92>
 800a95c:	4628      	mov	r0, r5
 800a95e:	f7ff fae3 	bl	8009f28 <_free_r>
 800a962:	2000      	movs	r0, #0
 800a964:	6360      	str	r0, [r4, #52]	; 0x34
 800a966:	e7c1      	b.n	800a8ec <__sflush_r+0x1c>
 800a968:	6a21      	ldr	r1, [r4, #32]
 800a96a:	2301      	movs	r3, #1
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b0      	blx	r6
 800a970:	1c41      	adds	r1, r0, #1
 800a972:	d1c7      	bne.n	800a904 <__sflush_r+0x34>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0c4      	beq.n	800a904 <__sflush_r+0x34>
 800a97a:	2b1d      	cmp	r3, #29
 800a97c:	d001      	beq.n	800a982 <__sflush_r+0xb2>
 800a97e:	2b16      	cmp	r3, #22
 800a980:	d101      	bne.n	800a986 <__sflush_r+0xb6>
 800a982:	602f      	str	r7, [r5, #0]
 800a984:	e7b1      	b.n	800a8ea <__sflush_r+0x1a>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	e7ad      	b.n	800a8ec <__sflush_r+0x1c>
 800a990:	690f      	ldr	r7, [r1, #16]
 800a992:	2f00      	cmp	r7, #0
 800a994:	d0a9      	beq.n	800a8ea <__sflush_r+0x1a>
 800a996:	0793      	lsls	r3, r2, #30
 800a998:	680e      	ldr	r6, [r1, #0]
 800a99a:	bf08      	it	eq
 800a99c:	694b      	ldreq	r3, [r1, #20]
 800a99e:	600f      	str	r7, [r1, #0]
 800a9a0:	bf18      	it	ne
 800a9a2:	2300      	movne	r3, #0
 800a9a4:	eba6 0807 	sub.w	r8, r6, r7
 800a9a8:	608b      	str	r3, [r1, #8]
 800a9aa:	f1b8 0f00 	cmp.w	r8, #0
 800a9ae:	dd9c      	ble.n	800a8ea <__sflush_r+0x1a>
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9b4:	4643      	mov	r3, r8
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b0      	blx	r6
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	dc06      	bgt.n	800a9ce <__sflush_r+0xfe>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	e78e      	b.n	800a8ec <__sflush_r+0x1c>
 800a9ce:	4407      	add	r7, r0
 800a9d0:	eba8 0800 	sub.w	r8, r8, r0
 800a9d4:	e7e9      	b.n	800a9aa <__sflush_r+0xda>
 800a9d6:	bf00      	nop
 800a9d8:	20400001 	.word	0x20400001

0800a9dc <_fflush_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b913      	cbnz	r3, 800a9ec <_fflush_r+0x10>
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	b118      	cbz	r0, 800a9f6 <_fflush_r+0x1a>
 800a9ee:	6983      	ldr	r3, [r0, #24]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <_fflush_r+0x1a>
 800a9f2:	f000 f887 	bl	800ab04 <__sinit>
 800a9f6:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <_fflush_r+0x6c>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	d11b      	bne.n	800aa34 <_fflush_r+0x58>
 800a9fc:	686c      	ldr	r4, [r5, #4]
 800a9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0ef      	beq.n	800a9e6 <_fflush_r+0xa>
 800aa06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa08:	07d0      	lsls	r0, r2, #31
 800aa0a:	d404      	bmi.n	800aa16 <_fflush_r+0x3a>
 800aa0c:	0599      	lsls	r1, r3, #22
 800aa0e:	d402      	bmi.n	800aa16 <_fflush_r+0x3a>
 800aa10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa12:	f000 f915 	bl	800ac40 <__retarget_lock_acquire_recursive>
 800aa16:	4628      	mov	r0, r5
 800aa18:	4621      	mov	r1, r4
 800aa1a:	f7ff ff59 	bl	800a8d0 <__sflush_r>
 800aa1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa20:	07da      	lsls	r2, r3, #31
 800aa22:	4605      	mov	r5, r0
 800aa24:	d4e0      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	059b      	lsls	r3, r3, #22
 800aa2a:	d4dd      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2e:	f000 f908 	bl	800ac42 <__retarget_lock_release_recursive>
 800aa32:	e7d9      	b.n	800a9e8 <_fflush_r+0xc>
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <_fflush_r+0x70>)
 800aa36:	429c      	cmp	r4, r3
 800aa38:	d101      	bne.n	800aa3e <_fflush_r+0x62>
 800aa3a:	68ac      	ldr	r4, [r5, #8]
 800aa3c:	e7df      	b.n	800a9fe <_fflush_r+0x22>
 800aa3e:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <_fflush_r+0x74>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	bf08      	it	eq
 800aa44:	68ec      	ldreq	r4, [r5, #12]
 800aa46:	e7da      	b.n	800a9fe <_fflush_r+0x22>
 800aa48:	0800b2f4 	.word	0x0800b2f4
 800aa4c:	0800b314 	.word	0x0800b314
 800aa50:	0800b2d4 	.word	0x0800b2d4

0800aa54 <std>:
 800aa54:	2300      	movs	r3, #0
 800aa56:	b510      	push	{r4, lr}
 800aa58:	4604      	mov	r4, r0
 800aa5a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa62:	6083      	str	r3, [r0, #8]
 800aa64:	8181      	strh	r1, [r0, #12]
 800aa66:	6643      	str	r3, [r0, #100]	; 0x64
 800aa68:	81c2      	strh	r2, [r0, #14]
 800aa6a:	6183      	str	r3, [r0, #24]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	2208      	movs	r2, #8
 800aa70:	305c      	adds	r0, #92	; 0x5c
 800aa72:	f7fd fb17 	bl	80080a4 <memset>
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <std+0x38>)
 800aa78:	6263      	str	r3, [r4, #36]	; 0x24
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <std+0x3c>)
 800aa7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <std+0x40>)
 800aa80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <std+0x44>)
 800aa84:	6224      	str	r4, [r4, #32]
 800aa86:	6323      	str	r3, [r4, #48]	; 0x30
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	bf00      	nop
 800aa8c:	0800ada5 	.word	0x0800ada5
 800aa90:	0800adc7 	.word	0x0800adc7
 800aa94:	0800adff 	.word	0x0800adff
 800aa98:	0800ae23 	.word	0x0800ae23

0800aa9c <_cleanup_r>:
 800aa9c:	4901      	ldr	r1, [pc, #4]	; (800aaa4 <_cleanup_r+0x8>)
 800aa9e:	f000 b8af 	b.w	800ac00 <_fwalk_reent>
 800aaa2:	bf00      	nop
 800aaa4:	0800a9dd 	.word	0x0800a9dd

0800aaa8 <__sfmoreglue>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	1e4a      	subs	r2, r1, #1
 800aaac:	2568      	movs	r5, #104	; 0x68
 800aaae:	4355      	muls	r5, r2
 800aab0:	460e      	mov	r6, r1
 800aab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aab6:	f7ff fa87 	bl	8009fc8 <_malloc_r>
 800aaba:	4604      	mov	r4, r0
 800aabc:	b140      	cbz	r0, 800aad0 <__sfmoreglue+0x28>
 800aabe:	2100      	movs	r1, #0
 800aac0:	e9c0 1600 	strd	r1, r6, [r0]
 800aac4:	300c      	adds	r0, #12
 800aac6:	60a0      	str	r0, [r4, #8]
 800aac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aacc:	f7fd faea 	bl	80080a4 <memset>
 800aad0:	4620      	mov	r0, r4
 800aad2:	bd70      	pop	{r4, r5, r6, pc}

0800aad4 <__sfp_lock_acquire>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__sfp_lock_acquire+0x8>)
 800aad6:	f000 b8b3 	b.w	800ac40 <__retarget_lock_acquire_recursive>
 800aada:	bf00      	nop
 800aadc:	200004d8 	.word	0x200004d8

0800aae0 <__sfp_lock_release>:
 800aae0:	4801      	ldr	r0, [pc, #4]	; (800aae8 <__sfp_lock_release+0x8>)
 800aae2:	f000 b8ae 	b.w	800ac42 <__retarget_lock_release_recursive>
 800aae6:	bf00      	nop
 800aae8:	200004d8 	.word	0x200004d8

0800aaec <__sinit_lock_acquire>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__sinit_lock_acquire+0x8>)
 800aaee:	f000 b8a7 	b.w	800ac40 <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	200004d3 	.word	0x200004d3

0800aaf8 <__sinit_lock_release>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__sinit_lock_release+0x8>)
 800aafa:	f000 b8a2 	b.w	800ac42 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	200004d3 	.word	0x200004d3

0800ab04 <__sinit>:
 800ab04:	b510      	push	{r4, lr}
 800ab06:	4604      	mov	r4, r0
 800ab08:	f7ff fff0 	bl	800aaec <__sinit_lock_acquire>
 800ab0c:	69a3      	ldr	r3, [r4, #24]
 800ab0e:	b11b      	cbz	r3, 800ab18 <__sinit+0x14>
 800ab10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab14:	f7ff bff0 	b.w	800aaf8 <__sinit_lock_release>
 800ab18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab1c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <__sinit+0x68>)
 800ab20:	4a13      	ldr	r2, [pc, #76]	; (800ab70 <__sinit+0x6c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	bf04      	itt	eq
 800ab2a:	2301      	moveq	r3, #1
 800ab2c:	61a3      	streq	r3, [r4, #24]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f820 	bl	800ab74 <__sfp>
 800ab34:	6060      	str	r0, [r4, #4]
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f81c 	bl	800ab74 <__sfp>
 800ab3c:	60a0      	str	r0, [r4, #8]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 f818 	bl	800ab74 <__sfp>
 800ab44:	2200      	movs	r2, #0
 800ab46:	60e0      	str	r0, [r4, #12]
 800ab48:	2104      	movs	r1, #4
 800ab4a:	6860      	ldr	r0, [r4, #4]
 800ab4c:	f7ff ff82 	bl	800aa54 <std>
 800ab50:	68a0      	ldr	r0, [r4, #8]
 800ab52:	2201      	movs	r2, #1
 800ab54:	2109      	movs	r1, #9
 800ab56:	f7ff ff7d 	bl	800aa54 <std>
 800ab5a:	68e0      	ldr	r0, [r4, #12]
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	2112      	movs	r1, #18
 800ab60:	f7ff ff78 	bl	800aa54 <std>
 800ab64:	2301      	movs	r3, #1
 800ab66:	61a3      	str	r3, [r4, #24]
 800ab68:	e7d2      	b.n	800ab10 <__sinit+0xc>
 800ab6a:	bf00      	nop
 800ab6c:	0800af4c 	.word	0x0800af4c
 800ab70:	0800aa9d 	.word	0x0800aa9d

0800ab74 <__sfp>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	4607      	mov	r7, r0
 800ab78:	f7ff ffac 	bl	800aad4 <__sfp_lock_acquire>
 800ab7c:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <__sfp+0x84>)
 800ab7e:	681e      	ldr	r6, [r3, #0]
 800ab80:	69b3      	ldr	r3, [r6, #24]
 800ab82:	b913      	cbnz	r3, 800ab8a <__sfp+0x16>
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff ffbd 	bl	800ab04 <__sinit>
 800ab8a:	3648      	adds	r6, #72	; 0x48
 800ab8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	d503      	bpl.n	800ab9c <__sfp+0x28>
 800ab94:	6833      	ldr	r3, [r6, #0]
 800ab96:	b30b      	cbz	r3, 800abdc <__sfp+0x68>
 800ab98:	6836      	ldr	r6, [r6, #0]
 800ab9a:	e7f7      	b.n	800ab8c <__sfp+0x18>
 800ab9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aba0:	b9d5      	cbnz	r5, 800abd8 <__sfp+0x64>
 800aba2:	4b16      	ldr	r3, [pc, #88]	; (800abfc <__sfp+0x88>)
 800aba4:	60e3      	str	r3, [r4, #12]
 800aba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abaa:	6665      	str	r5, [r4, #100]	; 0x64
 800abac:	f000 f847 	bl	800ac3e <__retarget_lock_init_recursive>
 800abb0:	f7ff ff96 	bl	800aae0 <__sfp_lock_release>
 800abb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abbc:	6025      	str	r5, [r4, #0]
 800abbe:	61a5      	str	r5, [r4, #24]
 800abc0:	2208      	movs	r2, #8
 800abc2:	4629      	mov	r1, r5
 800abc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abc8:	f7fd fa6c 	bl	80080a4 <memset>
 800abcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abd4:	4620      	mov	r0, r4
 800abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd8:	3468      	adds	r4, #104	; 0x68
 800abda:	e7d9      	b.n	800ab90 <__sfp+0x1c>
 800abdc:	2104      	movs	r1, #4
 800abde:	4638      	mov	r0, r7
 800abe0:	f7ff ff62 	bl	800aaa8 <__sfmoreglue>
 800abe4:	4604      	mov	r4, r0
 800abe6:	6030      	str	r0, [r6, #0]
 800abe8:	2800      	cmp	r0, #0
 800abea:	d1d5      	bne.n	800ab98 <__sfp+0x24>
 800abec:	f7ff ff78 	bl	800aae0 <__sfp_lock_release>
 800abf0:	230c      	movs	r3, #12
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	e7ee      	b.n	800abd4 <__sfp+0x60>
 800abf6:	bf00      	nop
 800abf8:	0800af4c 	.word	0x0800af4c
 800abfc:	ffff0001 	.word	0xffff0001

0800ac00 <_fwalk_reent>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	4606      	mov	r6, r0
 800ac06:	4688      	mov	r8, r1
 800ac08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac0c:	2700      	movs	r7, #0
 800ac0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac12:	f1b9 0901 	subs.w	r9, r9, #1
 800ac16:	d505      	bpl.n	800ac24 <_fwalk_reent+0x24>
 800ac18:	6824      	ldr	r4, [r4, #0]
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	d1f7      	bne.n	800ac0e <_fwalk_reent+0xe>
 800ac1e:	4638      	mov	r0, r7
 800ac20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac24:	89ab      	ldrh	r3, [r5, #12]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d907      	bls.n	800ac3a <_fwalk_reent+0x3a>
 800ac2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	d003      	beq.n	800ac3a <_fwalk_reent+0x3a>
 800ac32:	4629      	mov	r1, r5
 800ac34:	4630      	mov	r0, r6
 800ac36:	47c0      	blx	r8
 800ac38:	4307      	orrs	r7, r0
 800ac3a:	3568      	adds	r5, #104	; 0x68
 800ac3c:	e7e9      	b.n	800ac12 <_fwalk_reent+0x12>

0800ac3e <__retarget_lock_init_recursive>:
 800ac3e:	4770      	bx	lr

0800ac40 <__retarget_lock_acquire_recursive>:
 800ac40:	4770      	bx	lr

0800ac42 <__retarget_lock_release_recursive>:
 800ac42:	4770      	bx	lr

0800ac44 <__swhatbuf_r>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	460e      	mov	r6, r1
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	b096      	sub	sp, #88	; 0x58
 800ac50:	4614      	mov	r4, r2
 800ac52:	461d      	mov	r5, r3
 800ac54:	da07      	bge.n	800ac66 <__swhatbuf_r+0x22>
 800ac56:	2300      	movs	r3, #0
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	89b3      	ldrh	r3, [r6, #12]
 800ac5c:	061a      	lsls	r2, r3, #24
 800ac5e:	d410      	bmi.n	800ac82 <__swhatbuf_r+0x3e>
 800ac60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac64:	e00e      	b.n	800ac84 <__swhatbuf_r+0x40>
 800ac66:	466a      	mov	r2, sp
 800ac68:	f000 f902 	bl	800ae70 <_fstat_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	dbf2      	blt.n	800ac56 <__swhatbuf_r+0x12>
 800ac70:	9a01      	ldr	r2, [sp, #4]
 800ac72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac7a:	425a      	negs	r2, r3
 800ac7c:	415a      	adcs	r2, r3
 800ac7e:	602a      	str	r2, [r5, #0]
 800ac80:	e7ee      	b.n	800ac60 <__swhatbuf_r+0x1c>
 800ac82:	2340      	movs	r3, #64	; 0x40
 800ac84:	2000      	movs	r0, #0
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	b016      	add	sp, #88	; 0x58
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}

0800ac8c <__smakebuf_r>:
 800ac8c:	898b      	ldrh	r3, [r1, #12]
 800ac8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac90:	079d      	lsls	r5, r3, #30
 800ac92:	4606      	mov	r6, r0
 800ac94:	460c      	mov	r4, r1
 800ac96:	d507      	bpl.n	800aca8 <__smakebuf_r+0x1c>
 800ac98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	2301      	movs	r3, #1
 800aca2:	6163      	str	r3, [r4, #20]
 800aca4:	b002      	add	sp, #8
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	ab01      	add	r3, sp, #4
 800acaa:	466a      	mov	r2, sp
 800acac:	f7ff ffca 	bl	800ac44 <__swhatbuf_r>
 800acb0:	9900      	ldr	r1, [sp, #0]
 800acb2:	4605      	mov	r5, r0
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff f987 	bl	8009fc8 <_malloc_r>
 800acba:	b948      	cbnz	r0, 800acd0 <__smakebuf_r+0x44>
 800acbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc0:	059a      	lsls	r2, r3, #22
 800acc2:	d4ef      	bmi.n	800aca4 <__smakebuf_r+0x18>
 800acc4:	f023 0303 	bic.w	r3, r3, #3
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	e7e3      	b.n	800ac98 <__smakebuf_r+0xc>
 800acd0:	4b0d      	ldr	r3, [pc, #52]	; (800ad08 <__smakebuf_r+0x7c>)
 800acd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	9b00      	ldr	r3, [sp, #0]
 800ace0:	6163      	str	r3, [r4, #20]
 800ace2:	9b01      	ldr	r3, [sp, #4]
 800ace4:	6120      	str	r0, [r4, #16]
 800ace6:	b15b      	cbz	r3, 800ad00 <__smakebuf_r+0x74>
 800ace8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acec:	4630      	mov	r0, r6
 800acee:	f000 f8d1 	bl	800ae94 <_isatty_r>
 800acf2:	b128      	cbz	r0, 800ad00 <__smakebuf_r+0x74>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f023 0303 	bic.w	r3, r3, #3
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	89a0      	ldrh	r0, [r4, #12]
 800ad02:	4305      	orrs	r5, r0
 800ad04:	81a5      	strh	r5, [r4, #12]
 800ad06:	e7cd      	b.n	800aca4 <__smakebuf_r+0x18>
 800ad08:	0800aa9d 	.word	0x0800aa9d

0800ad0c <_malloc_usable_size_r>:
 800ad0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad10:	1f18      	subs	r0, r3, #4
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	bfbc      	itt	lt
 800ad16:	580b      	ldrlt	r3, [r1, r0]
 800ad18:	18c0      	addlt	r0, r0, r3
 800ad1a:	4770      	bx	lr

0800ad1c <_raise_r>:
 800ad1c:	291f      	cmp	r1, #31
 800ad1e:	b538      	push	{r3, r4, r5, lr}
 800ad20:	4604      	mov	r4, r0
 800ad22:	460d      	mov	r5, r1
 800ad24:	d904      	bls.n	800ad30 <_raise_r+0x14>
 800ad26:	2316      	movs	r3, #22
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad32:	b112      	cbz	r2, 800ad3a <_raise_r+0x1e>
 800ad34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad38:	b94b      	cbnz	r3, 800ad4e <_raise_r+0x32>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f830 	bl	800ada0 <_getpid_r>
 800ad40:	462a      	mov	r2, r5
 800ad42:	4601      	mov	r1, r0
 800ad44:	4620      	mov	r0, r4
 800ad46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad4a:	f000 b817 	b.w	800ad7c <_kill_r>
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d00a      	beq.n	800ad68 <_raise_r+0x4c>
 800ad52:	1c59      	adds	r1, r3, #1
 800ad54:	d103      	bne.n	800ad5e <_raise_r+0x42>
 800ad56:	2316      	movs	r3, #22
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	e7e7      	b.n	800ad2e <_raise_r+0x12>
 800ad5e:	2400      	movs	r4, #0
 800ad60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad64:	4628      	mov	r0, r5
 800ad66:	4798      	blx	r3
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e7e0      	b.n	800ad2e <_raise_r+0x12>

0800ad6c <raise>:
 800ad6c:	4b02      	ldr	r3, [pc, #8]	; (800ad78 <raise+0xc>)
 800ad6e:	4601      	mov	r1, r0
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	f7ff bfd3 	b.w	800ad1c <_raise_r>
 800ad76:	bf00      	nop
 800ad78:	20000010 	.word	0x20000010

0800ad7c <_kill_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	; (800ad9c <_kill_r+0x20>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	4611      	mov	r1, r2
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	f7f6 ff4d 	bl	8001c28 <_kill>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d102      	bne.n	800ad98 <_kill_r+0x1c>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	b103      	cbz	r3, 800ad98 <_kill_r+0x1c>
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	bf00      	nop
 800ad9c:	200004cc 	.word	0x200004cc

0800ada0 <_getpid_r>:
 800ada0:	f7f6 bf3a 	b.w	8001c18 <_getpid>

0800ada4 <__sread>:
 800ada4:	b510      	push	{r4, lr}
 800ada6:	460c      	mov	r4, r1
 800ada8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adac:	f000 f894 	bl	800aed8 <_read_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	bfab      	itete	ge
 800adb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adb6:	89a3      	ldrhlt	r3, [r4, #12]
 800adb8:	181b      	addge	r3, r3, r0
 800adba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adbe:	bfac      	ite	ge
 800adc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800adc2:	81a3      	strhlt	r3, [r4, #12]
 800adc4:	bd10      	pop	{r4, pc}

0800adc6 <__swrite>:
 800adc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	461f      	mov	r7, r3
 800adcc:	898b      	ldrh	r3, [r1, #12]
 800adce:	05db      	lsls	r3, r3, #23
 800add0:	4605      	mov	r5, r0
 800add2:	460c      	mov	r4, r1
 800add4:	4616      	mov	r6, r2
 800add6:	d505      	bpl.n	800ade4 <__swrite+0x1e>
 800add8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800addc:	2302      	movs	r3, #2
 800adde:	2200      	movs	r2, #0
 800ade0:	f000 f868 	bl	800aeb4 <_lseek_r>
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	4632      	mov	r2, r6
 800adf2:	463b      	mov	r3, r7
 800adf4:	4628      	mov	r0, r5
 800adf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	f000 b817 	b.w	800ae2c <_write_r>

0800adfe <__sseek>:
 800adfe:	b510      	push	{r4, lr}
 800ae00:	460c      	mov	r4, r1
 800ae02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae06:	f000 f855 	bl	800aeb4 <_lseek_r>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	bf15      	itete	ne
 800ae10:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae1a:	81a3      	strheq	r3, [r4, #12]
 800ae1c:	bf18      	it	ne
 800ae1e:	81a3      	strhne	r3, [r4, #12]
 800ae20:	bd10      	pop	{r4, pc}

0800ae22 <__sclose>:
 800ae22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae26:	f000 b813 	b.w	800ae50 <_close_r>
	...

0800ae2c <_write_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d07      	ldr	r5, [pc, #28]	; (800ae4c <_write_r+0x20>)
 800ae30:	4604      	mov	r4, r0
 800ae32:	4608      	mov	r0, r1
 800ae34:	4611      	mov	r1, r2
 800ae36:	2200      	movs	r2, #0
 800ae38:	602a      	str	r2, [r5, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f7f6 ff2b 	bl	8001c96 <_write>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_write_r+0x1e>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_write_r+0x1e>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	200004cc 	.word	0x200004cc

0800ae50 <_close_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4d06      	ldr	r5, [pc, #24]	; (800ae6c <_close_r+0x1c>)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	f7f6 ff37 	bl	8001cce <_close>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	d102      	bne.n	800ae6a <_close_r+0x1a>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b103      	cbz	r3, 800ae6a <_close_r+0x1a>
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200004cc 	.word	0x200004cc

0800ae70 <_fstat_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	; (800ae90 <_fstat_r+0x20>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	f7f6 ff32 	bl	8001ce6 <_fstat>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d102      	bne.n	800ae8c <_fstat_r+0x1c>
 800ae86:	682b      	ldr	r3, [r5, #0]
 800ae88:	b103      	cbz	r3, 800ae8c <_fstat_r+0x1c>
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	200004cc 	.word	0x200004cc

0800ae94 <_isatty_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d06      	ldr	r5, [pc, #24]	; (800aeb0 <_isatty_r+0x1c>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f6 ff31 	bl	8001d06 <_isatty>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_isatty_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_isatty_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	200004cc 	.word	0x200004cc

0800aeb4 <_lseek_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_lseek_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f6 ff2a 	bl	8001d1c <_lseek>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_lseek_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_lseek_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	200004cc 	.word	0x200004cc

0800aed8 <_read_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	; (800aef8 <_read_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f6 feb8 	bl	8001c5c <_read>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_read_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_read_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	200004cc 	.word	0x200004cc

0800aefc <_init>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr

0800af08 <_fini>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	bf00      	nop
 800af0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0e:	bc08      	pop	{r3}
 800af10:	469e      	mov	lr, r3
 800af12:	4770      	bx	lr
