
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000869c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000084  08008968  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08008968  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001908f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003063  00000000  00000000  00039143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ea6  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018801  00000000  00000000  000663a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7285  00000000  00000000  0007eba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005140  00000000  00000000  00175e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008854 	.word	0x08008854

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008854 	.word	0x08008854

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96e 	b.w	8000e30 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468c      	mov	ip, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8083 	bne.w	8000c82 <__udivmoddi4+0x116>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d947      	bls.n	8000c12 <__udivmoddi4+0xa6>
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b142      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	f1c2 0020 	rsb	r0, r2, #32
 8000b8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b90:	4091      	lsls	r1, r2
 8000b92:	4097      	lsls	r7, r2
 8000b94:	ea40 0c01 	orr.w	ip, r0, r1
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba4:	fa1f fe87 	uxth.w	lr, r7
 8000ba8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bbe:	f080 8119 	bcs.w	8000df4 <__udivmoddi4+0x288>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8116 	bls.w	8000df4 <__udivmoddi4+0x288>
 8000bc8:	3e02      	subs	r6, #2
 8000bca:	443b      	add	r3, r7
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8105 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f240 8102 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfc:	eba4 040e 	sub.w	r4, r4, lr
 8000c00:	2600      	movs	r6, #0
 8000c02:	b11d      	cbz	r5, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c5 4300 	strd	r4, r3, [r5]
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xaa>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d150      	bne.n	8000cc0 <__udivmoddi4+0x154>
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c2e:	0c21      	lsrs	r1, r4, #16
 8000c30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb08 f30c 	mul.w	r3, r8, ip
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0xe2>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	f200 80e9 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1ac9      	subs	r1, r1, r3
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x10c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x10a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80d9 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e7bf      	b.n	8000c02 <__udivmoddi4+0x96>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x12e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80b1 	beq.w	8000dee <__udivmoddi4+0x282>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x1cc>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0x140>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80b8 	bhi.w	8000e1c <__udivmoddi4+0x2b0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0a8      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000cba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cc8:	4097      	lsls	r7, r2
 8000cca:	fa01 f002 	lsl.w	r0, r1, r2
 8000cce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd2:	40d9      	lsrs	r1, r3
 8000cd4:	4330      	orrs	r0, r6
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cdc:	fa1f f887 	uxth.w	r8, r7
 8000ce0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f108 	mul.w	r1, r6, r8
 8000cec:	4299      	cmp	r1, r3
 8000cee:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x19c>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfa:	f080 808d 	bcs.w	8000e18 <__udivmoddi4+0x2ac>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 808a 	bls.w	8000e18 <__udivmoddi4+0x2ac>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b281      	uxth	r1, r0
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb00 f308 	mul.w	r3, r0, r8
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x1c4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d26:	d273      	bcs.n	8000e10 <__udivmoddi4+0x2a4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d971      	bls.n	8000e10 <__udivmoddi4+0x2a4>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4439      	add	r1, r7
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d36:	e778      	b.n	8000c2a <__udivmoddi4+0xbe>
 8000d38:	f1c6 0c20 	rsb	ip, r6, #32
 8000d3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d44:	431c      	orrs	r4, r3
 8000d46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d56:	431f      	orrs	r7, r3
 8000d58:	0c3b      	lsrs	r3, r7, #16
 8000d5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5e:	fa1f f884 	uxth.w	r8, r4
 8000d62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d6e:	458a      	cmp	sl, r1
 8000d70:	fa02 f206 	lsl.w	r2, r2, r6
 8000d74:	fa00 f306 	lsl.w	r3, r0, r6
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x220>
 8000d7a:	1861      	adds	r1, r4, r1
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d80:	d248      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000d82:	458a      	cmp	sl, r1
 8000d84:	d946      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4421      	add	r1, r4
 8000d8c:	eba1 010a 	sub.w	r1, r1, sl
 8000d90:	b2bf      	uxth	r7, r7
 8000d92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d9e:	fb00 f808 	mul.w	r8, r0, r8
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x24a>
 8000da6:	19e7      	adds	r7, r4, r7
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d22e      	bcs.n	8000e0c <__udivmoddi4+0x2a0>
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2a0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4427      	add	r7, r4
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	eba7 0708 	sub.w	r7, r7, r8
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	454f      	cmp	r7, r9
 8000dc4:	46c6      	mov	lr, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	d31a      	bcc.n	8000e00 <__udivmoddi4+0x294>
 8000dca:	d017      	beq.n	8000dfc <__udivmoddi4+0x290>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x27a>
 8000dce:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dda:	40f2      	lsrs	r2, r6
 8000ddc:	ea4c 0202 	orr.w	r2, ip, r2
 8000de0:	40f7      	lsrs	r7, r6
 8000de2:	e9c5 2700 	strd	r2, r7, [r5]
 8000de6:	2600      	movs	r6, #0
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e70b      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0x60>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6fd      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d2e5      	bcs.n	8000dcc <__udivmoddi4+0x260>
 8000e00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e04:	eb69 0104 	sbc.w	r1, r9, r4
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7df      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7d2      	b.n	8000db6 <__udivmoddi4+0x24a>
 8000e10:	4660      	mov	r0, ip
 8000e12:	e78d      	b.n	8000d30 <__udivmoddi4+0x1c4>
 8000e14:	4681      	mov	r9, r0
 8000e16:	e7b9      	b.n	8000d8c <__udivmoddi4+0x220>
 8000e18:	4666      	mov	r6, ip
 8000e1a:	e775      	b.n	8000d08 <__udivmoddi4+0x19c>
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e74a      	b.n	8000cb6 <__udivmoddi4+0x14a>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	4439      	add	r1, r7
 8000e26:	e713      	b.n	8000c50 <__udivmoddi4+0xe4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	e724      	b.n	8000c78 <__udivmoddi4+0x10c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <MX_ADC1_Init+0x9c>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <MX_ADC1_Init+0xa0>)
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000e94:	f001 fa42 	bl	800231c <HAL_ADC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 fde1 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC1_Init+0x98>)
 8000eb4:	f001 fbdc 	bl	8002670 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ebe:	f000 fdd1 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000d4 	.word	0x200000d4
 8000ed0:	40012000 	.word	0x40012000
 8000ed4:	0f000001 	.word	0x0f000001

08000ed8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d123      	bne.n	8000f42 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_ADC_MspInit+0x78>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_ADC_MspInit+0x7c>)
 8000f3e:	f001 ff8b 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b81      	ldr	r3, [pc, #516]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a80      	ldr	r2, [pc, #512]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a7a      	ldr	r2, [pc, #488]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b78      	ldr	r3, [pc, #480]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b75      	ldr	r3, [pc, #468]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a74      	ldr	r2, [pc, #464]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b72      	ldr	r3, [pc, #456]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a68      	ldr	r2, [pc, #416]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b66      	ldr	r3, [pc, #408]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b63      	ldr	r3, [pc, #396]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a62      	ldr	r2, [pc, #392]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <MX_GPIO_Init+0x21c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <MX_GPIO_Init+0x21c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a5c      	ldr	r2, [pc, #368]	; (8001174 <MX_GPIO_Init+0x21c>)
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <MX_GPIO_Init+0x21c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f244 0181 	movw	r1, #16513	; 0x4081
 800101c:	4856      	ldr	r0, [pc, #344]	; (8001178 <MX_GPIO_Init+0x220>)
 800101e:	f002 f8c7 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4855      	ldr	r0, [pc, #340]	; (800117c <MX_GPIO_Init+0x224>)
 8001028:	f002 f8c2 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800102c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001032:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	484f      	ldr	r0, [pc, #316]	; (8001180 <MX_GPIO_Init+0x228>)
 8001044:	f001 ff08 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001048:	2332      	movs	r3, #50	; 0x32
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001058:	230b      	movs	r3, #11
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4847      	ldr	r0, [pc, #284]	; (8001180 <MX_GPIO_Init+0x228>)
 8001064:	f001 fef8 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001068:	2386      	movs	r3, #134	; 0x86
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001078:	230b      	movs	r3, #11
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4840      	ldr	r0, [pc, #256]	; (8001184 <MX_GPIO_Init+0x22c>)
 8001084:	f001 fee8 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001088:	f244 0381 	movw	r3, #16513	; 0x4081
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <MX_GPIO_Init+0x220>)
 80010a2:	f001 fed9 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	482d      	ldr	r0, [pc, #180]	; (8001178 <MX_GPIO_Init+0x220>)
 80010c4:	f001 fec8 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010c8:	2340      	movs	r3, #64	; 0x40
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4827      	ldr	r0, [pc, #156]	; (800117c <MX_GPIO_Init+0x224>)
 80010e0:	f001 feba 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4821      	ldr	r0, [pc, #132]	; (800117c <MX_GPIO_Init+0x224>)
 80010f8:	f001 feae 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800110e:	230a      	movs	r3, #10
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481a      	ldr	r0, [pc, #104]	; (8001184 <MX_GPIO_Init+0x22c>)
 800111a:	f001 fe9d 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <MX_GPIO_Init+0x22c>)
 8001134:	f001 fe90 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001138:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114a:	230b      	movs	r3, #11
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <MX_GPIO_Init+0x224>)
 8001156:	f001 fe7f 	bl	8002e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f001 fdb1 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f001 fdca 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400
 800117c:	40021800 	.word	0x40021800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020000 	.word	0x40020000

08001188 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_I2C1_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_I2C1_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_I2C1_Init+0x74>)
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <MX_I2C1_Init+0x7c>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_I2C1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_I2C1_Init+0x74>)
 80011c4:	f002 f826 	bl	8003214 <HAL_I2C_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ce:	f000 fc49 	bl	8001a64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <MX_I2C1_Init+0x74>)
 80011d6:	f002 fb9f 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011e0:	f000 fc40 	bl	8001a64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_I2C1_Init+0x74>)
 80011e8:	f002 fbe1 	bl	80039ae <HAL_I2CEx_ConfigDigitalFilter>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f000 fc37 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000011c 	.word	0x2000011c
 8001200:	40005400 	.word	0x40005400
 8001204:	00808cd2 	.word	0x00808cd2

08001208 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_I2C_MspInit+0x7c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d128      	bne.n	800127c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_I2C_MspInit+0x80>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <HAL_I2C_MspInit+0x80>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_I2C_MspInit+0x80>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001242:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001248:	2312      	movs	r3, #18
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001254:	2304      	movs	r3, #4
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_I2C_MspInit+0x84>)
 8001260:	f001 fdfa 	bl	8002e58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_I2C_MspInit+0x80>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_I2C_MspInit+0x80>)
 800126a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_I2C_MspInit+0x80>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005400 	.word	0x40005400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80012a6:	2308      	movs	r3, #8
 80012a8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f001 f812 	bl	80022d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	2130      	movs	r1, #48	; 0x30
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f829 	bl	8001310 <lcd_write>
	HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f001 f808 	bl	80022d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	2130      	movs	r1, #48	; 0x30
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f81f 	bl	8001310 <lcd_write>
	HAL_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 fffe 	bl	80022d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	2130      	movs	r1, #48	; 0x30
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f815 	bl	8001310 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f80e 	bl	8001310 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	210c      	movs	r1, #12
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f807 	bl	8001310 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f89f 	bl	8001446 <lcd_clear>

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	460b      	mov	r3, r1
 800131c:	71bb      	strb	r3, [r7, #6]
 800131e:	4613      	mov	r3, r2
 8001320:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	f023 030f 	bic.w	r3, r3, #15
 8001328:	b2da      	uxtb	r2, r3
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	4313      	orrs	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	b2db      	uxtb	r3, r3
 8001336:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001338:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	b25a      	sxtb	r2, r3
 8001342:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001346:	4313      	orrs	r3, r2
 8001348:	b25b      	sxtb	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	b2da      	uxtb	r2, r3
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	4313      	orrs	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	b2db      	uxtb	r3, r3
 8001360:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	b25a      	sxtb	r2, r3
 8001368:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800136c:	4313      	orrs	r3, r2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	b299      	uxth	r1, r3
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2304      	movs	r3, #4
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <lcd_write+0x88>)
 8001384:	f001 ffd6 	bl	8003334 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001388:	2005      	movs	r0, #5
 800138a:	f000 ffa3 	bl	80022d4 <HAL_Delay>
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000011c 	.word	0x2000011c

0800139c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	2300      	movs	r3, #0
 80013aa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 80013b6:	2308      	movs	r3, #8
 80013b8:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f843 	bl	8001446 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffa1 	bl	8001310 <lcd_write>
	while(lcd->f_line[i])
 80013ce:	e00f      	b.n	80013f0 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7818      	ldrb	r0, [r3, #0]
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	7859      	ldrb	r1, [r3, #1]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f7ff ff93 	bl	8001310 <lcd_write>
		i++;
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e9      	bne.n	80013d0 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	21c0      	movs	r1, #192	; 0xc0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff81 	bl	8001310 <lcd_write>
	while(lcd->s_line[i])
 800140e:	e00f      	b.n	8001430 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7818      	ldrb	r0, [r3, #0]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	7c99      	ldrb	r1, [r3, #18]
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	f7ff ff73 	bl	8001310 <lcd_write>
		i++;
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	3301      	adds	r3, #1
 800142e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	7c9b      	ldrb	r3, [r3, #18]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e9      	bne.n	8001410 <lcd_display+0x74>
	}
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800145c:	2308      	movs	r3, #8
 800145e:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	2101      	movs	r1, #1
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff51 	bl	8001310 <lcd_write>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_UART_RxCpltCallback>:
uint16_t duty;

char msg_str[];
uint16_t msg_len = 20;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_UART_RxCpltCallback+0x38>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10d      	bne.n	80014a6 <HAL_UART_RxCpltCallback+0x2e>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)msg_str, msg_len, 100 /* ms */);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_UART_RxCpltCallback+0x3c>)
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	2364      	movs	r3, #100	; 0x64
 8001490:	4909      	ldr	r1, [pc, #36]	; (80014b8 <HAL_UART_RxCpltCallback+0x40>)
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <HAL_UART_RxCpltCallback+0x44>)
 8001494:	f005 faec 	bl	8006a70 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_UART_RxCpltCallback+0x3c>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4906      	ldr	r1, [pc, #24]	; (80014b8 <HAL_UART_RxCpltCallback+0x40>)
 80014a0:	4806      	ldr	r0, [pc, #24]	; (80014bc <HAL_UART_RxCpltCallback+0x44>)
 80014a2:	f005 fb78 	bl	8006b96 <HAL_UART_Receive_IT>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40004800 	.word	0x40004800
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000178 	.word	0x20000178
 80014bc:	2000027c 	.word	0x2000027c

080014c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]

if(GPIO_Pin == USER_Btn_Pin)
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d0:	d105      	bne.n	80014de <HAL_GPIO_EXTI_Callback+0x1e>
{
 user_btn += 1;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80014dc:	801a      	strh	r2, [r3, #0]
}
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200000a0 	.word	0x200000a0

080014f0 <HAL_TIM_IC_CaptureCallback>:

// INPUT CAPTURE FUNCTION


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d148      	bne.n	8001592 <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10a      	bne.n	800151e <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001508:	2100      	movs	r1, #0
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 fbee 	bl	8005cec <HAL_TIM_ReadCapturedValue>
 8001510:	4603      	mov	r3, r0
 8001512:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001514:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e039      	b.n	8001592 <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800151e:	2100      	movs	r1, #0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f004 fbe3 	bl	8005cec <HAL_TIM_ReadCapturedValue>
 8001526:	4603      	mov	r3, r0
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800152a:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d907      	bls.n	8001548 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00d      	b.n	8001564 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d907      	bls.n	8001564 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001562:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001566:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001576:	edd7 6a03 	vldr	s13, [r7, #12]
 800157a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
//			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_TIM_IC_CaptureCallback+0xbc>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]


		}
	}
	  if(PID == 0)
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
	  }
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000bc 	.word	0x200000bc
 80015b0:	200000b0 	.word	0x200000b0
 80015b4:	200000b4 	.word	0x200000b4
 80015b8:	200000b8 	.word	0x200000b8
 80015bc:	49742400 	.word	0x49742400
 80015c0:	200000c0 	.word	0x200000c0
 80015c4:	20000010 	.word	0x20000010

080015c8 <UpdateCounter>:
int8_t count_normalized;
uint16_t counter;


void UpdateCounter(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	static uint16_t LastTimerCounter = 0;
	int TimerDif = htim3.Instance->CNT - LastTimerCounter;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <UpdateCounter+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <UpdateCounter+0xa4>)
 80015d6:	8812      	ldrh	r2, [r2, #0]
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	607b      	str	r3, [r7, #4]
	if(TimerDif >= 4 || TimerDif <= -4)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	dc03      	bgt.n	80015ea <UpdateCounter+0x22>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f113 0f03 	cmn.w	r3, #3
 80015e8:	da36      	bge.n	8001658 <UpdateCounter+0x90>
	{
		TimerDif /= 0.8;
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7fe ffb2 	bl	8000554 <__aeabi_i2d>
 80015f0:	a31b      	add	r3, pc, #108	; (adr r3, 8001660 <UpdateCounter+0x98>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f941 	bl	800087c <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa23 	bl	8000a4c <__aeabi_d2iz>
 8001606:	4603      	mov	r3, r0
 8001608:	607b      	str	r3, [r7, #4]
		count_normalized += (int8_t)TimerDif;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <UpdateCounter+0xa8>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	b25a      	sxtb	r2, r3
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <UpdateCounter+0xa8>)
 800161e:	701a      	strb	r2, [r3, #0]
		if(count_normalized > 100) count_normalized = 100;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <UpdateCounter+0xa8>)
 8001622:	f993 3000 	ldrsb.w	r3, [r3]
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	dd02      	ble.n	8001630 <UpdateCounter+0x68>
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <UpdateCounter+0xa8>)
 800162c:	2264      	movs	r2, #100	; 0x64
 800162e:	701a      	strb	r2, [r3, #0]
		if(count_normalized < 0) count_normalized = 0;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <UpdateCounter+0xa8>)
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da02      	bge.n	8001640 <UpdateCounter+0x78>
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <UpdateCounter+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		LastTimerCounter = htim3.Instance->CNT;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <UpdateCounter+0xa0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <UpdateCounter+0xa4>)
 800164a:	801a      	strh	r2, [r3, #0]
		counter = (uint16_t)count_normalized;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <UpdateCounter+0xa8>)
 800164e:	f993 3000 	ldrsb.w	r3, [r3]
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <UpdateCounter+0xac>)
 8001656:	801a      	strh	r2, [r3, #0]
	}
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	9999999a 	.word	0x9999999a
 8001664:	3fe99999 	.word	0x3fe99999
 8001668:	20000198 	.word	0x20000198
 800166c:	200000c4 	.word	0x200000c4
 8001670:	2000018a 	.word	0x2000018a
 8001674:	20000176 	.word	0x20000176

08001678 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart3, (uint8_t*)s, strlen(s), 100);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001686:	4293      	cmp	r3, r2
 8001688:	f040 809a 	bne.w	80017c0 <HAL_TIM_PeriodElapsedCallback+0x148>
  {
//	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint16_t)(readADC_f));


  		  u = counter;
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001694:	601a      	str	r2, [r3, #0]


  		  error = u - frequency;
 8001696:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 2a90 	vmov	r2, s15
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80016b6:	601a      	str	r2, [r3, #0]

  		  p_term = (float)(Kp * error);
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]

  		  integral = previous_integral + (error+previous_error);
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	441a      	add	r2, r3
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a42      	ldr	r2, [pc, #264]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80016e6:	6013      	str	r3, [r2, #0]
  		  previous_integral = integral;
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 80016ee:	6013      	str	r3, [r2, #0]
  		  i_term = Ki*integral*(dt/2);
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001708:	edd3 6a00 	vldr	s13, [r3]
 800170c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001710:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800171a:	edc3 7a00 	vstr	s15, [r3]

  		  derivative = (error - previous_error)/dt;
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 2a90 	vmov	r2, s15
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001744:	601a      	str	r2, [r3, #0]
  		  previous_error = error;
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800174c:	6013      	str	r3, [r2, #0]
  		  d_term = Kd*derivative;
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001766:	edc3 7a00 	vstr	s15, [r3]

  		  PID = (uint16_t)(p_term + i_term + d_term);
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001788:	ee17 3a90 	vmov	r3, s15
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001792:	601a      	str	r2, [r3, #0]

  		  if (PID > 1000)
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179c:	dd04      	ble.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x130>
  		  {
  			  PID = 1000;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e006      	b.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x13e>
  		  }
  		  else if(PID < 0)
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da02      	bge.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x13e>
  		  {
  			  PID =0;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  		  }
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PID);
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c

//  		UART


  }
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40010000 	.word	0x40010000
 80017d0:	20000176 	.word	0x20000176
 80017d4:	20000194 	.word	0x20000194
 80017d8:	200000c0 	.word	0x200000c0
 80017dc:	20000184 	.word	0x20000184
 80017e0:	20000004 	.word	0x20000004
 80017e4:	2000017c 	.word	0x2000017c
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	200000ac 	.word	0x200000ac
 80017f0:	20000190 	.word	0x20000190
 80017f4:	20000008 	.word	0x20000008
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20000180 	.word	0x20000180
 8001800:	2000016c 	.word	0x2000016c
 8001804:	200000a4 	.word	0x200000a4
 8001808:	2000018c 	.word	0x2000018c
 800180c:	20000010 	.word	0x20000010
 8001810:	200001e4 	.word	0x200001e4
 8001814:	00000000 	.word	0x00000000

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f000 fcfc 	bl	800221a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f891 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f7ff fb97 	bl	8000f58 <MX_GPIO_Init>
  MX_TIM1_Init();
 800182a:	f000 f9dd 	bl	8001be8 <MX_TIM1_Init>
  MX_ADC1_Init();
 800182e:	f7ff fb01 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001832:	f000 fa87 	bl	8001d44 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001836:	f7ff fca7 	bl	8001188 <MX_I2C1_Init>
  MX_TIM3_Init();
 800183a:	f000 faf3 	bl	8001e24 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800183e:	f000 fc47 	bl	80020d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001842:	4835      	ldr	r0, [pc, #212]	; (8001918 <main+0x100>)
 8001844:	f003 f9fe 	bl	8004c44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001848:	2108      	movs	r1, #8
 800184a:	4833      	ldr	r0, [pc, #204]	; (8001918 <main+0x100>)
 800184c:	f003 fad4 	bl	8004df8 <HAL_TIM_PWM_Start>

// Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	4832      	ldr	r0, [pc, #200]	; (800191c <main+0x104>)
 8001854:	f003 fc2c 	bl	80050b0 <HAL_TIM_IC_Start_IT>

//  Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	4831      	ldr	r0, [pc, #196]	; (8001920 <main+0x108>)
 800185c:	f003 fe1e 	bl	800549c <HAL_TIM_Encoder_Start>

  // LCD init
  struct lcd_disp disp;


  disp.addr = (0x27 << 1);
 8001860:	234e      	movs	r3, #78	; 0x4e
 8001862:	713b      	strb	r3, [r7, #4]
  disp.bl = true;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  lcd_init(&disp);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fd0f 	bl	8001290 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	3301      	adds	r3, #1
 8001876:	492b      	ldr	r1, [pc, #172]	; (8001924 <main+0x10c>)
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fbbd 	bl	8007ff8 <siprintf>
  sprintf((char *)&disp.s_line, "################");
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	3312      	adds	r3, #18
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <main+0x10c>)
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fbb7 	bl	8007ff8 <siprintf>

  lcd_display(&disp);
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fd85 	bl	800139c <lcd_display>
  while (1)
  {
//	  counter = __HAL_TIM_GET_COUNTER(&htim3);
// odczyt z ADC

	  HAL_ADC_Start(&hadc1);
 8001892:	4825      	ldr	r0, [pc, #148]	; (8001928 <main+0x110>)
 8001894:	f000 fd86 	bl	80023a4 <HAL_ADC_Start>
		 if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001898:	2164      	movs	r1, #100	; 0x64
 800189a:	4823      	ldr	r0, [pc, #140]	; (8001928 <main+0x110>)
 800189c:	f000 fe50 	bl	8002540 <HAL_ADC_PollForConversion>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d119      	bne.n	80018da <main+0xc2>
		 {
			readADC = HAL_ADC_GetValue(&hadc1);
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <main+0x110>)
 80018a8:	f000 fed5 	bl	8002656 <HAL_ADC_GetValue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <main+0x114>)
 80018b2:	801a      	strh	r2, [r3, #0]
			readADC_f = readADC / 4.095;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <main+0x114>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	a314      	add	r3, pc, #80	; (adr r3, 8001910 <main+0xf8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ffda 	bl	800087c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f8e4 	bl	8000a9c <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <main+0x118>)
 80018d8:	6013      	str	r3, [r2, #0]
		 }

		 sprintf((char *)&disp.f_line, "var: %d", counter);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x11c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	3301      	adds	r3, #1
 80018e4:	4914      	ldr	r1, [pc, #80]	; (8001938 <main+0x120>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f006 fb86 	bl	8007ff8 <siprintf>
		 lcd_display(&disp);
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fd54 	bl	800139c <lcd_display>
		 HAL_Delay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f000 fcec 	bl	80022d4 <HAL_Delay>
		 UpdateCounter();
 80018fc:	f7ff fe64 	bl	80015c8 <UpdateCounter>
		 HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <main+0x124>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <main+0x128>)
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <main+0x12c>)
 800190a:	f005 f944 	bl	8006b96 <HAL_UART_Receive_IT>
	  HAL_ADC_Start(&hadc1);
 800190e:	e7c0      	b.n	8001892 <main+0x7a>
 8001910:	ae147ae1 	.word	0xae147ae1
 8001914:	40106147 	.word	0x40106147
 8001918:	200001e4 	.word	0x200001e4
 800191c:	20000230 	.word	0x20000230
 8001920:	20000198 	.word	0x20000198
 8001924:	0800886c 	.word	0x0800886c
 8001928:	200000d4 	.word	0x200000d4
 800192c:	20000174 	.word	0x20000174
 8001930:	20000168 	.word	0x20000168
 8001934:	20000176 	.word	0x20000176
 8001938:	08008880 	.word	0x08008880
 800193c:	20000000 	.word	0x20000000
 8001940:	20000178 	.word	0x20000178
 8001944:	2000027c 	.word	0x2000027c

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0b4      	sub	sp, #208	; 0xd0
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001952:	2230      	movs	r2, #48	; 0x30
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f006 fb46 	bl	8007fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	2284      	movs	r2, #132	; 0x84
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f006 fb37 	bl	8007fe8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800197a:	f002 f865 	bl	8003a48 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <SystemClock_Config+0x114>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a36      	ldr	r2, [pc, #216]	; (8001a5c <SystemClock_Config+0x114>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <SystemClock_Config+0x114>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <SystemClock_Config+0x118>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <SystemClock_Config+0x118>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <SystemClock_Config+0x118>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019d4:	2348      	movs	r3, #72	; 0x48
 80019d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 f83c 	bl	8003a68 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019f6:	f000 f835 	bl	8001a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	230f      	movs	r3, #15
 80019fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fac5 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001a2c:	f000 f81a 	bl	8001a64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001a30:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001a34:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fcb6 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001a4e:	f000 f809 	bl	8001a64 <Error_Handler>
  }
}
 8001a52:	bf00      	nop
 8001a54:	37d0      	adds	r7, #208	; 0xd0
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 fbc6 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b12:	f003 fd51 	bl	80055b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200001e4 	.word	0x200001e4

08001b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <TIM2_IRQHandler+0x10>)
 8001b26:	f003 fd47 	bl	80055b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000230 	.word	0x20000230

08001b34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART3_IRQHandler+0x10>)
 8001b3a:	f005 f87b 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000027c 	.word	0x2000027c

08001b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b50:	f001 fb48 	bl	80031e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f006 fa04 	bl	8007f94 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20050000 	.word	0x20050000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200000c8 	.word	0x200000c8
 8001bc0:	20000318 	.word	0x20000318

08001bc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09a      	sub	sp, #104	; 0x68
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	222c      	movs	r2, #44	; 0x2c
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f006 f9e0 	bl	8007fe8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c2a:	4a45      	ldr	r2, [pc, #276]	; (8001d40 <MX_TIM1_Init+0x158>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c30:	2247      	movs	r2, #71	; 0x47
 8001c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c48:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c54:	4839      	ldr	r0, [pc, #228]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c56:	f002 ff9d 	bl	8004b94 <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f7ff ff00 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c68:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4832      	ldr	r0, [pc, #200]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c72:	f003 ff71 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c7c:	f7ff fef2 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c80:	482e      	ldr	r0, [pc, #184]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001c82:	f003 f857 	bl	8004d34 <HAL_TIM_PWM_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c8c:	f7ff feea 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001ca4:	f004 fd6c 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cae:	f7ff fed9 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001cb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4818      	ldr	r0, [pc, #96]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001cda:	f003 fe29 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ce4:	f7ff febe 	bl	8001a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001d1e:	f004 fdbd 	bl	800689c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001d28:	f7ff fe9c 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM1_Init+0x154>)
 8001d2e:	f000 f997 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3768      	adds	r7, #104	; 0x68
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200001e4 	.word	0x200001e4
 8001d40:	40010000 	.word	0x40010000

08001d44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d7a:	2247      	movs	r2, #71	; 0x47
 8001d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d86:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001d9a:	f002 fefb 	bl	8004b94 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001da4:	f7ff fe5e 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0320 	add.w	r3, r7, #32
 8001db2:	4619      	mov	r1, r3
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001db6:	f003 fecf 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001dc0:	f7ff fe50 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dc4:	4816      	ldr	r0, [pc, #88]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001dc6:	f003 f911 	bl	8004fec <HAL_TIM_IC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001dd0:	f7ff fe48 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001de4:	f004 fccc 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001dee:	f7ff fe39 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001df6:	2301      	movs	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_TIM2_Init+0xdc>)
 8001e0a:	f003 fcf4 	bl	80057f6 <HAL_TIM_IC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001e14:	f7ff fe26 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000230 	.word	0x20000230

08001e24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f006 f8d8 	bl	8007fe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_TIM3_Init+0xa8>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001e88:	230f      	movs	r3, #15
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001e94:	f003 fa5c 	bl	8005350 <HAL_TIM_Encoder_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e9e:	f7ff fde1 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_TIM3_Init+0xa4>)
 8001eb0:	f004 fc66 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001eba:	f7ff fdd3 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000198 	.word	0x20000198
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_TIM_Base_MspInit+0xc0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d114      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2019      	movs	r0, #25
 8001f10:	f000 fed9 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f14:	2019      	movs	r0, #25
 8001f16:	f000 fef2 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f1a:	e034      	b.n	8001f86 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d12f      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_TIM_Base_MspInit+0xc4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_TIM_Base_MspInit+0xc8>)
 8001f72:	f000 ff71 	bl	8002e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201c      	movs	r0, #28
 8001f7c:	f000 fea3 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f80:	201c      	movs	r0, #28
 8001f82:	f000 febc 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d143      	bne.n	8002046 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a24      	ldr	r2, [pc, #144]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8002006:	2340      	movs	r3, #64	; 0x40
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <HAL_TIM_Encoder_MspInit+0xbc>)
 8002022:	f000 ff19 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <HAL_TIM_Encoder_MspInit+0xc0>)
 8002042:	f000 ff09 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40000400 	.word	0x40000400
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020800 	.word	0x40020800

08002060 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_TIM_MspPostInit+0x64>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d11c      	bne.n	80020bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_TIM_MspPostInit+0x68>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_TIM_MspPostInit+0x68>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_TIM_MspPostInit+0x68>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800209a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	f000 fece 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40021000 	.word	0x40021000

080020d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <MX_USART3_UART_Init+0x5c>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART3_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART3_UART_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART3_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART3_UART_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART3_UART_Init+0x58>)
 8002114:	f004 fc5e 	bl	80069d4 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800211e:	f7ff fca1 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000027c 	.word	0x2000027c
 800212c:	40004800 	.word	0x40004800

08002130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_UART_MspInit+0x8c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d130      	bne.n	80021b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_UART_MspInit+0x90>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_UART_MspInit+0x90>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_UART_MspInit+0x90>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_UART_MspInit+0x90>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_UART_MspInit+0x90>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_UART_MspInit+0x90>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002194:	2307      	movs	r3, #7
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4809      	ldr	r0, [pc, #36]	; (80021c4 <HAL_UART_MspInit+0x94>)
 80021a0:	f000 fe5a 	bl	8002e58 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2027      	movs	r0, #39	; 0x27
 80021aa:	f000 fd8c 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021ae:	2027      	movs	r0, #39	; 0x27
 80021b0:	f000 fda5 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40004800 	.word	0x40004800
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e4:	4c0b      	ldr	r4, [pc, #44]	; (8002214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f2:	f7ff fce7 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f005 fed3 	bl	8007fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7ff fb0d 	bl	8001818 <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800220c:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 8002210:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002214:	20000314 	.word	0x20000314

08002218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>

0800221a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221e:	2003      	movs	r0, #3
 8002220:	f000 fd46 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002224:	2000      	movs	r0, #0
 8002226:	f000 f805 	bl	8002234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222a:	f7ff fc21 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x54>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x58>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224a:	fbb3 f3f1 	udiv	r3, r3, r1
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd61 	bl	8002d1a <HAL_SYSTICK_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00e      	b.n	8002280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d80a      	bhi.n	800227e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f000 fd29 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_InitTick+0x5c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000014 	.word	0x20000014
 800228c:	2000001c 	.word	0x2000001c
 8002290:	20000018 	.word	0x20000018

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000001c 	.word	0x2000001c
 80022b8:	20000300 	.word	0x20000300

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000300 	.word	0x20000300

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_Delay+0x44>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffde 	bl	80022bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000001c 	.word	0x2000001c

0800231c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e031      	b.n	8002396 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fdcc 	bl	8000ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_ADC_Init+0x84>)
 8002360:	4013      	ands	r3, r2
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fad6 	bl	800291c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
 8002386:	e001      	b.n	800238c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	ffffeefd 	.word	0xffffeefd

080023a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Start+0x1a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0ad      	b.n	800251a <HAL_ADC_Start+0x176>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d018      	beq.n	8002406 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_ADC_Start+0x184>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_ADC_Start+0x188>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9a      	lsrs	r2, r3, #18
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d175      	bne.n	8002500 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_ADC_Start+0x18c>)
 800241a:	4013      	ands	r3, r2
 800241c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800243a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d106      	bne.n	800245e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f023 0206 	bic.w	r2, r3, #6
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002476:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_ADC_Start+0x190>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d143      	bne.n	8002518 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e03a      	b.n	8002518 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	; (8002538 <HAL_ADC_Start+0x194>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10e      	bne.n	80024ca <HAL_ADC_Start+0x126>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_ADC_Start+0x190>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d120      	bne.n	8002518 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_ADC_Start+0x198>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d11b      	bne.n	8002518 <HAL_ADC_Start+0x174>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d114      	bne.n	8002518 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e00b      	b.n	8002518 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000014 	.word	0x20000014
 800252c:	431bde83 	.word	0x431bde83
 8002530:	fffff8fe 	.word	0xfffff8fe
 8002534:	40012300 	.word	0x40012300
 8002538:	40012000 	.word	0x40012000
 800253c:	40012200 	.word	0x40012200

08002540 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	d113      	bne.n	8002586 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e063      	b.n	800264e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002586:	f7ff fe99 	bl	80022bc <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800258c:	e021      	b.n	80025d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d01d      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_ADC_PollForConversion+0x6c>
 800259c:	f7ff fe8e 	bl	80022bc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d212      	bcs.n	80025d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d00b      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e03d      	b.n	800264e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d1d6      	bne.n	800258e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0212 	mvn.w	r2, #18
 80025e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d123      	bne.n	800264c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11f      	bne.n	800264c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e136      	b.n	80028fa <HAL_ADC_ConfigChannel+0x28a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d93a      	bls.n	8002712 <HAL_ADC_ConfigChannel+0xa2>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a4:	d035      	beq.n	8002712 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	2207      	movs	r2, #7
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a8d      	ldr	r2, [pc, #564]	; (8002908 <HAL_ADC_ConfigChannel+0x298>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68d9      	ldr	r1, [r3, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	061a      	lsls	r2, r3, #24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ea:	e035      	b.n	8002758 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68d9      	ldr	r1, [r3, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4403      	add	r3, r0
 8002704:	3b1e      	subs	r3, #30
 8002706:	409a      	lsls	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002710:	e022      	b.n	8002758 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	2207      	movs	r2, #7
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43da      	mvns	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	400a      	ands	r2, r1
 8002734:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	4618      	mov	r0, r3
 8002748:	4603      	mov	r3, r0
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4403      	add	r3, r0
 800274e:	409a      	lsls	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d824      	bhi.n	80027aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b05      	subs	r3, #5
 8002772:	221f      	movs	r2, #31
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43da      	mvns	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	400a      	ands	r2, r1
 8002780:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b05      	subs	r3, #5
 800279c:	fa00 f203 	lsl.w	r2, r0, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
 80027a8:	e04c      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d824      	bhi.n	80027fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b23      	subs	r3, #35	; 0x23
 80027c4:	221f      	movs	r2, #31
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b23      	subs	r3, #35	; 0x23
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
 80027fa:	e023      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b41      	subs	r3, #65	; 0x41
 800280e:	221f      	movs	r2, #31
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43da      	mvns	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	400a      	ands	r2, r1
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3b41      	subs	r3, #65	; 0x41
 8002838:	fa00 f203 	lsl.w	r2, r0, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_ADC_ConfigChannel+0x29c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10a      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1f4>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 800285e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002862:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <HAL_ADC_ConfigChannel+0x29c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10f      	bne.n	800288e <HAL_ADC_ConfigChannel+0x21e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b12      	cmp	r3, #18
 8002874:	d10b      	bne.n	800288e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a25      	ldr	r2, [pc, #148]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 800287c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002880:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800288c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_ADC_ConfigChannel+0x29c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12b      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x280>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_ADC_ConfigChannel+0x298>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x23a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b11      	cmp	r3, #17
 80028a8:	d122      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a18      	ldr	r2, [pc, #96]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 80028b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_ADC_ConfigChannel+0x2a0>)
 80028bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_ADC_ConfigChannel+0x298>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d111      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_ADC_ConfigChannel+0x2a4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_ADC_ConfigChannel+0x2a8>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9a      	lsrs	r2, r3, #18
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028e2:	e002      	b.n	80028ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	10000012 	.word	0x10000012
 800290c:	40012000 	.word	0x40012000
 8002910:	40012300 	.word	0x40012300
 8002914:	20000014 	.word	0x20000014
 8002918:	431bde83 	.word	0x431bde83

0800291c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002924:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <ADC_Init+0x1ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <ADC_Init+0x1ec>)
 800292a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800292e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <ADC_Init+0x1ec>)
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4973      	ldr	r1, [pc, #460]	; (8002b08 <ADC_Init+0x1ec>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <ADC_Init+0x1f0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d022      	beq.n	80029f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	e00f      	b.n	8002a16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0202 	bic.w	r2, r2, #2
 8002a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	005a      	lsls	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	035a      	lsls	r2, r3, #13
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e007      	b.n	8002a8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	051a      	lsls	r2, r3, #20
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ace:	025a      	lsls	r2, r3, #9
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	029a      	lsls	r2, r3, #10
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40012300 	.word	0x40012300
 8002b0c:	0f000001 	.word	0x0f000001

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <__NVIC_SetPriorityGrouping+0x40>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x40>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	05fa0000 	.word	0x05fa0000

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff fabc 	bl	80022bc <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d008      	beq.n	8002d64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e052      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0216 	bic.w	r2, r2, #22
 8002d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HAL_DMA_Abort+0x62>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	e013      	b.n	8002dde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db6:	f7ff fa81 	bl	80022bc <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d90c      	bls.n	8002dde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e015      	b.n	8002e0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e4      	bne.n	8002db6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	223f      	movs	r2, #63	; 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e00c      	b.n	8002e4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2205      	movs	r2, #5
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e175      	b.n	8003164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e78:	2201      	movs	r2, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f040 8164 	bne.w	800315e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d005      	beq.n	8002eae <HAL_GPIO_Init+0x56>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d130      	bne.n	8002f10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	2203      	movs	r2, #3
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 0201 	and.w	r2, r3, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d017      	beq.n	8002f4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d123      	bne.n	8002fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80be 	beq.w	800315e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_GPIO_Init+0x324>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a65      	ldr	r2, [pc, #404]	; (800317c <HAL_GPIO_Init+0x324>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_GPIO_Init+0x324>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ffa:	4a61      	ldr	r2, [pc, #388]	; (8003180 <HAL_GPIO_Init+0x328>)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_GPIO_Init+0x32c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d037      	beq.n	8003096 <HAL_GPIO_Init+0x23e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a57      	ldr	r2, [pc, #348]	; (8003188 <HAL_GPIO_Init+0x330>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_GPIO_Init+0x23a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_GPIO_Init+0x334>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02b      	beq.n	800308e <HAL_GPIO_Init+0x236>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a55      	ldr	r2, [pc, #340]	; (8003190 <HAL_GPIO_Init+0x338>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d025      	beq.n	800308a <HAL_GPIO_Init+0x232>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <HAL_GPIO_Init+0x33c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_Init+0x22e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a53      	ldr	r2, [pc, #332]	; (8003198 <HAL_GPIO_Init+0x340>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x22a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_GPIO_Init+0x344>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x226>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a51      	ldr	r2, [pc, #324]	; (80031a0 <HAL_GPIO_Init+0x348>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x222>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a50      	ldr	r2, [pc, #320]	; (80031a4 <HAL_GPIO_Init+0x34c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x21e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4f      	ldr	r2, [pc, #316]	; (80031a8 <HAL_GPIO_Init+0x350>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x21a>
 800306e:	2309      	movs	r3, #9
 8003070:	e012      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003072:	230a      	movs	r3, #10
 8003074:	e010      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003076:	2308      	movs	r3, #8
 8003078:	e00e      	b.n	8003098 <HAL_GPIO_Init+0x240>
 800307a:	2307      	movs	r3, #7
 800307c:	e00c      	b.n	8003098 <HAL_GPIO_Init+0x240>
 800307e:	2306      	movs	r3, #6
 8003080:	e00a      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003082:	2305      	movs	r3, #5
 8003084:	e008      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003086:	2304      	movs	r3, #4
 8003088:	e006      	b.n	8003098 <HAL_GPIO_Init+0x240>
 800308a:	2303      	movs	r3, #3
 800308c:	e004      	b.n	8003098 <HAL_GPIO_Init+0x240>
 800308e:	2302      	movs	r3, #2
 8003090:	e002      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_GPIO_Init+0x240>
 8003096:	2300      	movs	r3, #0
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f002 0203 	and.w	r2, r2, #3
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	4093      	lsls	r3, r2
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030a8:	4935      	ldr	r1, [pc, #212]	; (8003180 <HAL_GPIO_Init+0x328>)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_GPIO_Init+0x354>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030da:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_GPIO_Init+0x354>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e0:	4b32      	ldr	r3, [pc, #200]	; (80031ac <HAL_GPIO_Init+0x354>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003104:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_GPIO_Init+0x354>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_GPIO_Init+0x354>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800312e:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_GPIO_Init+0x354>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_GPIO_Init+0x354>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_GPIO_Init+0x354>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3301      	adds	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	f67f ae86 	bls.w	8002e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	40013800 	.word	0x40013800
 8003184:	40020000 	.word	0x40020000
 8003188:	40020400 	.word	0x40020400
 800318c:	40020800 	.word	0x40020800
 8003190:	40020c00 	.word	0x40020c00
 8003194:	40021000 	.word	0x40021000
 8003198:	40021400 	.word	0x40021400
 800319c:	40021800 	.word	0x40021800
 80031a0:	40021c00 	.word	0x40021c00
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40022400 	.word	0x40022400
 80031ac:	40013c00 	.word	0x40013c00

080031b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
 80031bc:	4613      	mov	r3, r2
 80031be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031cc:	e003      	b.n	80031d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	041a      	lsls	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f95c 	bl	80014c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40013c00 	.word	0x40013c00

08003214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd ffe4 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e006      	b.n	800329c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800329a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d104      	bne.n	80032ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_I2C_Init+0x11c>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69d9      	ldr	r1, [r3, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	02008000 	.word	0x02008000

08003334 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b20      	cmp	r3, #32
 8003352:	f040 80da 	bne.w	800350a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x30>
 8003360:	2302      	movs	r3, #2
 8003362:	e0d3      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800336c:	f7fe ffa6 	bl	80022bc <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2319      	movs	r3, #25
 8003378:	2201      	movs	r2, #1
 800337a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f8f0 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0be      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2221      	movs	r2, #33	; 0x21
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2210      	movs	r2, #16
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	893a      	ldrh	r2, [r7, #8]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2bff      	cmp	r3, #255	; 0xff
 80033be:	d90e      	bls.n	80033de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	22ff      	movs	r2, #255	; 0xff
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_I2C_Master_Transmit+0x1e0>)
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa6c 	bl	80038b4 <I2C_TransferConfig>
 80033dc:	e06c      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	4b48      	ldr	r3, [pc, #288]	; (8003514 <HAL_I2C_Master_Transmit+0x1e0>)
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fa5b 	bl	80038b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033fe:	e05b      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6a39      	ldr	r1, [r7, #32]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f8ed 	bl	80035e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e07b      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d034      	beq.n	80034b8 <HAL_I2C_Master_Transmit+0x184>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d130      	bne.n	80034b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f87f 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04d      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2bff      	cmp	r3, #255	; 0xff
 8003478:	d90e      	bls.n	8003498 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	b2da      	uxtb	r2, r3
 8003486:	8979      	ldrh	r1, [r7, #10]
 8003488:	2300      	movs	r3, #0
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa0f 	bl	80038b4 <I2C_TransferConfig>
 8003496:	e00f      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f9fe 	bl	80038b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d19e      	bne.n	8003400 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f8cc 	bl	8003664 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e01a      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2220      	movs	r2, #32
 80034dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_I2C_Master_Transmit+0x1e4>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	80002000 	.word	0x80002000
 8003518:	fe00e800 	.word	0xfe00e800

0800351c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	d103      	bne.n	800353a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d007      	beq.n	8003558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	619a      	str	r2, [r3, #24]
  }
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003574:	e022      	b.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d01e      	beq.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fe fe9d 	bl	80022bc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d113      	bne.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e00f      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d0cd      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f0:	e02c      	b.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f870 	bl	80036dc <I2C_IsErrorOccurred>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e02a      	b.n	800365c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d01e      	beq.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fe55 	bl	80022bc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d1cb      	bne.n	80035f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	e028      	b.n	80036c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f830 	bl	80036dc <I2C_IsErrorOccurred>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e026      	b.n	80036d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fe19 	bl	80022bc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d113      	bne.n	80036c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d1cf      	bne.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d075      	beq.n	80037f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003710:	e056      	b.n	80037c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d052      	beq.n	80037c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe fdcf 	bl	80022bc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_IsErrorOccurred+0x54>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d147      	bne.n	80037c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003742:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003752:	d12e      	bne.n	80037b2 <I2C_IsErrorOccurred+0xd6>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800375a:	d02a      	beq.n	80037b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b20      	cmp	r3, #32
 8003760:	d027      	beq.n	80037b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003770:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003772:	f7fe fda3 	bl	80022bc <HAL_GetTick>
 8003776:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	e01b      	b.n	80037b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800377a:	f7fe fd9f 	bl	80022bc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b19      	cmp	r3, #25
 8003786:	d914      	bls.n	80037b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d1dc      	bne.n	800377a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d003      	beq.n	80037d6 <I2C_IsErrorOccurred+0xfa>
 80037ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d09d      	beq.n	8003712 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2220      	movs	r2, #32
 80037e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01c      	beq.n	80038a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fe56 	bl	800351c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <I2C_IsErrorOccurred+0x1d4>)
 800387c:	400b      	ands	r3, r1
 800387e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	fe00e800 	.word	0xfe00e800

080038b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	4613      	mov	r3, r2
 80038c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038cc:	7a7b      	ldrb	r3, [r7, #9]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	4313      	orrs	r3, r2
 80038de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <I2C_TransferConfig+0x60>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	43db      	mvns	r3, r3
 80038f8:	ea02 0103 	and.w	r1, r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	03ff63ff 	.word	0x03ff63ff

08003918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d138      	bne.n	80039a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003938:	2302      	movs	r3, #2
 800393a:	e032      	b.n	80039a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800396a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d139      	bne.n	8003a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e033      	b.n	8003a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2224      	movs	r2, #36	; 0x24
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40007000 	.word	0x40007000

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e291      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8087 	beq.w	8003b9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a8c:	4b96      	ldr	r3, [pc, #600]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d00c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a98:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d112      	bne.n	8003aca <HAL_RCC_OscConfig+0x62>
 8003aa4:	4b90      	ldr	r3, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab0:	d10b      	bne.n	8003aca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab2:	4b8d      	ldr	r3, [pc, #564]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d06c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x130>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d168      	bne.n	8003b98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e26b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x7a>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e02e      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x9c>
 8003aea:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7e      	ldr	r2, [pc, #504]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b7c      	ldr	r3, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7b      	ldr	r2, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e01d      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a75      	ldr	r2, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6b      	ldr	r2, [pc, #428]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fbb8 	bl	80022bc <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe fbb4 	bl	80022bc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e21f      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e014      	b.n	8003b9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fba4 	bl	80022bc <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fba0 	bl	80022bc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e20b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x110>
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d069      	beq.n	8003c7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba6:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x190>
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e1df      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	493d      	ldr	r1, [pc, #244]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c00:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fb56 	bl	80022bc <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe fb52 	bl	80022bc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1bd      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4929      	ldr	r1, [pc, #164]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
 8003c46:	e018      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fb32 	bl	80022bc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fe fb2e 	bl	80022bc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e199      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d038      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fb0f 	bl	80022bc <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fb0b 	bl	80022bc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e176      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x23a>
 8003cc0:	e01a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe faf5 	bl	80022bc <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fe faf1 	bl	80022bc <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d903      	bls.n	8003cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e15c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
 8003ce8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cec:	4b91      	ldr	r3, [pc, #580]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a4 	beq.w	8003e4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b8b      	ldr	r3, [pc, #556]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a87      	ldr	r2, [pc, #540]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b85      	ldr	r3, [pc, #532]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2e:	4b82      	ldr	r3, [pc, #520]	; (8003f38 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x4d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7e      	ldr	r2, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fab9 	bl	80022bc <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe fab5 	bl	80022bc <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e120      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	4b75      	ldr	r3, [pc, #468]	; (8003f38 <HAL_RCC_OscConfig+0x4d0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x31a>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a6e      	ldr	r2, [pc, #440]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e02d      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x33c>
 8003d8a:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a69      	ldr	r2, [pc, #420]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a66      	ldr	r2, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e01c      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x35e>
 8003dac:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a60      	ldr	r2, [pc, #384]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b5e      	ldr	r3, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fa69 	bl	80022bc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fa65 	bl	80022bc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0ce      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b4b      	ldr	r3, [pc, #300]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCC_OscConfig+0x386>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fe fa53 	bl	80022bc <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fa4f 	bl	80022bc <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b3c      	ldr	r3, [pc, #240]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a4 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d06b      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d149      	bne.n	8003f00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fa20 	bl	80022bc <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe fa1c 	bl	80022bc <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e087      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe f9f0 	bl	80022bc <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe f9ec 	bl	80022bc <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e057      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x478>
 8003efe:	e04f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f9d6 	bl	80022bc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe f9d2 	bl	80022bc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e03d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_OscConfig+0x4cc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4ac>
 8003f32:	e035      	b.n	8003fa0 <HAL_RCC_OscConfig+0x538>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x544>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d028      	beq.n	8003f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d121      	bne.n	8003f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d11a      	bne.n	8003f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0d0      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b67      	ldr	r3, [pc, #412]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4965      	ldr	r1, [pc, #404]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b63      	ldr	r3, [pc, #396]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b8      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800401a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800402e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	494d      	ldr	r1, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d040      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d115      	bne.n	8004092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e073      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4936      	ldr	r1, [pc, #216]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fe f90a 	bl	80022bc <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe f906 	bl	80022bc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e053      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d210      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 020f 	bic.w	r2, r3, #15
 80040ea:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e032      	b.n	800416a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4916      	ldr	r1, [pc, #88]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004142:	f000 f821 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x1cc>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1d0>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1d4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f866 	bl	8002234 <HAL_InitTick>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023c00 	.word	0x40023c00
 8004178:	40023800 	.word	0x40023800
 800417c:	08008888 	.word	0x08008888
 8004180:	20000014 	.word	0x20000014
 8004184:	20000018 	.word	0x20000018

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	2300      	movs	r3, #0
 800419a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d00d      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x40>
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	f200 80bd 	bhi.w	800432c <HAL_RCC_GetSysClockFreq+0x1a4>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x34>
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ba:	e0b7      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041be:	60bb      	str	r3, [r7, #8]
      break;
 80041c0:	e0b7      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041c4:	60bb      	str	r3, [r7, #8]
      break;
 80041c6:	e0b4      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c8:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041d2:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04d      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b58      	ldr	r3, [pc, #352]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	461a      	mov	r2, r3
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	ea02 0800 	and.w	r8, r2, r0
 80041f6:	ea03 0901 	and.w	r9, r3, r1
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	014b      	lsls	r3, r1, #5
 8004208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800420c:	0142      	lsls	r2, r0, #5
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	ebb0 0008 	subs.w	r0, r0, r8
 8004216:	eb61 0109 	sbc.w	r1, r1, r9
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	018b      	lsls	r3, r1, #6
 8004224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004228:	0182      	lsls	r2, r0, #6
 800422a:	1a12      	subs	r2, r2, r0
 800422c:	eb63 0301 	sbc.w	r3, r3, r1
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	00d9      	lsls	r1, r3, #3
 800423a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800423e:	00d0      	lsls	r0, r2, #3
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	eb12 0208 	adds.w	r2, r2, r8
 8004248:	eb43 0309 	adc.w	r3, r3, r9
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	0259      	lsls	r1, r3, #9
 8004256:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800425a:	0250      	lsls	r0, r2, #9
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f7fc fc66 	bl	8000b3c <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e04a      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	461a      	mov	r2, r3
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	ea02 0400 	and.w	r4, r2, r0
 8004292:	ea03 0501 	and.w	r5, r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	014b      	lsls	r3, r1, #5
 80042a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042a8:	0142      	lsls	r2, r0, #5
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	1b00      	subs	r0, r0, r4
 80042b0:	eb61 0105 	sbc.w	r1, r1, r5
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	018b      	lsls	r3, r1, #6
 80042be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042c2:	0182      	lsls	r2, r0, #6
 80042c4:	1a12      	subs	r2, r2, r0
 80042c6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	00d9      	lsls	r1, r3, #3
 80042d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d8:	00d0      	lsls	r0, r2, #3
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	1912      	adds	r2, r2, r4
 80042e0:	eb45 0303 	adc.w	r3, r5, r3
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	0299      	lsls	r1, r3, #10
 80042ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042f2:	0290      	lsls	r0, r2, #10
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	461a      	mov	r2, r3
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	f7fc fc1a 	bl	8000b3c <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	3301      	adds	r3, #1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	60bb      	str	r3, [r7, #8]
      break;
 800432a:	e002      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800432e:	60bb      	str	r3, [r7, #8]
      break;
 8004330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004332:	68bb      	ldr	r3, [r7, #8]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	00f42400 	.word	0x00f42400
 8004348:	007a1200 	.word	0x007a1200

0800434c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_GetHCLKFreq+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000014 	.word	0x20000014

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004368:	f7ff fff0 	bl	800434c <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0a9b      	lsrs	r3, r3, #10
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	08008898 	.word	0x08008898

0800438c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004390:	f7ff ffdc 	bl	800434c <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0b5b      	lsrs	r3, r3, #13
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4903      	ldr	r1, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08008898 	.word	0x08008898

080043b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d012      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a68      	ldr	r2, [pc, #416]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043e6:	6093      	str	r3, [r2, #8]
 80043e8:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	4964      	ldr	r1, [pc, #400]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800440e:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	4959      	ldr	r1, [pc, #356]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442c:	d101      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800444a:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	494a      	ldr	r1, [pc, #296]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004468:	d101      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 808b 	beq.w	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6413      	str	r3, [r2, #64]	; 0x40
 80044a4:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b0:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a34      	ldr	r2, [pc, #208]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fd fefe 	bl	80022bc <HAL_GetTick>
 80044c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c4:	f7fd fefa 	bl	80022bc <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e357      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044d6:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e2:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d035      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d02e      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004500:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d114      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd fec2 	bl	80022bc <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd febe 	bl	80022bc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e319      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456a:	d111      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800457a:	400b      	ands	r3, r1
 800457c:	4901      	ldr	r1, [pc, #4]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
 8004582:	e00b      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004584:	40023800 	.word	0x40023800
 8004588:	40007000 	.word	0x40007000
 800458c:	0ffffcff 	.word	0x0ffffcff
 8004590:	4bb1      	ldr	r3, [pc, #708]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4ab0      	ldr	r2, [pc, #704]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	4bae      	ldr	r3, [pc, #696]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800459e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	49ab      	ldr	r1, [pc, #684]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d010      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ba:	4ba7      	ldr	r3, [pc, #668]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	4aa5      	ldr	r2, [pc, #660]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ca:	4ba3      	ldr	r3, [pc, #652]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	49a0      	ldr	r1, [pc, #640]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e8:	4b9b      	ldr	r3, [pc, #620]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f6:	4998      	ldr	r1, [pc, #608]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460a:	4b93      	ldr	r3, [pc, #588]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004618:	498f      	ldr	r1, [pc, #572]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800462c:	4b8a      	ldr	r3, [pc, #552]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463a:	4987      	ldr	r1, [pc, #540]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464e:	4b82      	ldr	r3, [pc, #520]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	497e      	ldr	r1, [pc, #504]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004670:	4b79      	ldr	r3, [pc, #484]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4976      	ldr	r1, [pc, #472]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004692:	4b71      	ldr	r3, [pc, #452]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f023 020c 	bic.w	r2, r3, #12
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a0:	496d      	ldr	r1, [pc, #436]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046b4:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	4965      	ldr	r1, [pc, #404]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d6:	4b60      	ldr	r3, [pc, #384]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	495c      	ldr	r1, [pc, #368]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046f8:	4b57      	ldr	r3, [pc, #348]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	4954      	ldr	r1, [pc, #336]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800471a:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	494b      	ldr	r1, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800473c:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	4943      	ldr	r1, [pc, #268]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476c:	493a      	ldr	r1, [pc, #232]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004780:	4b35      	ldr	r3, [pc, #212]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	4932      	ldr	r1, [pc, #200]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d011      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b0:	4929      	ldr	r1, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c0:	d101      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	4919      	ldr	r1, [pc, #100]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004804:	4b14      	ldr	r3, [pc, #80]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004814:	4910      	ldr	r1, [pc, #64]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d006      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80d9 	beq.w	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a08      	ldr	r2, [pc, #32]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800483a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fd fd3e 	bl	80022bc <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004842:	e00b      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004844:	f7fd fd3a 	bl	80022bc <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d904      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e197      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800485c:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ed      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d021      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11d      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800487c:	4b64      	ldr	r3, [pc, #400]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800488a:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	019a      	lsls	r2, r3, #6
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	071b      	lsls	r3, r3, #28
 80048b0:	4957      	ldr	r1, [pc, #348]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02e      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e2:	d129      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048e4:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f2:	4b47      	ldr	r3, [pc, #284]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	0f1b      	lsrs	r3, r3, #28
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	019a      	lsls	r2, r3, #6
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	071b      	lsls	r3, r3, #28
 8004918:	493d      	ldr	r1, [pc, #244]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004920:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004926:	f023 021f 	bic.w	r2, r3, #31
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	3b01      	subs	r3, #1
 8004930:	4937      	ldr	r1, [pc, #220]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494a:	0e1b      	lsrs	r3, r3, #24
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004952:	4b2f      	ldr	r3, [pc, #188]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004958:	0f1b      	lsrs	r3, r3, #28
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	019a      	lsls	r2, r3, #6
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	431a      	orrs	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	071b      	lsls	r3, r3, #28
 8004978:	4925      	ldr	r1, [pc, #148]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d011      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	071b      	lsls	r3, r3, #28
 80049a8:	4919      	ldr	r1, [pc, #100]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049bc:	f7fd fc7e 	bl	80022bc <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c4:	f7fd fc7a 	bl	80022bc <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0d7      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 80cd 	bne.w	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f6:	f7fd fc61 	bl	80022bc <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049fe:	f7fd fc5d 	bl	80022bc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b64      	cmp	r3, #100	; 0x64
 8004a0a:	d903      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0ba      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a14:	4b5e      	ldr	r3, [pc, #376]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d0ed      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02e      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d12a      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a4a:	4b51      	ldr	r3, [pc, #324]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a58:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	0f1b      	lsrs	r3, r3, #28
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	019a      	lsls	r2, r3, #6
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	4944      	ldr	r1, [pc, #272]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a86:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	3b01      	subs	r3, #1
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	493d      	ldr	r1, [pc, #244]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab4:	d11d      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	4929      	ldr	r1, [pc, #164]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d028      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	431a      	orrs	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4911      	ldr	r1, [pc, #68]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fbae 	bl	80022bc <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b64:	f7fd fbaa 	bl	80022bc <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e007      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b82:	d1ef      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e049      	b.n	8004c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd f988 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f001 f8ec 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e054      	b.n	8004d06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <HAL_TIM_Base_Start_IT+0xe8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d115      	bne.n	8004cf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_TIM_Base_Start_IT+0xec>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d015      	beq.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d011      	beq.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40001800 	.word	0x40001800
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e049      	b.n	8004dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f841 	bl	8004de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f001 f81c 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x24>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e03c      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d109      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x3e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e02f      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d109      	bne.n	8004e50 <HAL_TIM_PWM_Start+0x58>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e022      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d109      	bne.n	8004e6a <HAL_TIM_PWM_Start+0x72>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	bf14      	ite	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	2300      	moveq	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	e015      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d109      	bne.n	8004e84 <HAL_TIM_PWM_Start+0x8c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e008      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e092      	b.n	8004fc4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0xb6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	e023      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xc6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebc:	e01b      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_PWM_Start+0xd6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0xe6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xf6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 fc18 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <HAL_TIM_PWM_Start+0x1d4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_TIM_PWM_Start+0x120>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <HAL_TIM_PWM_Start+0x1d8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_TIM_PWM_Start+0x124>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_TIM_PWM_Start+0x126>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <HAL_TIM_PWM_Start+0x1d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a22      	ldr	r2, [pc, #136]	; (8004fd4 <HAL_TIM_PWM_Start+0x1dc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <HAL_TIM_PWM_Start+0x1e0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <HAL_TIM_PWM_Start+0x1e4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_PWM_Start+0x1d8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIM_PWM_Start+0x1e8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x18a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_PWM_Start+0x1ec>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d115      	bne.n	8004fae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <HAL_TIM_PWM_Start+0x1f0>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d015      	beq.n	8004fc0 <HAL_TIM_PWM_Start+0x1c8>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9a:	d011      	beq.n	8004fc0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	e008      	b.n	8004fc0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40001800 	.word	0x40001800
 8004fe8:	00010007 	.word	0x00010007

08004fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e049      	b.n	8005092 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f841 	bl	800509a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 fec0 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_IC_Start_IT+0x1e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	e023      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x66>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0x2e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e01b      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x66>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0x3e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e013      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x66>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0x4e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e00b      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x66>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b10      	cmp	r3, #16
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0x5e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e003      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x66>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005114:	b2db      	uxtb	r3, r3
 8005116:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_TIM_IC_Start_IT+0x78>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e013      	b.n	8005150 <HAL_TIM_IC_Start_IT+0xa0>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d104      	bne.n	8005138 <HAL_TIM_IC_Start_IT+0x88>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e00b      	b.n	8005150 <HAL_TIM_IC_Start_IT+0xa0>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d104      	bne.n	8005148 <HAL_TIM_IC_Start_IT+0x98>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e003      	b.n	8005150 <HAL_TIM_IC_Start_IT+0xa0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800514e:	b2db      	uxtb	r3, r3
 8005150:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005158:	7b7b      	ldrb	r3, [r7, #13]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0e2      	b.n	8005328 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <HAL_TIM_IC_Start_IT+0xc2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	e023      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x10a>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Start_IT+0xd2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005180:	e01b      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x10a>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Start_IT+0xe2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005190:	e013      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x10a>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_IC_Start_IT+0xf2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x10a>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_IC_Start_IT+0x102>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b0:	e003      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x10a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_TIM_IC_Start_IT+0x11a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	e013      	b.n	80051f2 <HAL_TIM_IC_Start_IT+0x142>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d104      	bne.n	80051da <HAL_TIM_IC_Start_IT+0x12a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	e00b      	b.n	80051f2 <HAL_TIM_IC_Start_IT+0x142>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d104      	bne.n	80051ea <HAL_TIM_IC_Start_IT+0x13a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e8:	e003      	b.n	80051f2 <HAL_TIM_IC_Start_IT+0x142>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	d841      	bhi.n	800527c <HAL_TIM_IC_Start_IT+0x1cc>
 80051f8:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <HAL_TIM_IC_Start_IT+0x150>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005235 	.word	0x08005235
 8005204:	0800527d 	.word	0x0800527d
 8005208:	0800527d 	.word	0x0800527d
 800520c:	0800527d 	.word	0x0800527d
 8005210:	08005247 	.word	0x08005247
 8005214:	0800527d 	.word	0x0800527d
 8005218:	0800527d 	.word	0x0800527d
 800521c:	0800527d 	.word	0x0800527d
 8005220:	08005259 	.word	0x08005259
 8005224:	0800527d 	.word	0x0800527d
 8005228:	0800527d 	.word	0x0800527d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800526b 	.word	0x0800526b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0202 	orr.w	r2, r2, #2
 8005242:	60da      	str	r2, [r3, #12]
      break;
 8005244:	e01d      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0204 	orr.w	r2, r2, #4
 8005254:	60da      	str	r2, [r3, #12]
      break;
 8005256:	e014      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	60da      	str	r2, [r3, #12]
      break;
 8005268:	e00b      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0210 	orr.w	r2, r2, #16
 8005278:	60da      	str	r2, [r3, #12]
      break;
 800527a:	e002      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	bf00      	nop
  }

  if (status == HAL_OK)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d14e      	bne.n	8005326 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f001 fa4f 	bl	8006734 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a25      	ldr	r2, [pc, #148]	; (8005330 <HAL_TIM_IC_Start_IT+0x280>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d01d      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <HAL_TIM_IC_Start_IT+0x284>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_TIM_IC_Start_IT+0x288>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_TIM_IC_Start_IT+0x28c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_TIM_IC_Start_IT+0x290>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_TIM_IC_Start_IT+0x294>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_TIM_IC_Start_IT+0x236>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_TIM_IC_Start_IT+0x298>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d115      	bne.n	8005312 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	4b17      	ldr	r3, [pc, #92]	; (800534c <HAL_TIM_IC_Start_IT+0x29c>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d015      	beq.n	8005324 <HAL_TIM_IC_Start_IT+0x274>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d011      	beq.n	8005324 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005310:	e008      	b.n	8005324 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e000      	b.n	8005326 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005324:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40010400 	.word	0x40010400
 8005344:	40014000 	.word	0x40014000
 8005348:	40001800 	.word	0x40001800
 800534c:	00010007 	.word	0x00010007

08005350 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e08f      	b.n	8005484 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc fe0f 	bl	8001f9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b3e      	ldr	r3, [pc, #248]	; (800548c <HAL_TIM_Encoder_Init+0x13c>)
 8005392:	400b      	ands	r3, r1
 8005394:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 fd05 	bl	8005db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_TIM_Encoder_Init+0x140>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	4313      	orrs	r3, r2
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_TIM_Encoder_Init+0x144>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <HAL_TIM_Encoder_Init+0x148>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	4313      	orrs	r3, r2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	011a      	lsls	r2, r3, #4
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	031b      	lsls	r3, r3, #12
 8005410:	4313      	orrs	r3, r2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	4313      	orrs	r3, r2
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	fffebff8 	.word	0xfffebff8
 8005490:	fffffcfc 	.word	0xfffffcfc
 8005494:	fffff3f3 	.word	0xfffff3f3
 8005498:	ffff0f0f 	.word	0xffff0f0f

0800549c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d102      	bne.n	80054d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054d2:	7b7b      	ldrb	r3, [r7, #13]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d001      	beq.n	80054dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e069      	b.n	80055b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ec:	e031      	b.n	8005552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d110      	bne.n	8005516 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d102      	bne.n	8005500 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054fa:	7b3b      	ldrb	r3, [r7, #12]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d001      	beq.n	8005504 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e055      	b.n	80055b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005514:	e01d      	b.n	8005552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d108      	bne.n	800552e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	7b7b      	ldrb	r3, [r7, #13]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005528:	7b3b      	ldrb	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e03e      	b.n	80055b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_TIM_Encoder_Start+0xc4>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b04      	cmp	r3, #4
 800555c:	d008      	beq.n	8005570 <HAL_TIM_Encoder_Start+0xd4>
 800555e:	e00f      	b.n	8005580 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2201      	movs	r2, #1
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f001 f8e3 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 800556e:	e016      	b.n	800559e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	2104      	movs	r1, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f001 f8db 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 800557e:	e00e      	b.n	800559e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2201      	movs	r2, #1
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f8d3 	bl	8006734 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2201      	movs	r2, #1
 8005594:	2104      	movs	r1, #4
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f8cc 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 800559c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0202 	mvn.w	r2, #2
 80055e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb ff78 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fbb6 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fbbd 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0204 	mvn.w	r2, #4
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fb ff4e 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fb8c 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fb93 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0208 	mvn.w	r2, #8
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2204      	movs	r2, #4
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fb ff24 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb62 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb69 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0210 	mvn.w	r2, #16
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2208      	movs	r2, #8
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fb fefa 	bl	80014f0 <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb38 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb3f 	bl	8005d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0201 	mvn.w	r2, #1
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fb ff9e 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 f922 	bl	80069ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005776:	d10e      	bne.n	8005796 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b80      	cmp	r3, #128	; 0x80
 8005784:	d107      	bne.n	8005796 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 f915 	bl	80069c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 faed 	bl	8005d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d10e      	bne.n	80057ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0220 	mvn.w	r2, #32
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 f8d5 	bl	8006998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005810:	2302      	movs	r3, #2
 8005812:	e088      	b.n	8005926 <HAL_TIM_IC_ConfigChannel+0x130>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11b      	bne.n	800585a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fdbb 	bl	80063ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 020c 	bic.w	r2, r2, #12
 8005844:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6999      	ldr	r1, [r3, #24]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
 8005858:	e060      	b.n	800591c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d11c      	bne.n	800589a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f000 fe3f 	bl	80064f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005882:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	021a      	lsls	r2, r3, #8
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	619a      	str	r2, [r3, #24]
 8005898:	e040      	b.n	800591c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d11b      	bne.n	80058d8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6819      	ldr	r1, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f000 fe8c 	bl	80065cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 020c 	bic.w	r2, r2, #12
 80058c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69d9      	ldr	r1, [r3, #28]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
 80058d6:	e021      	b.n	800591c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d11c      	bne.n	8005918 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f000 fea9 	bl	8006644 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005900:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69d9      	ldr	r1, [r3, #28]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	021a      	lsls	r2, r3, #8
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	61da      	str	r2, [r3, #28]
 8005916:	e001      	b.n	800591c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e0ff      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b14      	cmp	r3, #20
 800595a:	f200 80f0 	bhi.w	8005b3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005b3f 	.word	0x08005b3f
 800596c:	08005b3f 	.word	0x08005b3f
 8005970:	08005b3f 	.word	0x08005b3f
 8005974:	080059f9 	.word	0x080059f9
 8005978:	08005b3f 	.word	0x08005b3f
 800597c:	08005b3f 	.word	0x08005b3f
 8005980:	08005b3f 	.word	0x08005b3f
 8005984:	08005a3b 	.word	0x08005a3b
 8005988:	08005b3f 	.word	0x08005b3f
 800598c:	08005b3f 	.word	0x08005b3f
 8005990:	08005b3f 	.word	0x08005b3f
 8005994:	08005a7b 	.word	0x08005a7b
 8005998:	08005b3f 	.word	0x08005b3f
 800599c:	08005b3f 	.word	0x08005b3f
 80059a0:	08005b3f 	.word	0x08005b3f
 80059a4:	08005abd 	.word	0x08005abd
 80059a8:	08005b3f 	.word	0x08005b3f
 80059ac:	08005b3f 	.word	0x08005b3f
 80059b0:	08005b3f 	.word	0x08005b3f
 80059b4:	08005afd 	.word	0x08005afd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fa96 	bl	8005ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	619a      	str	r2, [r3, #24]
      break;
 80059f6:	e0a5      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fae8 	bl	8005fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
      break;
 8005a38:	e084      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fb3f 	bl	80060c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0208 	orr.w	r2, r2, #8
 8005a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
      break;
 8005a78:	e064      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fb95 	bl	80061b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	021a      	lsls	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
      break;
 8005aba:	e043      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fbcc 	bl	8006260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0204 	bic.w	r2, r2, #4
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005afa:	e023      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fbfe 	bl	8006304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b3c:	e002      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
      break;
 8005b42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0b4      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x186>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	4b56      	ldr	r3, [pc, #344]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x190>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d03e      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0xd4>
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	f200 8087 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	f000 8086 	beq.w	8005cca <HAL_TIM_ConfigClockSource+0x172>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d87f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d01a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0xa6>
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d87b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d050      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x11a>
 8005bd0:	2b60      	cmp	r3, #96	; 0x60
 8005bd2:	d877      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d03c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xfa>
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d873      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d058      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x13a>
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d86f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d064      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d86b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d060      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d867      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d05a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	e062      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f000 fd71 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	609a      	str	r2, [r3, #8]
      break;
 8005c2a:	e04f      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6899      	ldr	r1, [r3, #8]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f000 fd5a 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4e:	609a      	str	r2, [r3, #8]
      break;
 8005c50:	e03c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f000 fc18 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2150      	movs	r1, #80	; 0x50
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fd27 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005c70:	e02c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 fc74 	bl	800656c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2160      	movs	r1, #96	; 0x60
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fd17 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005c90:	e01c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 fbf8 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fd07 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 fcfe 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	fffeff88 	.word	0xfffeff88

08005cec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	d831      	bhi.n	8005d64 <HAL_TIM_ReadCapturedValue+0x78>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d65 	.word	0x08005d65
 8005d20:	08005d65 	.word	0x08005d65
 8005d24:	08005d65 	.word	0x08005d65
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d5b 	.word	0x08005d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	60fb      	str	r3, [r7, #12]

      break;
 8005d44:	e00f      	b.n	8005d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	60fb      	str	r3, [r7, #12]

      break;
 8005d4e:	e00a      	b.n	8005d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	60fb      	str	r3, [r7, #12]

      break;
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	60fb      	str	r3, [r7, #12]

      break;
 8005d62:	e000      	b.n	8005d66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d64:	bf00      	nop
  }

  return tmpreg;
 8005d66:	68fb      	ldr	r3, [r7, #12]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d013      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d00f      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3d      	ldr	r2, [pc, #244]	; (8005ec8 <TIM_Base_SetConfig+0x118>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <TIM_Base_SetConfig+0x11c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <TIM_Base_SetConfig+0x120>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3a      	ldr	r2, [pc, #232]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e10:	d027      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2c      	ldr	r2, [pc, #176]	; (8005ec8 <TIM_Base_SetConfig+0x118>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d023      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <TIM_Base_SetConfig+0x11c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <TIM_Base_SetConfig+0x120>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a29      	ldr	r2, [pc, #164]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d017      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <TIM_Base_SetConfig+0x128>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a27      	ldr	r2, [pc, #156]	; (8005edc <TIM_Base_SetConfig+0x12c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <TIM_Base_SetConfig+0x130>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <TIM_Base_SetConfig+0x134>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <TIM_Base_SetConfig+0x138>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a23      	ldr	r2, [pc, #140]	; (8005eec <TIM_Base_SetConfig+0x13c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d108      	bne.n	8005e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <TIM_Base_SetConfig+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d103      	bne.n	8005eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800
 8005ee4:	40001800 	.word	0x40001800
 8005ee8:	40001c00 	.word	0x40001c00
 8005eec:	40002000 	.word	0x40002000

08005ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <TIM_OC1_SetConfig+0xd8>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 0302 	bic.w	r3, r3, #2
 8005f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <TIM_OC1_SetConfig+0xdc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_OC1_SetConfig+0x64>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a20      	ldr	r2, [pc, #128]	; (8005fd0 <TIM_OC1_SetConfig+0xe0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d10c      	bne.n	8005f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0308 	bic.w	r3, r3, #8
 8005f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 0304 	bic.w	r3, r3, #4
 8005f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <TIM_OC1_SetConfig+0xdc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC1_SetConfig+0x8e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <TIM_OC1_SetConfig+0xe0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d111      	bne.n	8005fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	fffeff8f 	.word	0xfffeff8f
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40010400 	.word	0x40010400

08005fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0210 	bic.w	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <TIM_OC2_SetConfig+0xe4>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0320 	bic.w	r3, r3, #32
 800601e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a23      	ldr	r2, [pc, #140]	; (80060bc <TIM_OC2_SetConfig+0xe8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC2_SetConfig+0x68>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <TIM_OC2_SetConfig+0xec>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10d      	bne.n	8006058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <TIM_OC2_SetConfig+0xe8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC2_SetConfig+0x94>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <TIM_OC2_SetConfig+0xec>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d113      	bne.n	8006090 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800606e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	feff8fff 	.word	0xfeff8fff
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <TIM_OC3_SetConfig+0xe0>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <TIM_OC3_SetConfig+0xe4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC3_SetConfig+0x66>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a21      	ldr	r2, [pc, #132]	; (80061ac <TIM_OC3_SetConfig+0xe8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <TIM_OC3_SetConfig+0xe4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC3_SetConfig+0x92>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <TIM_OC3_SetConfig+0xe8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d113      	bne.n	800617e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	621a      	str	r2, [r3, #32]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	fffeff8f 	.word	0xfffeff8f
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400

080061b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <TIM_OC4_SetConfig+0xa4>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a13      	ldr	r2, [pc, #76]	; (8006258 <TIM_OC4_SetConfig+0xa8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC4_SetConfig+0x68>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <TIM_OC4_SetConfig+0xac>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d109      	bne.n	800622c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800621e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	019b      	lsls	r3, r3, #6
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	feff8fff 	.word	0xfeff8fff
 8006258:	40010000 	.word	0x40010000
 800625c:	40010400 	.word	0x40010400

08006260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <TIM_OC5_SetConfig+0x98>)
 800628c:	4013      	ands	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a12      	ldr	r2, [pc, #72]	; (80062fc <TIM_OC5_SetConfig+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC5_SetConfig+0x5e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <TIM_OC5_SetConfig+0xa0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d109      	bne.n	80062d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	fffeff8f 	.word	0xfffeff8f
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400

08006304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <TIM_OC6_SetConfig+0x9c>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <TIM_OC6_SetConfig+0xa0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_OC6_SetConfig+0x60>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a12      	ldr	r2, [pc, #72]	; (80063a8 <TIM_OC6_SetConfig+0xa4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800636a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	feff8fff 	.word	0xfeff8fff
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400

080063ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a28      	ldr	r2, [pc, #160]	; (8006478 <TIM_TI1_SetConfig+0xcc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01b      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e0:	d017      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a25      	ldr	r2, [pc, #148]	; (800647c <TIM_TI1_SetConfig+0xd0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a24      	ldr	r2, [pc, #144]	; (8006480 <TIM_TI1_SetConfig+0xd4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00f      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4a23      	ldr	r2, [pc, #140]	; (8006484 <TIM_TI1_SetConfig+0xd8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a22      	ldr	r2, [pc, #136]	; (8006488 <TIM_TI1_SetConfig+0xdc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <TIM_TI1_SetConfig+0xe0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_TI1_SetConfig+0x66>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <TIM_TI1_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <TIM_TI1_SetConfig+0x6a>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <TIM_TI1_SetConfig+0x6c>
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e003      	b.n	8006436 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800643c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	b2db      	uxtb	r3, r3
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f023 030a 	bic.w	r3, r3, #10
 8006450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 030a 	and.w	r3, r3, #10
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40010000 	.word	0x40010000
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40010400 	.word	0x40010400
 800648c:	40014000 	.word	0x40014000
 8006490:	40001800 	.word	0x40001800

08006494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 030a 	bic.w	r3, r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f023 0210 	bic.w	r2, r3, #16
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	b29b      	uxth	r3, r3
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006544:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f023 0210 	bic.w	r2, r3, #16
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	031b      	lsls	r3, r3, #12
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0303 	bic.w	r3, r3, #3
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006608:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	b2db      	uxtb	r3, r3
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800661c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006682:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	031b      	lsls	r3, r3, #12
 8006688:	b29b      	uxth	r3, r3
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006696:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	031b      	lsls	r3, r3, #12
 800669c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006794:	2302      	movs	r3, #2
 8006796:	e06d      	b.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a30      	ldr	r2, [pc, #192]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d004      	beq.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2f      	ldr	r2, [pc, #188]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a20      	ldr	r2, [pc, #128]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680a:	d01d      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1c      	ldr	r2, [pc, #112]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1a      	ldr	r2, [pc, #104]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a16      	ldr	r2, [pc, #88]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10c      	bne.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	4313      	orrs	r3, r2
 8006858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	40010000 	.word	0x40010000
 8006884:	40010400 	.word	0x40010400
 8006888:	40000400 	.word	0x40000400
 800688c:	40000800 	.word	0x40000800
 8006890:	40000c00 	.word	0x40000c00
 8006894:	40014000 	.word	0x40014000
 8006898:	40001800 	.word	0x40001800

0800689c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e065      	b.n	8006984 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	041b      	lsls	r3, r3, #16
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d115      	bne.n	8006972 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	051b      	lsls	r3, r3, #20
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e040      	b.n	8006a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb fb9a 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	; 0x24
 8006a00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fbf8 	bl	8007208 <UART_SetConfig>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e022      	b.n	8006a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fe4e 	bl	80076cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fed5 	bl	8007810 <UART_CheckIdleState>
 8006a66:	4603      	mov	r3, r0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	f040 8081 	bne.w	8006b8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_UART_Transmit+0x26>
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e079      	b.n	8006b8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UART_Transmit+0x38>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e072      	b.n	8006b8e <HAL_UART_Transmit+0x11e>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2221      	movs	r2, #33	; 0x21
 8006abc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006abe:	f7fb fbfd 	bl	80022bc <HAL_GetTick>
 8006ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d108      	bne.n	8006af0 <HAL_UART_Transmit+0x80>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e003      	b.n	8006af8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b00:	e02c      	b.n	8006b5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 feb2 	bl	8007876 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e038      	b.n	8006b8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	3302      	adds	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e007      	b.n	8006b4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1cc      	bne.n	8006b02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fe7f 	bl	8007876 <UART_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e005      	b.n	8006b8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b08a      	sub	sp, #40	; 0x28
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d13d      	bne.n	8006c28 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_UART_Receive_IT+0x22>
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e036      	b.n	8006c2a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Receive_IT+0x34>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e02f      	b.n	8006c2a <HAL_UART_Receive_IT+0x94>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e6      	bne.n	8006be6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 feee 	bl	8007a00 <UART_Start_Receive_IT>
 8006c24:	4603      	mov	r3, r0
 8006c26:	e000      	b.n	8006c2a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b0ba      	sub	sp, #232	; 0xe8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c62:	4013      	ands	r3, r2
 8006c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d115      	bne.n	8006c9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 828f 	beq.w	80071b0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
      }
      return;
 8006c9a:	e289      	b.n	80071b0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8117 	beq.w	8006ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cb6:	4b85      	ldr	r3, [pc, #532]	; (8006ecc <HAL_UART_IRQHandler+0x298>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 810a 	beq.w	8006ed4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d011      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xbc>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d011      	beq.n	8006d20 <HAL_UART_IRQHandler+0xec>
 8006cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_UART_IRQHandler+0x11c>
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d105      	bne.n	8006d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d82:	f043 0208 	orr.w	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <HAL_UART_IRQHandler+0x18a>
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00c      	beq.n	8006dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 81f5 	beq.w	80071b4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00d      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d04f      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 febc 	bl	8007b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d141      	bne.n	8006eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1d9      	bne.n	8006e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d013      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <HAL_UART_IRQHandler+0x29c>)
 8006e84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb ffc1 	bl	8002e12 <HAL_DMA_Abort_IT>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d017      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea4:	e00f      	b.n	8006ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f998 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	e00b      	b.n	8006ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f994 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb4:	e007      	b.n	8006ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f990 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ec4:	e176      	b.n	80071b4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec6:	bf00      	nop
    return;
 8006ec8:	e174      	b.n	80071b4 <HAL_UART_IRQHandler+0x580>
 8006eca:	bf00      	nop
 8006ecc:	04000120 	.word	0x04000120
 8006ed0:	08007c5b 	.word	0x08007c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f040 8144 	bne.w	8007166 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 813d 	beq.w	8007166 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8136 	beq.w	8007166 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2210      	movs	r2, #16
 8006f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	f040 80b2 	bne.w	8007076 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8148 	beq.w	80071b8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f32:	429a      	cmp	r2, r3
 8006f34:	f080 8140 	bcs.w	80071b8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	f000 8085 	beq.w	800705a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1da      	bne.n	8006f50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fac:	f023 0301 	bic.w	r3, r3, #1
 8006fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e1      	bne.n	8006f9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e3      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800703c:	65bb      	str	r3, [r7, #88]	; 0x58
 800703e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e4      	bne.n	800701a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	4618      	mov	r0, r3
 8007056:	f7fb fe6c 	bl	8002d32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007066:	b29b      	uxth	r3, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8be 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007074:	e0a0      	b.n	80071b8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007082:	b29b      	uxth	r3, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007090:	b29b      	uxth	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8092 	beq.w	80071bc <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 808d 	beq.w	80071bc <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070c4:	647b      	str	r3, [r7, #68]	; 0x44
 80070c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e4      	bne.n	80070a2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	623b      	str	r3, [r7, #32]
   return(result);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070fc:	633a      	str	r2, [r7, #48]	; 0x30
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e3      	bne.n	80070d8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	69b9      	ldr	r1, [r7, #24]
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	617b      	str	r3, [r7, #20]
   return(result);
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e4      	bne.n	8007122 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f846 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007164:	e02a      	b.n	80071bc <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	2b00      	cmp	r3, #0
 800717c:	d008      	beq.n	8007190 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01c      	beq.n	80071c0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
    }
    return;
 800718e:	e017      	b.n	80071c0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_UART_IRQHandler+0x58e>
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fd6c 	bl	8007c86 <UART_EndTransmit_IT>
    return;
 80071ae:	e008      	b.n	80071c2 <HAL_UART_IRQHandler+0x58e>
      return;
 80071b0:	bf00      	nop
 80071b2:	e006      	b.n	80071c2 <HAL_UART_IRQHandler+0x58e>
    return;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <HAL_UART_IRQHandler+0x58e>
      return;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <HAL_UART_IRQHandler+0x58e>
      return;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <HAL_UART_IRQHandler+0x58e>
    return;
 80071c0:	bf00      	nop
  }

}
 80071c2:	37e8      	adds	r7, #232	; 0xe8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4ba7      	ldr	r3, [pc, #668]	; (80074d0 <UART_SetConfig+0x2c8>)
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	430b      	orrs	r3, r1
 800723e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	430a      	orrs	r2, r1
 8007278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a95      	ldr	r2, [pc, #596]	; (80074d4 <UART_SetConfig+0x2cc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d120      	bne.n	80072c6 <UART_SetConfig+0xbe>
 8007284:	4b94      	ldr	r3, [pc, #592]	; (80074d8 <UART_SetConfig+0x2d0>)
 8007286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b03      	cmp	r3, #3
 8007290:	d816      	bhi.n	80072c0 <UART_SetConfig+0xb8>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0x90>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072af 	.word	0x080072af
 80072a4:	080072bb 	.word	0x080072bb
 80072a8:	2301      	movs	r3, #1
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e14f      	b.n	800754e <UART_SetConfig+0x346>
 80072ae:	2302      	movs	r3, #2
 80072b0:	77fb      	strb	r3, [r7, #31]
 80072b2:	e14c      	b.n	800754e <UART_SetConfig+0x346>
 80072b4:	2304      	movs	r3, #4
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e149      	b.n	800754e <UART_SetConfig+0x346>
 80072ba:	2308      	movs	r3, #8
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e146      	b.n	800754e <UART_SetConfig+0x346>
 80072c0:	2310      	movs	r3, #16
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e143      	b.n	800754e <UART_SetConfig+0x346>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a84      	ldr	r2, [pc, #528]	; (80074dc <UART_SetConfig+0x2d4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d132      	bne.n	8007336 <UART_SetConfig+0x12e>
 80072d0:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <UART_SetConfig+0x2d0>)
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f003 030c 	and.w	r3, r3, #12
 80072da:	2b0c      	cmp	r3, #12
 80072dc:	d828      	bhi.n	8007330 <UART_SetConfig+0x128>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0xdc>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007319 	.word	0x08007319
 80072e8:	08007331 	.word	0x08007331
 80072ec:	08007331 	.word	0x08007331
 80072f0:	08007331 	.word	0x08007331
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007331 	.word	0x08007331
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007331 	.word	0x08007331
 8007304:	0800731f 	.word	0x0800731f
 8007308:	08007331 	.word	0x08007331
 800730c:	08007331 	.word	0x08007331
 8007310:	08007331 	.word	0x08007331
 8007314:	0800732b 	.word	0x0800732b
 8007318:	2300      	movs	r3, #0
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e117      	b.n	800754e <UART_SetConfig+0x346>
 800731e:	2302      	movs	r3, #2
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e114      	b.n	800754e <UART_SetConfig+0x346>
 8007324:	2304      	movs	r3, #4
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e111      	b.n	800754e <UART_SetConfig+0x346>
 800732a:	2308      	movs	r3, #8
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e10e      	b.n	800754e <UART_SetConfig+0x346>
 8007330:	2310      	movs	r3, #16
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e10b      	b.n	800754e <UART_SetConfig+0x346>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a69      	ldr	r2, [pc, #420]	; (80074e0 <UART_SetConfig+0x2d8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d120      	bne.n	8007382 <UART_SetConfig+0x17a>
 8007340:	4b65      	ldr	r3, [pc, #404]	; (80074d8 <UART_SetConfig+0x2d0>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800734a:	2b30      	cmp	r3, #48	; 0x30
 800734c:	d013      	beq.n	8007376 <UART_SetConfig+0x16e>
 800734e:	2b30      	cmp	r3, #48	; 0x30
 8007350:	d814      	bhi.n	800737c <UART_SetConfig+0x174>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d009      	beq.n	800736a <UART_SetConfig+0x162>
 8007356:	2b20      	cmp	r3, #32
 8007358:	d810      	bhi.n	800737c <UART_SetConfig+0x174>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <UART_SetConfig+0x15c>
 800735e:	2b10      	cmp	r3, #16
 8007360:	d006      	beq.n	8007370 <UART_SetConfig+0x168>
 8007362:	e00b      	b.n	800737c <UART_SetConfig+0x174>
 8007364:	2300      	movs	r3, #0
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e0f1      	b.n	800754e <UART_SetConfig+0x346>
 800736a:	2302      	movs	r3, #2
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	e0ee      	b.n	800754e <UART_SetConfig+0x346>
 8007370:	2304      	movs	r3, #4
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e0eb      	b.n	800754e <UART_SetConfig+0x346>
 8007376:	2308      	movs	r3, #8
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e0e8      	b.n	800754e <UART_SetConfig+0x346>
 800737c:	2310      	movs	r3, #16
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e0e5      	b.n	800754e <UART_SetConfig+0x346>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a57      	ldr	r2, [pc, #348]	; (80074e4 <UART_SetConfig+0x2dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d120      	bne.n	80073ce <UART_SetConfig+0x1c6>
 800738c:	4b52      	ldr	r3, [pc, #328]	; (80074d8 <UART_SetConfig+0x2d0>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007396:	2bc0      	cmp	r3, #192	; 0xc0
 8007398:	d013      	beq.n	80073c2 <UART_SetConfig+0x1ba>
 800739a:	2bc0      	cmp	r3, #192	; 0xc0
 800739c:	d814      	bhi.n	80073c8 <UART_SetConfig+0x1c0>
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d009      	beq.n	80073b6 <UART_SetConfig+0x1ae>
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d810      	bhi.n	80073c8 <UART_SetConfig+0x1c0>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <UART_SetConfig+0x1a8>
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d006      	beq.n	80073bc <UART_SetConfig+0x1b4>
 80073ae:	e00b      	b.n	80073c8 <UART_SetConfig+0x1c0>
 80073b0:	2300      	movs	r3, #0
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e0cb      	b.n	800754e <UART_SetConfig+0x346>
 80073b6:	2302      	movs	r3, #2
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e0c8      	b.n	800754e <UART_SetConfig+0x346>
 80073bc:	2304      	movs	r3, #4
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e0c5      	b.n	800754e <UART_SetConfig+0x346>
 80073c2:	2308      	movs	r3, #8
 80073c4:	77fb      	strb	r3, [r7, #31]
 80073c6:	e0c2      	b.n	800754e <UART_SetConfig+0x346>
 80073c8:	2310      	movs	r3, #16
 80073ca:	77fb      	strb	r3, [r7, #31]
 80073cc:	e0bf      	b.n	800754e <UART_SetConfig+0x346>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a45      	ldr	r2, [pc, #276]	; (80074e8 <UART_SetConfig+0x2e0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d125      	bne.n	8007424 <UART_SetConfig+0x21c>
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <UART_SetConfig+0x2d0>)
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e6:	d017      	beq.n	8007418 <UART_SetConfig+0x210>
 80073e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ec:	d817      	bhi.n	800741e <UART_SetConfig+0x216>
 80073ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f2:	d00b      	beq.n	800740c <UART_SetConfig+0x204>
 80073f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f8:	d811      	bhi.n	800741e <UART_SetConfig+0x216>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <UART_SetConfig+0x1fe>
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007402:	d006      	beq.n	8007412 <UART_SetConfig+0x20a>
 8007404:	e00b      	b.n	800741e <UART_SetConfig+0x216>
 8007406:	2300      	movs	r3, #0
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e0a0      	b.n	800754e <UART_SetConfig+0x346>
 800740c:	2302      	movs	r3, #2
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e09d      	b.n	800754e <UART_SetConfig+0x346>
 8007412:	2304      	movs	r3, #4
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e09a      	b.n	800754e <UART_SetConfig+0x346>
 8007418:	2308      	movs	r3, #8
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e097      	b.n	800754e <UART_SetConfig+0x346>
 800741e:	2310      	movs	r3, #16
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e094      	b.n	800754e <UART_SetConfig+0x346>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a30      	ldr	r2, [pc, #192]	; (80074ec <UART_SetConfig+0x2e4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d125      	bne.n	800747a <UART_SetConfig+0x272>
 800742e:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <UART_SetConfig+0x2d0>)
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800743c:	d017      	beq.n	800746e <UART_SetConfig+0x266>
 800743e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007442:	d817      	bhi.n	8007474 <UART_SetConfig+0x26c>
 8007444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007448:	d00b      	beq.n	8007462 <UART_SetConfig+0x25a>
 800744a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744e:	d811      	bhi.n	8007474 <UART_SetConfig+0x26c>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <UART_SetConfig+0x254>
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d006      	beq.n	8007468 <UART_SetConfig+0x260>
 800745a:	e00b      	b.n	8007474 <UART_SetConfig+0x26c>
 800745c:	2301      	movs	r3, #1
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e075      	b.n	800754e <UART_SetConfig+0x346>
 8007462:	2302      	movs	r3, #2
 8007464:	77fb      	strb	r3, [r7, #31]
 8007466:	e072      	b.n	800754e <UART_SetConfig+0x346>
 8007468:	2304      	movs	r3, #4
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e06f      	b.n	800754e <UART_SetConfig+0x346>
 800746e:	2308      	movs	r3, #8
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e06c      	b.n	800754e <UART_SetConfig+0x346>
 8007474:	2310      	movs	r3, #16
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e069      	b.n	800754e <UART_SetConfig+0x346>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <UART_SetConfig+0x2e8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d137      	bne.n	80074f4 <UART_SetConfig+0x2ec>
 8007484:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <UART_SetConfig+0x2d0>)
 8007486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800748e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007492:	d017      	beq.n	80074c4 <UART_SetConfig+0x2bc>
 8007494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007498:	d817      	bhi.n	80074ca <UART_SetConfig+0x2c2>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	d00b      	beq.n	80074b8 <UART_SetConfig+0x2b0>
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d811      	bhi.n	80074ca <UART_SetConfig+0x2c2>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <UART_SetConfig+0x2aa>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d006      	beq.n	80074be <UART_SetConfig+0x2b6>
 80074b0:	e00b      	b.n	80074ca <UART_SetConfig+0x2c2>
 80074b2:	2300      	movs	r3, #0
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e04a      	b.n	800754e <UART_SetConfig+0x346>
 80074b8:	2302      	movs	r3, #2
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e047      	b.n	800754e <UART_SetConfig+0x346>
 80074be:	2304      	movs	r3, #4
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e044      	b.n	800754e <UART_SetConfig+0x346>
 80074c4:	2308      	movs	r3, #8
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e041      	b.n	800754e <UART_SetConfig+0x346>
 80074ca:	2310      	movs	r3, #16
 80074cc:	77fb      	strb	r3, [r7, #31]
 80074ce:	e03e      	b.n	800754e <UART_SetConfig+0x346>
 80074d0:	efff69f3 	.word	0xefff69f3
 80074d4:	40011000 	.word	0x40011000
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40004400 	.word	0x40004400
 80074e0:	40004800 	.word	0x40004800
 80074e4:	40004c00 	.word	0x40004c00
 80074e8:	40005000 	.word	0x40005000
 80074ec:	40011400 	.word	0x40011400
 80074f0:	40007800 	.word	0x40007800
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a71      	ldr	r2, [pc, #452]	; (80076c0 <UART_SetConfig+0x4b8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d125      	bne.n	800754a <UART_SetConfig+0x342>
 80074fe:	4b71      	ldr	r3, [pc, #452]	; (80076c4 <UART_SetConfig+0x4bc>)
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800750c:	d017      	beq.n	800753e <UART_SetConfig+0x336>
 800750e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007512:	d817      	bhi.n	8007544 <UART_SetConfig+0x33c>
 8007514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007518:	d00b      	beq.n	8007532 <UART_SetConfig+0x32a>
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751e:	d811      	bhi.n	8007544 <UART_SetConfig+0x33c>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <UART_SetConfig+0x324>
 8007524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007528:	d006      	beq.n	8007538 <UART_SetConfig+0x330>
 800752a:	e00b      	b.n	8007544 <UART_SetConfig+0x33c>
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e00d      	b.n	800754e <UART_SetConfig+0x346>
 8007532:	2302      	movs	r3, #2
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e00a      	b.n	800754e <UART_SetConfig+0x346>
 8007538:	2304      	movs	r3, #4
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e007      	b.n	800754e <UART_SetConfig+0x346>
 800753e:	2308      	movs	r3, #8
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e004      	b.n	800754e <UART_SetConfig+0x346>
 8007544:	2310      	movs	r3, #16
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e001      	b.n	800754e <UART_SetConfig+0x346>
 800754a:	2310      	movs	r3, #16
 800754c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007556:	d15a      	bne.n	800760e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007558:	7ffb      	ldrb	r3, [r7, #31]
 800755a:	2b08      	cmp	r3, #8
 800755c:	d827      	bhi.n	80075ae <UART_SetConfig+0x3a6>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x35c>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	080075af 	.word	0x080075af
 8007574:	0800759f 	.word	0x0800759f
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
 8007584:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fc feec 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 800758c:	61b8      	str	r0, [r7, #24]
        break;
 800758e:	e013      	b.n	80075b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fc fefc 	bl	800438c <HAL_RCC_GetPCLK2Freq>
 8007594:	61b8      	str	r0, [r7, #24]
        break;
 8007596:	e00f      	b.n	80075b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b4b      	ldr	r3, [pc, #300]	; (80076c8 <UART_SetConfig+0x4c0>)
 800759a:	61bb      	str	r3, [r7, #24]
        break;
 800759c:	e00c      	b.n	80075b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fc fdf3 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 80075a2:	61b8      	str	r0, [r7, #24]
        break;
 80075a4:	e008      	b.n	80075b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	61bb      	str	r3, [r7, #24]
        break;
 80075ac:	e004      	b.n	80075b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	77bb      	strb	r3, [r7, #30]
        break;
 80075b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d074      	beq.n	80076a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	005a      	lsls	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d916      	bls.n	8007608 <UART_SetConfig+0x400>
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d212      	bcs.n	8007608 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f023 030f 	bic.w	r3, r3, #15
 80075ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	89fa      	ldrh	r2, [r7, #14]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e04f      	b.n	80076a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	77bb      	strb	r3, [r7, #30]
 800760c:	e04c      	b.n	80076a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800760e:	7ffb      	ldrb	r3, [r7, #31]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d828      	bhi.n	8007666 <UART_SetConfig+0x45e>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <UART_SetConfig+0x414>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007641 	.word	0x08007641
 8007620:	08007649 	.word	0x08007649
 8007624:	08007651 	.word	0x08007651
 8007628:	08007667 	.word	0x08007667
 800762c:	08007657 	.word	0x08007657
 8007630:	08007667 	.word	0x08007667
 8007634:	08007667 	.word	0x08007667
 8007638:	08007667 	.word	0x08007667
 800763c:	0800765f 	.word	0x0800765f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007640:	f7fc fe90 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8007644:	61b8      	str	r0, [r7, #24]
        break;
 8007646:	e013      	b.n	8007670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007648:	f7fc fea0 	bl	800438c <HAL_RCC_GetPCLK2Freq>
 800764c:	61b8      	str	r0, [r7, #24]
        break;
 800764e:	e00f      	b.n	8007670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <UART_SetConfig+0x4c0>)
 8007652:	61bb      	str	r3, [r7, #24]
        break;
 8007654:	e00c      	b.n	8007670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007656:	f7fc fd97 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 800765a:	61b8      	str	r0, [r7, #24]
        break;
 800765c:	e008      	b.n	8007670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800765e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007662:	61bb      	str	r3, [r7, #24]
        break;
 8007664:	e004      	b.n	8007670 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	77bb      	strb	r3, [r7, #30]
        break;
 800766e:	bf00      	nop
    }

    if (pclk != 0U)
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	085a      	lsrs	r2, r3, #1
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	441a      	add	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b0f      	cmp	r3, #15
 800768e:	d909      	bls.n	80076a4 <UART_SetConfig+0x49c>
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007696:	d205      	bcs.n	80076a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	b29a      	uxth	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60da      	str	r2, [r3, #12]
 80076a2:	e001      	b.n	80076a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40007c00 	.word	0x40007c00
 80076c4:	40023800 	.word	0x40023800
 80076c8:	00f42400 	.word	0x00f42400

080076cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01a      	beq.n	80077e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ca:	d10a      	bne.n	80077e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	605a      	str	r2, [r3, #4]
  }
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af02      	add	r7, sp, #8
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007820:	f7fa fd4c 	bl	80022bc <HAL_GetTick>
 8007824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b08      	cmp	r3, #8
 8007832:	d10e      	bne.n	8007852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f817 	bl	8007876 <UART_WaitOnFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e00d      	b.n	800786e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b09c      	sub	sp, #112	; 0x70
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007886:	e0a5      	b.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	f000 80a1 	beq.w	80079d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007892:	f7fa fd13 	bl	80022bc <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800789e:	429a      	cmp	r2, r3
 80078a0:	d302      	bcc.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80078a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d13e      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078bc:	667b      	str	r3, [r7, #100]	; 0x64
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	663b      	str	r3, [r7, #96]	; 0x60
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2220      	movs	r2, #32
 8007912:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e067      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d04f      	beq.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007942:	d147      	bne.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800794c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	66bb      	str	r3, [r7, #104]	; 0x68
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079a0:	623a      	str	r2, [r7, #32]
 80079a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e010      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4013      	ands	r3, r2
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	f43f af4a 	beq.w	8007888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3770      	adds	r7, #112	; 0x70
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b097      	sub	sp, #92	; 0x5c
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a32:	d10e      	bne.n	8007a52 <UART_Start_Receive_IT+0x52>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d105      	bne.n	8007a48 <UART_Start_Receive_IT+0x48>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a46:	e02d      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	22ff      	movs	r2, #255	; 0xff
 8007a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a50:	e028      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10d      	bne.n	8007a76 <UART_Start_Receive_IT+0x76>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <UART_Start_Receive_IT+0x6c>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6a:	e01b      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	227f      	movs	r2, #127	; 0x7f
 8007a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a74:	e016      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a7e:	d10d      	bne.n	8007a9c <UART_Start_Receive_IT+0x9c>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <UART_Start_Receive_IT+0x92>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	227f      	movs	r2, #127	; 0x7f
 8007a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a90:	e008      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	223f      	movs	r2, #63	; 0x3f
 8007a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a9a:	e003      	b.n	8007aa4 <UART_Start_Receive_IT+0xa4>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2222      	movs	r2, #34	; 0x22
 8007ab0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ad2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aee:	d107      	bne.n	8007b00 <UART_Start_Receive_IT+0x100>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a24      	ldr	r2, [pc, #144]	; (8007b8c <UART_Start_Receive_IT+0x18c>)
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64
 8007afe:	e002      	b.n	8007b06 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <UART_Start_Receive_IT+0x190>)
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d019      	beq.n	8007b4a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_Start_Receive_IT+0x116>
 8007b48:	e018      	b.n	8007b7c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	613b      	str	r3, [r7, #16]
   return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f043 0320 	orr.w	r3, r3, #32
 8007b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	375c      	adds	r7, #92	; 0x5c
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	08007e37 	.word	0x08007e37
 8007b90:	08007cdb 	.word	0x08007cdb

08007b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b095      	sub	sp, #84	; 0x54
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
 8007bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e6      	bne.n	8007b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e5      	bne.n	8007bce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d118      	bne.n	8007c3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f023 0310 	bic.w	r3, r3, #16
 8007c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	613b      	str	r3, [r7, #16]
   return(result);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e6      	bne.n	8007c0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007c4e:	bf00      	nop
 8007c50:	3754      	adds	r7, #84	; 0x54
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff faaf 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6979      	ldr	r1, [r7, #20]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e6      	bne.n	8007c8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fa7b 	bl	80071c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd2:	bf00      	nop
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b096      	sub	sp, #88	; 0x58
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ce8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf0:	2b22      	cmp	r3, #34	; 0x22
 8007cf2:	f040 8094 	bne.w	8007e1e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007d04:	b2d9      	uxtb	r1, r3
 8007d06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	400a      	ands	r2, r1
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d177      	bne.n	8007e2e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d52:	653b      	str	r3, [r7, #80]	; 0x50
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d90:	633a      	str	r2, [r7, #48]	; 0x30
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d12e      	bne.n	8007e16 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0310 	bic.w	r3, r3, #16
 8007dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	69b9      	ldr	r1, [r7, #24]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b10      	cmp	r3, #16
 8007dfc:	d103      	bne.n	8007e06 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2210      	movs	r2, #16
 8007e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff f9ee 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e14:	e00b      	b.n	8007e2e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7f9 fb2e 	bl	8001478 <HAL_UART_RxCpltCallback>
}
 8007e1c:	e007      	b.n	8007e2e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0208 	orr.w	r2, r2, #8
 8007e2c:	619a      	str	r2, [r3, #24]
}
 8007e2e:	bf00      	nop
 8007e30:	3758      	adds	r7, #88	; 0x58
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b096      	sub	sp, #88	; 0x58
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4c:	2b22      	cmp	r3, #34	; 0x22
 8007e4e:	f040 8094 	bne.w	8007f7a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e62:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007e66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d177      	bne.n	8007f8a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e6      	bne.n	8007e9a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d12e      	bne.n	8007f72 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6979      	ldr	r1, [r7, #20]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	613b      	str	r3, [r7, #16]
   return(result);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d103      	bne.n	8007f62 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff f940 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f70:	e00b      	b.n	8007f8a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7f9 fa80 	bl	8001478 <HAL_UART_RxCpltCallback>
}
 8007f78:	e007      	b.n	8007f8a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0208 	orr.w	r2, r2, #8
 8007f88:	619a      	str	r2, [r3, #24]
}
 8007f8a:	bf00      	nop
 8007f8c:	3758      	adds	r7, #88	; 0x58
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <__errno>:
 8007f94:	4b01      	ldr	r3, [pc, #4]	; (8007f9c <__errno+0x8>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000020 	.word	0x20000020

08007fa0 <__libc_init_array>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4d0d      	ldr	r5, [pc, #52]	; (8007fd8 <__libc_init_array+0x38>)
 8007fa4:	4c0d      	ldr	r4, [pc, #52]	; (8007fdc <__libc_init_array+0x3c>)
 8007fa6:	1b64      	subs	r4, r4, r5
 8007fa8:	10a4      	asrs	r4, r4, #2
 8007faa:	2600      	movs	r6, #0
 8007fac:	42a6      	cmp	r6, r4
 8007fae:	d109      	bne.n	8007fc4 <__libc_init_array+0x24>
 8007fb0:	4d0b      	ldr	r5, [pc, #44]	; (8007fe0 <__libc_init_array+0x40>)
 8007fb2:	4c0c      	ldr	r4, [pc, #48]	; (8007fe4 <__libc_init_array+0x44>)
 8007fb4:	f000 fc4e 	bl	8008854 <_init>
 8007fb8:	1b64      	subs	r4, r4, r5
 8007fba:	10a4      	asrs	r4, r4, #2
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	d105      	bne.n	8007fce <__libc_init_array+0x2e>
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc8:	4798      	blx	r3
 8007fca:	3601      	adds	r6, #1
 8007fcc:	e7ee      	b.n	8007fac <__libc_init_array+0xc>
 8007fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd2:	4798      	blx	r3
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	e7f2      	b.n	8007fbe <__libc_init_array+0x1e>
 8007fd8:	080088dc 	.word	0x080088dc
 8007fdc:	080088dc 	.word	0x080088dc
 8007fe0:	080088dc 	.word	0x080088dc
 8007fe4:	080088e0 	.word	0x080088e0

08007fe8 <memset>:
 8007fe8:	4402      	add	r2, r0
 8007fea:	4603      	mov	r3, r0
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d100      	bne.n	8007ff2 <memset+0xa>
 8007ff0:	4770      	bx	lr
 8007ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff6:	e7f9      	b.n	8007fec <memset+0x4>

08007ff8 <siprintf>:
 8007ff8:	b40e      	push	{r1, r2, r3}
 8007ffa:	b500      	push	{lr}
 8007ffc:	b09c      	sub	sp, #112	; 0x70
 8007ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8008000:	9002      	str	r0, [sp, #8]
 8008002:	9006      	str	r0, [sp, #24]
 8008004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008008:	4809      	ldr	r0, [pc, #36]	; (8008030 <siprintf+0x38>)
 800800a:	9107      	str	r1, [sp, #28]
 800800c:	9104      	str	r1, [sp, #16]
 800800e:	4909      	ldr	r1, [pc, #36]	; (8008034 <siprintf+0x3c>)
 8008010:	f853 2b04 	ldr.w	r2, [r3], #4
 8008014:	9105      	str	r1, [sp, #20]
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	a902      	add	r1, sp, #8
 800801c:	f000 f868 	bl	80080f0 <_svfiprintf_r>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	b01c      	add	sp, #112	; 0x70
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b003      	add	sp, #12
 800802e:	4770      	bx	lr
 8008030:	20000020 	.word	0x20000020
 8008034:	ffff0208 	.word	0xffff0208

08008038 <__ssputs_r>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	688e      	ldr	r6, [r1, #8]
 800803e:	429e      	cmp	r6, r3
 8008040:	4682      	mov	sl, r0
 8008042:	460c      	mov	r4, r1
 8008044:	4690      	mov	r8, r2
 8008046:	461f      	mov	r7, r3
 8008048:	d838      	bhi.n	80080bc <__ssputs_r+0x84>
 800804a:	898a      	ldrh	r2, [r1, #12]
 800804c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008050:	d032      	beq.n	80080b8 <__ssputs_r+0x80>
 8008052:	6825      	ldr	r5, [r4, #0]
 8008054:	6909      	ldr	r1, [r1, #16]
 8008056:	eba5 0901 	sub.w	r9, r5, r1
 800805a:	6965      	ldr	r5, [r4, #20]
 800805c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008064:	3301      	adds	r3, #1
 8008066:	444b      	add	r3, r9
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	429d      	cmp	r5, r3
 800806c:	bf38      	it	cc
 800806e:	461d      	movcc	r5, r3
 8008070:	0553      	lsls	r3, r2, #21
 8008072:	d531      	bpl.n	80080d8 <__ssputs_r+0xa0>
 8008074:	4629      	mov	r1, r5
 8008076:	f000 fb47 	bl	8008708 <_malloc_r>
 800807a:	4606      	mov	r6, r0
 800807c:	b950      	cbnz	r0, 8008094 <__ssputs_r+0x5c>
 800807e:	230c      	movs	r3, #12
 8008080:	f8ca 3000 	str.w	r3, [sl]
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008094:	6921      	ldr	r1, [r4, #16]
 8008096:	464a      	mov	r2, r9
 8008098:	f000 fabe 	bl	8008618 <memcpy>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	6126      	str	r6, [r4, #16]
 80080aa:	6165      	str	r5, [r4, #20]
 80080ac:	444e      	add	r6, r9
 80080ae:	eba5 0509 	sub.w	r5, r5, r9
 80080b2:	6026      	str	r6, [r4, #0]
 80080b4:	60a5      	str	r5, [r4, #8]
 80080b6:	463e      	mov	r6, r7
 80080b8:	42be      	cmp	r6, r7
 80080ba:	d900      	bls.n	80080be <__ssputs_r+0x86>
 80080bc:	463e      	mov	r6, r7
 80080be:	4632      	mov	r2, r6
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	4641      	mov	r1, r8
 80080c4:	f000 fab6 	bl	8008634 <memmove>
 80080c8:	68a3      	ldr	r3, [r4, #8]
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	1b9b      	subs	r3, r3, r6
 80080ce:	4432      	add	r2, r6
 80080d0:	60a3      	str	r3, [r4, #8]
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7db      	b.n	8008090 <__ssputs_r+0x58>
 80080d8:	462a      	mov	r2, r5
 80080da:	f000 fb6f 	bl	80087bc <_realloc_r>
 80080de:	4606      	mov	r6, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1e1      	bne.n	80080a8 <__ssputs_r+0x70>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	4650      	mov	r0, sl
 80080e8:	f000 fabe 	bl	8008668 <_free_r>
 80080ec:	e7c7      	b.n	800807e <__ssputs_r+0x46>
	...

080080f0 <_svfiprintf_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	4698      	mov	r8, r3
 80080f6:	898b      	ldrh	r3, [r1, #12]
 80080f8:	061b      	lsls	r3, r3, #24
 80080fa:	b09d      	sub	sp, #116	; 0x74
 80080fc:	4607      	mov	r7, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	4614      	mov	r4, r2
 8008102:	d50e      	bpl.n	8008122 <_svfiprintf_r+0x32>
 8008104:	690b      	ldr	r3, [r1, #16]
 8008106:	b963      	cbnz	r3, 8008122 <_svfiprintf_r+0x32>
 8008108:	2140      	movs	r1, #64	; 0x40
 800810a:	f000 fafd 	bl	8008708 <_malloc_r>
 800810e:	6028      	str	r0, [r5, #0]
 8008110:	6128      	str	r0, [r5, #16]
 8008112:	b920      	cbnz	r0, 800811e <_svfiprintf_r+0x2e>
 8008114:	230c      	movs	r3, #12
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	e0d1      	b.n	80082c2 <_svfiprintf_r+0x1d2>
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	616b      	str	r3, [r5, #20]
 8008122:	2300      	movs	r3, #0
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	2320      	movs	r3, #32
 8008128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800812c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008130:	2330      	movs	r3, #48	; 0x30
 8008132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082dc <_svfiprintf_r+0x1ec>
 8008136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800813a:	f04f 0901 	mov.w	r9, #1
 800813e:	4623      	mov	r3, r4
 8008140:	469a      	mov	sl, r3
 8008142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008146:	b10a      	cbz	r2, 800814c <_svfiprintf_r+0x5c>
 8008148:	2a25      	cmp	r2, #37	; 0x25
 800814a:	d1f9      	bne.n	8008140 <_svfiprintf_r+0x50>
 800814c:	ebba 0b04 	subs.w	fp, sl, r4
 8008150:	d00b      	beq.n	800816a <_svfiprintf_r+0x7a>
 8008152:	465b      	mov	r3, fp
 8008154:	4622      	mov	r2, r4
 8008156:	4629      	mov	r1, r5
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff6d 	bl	8008038 <__ssputs_r>
 800815e:	3001      	adds	r0, #1
 8008160:	f000 80aa 	beq.w	80082b8 <_svfiprintf_r+0x1c8>
 8008164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008166:	445a      	add	r2, fp
 8008168:	9209      	str	r2, [sp, #36]	; 0x24
 800816a:	f89a 3000 	ldrb.w	r3, [sl]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 80a2 	beq.w	80082b8 <_svfiprintf_r+0x1c8>
 8008174:	2300      	movs	r3, #0
 8008176:	f04f 32ff 	mov.w	r2, #4294967295
 800817a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800817e:	f10a 0a01 	add.w	sl, sl, #1
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	9307      	str	r3, [sp, #28]
 8008186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800818a:	931a      	str	r3, [sp, #104]	; 0x68
 800818c:	4654      	mov	r4, sl
 800818e:	2205      	movs	r2, #5
 8008190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008194:	4851      	ldr	r0, [pc, #324]	; (80082dc <_svfiprintf_r+0x1ec>)
 8008196:	f7f8 f83b 	bl	8000210 <memchr>
 800819a:	9a04      	ldr	r2, [sp, #16]
 800819c:	b9d8      	cbnz	r0, 80081d6 <_svfiprintf_r+0xe6>
 800819e:	06d0      	lsls	r0, r2, #27
 80081a0:	bf44      	itt	mi
 80081a2:	2320      	movmi	r3, #32
 80081a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a8:	0711      	lsls	r1, r2, #28
 80081aa:	bf44      	itt	mi
 80081ac:	232b      	movmi	r3, #43	; 0x2b
 80081ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b2:	f89a 3000 	ldrb.w	r3, [sl]
 80081b6:	2b2a      	cmp	r3, #42	; 0x2a
 80081b8:	d015      	beq.n	80081e6 <_svfiprintf_r+0xf6>
 80081ba:	9a07      	ldr	r2, [sp, #28]
 80081bc:	4654      	mov	r4, sl
 80081be:	2000      	movs	r0, #0
 80081c0:	f04f 0c0a 	mov.w	ip, #10
 80081c4:	4621      	mov	r1, r4
 80081c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ca:	3b30      	subs	r3, #48	; 0x30
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	d94e      	bls.n	800826e <_svfiprintf_r+0x17e>
 80081d0:	b1b0      	cbz	r0, 8008200 <_svfiprintf_r+0x110>
 80081d2:	9207      	str	r2, [sp, #28]
 80081d4:	e014      	b.n	8008200 <_svfiprintf_r+0x110>
 80081d6:	eba0 0308 	sub.w	r3, r0, r8
 80081da:	fa09 f303 	lsl.w	r3, r9, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	46a2      	mov	sl, r4
 80081e4:	e7d2      	b.n	800818c <_svfiprintf_r+0x9c>
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	1d19      	adds	r1, r3, #4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	9103      	str	r1, [sp, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfbb      	ittet	lt
 80081f2:	425b      	neglt	r3, r3
 80081f4:	f042 0202 	orrlt.w	r2, r2, #2
 80081f8:	9307      	strge	r3, [sp, #28]
 80081fa:	9307      	strlt	r3, [sp, #28]
 80081fc:	bfb8      	it	lt
 80081fe:	9204      	strlt	r2, [sp, #16]
 8008200:	7823      	ldrb	r3, [r4, #0]
 8008202:	2b2e      	cmp	r3, #46	; 0x2e
 8008204:	d10c      	bne.n	8008220 <_svfiprintf_r+0x130>
 8008206:	7863      	ldrb	r3, [r4, #1]
 8008208:	2b2a      	cmp	r3, #42	; 0x2a
 800820a:	d135      	bne.n	8008278 <_svfiprintf_r+0x188>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	1d1a      	adds	r2, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	9203      	str	r2, [sp, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfb8      	it	lt
 8008218:	f04f 33ff 	movlt.w	r3, #4294967295
 800821c:	3402      	adds	r4, #2
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082ec <_svfiprintf_r+0x1fc>
 8008224:	7821      	ldrb	r1, [r4, #0]
 8008226:	2203      	movs	r2, #3
 8008228:	4650      	mov	r0, sl
 800822a:	f7f7 fff1 	bl	8000210 <memchr>
 800822e:	b140      	cbz	r0, 8008242 <_svfiprintf_r+0x152>
 8008230:	2340      	movs	r3, #64	; 0x40
 8008232:	eba0 000a 	sub.w	r0, r0, sl
 8008236:	fa03 f000 	lsl.w	r0, r3, r0
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	4303      	orrs	r3, r0
 800823e:	3401      	adds	r4, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	4826      	ldr	r0, [pc, #152]	; (80082e0 <_svfiprintf_r+0x1f0>)
 8008248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800824c:	2206      	movs	r2, #6
 800824e:	f7f7 ffdf 	bl	8000210 <memchr>
 8008252:	2800      	cmp	r0, #0
 8008254:	d038      	beq.n	80082c8 <_svfiprintf_r+0x1d8>
 8008256:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <_svfiprintf_r+0x1f4>)
 8008258:	bb1b      	cbnz	r3, 80082a2 <_svfiprintf_r+0x1b2>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	3308      	adds	r3, #8
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008268:	4433      	add	r3, r6
 800826a:	9309      	str	r3, [sp, #36]	; 0x24
 800826c:	e767      	b.n	800813e <_svfiprintf_r+0x4e>
 800826e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008272:	460c      	mov	r4, r1
 8008274:	2001      	movs	r0, #1
 8008276:	e7a5      	b.n	80081c4 <_svfiprintf_r+0xd4>
 8008278:	2300      	movs	r3, #0
 800827a:	3401      	adds	r4, #1
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0c0a 	mov.w	ip, #10
 8008284:	4620      	mov	r0, r4
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	3a30      	subs	r2, #48	; 0x30
 800828c:	2a09      	cmp	r2, #9
 800828e:	d903      	bls.n	8008298 <_svfiprintf_r+0x1a8>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0c5      	beq.n	8008220 <_svfiprintf_r+0x130>
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	e7c3      	b.n	8008220 <_svfiprintf_r+0x130>
 8008298:	fb0c 2101 	mla	r1, ip, r1, r2
 800829c:	4604      	mov	r4, r0
 800829e:	2301      	movs	r3, #1
 80082a0:	e7f0      	b.n	8008284 <_svfiprintf_r+0x194>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <_svfiprintf_r+0x1f8>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4638      	mov	r0, r7
 80082ae:	f3af 8000 	nop.w
 80082b2:	1c42      	adds	r2, r0, #1
 80082b4:	4606      	mov	r6, r0
 80082b6:	d1d6      	bne.n	8008266 <_svfiprintf_r+0x176>
 80082b8:	89ab      	ldrh	r3, [r5, #12]
 80082ba:	065b      	lsls	r3, r3, #25
 80082bc:	f53f af2c 	bmi.w	8008118 <_svfiprintf_r+0x28>
 80082c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c2:	b01d      	add	sp, #116	; 0x74
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	ab03      	add	r3, sp, #12
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <_svfiprintf_r+0x1f8>)
 80082d0:	a904      	add	r1, sp, #16
 80082d2:	4638      	mov	r0, r7
 80082d4:	f000 f87a 	bl	80083cc <_printf_i>
 80082d8:	e7eb      	b.n	80082b2 <_svfiprintf_r+0x1c2>
 80082da:	bf00      	nop
 80082dc:	080088a0 	.word	0x080088a0
 80082e0:	080088aa 	.word	0x080088aa
 80082e4:	00000000 	.word	0x00000000
 80082e8:	08008039 	.word	0x08008039
 80082ec:	080088a6 	.word	0x080088a6

080082f0 <_printf_common>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4616      	mov	r6, r2
 80082f6:	4699      	mov	r9, r3
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	690b      	ldr	r3, [r1, #16]
 80082fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008300:	4293      	cmp	r3, r2
 8008302:	bfb8      	it	lt
 8008304:	4613      	movlt	r3, r2
 8008306:	6033      	str	r3, [r6, #0]
 8008308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800830c:	4607      	mov	r7, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b10a      	cbz	r2, 8008316 <_printf_common+0x26>
 8008312:	3301      	adds	r3, #1
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	0699      	lsls	r1, r3, #26
 800831a:	bf42      	ittt	mi
 800831c:	6833      	ldrmi	r3, [r6, #0]
 800831e:	3302      	addmi	r3, #2
 8008320:	6033      	strmi	r3, [r6, #0]
 8008322:	6825      	ldr	r5, [r4, #0]
 8008324:	f015 0506 	ands.w	r5, r5, #6
 8008328:	d106      	bne.n	8008338 <_printf_common+0x48>
 800832a:	f104 0a19 	add.w	sl, r4, #25
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	6832      	ldr	r2, [r6, #0]
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc26      	bgt.n	8008386 <_printf_common+0x96>
 8008338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800833c:	1e13      	subs	r3, r2, #0
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	bf18      	it	ne
 8008342:	2301      	movne	r3, #1
 8008344:	0692      	lsls	r2, r2, #26
 8008346:	d42b      	bmi.n	80083a0 <_printf_common+0xb0>
 8008348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834c:	4649      	mov	r1, r9
 800834e:	4638      	mov	r0, r7
 8008350:	47c0      	blx	r8
 8008352:	3001      	adds	r0, #1
 8008354:	d01e      	beq.n	8008394 <_printf_common+0xa4>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	68e5      	ldr	r5, [r4, #12]
 800835a:	6832      	ldr	r2, [r6, #0]
 800835c:	f003 0306 	and.w	r3, r3, #6
 8008360:	2b04      	cmp	r3, #4
 8008362:	bf08      	it	eq
 8008364:	1aad      	subeq	r5, r5, r2
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	bf0c      	ite	eq
 800836c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008370:	2500      	movne	r5, #0
 8008372:	4293      	cmp	r3, r2
 8008374:	bfc4      	itt	gt
 8008376:	1a9b      	subgt	r3, r3, r2
 8008378:	18ed      	addgt	r5, r5, r3
 800837a:	2600      	movs	r6, #0
 800837c:	341a      	adds	r4, #26
 800837e:	42b5      	cmp	r5, r6
 8008380:	d11a      	bne.n	80083b8 <_printf_common+0xc8>
 8008382:	2000      	movs	r0, #0
 8008384:	e008      	b.n	8008398 <_printf_common+0xa8>
 8008386:	2301      	movs	r3, #1
 8008388:	4652      	mov	r2, sl
 800838a:	4649      	mov	r1, r9
 800838c:	4638      	mov	r0, r7
 800838e:	47c0      	blx	r8
 8008390:	3001      	adds	r0, #1
 8008392:	d103      	bne.n	800839c <_printf_common+0xac>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	3501      	adds	r5, #1
 800839e:	e7c6      	b.n	800832e <_printf_common+0x3e>
 80083a0:	18e1      	adds	r1, r4, r3
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	2030      	movs	r0, #48	; 0x30
 80083a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083aa:	4422      	add	r2, r4
 80083ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083b4:	3302      	adds	r3, #2
 80083b6:	e7c7      	b.n	8008348 <_printf_common+0x58>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4622      	mov	r2, r4
 80083bc:	4649      	mov	r1, r9
 80083be:	4638      	mov	r0, r7
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d0e6      	beq.n	8008394 <_printf_common+0xa4>
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7d9      	b.n	800837e <_printf_common+0x8e>
	...

080083cc <_printf_i>:
 80083cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	4691      	mov	r9, r2
 80083d4:	7e27      	ldrb	r7, [r4, #24]
 80083d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083d8:	2f78      	cmp	r7, #120	; 0x78
 80083da:	4680      	mov	r8, r0
 80083dc:	469a      	mov	sl, r3
 80083de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e2:	d807      	bhi.n	80083f4 <_printf_i+0x28>
 80083e4:	2f62      	cmp	r7, #98	; 0x62
 80083e6:	d80a      	bhi.n	80083fe <_printf_i+0x32>
 80083e8:	2f00      	cmp	r7, #0
 80083ea:	f000 80d8 	beq.w	800859e <_printf_i+0x1d2>
 80083ee:	2f58      	cmp	r7, #88	; 0x58
 80083f0:	f000 80a3 	beq.w	800853a <_printf_i+0x16e>
 80083f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083fc:	e03a      	b.n	8008474 <_printf_i+0xa8>
 80083fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008402:	2b15      	cmp	r3, #21
 8008404:	d8f6      	bhi.n	80083f4 <_printf_i+0x28>
 8008406:	a001      	add	r0, pc, #4	; (adr r0, 800840c <_printf_i+0x40>)
 8008408:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800840c:	08008465 	.word	0x08008465
 8008410:	08008479 	.word	0x08008479
 8008414:	080083f5 	.word	0x080083f5
 8008418:	080083f5 	.word	0x080083f5
 800841c:	080083f5 	.word	0x080083f5
 8008420:	080083f5 	.word	0x080083f5
 8008424:	08008479 	.word	0x08008479
 8008428:	080083f5 	.word	0x080083f5
 800842c:	080083f5 	.word	0x080083f5
 8008430:	080083f5 	.word	0x080083f5
 8008434:	080083f5 	.word	0x080083f5
 8008438:	08008585 	.word	0x08008585
 800843c:	080084a9 	.word	0x080084a9
 8008440:	08008567 	.word	0x08008567
 8008444:	080083f5 	.word	0x080083f5
 8008448:	080083f5 	.word	0x080083f5
 800844c:	080085a7 	.word	0x080085a7
 8008450:	080083f5 	.word	0x080083f5
 8008454:	080084a9 	.word	0x080084a9
 8008458:	080083f5 	.word	0x080083f5
 800845c:	080083f5 	.word	0x080083f5
 8008460:	0800856f 	.word	0x0800856f
 8008464:	680b      	ldr	r3, [r1, #0]
 8008466:	1d1a      	adds	r2, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	600a      	str	r2, [r1, #0]
 800846c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008474:	2301      	movs	r3, #1
 8008476:	e0a3      	b.n	80085c0 <_printf_i+0x1f4>
 8008478:	6825      	ldr	r5, [r4, #0]
 800847a:	6808      	ldr	r0, [r1, #0]
 800847c:	062e      	lsls	r6, r5, #24
 800847e:	f100 0304 	add.w	r3, r0, #4
 8008482:	d50a      	bpl.n	800849a <_printf_i+0xce>
 8008484:	6805      	ldr	r5, [r0, #0]
 8008486:	600b      	str	r3, [r1, #0]
 8008488:	2d00      	cmp	r5, #0
 800848a:	da03      	bge.n	8008494 <_printf_i+0xc8>
 800848c:	232d      	movs	r3, #45	; 0x2d
 800848e:	426d      	negs	r5, r5
 8008490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008494:	485e      	ldr	r0, [pc, #376]	; (8008610 <_printf_i+0x244>)
 8008496:	230a      	movs	r3, #10
 8008498:	e019      	b.n	80084ce <_printf_i+0x102>
 800849a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800849e:	6805      	ldr	r5, [r0, #0]
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	bf18      	it	ne
 80084a4:	b22d      	sxthne	r5, r5
 80084a6:	e7ef      	b.n	8008488 <_printf_i+0xbc>
 80084a8:	680b      	ldr	r3, [r1, #0]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	1d18      	adds	r0, r3, #4
 80084ae:	6008      	str	r0, [r1, #0]
 80084b0:	0628      	lsls	r0, r5, #24
 80084b2:	d501      	bpl.n	80084b8 <_printf_i+0xec>
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	e002      	b.n	80084be <_printf_i+0xf2>
 80084b8:	0669      	lsls	r1, r5, #25
 80084ba:	d5fb      	bpl.n	80084b4 <_printf_i+0xe8>
 80084bc:	881d      	ldrh	r5, [r3, #0]
 80084be:	4854      	ldr	r0, [pc, #336]	; (8008610 <_printf_i+0x244>)
 80084c0:	2f6f      	cmp	r7, #111	; 0x6f
 80084c2:	bf0c      	ite	eq
 80084c4:	2308      	moveq	r3, #8
 80084c6:	230a      	movne	r3, #10
 80084c8:	2100      	movs	r1, #0
 80084ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ce:	6866      	ldr	r6, [r4, #4]
 80084d0:	60a6      	str	r6, [r4, #8]
 80084d2:	2e00      	cmp	r6, #0
 80084d4:	bfa2      	ittt	ge
 80084d6:	6821      	ldrge	r1, [r4, #0]
 80084d8:	f021 0104 	bicge.w	r1, r1, #4
 80084dc:	6021      	strge	r1, [r4, #0]
 80084de:	b90d      	cbnz	r5, 80084e4 <_printf_i+0x118>
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	d04d      	beq.n	8008580 <_printf_i+0x1b4>
 80084e4:	4616      	mov	r6, r2
 80084e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ea:	fb03 5711 	mls	r7, r3, r1, r5
 80084ee:	5dc7      	ldrb	r7, [r0, r7]
 80084f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084f4:	462f      	mov	r7, r5
 80084f6:	42bb      	cmp	r3, r7
 80084f8:	460d      	mov	r5, r1
 80084fa:	d9f4      	bls.n	80084e6 <_printf_i+0x11a>
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d10b      	bne.n	8008518 <_printf_i+0x14c>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07df      	lsls	r7, r3, #31
 8008504:	d508      	bpl.n	8008518 <_printf_i+0x14c>
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	4299      	cmp	r1, r3
 800850c:	bfde      	ittt	le
 800850e:	2330      	movle	r3, #48	; 0x30
 8008510:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008514:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008518:	1b92      	subs	r2, r2, r6
 800851a:	6122      	str	r2, [r4, #16]
 800851c:	f8cd a000 	str.w	sl, [sp]
 8008520:	464b      	mov	r3, r9
 8008522:	aa03      	add	r2, sp, #12
 8008524:	4621      	mov	r1, r4
 8008526:	4640      	mov	r0, r8
 8008528:	f7ff fee2 	bl	80082f0 <_printf_common>
 800852c:	3001      	adds	r0, #1
 800852e:	d14c      	bne.n	80085ca <_printf_i+0x1fe>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	b004      	add	sp, #16
 8008536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853a:	4835      	ldr	r0, [pc, #212]	; (8008610 <_printf_i+0x244>)
 800853c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	680e      	ldr	r6, [r1, #0]
 8008544:	061f      	lsls	r7, r3, #24
 8008546:	f856 5b04 	ldr.w	r5, [r6], #4
 800854a:	600e      	str	r6, [r1, #0]
 800854c:	d514      	bpl.n	8008578 <_printf_i+0x1ac>
 800854e:	07d9      	lsls	r1, r3, #31
 8008550:	bf44      	itt	mi
 8008552:	f043 0320 	orrmi.w	r3, r3, #32
 8008556:	6023      	strmi	r3, [r4, #0]
 8008558:	b91d      	cbnz	r5, 8008562 <_printf_i+0x196>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	f023 0320 	bic.w	r3, r3, #32
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	2310      	movs	r3, #16
 8008564:	e7b0      	b.n	80084c8 <_printf_i+0xfc>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f043 0320 	orr.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2378      	movs	r3, #120	; 0x78
 8008570:	4828      	ldr	r0, [pc, #160]	; (8008614 <_printf_i+0x248>)
 8008572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008576:	e7e3      	b.n	8008540 <_printf_i+0x174>
 8008578:	065e      	lsls	r6, r3, #25
 800857a:	bf48      	it	mi
 800857c:	b2ad      	uxthmi	r5, r5
 800857e:	e7e6      	b.n	800854e <_printf_i+0x182>
 8008580:	4616      	mov	r6, r2
 8008582:	e7bb      	b.n	80084fc <_printf_i+0x130>
 8008584:	680b      	ldr	r3, [r1, #0]
 8008586:	6826      	ldr	r6, [r4, #0]
 8008588:	6960      	ldr	r0, [r4, #20]
 800858a:	1d1d      	adds	r5, r3, #4
 800858c:	600d      	str	r5, [r1, #0]
 800858e:	0635      	lsls	r5, r6, #24
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	d501      	bpl.n	8008598 <_printf_i+0x1cc>
 8008594:	6018      	str	r0, [r3, #0]
 8008596:	e002      	b.n	800859e <_printf_i+0x1d2>
 8008598:	0671      	lsls	r1, r6, #25
 800859a:	d5fb      	bpl.n	8008594 <_printf_i+0x1c8>
 800859c:	8018      	strh	r0, [r3, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	4616      	mov	r6, r2
 80085a4:	e7ba      	b.n	800851c <_printf_i+0x150>
 80085a6:	680b      	ldr	r3, [r1, #0]
 80085a8:	1d1a      	adds	r2, r3, #4
 80085aa:	600a      	str	r2, [r1, #0]
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	2100      	movs	r1, #0
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7f7 fe2c 	bl	8000210 <memchr>
 80085b8:	b108      	cbz	r0, 80085be <_printf_i+0x1f2>
 80085ba:	1b80      	subs	r0, r0, r6
 80085bc:	6060      	str	r0, [r4, #4]
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	2300      	movs	r3, #0
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c8:	e7a8      	b.n	800851c <_printf_i+0x150>
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	4632      	mov	r2, r6
 80085ce:	4649      	mov	r1, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	47d0      	blx	sl
 80085d4:	3001      	adds	r0, #1
 80085d6:	d0ab      	beq.n	8008530 <_printf_i+0x164>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	d413      	bmi.n	8008606 <_printf_i+0x23a>
 80085de:	68e0      	ldr	r0, [r4, #12]
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	4298      	cmp	r0, r3
 80085e4:	bfb8      	it	lt
 80085e6:	4618      	movlt	r0, r3
 80085e8:	e7a4      	b.n	8008534 <_printf_i+0x168>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4632      	mov	r2, r6
 80085ee:	4649      	mov	r1, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	47d0      	blx	sl
 80085f4:	3001      	adds	r0, #1
 80085f6:	d09b      	beq.n	8008530 <_printf_i+0x164>
 80085f8:	3501      	adds	r5, #1
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	9903      	ldr	r1, [sp, #12]
 80085fe:	1a5b      	subs	r3, r3, r1
 8008600:	42ab      	cmp	r3, r5
 8008602:	dcf2      	bgt.n	80085ea <_printf_i+0x21e>
 8008604:	e7eb      	b.n	80085de <_printf_i+0x212>
 8008606:	2500      	movs	r5, #0
 8008608:	f104 0619 	add.w	r6, r4, #25
 800860c:	e7f5      	b.n	80085fa <_printf_i+0x22e>
 800860e:	bf00      	nop
 8008610:	080088b1 	.word	0x080088b1
 8008614:	080088c2 	.word	0x080088c2

08008618 <memcpy>:
 8008618:	440a      	add	r2, r1
 800861a:	4291      	cmp	r1, r2
 800861c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008620:	d100      	bne.n	8008624 <memcpy+0xc>
 8008622:	4770      	bx	lr
 8008624:	b510      	push	{r4, lr}
 8008626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800862a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862e:	4291      	cmp	r1, r2
 8008630:	d1f9      	bne.n	8008626 <memcpy+0xe>
 8008632:	bd10      	pop	{r4, pc}

08008634 <memmove>:
 8008634:	4288      	cmp	r0, r1
 8008636:	b510      	push	{r4, lr}
 8008638:	eb01 0402 	add.w	r4, r1, r2
 800863c:	d902      	bls.n	8008644 <memmove+0x10>
 800863e:	4284      	cmp	r4, r0
 8008640:	4623      	mov	r3, r4
 8008642:	d807      	bhi.n	8008654 <memmove+0x20>
 8008644:	1e43      	subs	r3, r0, #1
 8008646:	42a1      	cmp	r1, r4
 8008648:	d008      	beq.n	800865c <memmove+0x28>
 800864a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800864e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008652:	e7f8      	b.n	8008646 <memmove+0x12>
 8008654:	4402      	add	r2, r0
 8008656:	4601      	mov	r1, r0
 8008658:	428a      	cmp	r2, r1
 800865a:	d100      	bne.n	800865e <memmove+0x2a>
 800865c:	bd10      	pop	{r4, pc}
 800865e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008666:	e7f7      	b.n	8008658 <memmove+0x24>

08008668 <_free_r>:
 8008668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866a:	2900      	cmp	r1, #0
 800866c:	d048      	beq.n	8008700 <_free_r+0x98>
 800866e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008672:	9001      	str	r0, [sp, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f1a1 0404 	sub.w	r4, r1, #4
 800867a:	bfb8      	it	lt
 800867c:	18e4      	addlt	r4, r4, r3
 800867e:	f000 f8d3 	bl	8008828 <__malloc_lock>
 8008682:	4a20      	ldr	r2, [pc, #128]	; (8008704 <_free_r+0x9c>)
 8008684:	9801      	ldr	r0, [sp, #4]
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	4615      	mov	r5, r2
 800868a:	b933      	cbnz	r3, 800869a <_free_r+0x32>
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6014      	str	r4, [r2, #0]
 8008690:	b003      	add	sp, #12
 8008692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008696:	f000 b8cd 	b.w	8008834 <__malloc_unlock>
 800869a:	42a3      	cmp	r3, r4
 800869c:	d90b      	bls.n	80086b6 <_free_r+0x4e>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	1862      	adds	r2, r4, r1
 80086a2:	4293      	cmp	r3, r2
 80086a4:	bf04      	itt	eq
 80086a6:	681a      	ldreq	r2, [r3, #0]
 80086a8:	685b      	ldreq	r3, [r3, #4]
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	bf04      	itt	eq
 80086ae:	1852      	addeq	r2, r2, r1
 80086b0:	6022      	streq	r2, [r4, #0]
 80086b2:	602c      	str	r4, [r5, #0]
 80086b4:	e7ec      	b.n	8008690 <_free_r+0x28>
 80086b6:	461a      	mov	r2, r3
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b10b      	cbz	r3, 80086c0 <_free_r+0x58>
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d9fa      	bls.n	80086b6 <_free_r+0x4e>
 80086c0:	6811      	ldr	r1, [r2, #0]
 80086c2:	1855      	adds	r5, r2, r1
 80086c4:	42a5      	cmp	r5, r4
 80086c6:	d10b      	bne.n	80086e0 <_free_r+0x78>
 80086c8:	6824      	ldr	r4, [r4, #0]
 80086ca:	4421      	add	r1, r4
 80086cc:	1854      	adds	r4, r2, r1
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	6011      	str	r1, [r2, #0]
 80086d2:	d1dd      	bne.n	8008690 <_free_r+0x28>
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	4421      	add	r1, r4
 80086dc:	6011      	str	r1, [r2, #0]
 80086de:	e7d7      	b.n	8008690 <_free_r+0x28>
 80086e0:	d902      	bls.n	80086e8 <_free_r+0x80>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	e7d3      	b.n	8008690 <_free_r+0x28>
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	428b      	cmp	r3, r1
 80086ee:	bf04      	itt	eq
 80086f0:	6819      	ldreq	r1, [r3, #0]
 80086f2:	685b      	ldreq	r3, [r3, #4]
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	bf04      	itt	eq
 80086f8:	1949      	addeq	r1, r1, r5
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	6054      	str	r4, [r2, #4]
 80086fe:	e7c7      	b.n	8008690 <_free_r+0x28>
 8008700:	b003      	add	sp, #12
 8008702:	bd30      	pop	{r4, r5, pc}
 8008704:	200000cc 	.word	0x200000cc

08008708 <_malloc_r>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	1ccd      	adds	r5, r1, #3
 800870c:	f025 0503 	bic.w	r5, r5, #3
 8008710:	3508      	adds	r5, #8
 8008712:	2d0c      	cmp	r5, #12
 8008714:	bf38      	it	cc
 8008716:	250c      	movcc	r5, #12
 8008718:	2d00      	cmp	r5, #0
 800871a:	4606      	mov	r6, r0
 800871c:	db01      	blt.n	8008722 <_malloc_r+0x1a>
 800871e:	42a9      	cmp	r1, r5
 8008720:	d903      	bls.n	800872a <_malloc_r+0x22>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	2000      	movs	r0, #0
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872a:	f000 f87d 	bl	8008828 <__malloc_lock>
 800872e:	4921      	ldr	r1, [pc, #132]	; (80087b4 <_malloc_r+0xac>)
 8008730:	680a      	ldr	r2, [r1, #0]
 8008732:	4614      	mov	r4, r2
 8008734:	b99c      	cbnz	r4, 800875e <_malloc_r+0x56>
 8008736:	4f20      	ldr	r7, [pc, #128]	; (80087b8 <_malloc_r+0xb0>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	b923      	cbnz	r3, 8008746 <_malloc_r+0x3e>
 800873c:	4621      	mov	r1, r4
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f862 	bl	8008808 <_sbrk_r>
 8008744:	6038      	str	r0, [r7, #0]
 8008746:	4629      	mov	r1, r5
 8008748:	4630      	mov	r0, r6
 800874a:	f000 f85d 	bl	8008808 <_sbrk_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d123      	bne.n	800879a <_malloc_r+0x92>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	4630      	mov	r0, r6
 8008758:	f000 f86c 	bl	8008834 <__malloc_unlock>
 800875c:	e7e3      	b.n	8008726 <_malloc_r+0x1e>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	1b5b      	subs	r3, r3, r5
 8008762:	d417      	bmi.n	8008794 <_malloc_r+0x8c>
 8008764:	2b0b      	cmp	r3, #11
 8008766:	d903      	bls.n	8008770 <_malloc_r+0x68>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	441c      	add	r4, r3
 800876c:	6025      	str	r5, [r4, #0]
 800876e:	e004      	b.n	800877a <_malloc_r+0x72>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	42a2      	cmp	r2, r4
 8008774:	bf0c      	ite	eq
 8008776:	600b      	streq	r3, [r1, #0]
 8008778:	6053      	strne	r3, [r2, #4]
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f85a 	bl	8008834 <__malloc_unlock>
 8008780:	f104 000b 	add.w	r0, r4, #11
 8008784:	1d23      	adds	r3, r4, #4
 8008786:	f020 0007 	bic.w	r0, r0, #7
 800878a:	1ac2      	subs	r2, r0, r3
 800878c:	d0cc      	beq.n	8008728 <_malloc_r+0x20>
 800878e:	1a1b      	subs	r3, r3, r0
 8008790:	50a3      	str	r3, [r4, r2]
 8008792:	e7c9      	b.n	8008728 <_malloc_r+0x20>
 8008794:	4622      	mov	r2, r4
 8008796:	6864      	ldr	r4, [r4, #4]
 8008798:	e7cc      	b.n	8008734 <_malloc_r+0x2c>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d0e3      	beq.n	800876c <_malloc_r+0x64>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f82e 	bl	8008808 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d1dd      	bne.n	800876c <_malloc_r+0x64>
 80087b0:	e7cf      	b.n	8008752 <_malloc_r+0x4a>
 80087b2:	bf00      	nop
 80087b4:	200000cc 	.word	0x200000cc
 80087b8:	200000d0 	.word	0x200000d0

080087bc <_realloc_r>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	4607      	mov	r7, r0
 80087c0:	4614      	mov	r4, r2
 80087c2:	460e      	mov	r6, r1
 80087c4:	b921      	cbnz	r1, 80087d0 <_realloc_r+0x14>
 80087c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087ca:	4611      	mov	r1, r2
 80087cc:	f7ff bf9c 	b.w	8008708 <_malloc_r>
 80087d0:	b922      	cbnz	r2, 80087dc <_realloc_r+0x20>
 80087d2:	f7ff ff49 	bl	8008668 <_free_r>
 80087d6:	4625      	mov	r5, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087dc:	f000 f830 	bl	8008840 <_malloc_usable_size_r>
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d20f      	bcs.n	8008804 <_realloc_r+0x48>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7ff ff8e 	bl	8008708 <_malloc_r>
 80087ec:	4605      	mov	r5, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0f2      	beq.n	80087d8 <_realloc_r+0x1c>
 80087f2:	4631      	mov	r1, r6
 80087f4:	4622      	mov	r2, r4
 80087f6:	f7ff ff0f 	bl	8008618 <memcpy>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ff33 	bl	8008668 <_free_r>
 8008802:	e7e9      	b.n	80087d8 <_realloc_r+0x1c>
 8008804:	4635      	mov	r5, r6
 8008806:	e7e7      	b.n	80087d8 <_realloc_r+0x1c>

08008808 <_sbrk_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d06      	ldr	r5, [pc, #24]	; (8008824 <_sbrk_r+0x1c>)
 800880c:	2300      	movs	r3, #0
 800880e:	4604      	mov	r4, r0
 8008810:	4608      	mov	r0, r1
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	f7f9 f9a0 	bl	8001b58 <_sbrk>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_sbrk_r+0x1a>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_sbrk_r+0x1a>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000304 	.word	0x20000304

08008828 <__malloc_lock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_lock+0x8>)
 800882a:	f000 b811 	b.w	8008850 <__retarget_lock_acquire_recursive>
 800882e:	bf00      	nop
 8008830:	2000030c 	.word	0x2000030c

08008834 <__malloc_unlock>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__malloc_unlock+0x8>)
 8008836:	f000 b80c 	b.w	8008852 <__retarget_lock_release_recursive>
 800883a:	bf00      	nop
 800883c:	2000030c 	.word	0x2000030c

08008840 <_malloc_usable_size_r>:
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f18      	subs	r0, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfbc      	itt	lt
 800884a:	580b      	ldrlt	r3, [r1, r0]
 800884c:	18c0      	addlt	r0, r0, r3
 800884e:	4770      	bx	lr

08008850 <__retarget_lock_acquire_recursive>:
 8008850:	4770      	bx	lr

08008852 <__retarget_lock_release_recursive>:
 8008852:	4770      	bx	lr

08008854 <_init>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	bf00      	nop
 8008858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885a:	bc08      	pop	{r3}
 800885c:	469e      	mov	lr, r3
 800885e:	4770      	bx	lr

08008860 <_fini>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr
