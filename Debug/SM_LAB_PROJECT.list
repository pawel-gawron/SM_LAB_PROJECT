
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf0  08008bf0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000084  08008c7c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008c7c  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001906d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003052  00000000  00000000  00039121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f7d  00000000  00000000  0003e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018814  00000000  00000000  0006642d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7358  00000000  00000000  0007ec41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005158  00000000  00000000  00175fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a68 	.word	0x08008a68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008a68 	.word	0x08008a68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <MX_ADC1_Init+0x9c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_ADC1_Init+0xa0>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e44:	f001 fa42 	bl	80022cc <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 fda7 	bl	80019a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e64:	f001 fbdc 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6e:	f000 fd97 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000d4 	.word	0x200000d4
 8000e80:	40012000 	.word	0x40012000
 8000e84:	0f000001 	.word	0x0f000001

08000e88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x74>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_ADC_MspInit+0x7c>)
 8000eee:	f001 ff8b 	bl	8002e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b81      	ldr	r3, [pc, #516]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a80      	ldr	r2, [pc, #512]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b7e      	ldr	r3, [pc, #504]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a7a      	ldr	r2, [pc, #488]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b78      	ldr	r3, [pc, #480]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b75      	ldr	r3, [pc, #468]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a74      	ldr	r2, [pc, #464]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b72      	ldr	r3, [pc, #456]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b69      	ldr	r3, [pc, #420]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a68      	ldr	r2, [pc, #416]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <MX_GPIO_Init+0x21c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fcc:	4856      	ldr	r0, [pc, #344]	; (8001128 <MX_GPIO_Init+0x220>)
 8000fce:	f002 f8c7 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4855      	ldr	r0, [pc, #340]	; (800112c <MX_GPIO_Init+0x224>)
 8000fd8:	f002 f8c2 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484f      	ldr	r0, [pc, #316]	; (8001130 <MX_GPIO_Init+0x228>)
 8000ff4:	f001 ff08 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff8:	2332      	movs	r3, #50	; 0x32
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4847      	ldr	r0, [pc, #284]	; (8001130 <MX_GPIO_Init+0x228>)
 8001014:	f001 fef8 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001018:	2386      	movs	r3, #134	; 0x86
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4840      	ldr	r0, [pc, #256]	; (8001134 <MX_GPIO_Init+0x22c>)
 8001034:	f001 fee8 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001038:	f244 0381 	movw	r3, #16513	; 0x4081
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4835      	ldr	r0, [pc, #212]	; (8001128 <MX_GPIO_Init+0x220>)
 8001052:	f001 fed9 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001068:	230b      	movs	r3, #11
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_GPIO_Init+0x220>)
 8001074:	f001 fec8 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_GPIO_Init+0x224>)
 8001090:	f001 feba 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x224>)
 80010a8:	f001 feae 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010be:	230a      	movs	r3, #10
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_GPIO_Init+0x22c>)
 80010ca:	f001 fe9d 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_GPIO_Init+0x22c>)
 80010e4:	f001 fe90 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fa:	230b      	movs	r3, #11
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_GPIO_Init+0x224>)
 8001106:	f001 fe7f 	bl	8002e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f001 fdb1 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f001 fdca 	bl	8002cae <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020000 	.word	0x40020000

08001138 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <MX_I2C1_Init+0x74>)
 8001174:	f002 f832 	bl	80031dc <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fc0f 	bl	80019a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001186:	f002 fbab 	bl	80038e0 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fc06 	bl	80019a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_I2C1_Init+0x74>)
 8001198:	f002 fbed 	bl	8003976 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fbfd 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000011c 	.word	0x2000011c
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00808cd2 	.word	0x00808cd2

080011b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_I2C_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_I2C_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001204:	2304      	movs	r3, #4
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <HAL_I2C_MspInit+0x84>)
 8001210:	f001 fdfa 	bl	8002e08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x80>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_I2C_MspInit+0x80>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_I2C_MspInit+0x80>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001256:	2308      	movs	r3, #8
 8001258:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f001 f812 	bl	8002284 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	2130      	movs	r1, #48	; 0x30
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f829 	bl	80012c0 <lcd_write>
	HAL_Delay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f001 f808 	bl	8002284 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	2130      	movs	r1, #48	; 0x30
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f81f 	bl	80012c0 <lcd_write>
	HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fffe 	bl	8002284 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	2130      	movs	r1, #48	; 0x30
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f815 	bl	80012c0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80e 	bl	80012c0 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	210c      	movs	r1, #12
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f807 	bl	80012c0 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f89f 	bl	80013f6 <lcd_clear>

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	460b      	mov	r3, r1
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	f023 030f 	bic.w	r3, r3, #15
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80012e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012ec:	f023 030f 	bic.w	r3, r3, #15
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b2da      	uxtb	r2, r3
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	4313      	orrs	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b25a      	sxtb	r2, r3
 8001318:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b299      	uxth	r1, r3
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2304      	movs	r3, #4
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <lcd_write+0x88>)
 8001334:	f001 ffe2 	bl	80032fc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001338:	2005      	movs	r0, #5
 800133a:	f000 ffa3 	bl	8002284 <HAL_Delay>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000011c 	.word	0x2000011c

0800134c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	2300      	movs	r3, #0
 800135a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001366:	2308      	movs	r3, #8
 8001368:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f843 	bl	80013f6 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ffa1 	bl	80012c0 <lcd_write>
	while(lcd->f_line[i])
 800137e:	e00f      	b.n	80013a0 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7818      	ldrb	r0, [r3, #0]
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	7859      	ldrb	r1, [r3, #1]
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f7ff ff93 	bl	80012c0 <lcd_write>
		i++;
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	21c0      	movs	r1, #192	; 0xc0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff81 	bl	80012c0 <lcd_write>
	while(lcd->s_line[i])
 80013be:	e00f      	b.n	80013e0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7818      	ldrb	r0, [r3, #0]
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	7c99      	ldrb	r1, [r3, #18]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	f7ff ff73 	bl	80012c0 <lcd_write>
		i++;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3301      	adds	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	7c9b      	ldrb	r3, [r3, #18]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e9      	bne.n	80013c0 <lcd_display+0x74>
	}
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800140c:	2308      	movs	r3, #8
 800140e:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff51 	bl	80012c0 <lcd_write>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_UART_RxCpltCallback>:

//LCD
struct lcd_disp disp;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_UART_RxCpltCallback+0x4c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d118      	bne.n	800146c <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_UART_RxCpltCallback+0x50>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001446:	f005 fb65 	bl	8006b14 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_UART_RxCpltCallback+0x50>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001456:	f005 faef 	bl	8006a38 <HAL_UART_Transmit_IT>
		counter_usart = atoi(msg_str);
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 800145c:	f006 fe12 	bl	8008084 <atoi>
 8001460:	4603      	mov	r3, r0
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_UART_RxCpltCallback+0x5c>)
 8001464:	6013      	str	r3, [r2, #0]
		flag = 1;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_UART_RxCpltCallback+0x60>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
	}
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40004800 	.word	0x40004800
 8001478:	20000000 	.word	0x20000000
 800147c:	2000017c 	.word	0x2000017c
 8001480:	200002a4 	.word	0x200002a4
 8001484:	200000c0 	.word	0x200000c0
 8001488:	200000c4 	.word	0x200000c4

0800148c <HAL_TIM_IC_CaptureCallback>:

// INPUT CAPTURE FUNCTION
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7f1b      	ldrb	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d148      	bne.n	800152e <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10a      	bne.n	80014ba <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f004 fc04 	bl	8005cb4 <HAL_TIM_ReadCapturedValue>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014b0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e039      	b.n	800152e <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80014ba:	2100      	movs	r1, #0
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f004 fbf9 	bl	8005cb4 <HAL_TIM_ReadCapturedValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014c6:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d907      	bls.n	80014e4 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00d      	b.n	8001500 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d907      	bls.n	8001500 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014fe:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001502:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001512:	edd7 6a03 	vldr	s13, [r7, #12]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800151c:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]


		}
	}

	  if(PID == 0)
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	  }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200000b8 	.word	0x200000b8
 800154c:	200000ac 	.word	0x200000ac
 8001550:	200000b0 	.word	0x200000b0
 8001554:	200000b4 	.word	0x200000b4
 8001558:	49742400 	.word	0x49742400
 800155c:	200000bc 	.word	0x200000bc
 8001560:	20000010 	.word	0x20000010

08001564 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a61      	ldr	r2, [pc, #388]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001572:	4293      	cmp	r3, r2
 8001574:	f040 80b9 	bne.w	80016ea <HAL_TIM_PeriodElapsedCallback+0x186>
  {
//	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint16_t)(readADC_f));


	  	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x198>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001582:	801a      	strh	r2, [r3, #0]

	  	  if (flag == 1)
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x30>
	  	  {
	  		u = counter_usart;
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a5e      	ldr	r2, [pc, #376]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001592:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if (temp_counter != counter) {
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	461a      	mov	r2, r3
 800159c:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d007      	beq.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0x50>
			flag = 0;
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			u = counter;
 80015aa:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80015b2:	601a      	str	r2, [r3, #0]
		}


	  	  temp_counter = __HAL_TIM_GET_COUNTER(&htim3);
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x198>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015be:	801a      	strh	r2, [r3, #0]


  		  error = u - frequency;
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	4b51      	ldr	r3, [pc, #324]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015da:	ee17 2a90 	vmov	r2, s15
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015e0:	601a      	str	r2, [r3, #0]

  		  p_term = (float)(Kp * error);
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]

  		  integral = previous_integral + (error+previous_error);
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	441a      	add	r2, r3
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	4a47      	ldr	r2, [pc, #284]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001610:	6013      	str	r3, [r2, #0]
  		  previous_integral = integral;
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a44      	ldr	r2, [pc, #272]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]
  		  i_term = Ki*integral*(dt/2);
 800161a:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001630:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001632:	edd3 6a00 	vldr	s13, [r3]
 8001636:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800163a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001644:	edc3 7a00 	vstr	s15, [r3]

  		  derivative = (error - previous_error)/dt;
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800166e:	601a      	str	r2, [r3, #0]
  		  previous_error = error;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001676:	6013      	str	r3, [r2, #0]
  		  d_term = Kd*derivative;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001690:	edc3 7a00 	vstr	s15, [r3]

  		  PID = (uint16_t)(p_term + i_term + d_term);
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b2:	ee17 3a90 	vmov	r3, s15
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016bc:	601a      	str	r2, [r3, #0]

  		  if (PID > 1000)
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c6:	dd04      	ble.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x16e>
  		  {
  			  PID = 1000;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e006      	b.n	80016e0 <HAL_TIM_PeriodElapsedCallback+0x17c>
  		  }
  		  else if(PID < 0)
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da02      	bge.n	80016e0 <HAL_TIM_PeriodElapsedCallback+0x17c>
  		  {
  			  PID =0;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
  		  }
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PID);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c

  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	200001c0 	.word	0x200001c0
 8001700:	2000017a 	.word	0x2000017a
 8001704:	200000c4 	.word	0x200000c4
 8001708:	200000c0 	.word	0x200000c0
 800170c:	20000198 	.word	0x20000198
 8001710:	2000016c 	.word	0x2000016c
 8001714:	200000bc 	.word	0x200000bc
 8001718:	20000188 	.word	0x20000188
 800171c:	20000004 	.word	0x20000004
 8001720:	20000180 	.word	0x20000180
 8001724:	200000a4 	.word	0x200000a4
 8001728:	200000a8 	.word	0x200000a8
 800172c:	20000194 	.word	0x20000194
 8001730:	20000008 	.word	0x20000008
 8001734:	2000000c 	.word	0x2000000c
 8001738:	20000184 	.word	0x20000184
 800173c:	20000170 	.word	0x20000170
 8001740:	200000a0 	.word	0x200000a0
 8001744:	20000190 	.word	0x20000190
 8001748:	20000010 	.word	0x20000010
 800174c:	2000020c 	.word	0x2000020c

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f000 fd39 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f894 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f7ff fbd4 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001760:	f000 f9ea 	bl	8001b38 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001764:	f7ff fb3e 	bl	8000de4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001768:	f000 fa94 	bl	8001c94 <MX_TIM2_Init>
  MX_I2C1_Init();
 800176c:	f7ff fce4 	bl	8001138 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001770:	f000 fb0c 	bl	8001d8c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001774:	f000 fc84 	bl	8002080 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001778:	4833      	ldr	r0, [pc, #204]	; (8001848 <main+0xf8>)
 800177a:	f003 fa47 	bl	8004c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800177e:	2108      	movs	r1, #8
 8001780:	4831      	ldr	r0, [pc, #196]	; (8001848 <main+0xf8>)
 8001782:	f003 fb1d 	bl	8004dc0 <HAL_TIM_PWM_Start>

// Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001786:	2100      	movs	r1, #0
 8001788:	4830      	ldr	r0, [pc, #192]	; (800184c <main+0xfc>)
 800178a:	f003 fc75 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800178e:	2108      	movs	r1, #8
 8001790:	482e      	ldr	r0, [pc, #184]	; (800184c <main+0xfc>)
 8001792:	f003 fc71 	bl	8005078 <HAL_TIM_IC_Start_IT>

//  Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001796:	213c      	movs	r1, #60	; 0x3c
 8001798:	482d      	ldr	r0, [pc, #180]	; (8001850 <main+0x100>)
 800179a:	f003 fe63 	bl	8005464 <HAL_TIM_Encoder_Start>
//USART
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <main+0x104>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	492c      	ldr	r1, [pc, #176]	; (8001858 <main+0x108>)
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <main+0x10c>)
 80017aa:	f005 f9b3 	bl	8006b14 <HAL_UART_Receive_IT>


  // LCD init
  disp.addr = (0x27 << 1);
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <main+0x110>)
 80017b0:	224e      	movs	r2, #78	; 0x4e
 80017b2:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <main+0x110>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80017bc:	4828      	ldr	r0, [pc, #160]	; (8001860 <main+0x110>)
 80017be:	f7ff fd3f 	bl	8001240 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 80017c2:	4928      	ldr	r1, [pc, #160]	; (8001864 <main+0x114>)
 80017c4:	4828      	ldr	r0, [pc, #160]	; (8001868 <main+0x118>)
 80017c6:	f006 fc93 	bl	80080f0 <siprintf>
  sprintf((char *)&disp.s_line, "################");
 80017ca:	4926      	ldr	r1, [pc, #152]	; (8001864 <main+0x114>)
 80017cc:	4827      	ldr	r0, [pc, #156]	; (800186c <main+0x11c>)
 80017ce:	f006 fc8f 	bl	80080f0 <siprintf>

  lcd_display(&disp);
 80017d2:	4823      	ldr	r0, [pc, #140]	; (8001860 <main+0x110>)
 80017d4:	f7ff fdba 	bl	800134c <lcd_display>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
// odczyt z ADC

	  HAL_ADC_Start(&hadc1);
 80017d8:	4825      	ldr	r0, [pc, #148]	; (8001870 <main+0x120>)
 80017da:	f000 fdbb 	bl	8002354 <HAL_ADC_Start>
		 if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80017de:	2164      	movs	r1, #100	; 0x64
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <main+0x120>)
 80017e2:	f000 fe85 	bl	80024f0 <HAL_ADC_PollForConversion>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d119      	bne.n	8001820 <main+0xd0>
		 {
			readADC = HAL_ADC_GetValue(&hadc1);
 80017ec:	4820      	ldr	r0, [pc, #128]	; (8001870 <main+0x120>)
 80017ee:	f000 ff0a 	bl	8002606 <HAL_ADC_GetValue>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <main+0x124>)
 80017f8:	801a      	strh	r2, [r3, #0]
			readADC_f = readADC / 4.095;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <main+0x124>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fea8 	bl	8000554 <__aeabi_i2d>
 8001804:	a30e      	add	r3, pc, #56	; (adr r3, 8001840 <main+0xf0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7ff f837 	bl	800087c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f919 	bl	8000a4c <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	4a16      	ldr	r2, [pc, #88]	; (8001878 <main+0x128>)
 800181e:	6013      	str	r3, [r2, #0]
		 }

		 sprintf((char *)&disp.f_line, "var: %d", counter);
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <main+0x12c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4916      	ldr	r1, [pc, #88]	; (8001880 <main+0x130>)
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <main+0x118>)
 800182a:	f006 fc61 	bl	80080f0 <siprintf>
		 lcd_display(&disp);
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <main+0x110>)
 8001830:	f7ff fd8c 	bl	800134c <lcd_display>
		 HAL_Delay(500);
 8001834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001838:	f000 fd24 	bl	8002284 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800183c:	e7cc      	b.n	80017d8 <main+0x88>
 800183e:	bf00      	nop
 8001840:	ae147ae1 	.word	0xae147ae1
 8001844:	40106147 	.word	0x40106147
 8001848:	2000020c 	.word	0x2000020c
 800184c:	20000258 	.word	0x20000258
 8001850:	200001c0 	.word	0x200001c0
 8001854:	20000000 	.word	0x20000000
 8001858:	2000017c 	.word	0x2000017c
 800185c:	200002a4 	.word	0x200002a4
 8001860:	2000019c 	.word	0x2000019c
 8001864:	08008a80 	.word	0x08008a80
 8001868:	2000019d 	.word	0x2000019d
 800186c:	200001ae 	.word	0x200001ae
 8001870:	200000d4 	.word	0x200000d4
 8001874:	20000178 	.word	0x20000178
 8001878:	20000168 	.word	0x20000168
 800187c:	2000017a 	.word	0x2000017a
 8001880:	08008a94 	.word	0x08008a94

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0b4      	sub	sp, #208	; 0xd0
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f006 fc24 	bl	80080e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	2284      	movs	r2, #132	; 0x84
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 fc15 	bl	80080e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018b6:	f002 f8ab 	bl	8003a10 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <SystemClock_Config+0x114>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <SystemClock_Config+0x114>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <SystemClock_Config+0x114>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <SystemClock_Config+0x118>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <SystemClock_Config+0x118>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <SystemClock_Config+0x118>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800190a:	2304      	movs	r3, #4
 800190c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001910:	2348      	movs	r3, #72	; 0x48
 8001912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f882 	bl	8003a30 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001932:	f000 f835 	bl	80019a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001956:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800195a:	2102      	movs	r1, #2
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fb0b 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001968:	f000 f81a 	bl	80019a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800196c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001970:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001972:	2300      	movs	r3, #0
 8001974:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001976:	2300      	movs	r3, #0
 8001978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fcfc 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800198a:	f000 f809 	bl	80019a0 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	37d0      	adds	r7, #208	; 0xd0
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 fc00 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a4e:	f003 fd97 	bl	8005580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000020c 	.word	0x2000020c

08001a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <TIM2_IRQHandler+0x10>)
 8001a62:	f003 fd8d 	bl	8005580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000258 	.word	0x20000258

08001a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM3_IRQHandler+0x10>)
 8001a76:	f003 fd83 	bl	8005580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001c0 	.word	0x200001c0

08001a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART3_IRQHandler+0x10>)
 8001a8a:	f005 f891 	bl	8006bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002a4 	.word	0x200002a4

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aa0:	f001 fb78 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f006 fad8 	bl	800808c <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20050000 	.word	0x20050000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	200000c8 	.word	0x200000c8
 8001b10:	20000340 	.word	0x20000340

08001b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09a      	sub	sp, #104	; 0x68
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	615a      	str	r2, [r3, #20]
 8001b6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	222c      	movs	r2, #44	; 0x2c
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f006 fab4 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b7a:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <MX_TIM1_Init+0x158>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b80:	2247      	movs	r2, #71	; 0x47
 8001b82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b98:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba4:	4839      	ldr	r0, [pc, #228]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001ba6:	f002 ffd9 	bl	8004b5c <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bb0:	f7ff fef6 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4832      	ldr	r0, [pc, #200]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001bc2:	f003 ffad 	bl	8005b20 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001bcc:	f7ff fee8 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bd0:	482e      	ldr	r0, [pc, #184]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001bd2:	f003 f893 	bl	8004cfc <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bdc:	f7ff fee0 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4826      	ldr	r0, [pc, #152]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001bf4:	f004 fda8 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bfe:	f7ff fecf 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	; 0x60
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c24:	2208      	movs	r2, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001c2a:	f003 fe65 	bl	80058f8 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c34:	f7ff feb4 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001c6e:	f004 fdf9 	bl	8006864 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001c78:	f7ff fe92 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM1_Init+0x154>)
 8001c7e:	f000 f9c7 	bl	8002010 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3768      	adds	r7, #104	; 0x68
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000020c 	.word	0x2000020c
 8001c90:	40010000 	.word	0x40010000

08001c94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cca:	2247      	movs	r2, #71	; 0x47
 8001ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ce8:	4827      	ldr	r0, [pc, #156]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001cea:	f002 ff37 	bl	8004b5c <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001cf4:	f7ff fe54 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4619      	mov	r1, r3
 8001d04:	4820      	ldr	r0, [pc, #128]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001d06:	f003 ff0b 	bl	8005b20 <HAL_TIM_ConfigClockSource>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d10:	f7ff fe46 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d14:	481c      	ldr	r0, [pc, #112]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001d16:	f003 f94d 	bl	8004fb4 <HAL_TIM_IC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d20:	f7ff fe3e 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4815      	ldr	r0, [pc, #84]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001d34:	f004 fd08 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001d3e:	f7ff fe2f 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001d5a:	f003 fd30 	bl	80057be <HAL_TIM_IC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001d64:	f7ff fe1c 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <MX_TIM2_Init+0xf4>)
 8001d70:	f003 fd25 	bl	80057be <HAL_TIM_IC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001d7a:	f7ff fe11 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3730      	adds	r7, #48	; 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000258 	.word	0x20000258

08001d8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2224      	movs	r2, #36	; 0x24
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f006 f9a0 	bl	80080e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	463b      	mov	r3, r7
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001dac:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <MX_TIM3_Init+0xa4>)
 8001dae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001dbe:	2264      	movs	r2, #100	; 0x64
 8001dc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de6:	2301      	movs	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001dfa:	f003 fa8d 	bl	8005318 <HAL_TIM_Encoder_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e04:	f7ff fdcc 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_TIM3_Init+0xa0>)
 8001e16:	f004 fc97 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e20:	f7ff fdbe 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200001c0 	.word	0x200001c0
 8001e30:	40000400 	.word	0x40000400

08001e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <HAL_TIM_Base_MspInit+0xf8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d114      	bne.n	8001e80 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2019      	movs	r0, #25
 8001e74:	f000 feff 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e78:	2019      	movs	r0, #25
 8001e7a:	f000 ff18 	bl	8002cae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e7e:	e051      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d14c      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4811      	ldr	r0, [pc, #68]	; (8001f34 <HAL_TIM_Base_MspInit+0x100>)
 8001eee:	f000 ff8b 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480a      	ldr	r0, [pc, #40]	; (8001f38 <HAL_TIM_Base_MspInit+0x104>)
 8001f10:	f000 ff7a 	bl	8002e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	201c      	movs	r0, #28
 8001f1a:	f000 feac 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f1e:	201c      	movs	r0, #28
 8001f20:	f000 fec5 	bl	8002cae <HAL_NVIC_EnableIRQ>
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400

08001f3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d14b      	bne.n	8001ff6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001fc2:	f000 ff21 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001fe2:	f000 ff11 	bl	8002e08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	201d      	movs	r0, #29
 8001fec:	f000 fe43 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ff0:	201d      	movs	r0, #29
 8001ff2:	f000 fe5c 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40000400 	.word	0x40000400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020800 	.word	0x40020800

08002010 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_TIM_MspPostInit+0x64>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d11c      	bne.n	800206c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_TIM_MspPostInit+0x68>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_TIM_MspPostInit+0x68>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_TIM_MspPostInit+0x68>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800205c:	2301      	movs	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4619      	mov	r1, r3
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_TIM_MspPostInit+0x6c>)
 8002068:	f000 fece 	bl	8002e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800
 800207c:	40021000 	.word	0x40021000

08002080 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f004 fc6a 	bl	800699c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff fc67 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200002a4 	.word	0x200002a4
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_UART_MspInit+0x8c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d130      	bne.n	8002164 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_UART_MspInit+0x90>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_UART_MspInit+0x90>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_UART_MspInit+0x90>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_MspInit+0x90>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_UART_MspInit+0x90>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_UART_MspInit+0x90>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002144:	2307      	movs	r3, #7
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <HAL_UART_MspInit+0x94>)
 8002150:	f000 fe5a 	bl	8002e08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2027      	movs	r0, #39	; 0x27
 800215a:	f000 fd8c 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215e:	2027      	movs	r0, #39	; 0x27
 8002160:	f000 fda5 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40004800 	.word	0x40004800
 8002170:	40023800 	.word	0x40023800
 8002174:	40020c00 	.word	0x40020c00

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a2:	f7ff fcb7 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f005 ff77 	bl	8008098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff fad1 	bl	8001750 <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80021bc:	08008bf8 	.word	0x08008bf8
  ldr r2, =_sbss
 80021c0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80021c4:	2000033c 	.word	0x2000033c

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>

080021ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 fd46 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 f805 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021da:	f7ff fbe7 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fd61 	bl	8002cca <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 fd29 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000014 	.word	0x20000014
 800223c:	2000001c 	.word	0x2000001c
 8002240:	20000018 	.word	0x20000018

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000001c 	.word	0x2000001c
 8002268:	20000328 	.word	0x20000328

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000328 	.word	0x20000328

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000001c 	.word	0x2000001c

080022cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e031      	b.n	8002346 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fdcc 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_ADC_Init+0x84>)
 8002310:	4013      	ands	r3, r2
 8002312:	f043 0202 	orr.w	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fad6 	bl	80028cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
 8002336:	e001      	b.n	800233c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	ffffeefd 	.word	0xffffeefd

08002354 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0ad      	b.n	80024ca <HAL_ADC_Start+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d018      	beq.n	80023b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_ADC_Start+0x184>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_ADC_Start+0x188>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d175      	bne.n	80024b0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <HAL_ADC_Start+0x18c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	d106      	bne.n	800240e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f023 0206 	bic.w	r2, r3, #6
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	645a      	str	r2, [r3, #68]	; 0x44
 800240c:	e002      	b.n	8002414 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002424:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_ADC_Start+0x190>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d143      	bne.n	80024c8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e03a      	b.n	80024c8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_ADC_Start+0x194>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10e      	bne.n	800247a <HAL_ADC_Start+0x126>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002478:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_ADC_Start+0x190>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d120      	bne.n	80024c8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_ADC_Start+0x198>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d11b      	bne.n	80024c8 <HAL_ADC_Start+0x174>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d114      	bne.n	80024c8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e00b      	b.n	80024c8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000014 	.word	0x20000014
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	fffff8fe 	.word	0xfffff8fe
 80024e4:	40012300 	.word	0x40012300
 80024e8:	40012000 	.word	0x40012000
 80024ec:	40012200 	.word	0x40012200

080024f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250c:	d113      	bne.n	8002536 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251c:	d10b      	bne.n	8002536 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e063      	b.n	80025fe <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002536:	f7ff fe99 	bl	800226c <HAL_GetTick>
 800253a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800253c:	e021      	b.n	8002582 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d01d      	beq.n	8002582 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_ADC_PollForConversion+0x6c>
 800254c:	f7ff fe8e 	bl	800226c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d212      	bcs.n	8002582 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d00b      	beq.n	8002582 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0204 	orr.w	r2, r3, #4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03d      	b.n	80025fe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d1d6      	bne.n	800253e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0212 	mvn.w	r2, #18
 8002598:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d123      	bne.n	80025fc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11f      	bne.n	80025fc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d111      	bne.n	80025fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1c>
 8002638:	2302      	movs	r3, #2
 800263a:	e136      	b.n	80028aa <HAL_ADC_ConfigChannel+0x28a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b09      	cmp	r3, #9
 800264a:	d93a      	bls.n	80026c2 <HAL_ADC_ConfigChannel+0xa2>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002654:	d035      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	3b1e      	subs	r3, #30
 800266c:	2207      	movs	r2, #7
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a8d      	ldr	r2, [pc, #564]	; (80028b8 <HAL_ADC_ConfigChannel+0x298>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10a      	bne.n	800269c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	061a      	lsls	r2, r3, #24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269a:	e035      	b.n	8002708 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4403      	add	r3, r0
 80026b4:	3b1e      	subs	r3, #30
 80026b6:	409a      	lsls	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c0:	e022      	b.n	8002708 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43da      	mvns	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	400a      	ands	r2, r1
 80026e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4403      	add	r3, r0
 80026fe:	409a      	lsls	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b06      	cmp	r3, #6
 800270e:	d824      	bhi.n	800275a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b05      	subs	r3, #5
 8002722:	221f      	movs	r2, #31
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b05      	subs	r3, #5
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
 8002758:	e04c      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d824      	bhi.n	80027ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	; 0x23
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b23      	subs	r3, #35	; 0x23
 800279e:	fa00 f203 	lsl.w	r2, r0, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
 80027aa:	e023      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b41      	subs	r3, #65	; 0x41
 80027be:	221f      	movs	r2, #31
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b41      	subs	r3, #65	; 0x41
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_ADC_ConfigChannel+0x29c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10a      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1f4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800280e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002812:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_ADC_ConfigChannel+0x29c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10f      	bne.n	800283e <HAL_ADC_ConfigChannel+0x21e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b12      	cmp	r3, #18
 8002824:	d10b      	bne.n	800283e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002830:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800283c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_ADC_ConfigChannel+0x29c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d12b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x280>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_ADC_ConfigChannel+0x298>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <HAL_ADC_ConfigChannel+0x23a>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b11      	cmp	r3, #17
 8002858:	d122      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002864:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800286c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002870:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_ADC_ConfigChannel+0x298>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9a      	lsrs	r2, r3, #18
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002892:	e002      	b.n	800289a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3b01      	subs	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f9      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	10000012 	.word	0x10000012
 80028bc:	40012000 	.word	0x40012000
 80028c0:	40012300 	.word	0x40012300
 80028c4:	20000014 	.word	0x20000014
 80028c8:	431bde83 	.word	0x431bde83

080028cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <ADC_Init+0x1ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a77      	ldr	r2, [pc, #476]	; (8002ab8 <ADC_Init+0x1ec>)
 80028da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <ADC_Init+0x1ec>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4973      	ldr	r1, [pc, #460]	; (8002ab8 <ADC_Init+0x1ec>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	021a      	lsls	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	4a58      	ldr	r2, [pc, #352]	; (8002abc <ADC_Init+0x1f0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800296e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e00f      	b.n	80029c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0202 	bic.w	r2, r2, #2
 80029d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	005a      	lsls	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	035a      	lsls	r2, r3, #13
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e007      	b.n	8002a3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	051a      	lsls	r2, r3, #20
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7e:	025a      	lsls	r2, r3, #9
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	029a      	lsls	r2, r3, #10
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40012300 	.word	0x40012300
 8002abc:	0f000001 	.word	0x0f000001

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	05fa0000 	.word	0x05fa0000

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff29 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff3e 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff31 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff fabc 	bl	800226c <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d008      	beq.n	8002d14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e052      	b.n	8002dba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0216 	bic.w	r2, r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_DMA_Abort+0x62>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0208 	bic.w	r2, r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e013      	b.n	8002d8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff fa81 	bl	800226c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d90c      	bls.n	8002d8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e015      	b.n	8002dba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e4      	bne.n	8002d66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	223f      	movs	r2, #63	; 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00c      	b.n	8002dfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2205      	movs	r2, #5
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e175      	b.n	8003114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f040 8164 	bne.w	800310e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d005      	beq.n	8002e5e <HAL_GPIO_Init+0x56>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d017      	beq.n	8002efc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d123      	bne.n	8002f50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80be 	beq.w	800310e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002faa:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_GPIO_Init+0x328>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_GPIO_Init+0x32c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d037      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x334>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_GPIO_Init+0x338>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x232>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_GPIO_Init+0x33c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_GPIO_Init+0x340>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_GPIO_Init+0x344>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_GPIO_Init+0x348>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_GPIO_Init+0x34c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	; (8003158 <HAL_GPIO_Init+0x350>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x21a>
 800301e:	2309      	movs	r3, #9
 8003020:	e012      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003022:	230a      	movs	r3, #10
 8003024:	e010      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003026:	2308      	movs	r3, #8
 8003028:	e00e      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302a:	2307      	movs	r3, #7
 800302c:	e00c      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302e:	2306      	movs	r3, #6
 8003030:	e00a      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003032:	2305      	movs	r3, #5
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003036:	2304      	movs	r3, #4
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x328>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_GPIO_Init+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_GPIO_Init+0x354>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_GPIO_Init+0x354>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_GPIO_Init+0x354>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f ae86 	bls.w	8002e28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40022000 	.word	0x40022000
 8003158:	40022400 	.word	0x40022400
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f806 	bl	80031c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd ffd8 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	e006      	b.n	8003264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d104      	bne.n	8003276 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003274:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_I2C_Init+0x11c>)
 8003282:	430b      	orrs	r3, r1
 8003284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	02008000 	.word	0x02008000

080032fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	460b      	mov	r3, r1
 800330a:	817b      	strh	r3, [r7, #10]
 800330c:	4613      	mov	r3, r2
 800330e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b20      	cmp	r3, #32
 800331a:	f040 80da 	bne.w	80034d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2C_Master_Transmit+0x30>
 8003328:	2302      	movs	r3, #2
 800332a:	e0d3      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003334:	f7fe ff9a 	bl	800226c <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2319      	movs	r3, #25
 8003340:	2201      	movs	r2, #1
 8003342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8f0 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0be      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2221      	movs	r2, #33	; 0x21
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2210      	movs	r2, #16
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	893a      	ldrh	r2, [r7, #8]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	2bff      	cmp	r3, #255	; 0xff
 8003386:	d90e      	bls.n	80033a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	b2da      	uxtb	r2, r3
 8003394:	8979      	ldrh	r1, [r7, #10]
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_I2C_Master_Transmit+0x1e0>)
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa6c 	bl	800387c <I2C_TransferConfig>
 80033a4:	e06c      	b.n	8003480 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8979      	ldrh	r1, [r7, #10]
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_I2C_Master_Transmit+0x1e0>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fa5b 	bl	800387c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033c6:	e05b      	b.n	8003480 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8ed 	bl	80035ac <I2C_WaitOnTXISFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e07b      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d034      	beq.n	8003480 <HAL_I2C_Master_Transmit+0x184>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d130      	bne.n	8003480 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f87f 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e04d      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	d90e      	bls.n	8003460 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	b2da      	uxtb	r2, r3
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	2300      	movs	r3, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fa0f 	bl	800387c <I2C_TransferConfig>
 800345e:	e00f      	b.n	8003480 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	b2da      	uxtb	r2, r3
 8003470:	8979      	ldrh	r1, [r7, #10]
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f9fe 	bl	800387c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d19e      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f8cc 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e01a      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2220      	movs	r2, #32
 80034a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	80002000 	.word	0x80002000
 80034e0:	fe00e800 	.word	0xfe00e800

080034e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d103      	bne.n	8003502 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d007      	beq.n	8003520 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	619a      	str	r2, [r3, #24]
  }
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353c:	e022      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d01e      	beq.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe fe91 	bl	800226c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d113      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e00f      	b.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d0cd      	beq.n	800353e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b8:	e02c      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f870 	bl	80036a4 <I2C_IsErrorOccurred>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e02a      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d01e      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe fe49 	bl	800226c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d113      	bne.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d1cb      	bne.n	80035ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003638:	e028      	b.n	800368c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f830 	bl	80036a4 <I2C_IsErrorOccurred>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e026      	b.n	800369c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fe0d 	bl	800226c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d113      	bne.n	800368c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e007      	b.n	800369c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b20      	cmp	r3, #32
 8003698:	d1cf      	bne.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d075      	beq.n	80037bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2210      	movs	r2, #16
 80036d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d8:	e056      	b.n	8003788 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d052      	beq.n	8003788 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fe fdc3 	bl	800226c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <I2C_IsErrorOccurred+0x54>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d147      	bne.n	8003788 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800370a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d12e      	bne.n	800377a <I2C_IsErrorOccurred+0xd6>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003722:	d02a      	beq.n	800377a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b20      	cmp	r3, #32
 8003728:	d027      	beq.n	800377a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003738:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800373a:	f7fe fd97 	bl	800226c <HAL_GetTick>
 800373e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003740:	e01b      	b.n	800377a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003742:	f7fe fd93 	bl	800226c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b19      	cmp	r3, #25
 800374e:	d914      	bls.n	800377a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d1dc      	bne.n	8003742 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d003      	beq.n	800379e <I2C_IsErrorOccurred+0xfa>
 8003796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800379a:	2b00      	cmp	r3, #0
 800379c:	d09d      	beq.n	80036da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800379e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800382a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe56 	bl	80034e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <I2C_IsErrorOccurred+0x1d4>)
 8003844:	400b      	ands	r3, r1
 8003846:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800386c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	fe00e800 	.word	0xfe00e800

0800387c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	4613      	mov	r3, r2
 800388c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003894:	7a7b      	ldrb	r3, [r7, #9]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	0d5b      	lsrs	r3, r3, #21
 80038b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <I2C_TransferConfig+0x60>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	43db      	mvns	r3, r3
 80038c0:	ea02 0103 	and.w	r1, r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	03ff63ff 	.word	0x03ff63ff

080038e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d138      	bne.n	8003968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003900:	2302      	movs	r3, #2
 8003902:	e032      	b.n	800396a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b20      	cmp	r3, #32
 800398a:	d139      	bne.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003996:	2302      	movs	r3, #2
 8003998:	e033      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40007000 	.word	0x40007000

08003a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e291      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8087 	beq.w	8003b62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a54:	4b96      	ldr	r3, [pc, #600]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d00c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a60:	4b93      	ldr	r3, [pc, #588]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d112      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62>
 8003a6c:	4b90      	ldr	r3, [pc, #576]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a78:	d10b      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7a:	4b8d      	ldr	r3, [pc, #564]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d06c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x130>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d168      	bne.n	8003b60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e26b      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9a:	d106      	bne.n	8003aaa <HAL_RCC_OscConfig+0x7a>
 8003a9c:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a83      	ldr	r2, [pc, #524]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e02e      	b.n	8003b08 <HAL_RCC_OscConfig+0xd8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x9c>
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b7c      	ldr	r3, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7b      	ldr	r2, [pc, #492]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e01d      	b.n	8003b08 <HAL_RCC_OscConfig+0xd8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a75      	ldr	r2, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a72      	ldr	r2, [pc, #456]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e00b      	b.n	8003b08 <HAL_RCC_OscConfig+0xd8>
 8003af0:	4b6f      	ldr	r3, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6b      	ldr	r2, [pc, #428]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d013      	beq.n	8003b38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fe fbac 	bl	800226c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fe fba8 	bl	800226c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e21f      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0xe8>
 8003b36:	e014      	b.n	8003b62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fb98 	bl	800226c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fe fb94 	bl	800226c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e20b      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x110>
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d069      	beq.n	8003c42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6e:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d11c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x190>
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_RCC_OscConfig+0x17a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e1df      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	493d      	ldr	r1, [pc, #244]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	e040      	b.n	8003c42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a38      	ldr	r2, [pc, #224]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fb4a 	bl	800226c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fe fb46 	bl	800226c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1bd      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4929      	ldr	r1, [pc, #164]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
 8003c0e:	e018      	b.n	8003c42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fb26 	bl	800226c <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fb22 	bl	800226c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e199      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d038      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d019      	beq.n	8003c8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe fb03 	bl	800226c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fe faff 	bl	800226c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e176      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x23a>
 8003c88:	e01a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x280>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fe fae9 	bl	800226c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fae5 	bl	800226c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d903      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e15c      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
 8003cb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b91      	ldr	r3, [pc, #580]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ee      	bne.n	8003c9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a4 	beq.w	8003e16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	4a87      	ldr	r2, [pc, #540]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce6:	4b85      	ldr	r3, [pc, #532]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	; (8003f00 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d02:	4b7f      	ldr	r3, [pc, #508]	; (8003f00 <HAL_RCC_OscConfig+0x4d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7e      	ldr	r2, [pc, #504]	; (8003f00 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe faad 	bl	800226c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fe faa9 	bl	800226c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e120      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d28:	4b75      	ldr	r3, [pc, #468]	; (8003f00 <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x31a>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
 8003d48:	e02d      	b.n	8003da6 <HAL_RCC_OscConfig+0x376>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x33c>
 8003d52:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a69      	ldr	r2, [pc, #420]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a66      	ldr	r2, [pc, #408]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCC_OscConfig+0x376>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCC_OscConfig+0x35e>
 8003d74:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a60      	ldr	r2, [pc, #384]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a5d      	ldr	r2, [pc, #372]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCC_OscConfig+0x376>
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a5a      	ldr	r2, [pc, #360]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	4b58      	ldr	r3, [pc, #352]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a57      	ldr	r2, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fe fa5d 	bl	800226c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fa59 	bl	800226c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0ce      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ee      	beq.n	8003db6 <HAL_RCC_OscConfig+0x386>
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fe fa47 	bl	800226c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fe fa43 	bl	800226c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	4b40      	ldr	r3, [pc, #256]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a4 	beq.w	8003f68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d06b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d149      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fe fa14 	bl	800226c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe fa10 	bl	800226c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e087      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f9e4 	bl	800226c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f9e0 	bl	800226c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e057      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x478>
 8003ec6:	e04f      	b.n	8003f68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f9ca 	bl	800226c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe f9c6 	bl	800226c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e03d      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_OscConfig+0x4cc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x4ac>
 8003efa:	e035      	b.n	8003f68 <HAL_RCC_OscConfig+0x538>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x544>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d028      	beq.n	8003f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0d0      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d910      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b67      	ldr	r3, [pc, #412]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 020f 	bic.w	r2, r3, #15
 8003fa6:	4965      	ldr	r1, [pc, #404]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d040      	beq.n	800409c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d115      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e073      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06b      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4936      	ldr	r1, [pc, #216]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fe f8fe 	bl	800226c <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fe f8fa 	bl	800226c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e053      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d210      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 020f 	bic.w	r2, r3, #15
 80040b2:	4922      	ldr	r1, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x1cc>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1d0>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1d4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe f85a 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	08008a9c 	.word	0x08008a9c
 8004148:	20000014 	.word	0x20000014
 800414c:	20000018 	.word	0x20000018

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	2300      	movs	r3, #0
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004168:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x40>
 8004174:	2b08      	cmp	r3, #8
 8004176:	f200 80bd 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x3a>
 8004182:	e0b7      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004186:	60bb      	str	r3, [r7, #8]
      break;
 8004188:	e0b7      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800418c:	60bb      	str	r3, [r7, #8]
      break;
 800418e:	e0b4      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004198:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04d      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	461a      	mov	r2, r3
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	ea02 0800 	and.w	r8, r2, r0
 80041be:	ea03 0901 	and.w	r9, r3, r1
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	014b      	lsls	r3, r1, #5
 80041d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d4:	0142      	lsls	r2, r0, #5
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	ebb0 0008 	subs.w	r0, r0, r8
 80041de:	eb61 0109 	sbc.w	r1, r1, r9
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f0:	0182      	lsls	r2, r0, #6
 80041f2:	1a12      	subs	r2, r2, r0
 80041f4:	eb63 0301 	sbc.w	r3, r3, r1
 80041f8:	f04f 0000 	mov.w	r0, #0
 80041fc:	f04f 0100 	mov.w	r1, #0
 8004200:	00d9      	lsls	r1, r3, #3
 8004202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004206:	00d0      	lsls	r0, r2, #3
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	eb12 0208 	adds.w	r2, r2, r8
 8004210:	eb43 0309 	adc.w	r3, r3, r9
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	0259      	lsls	r1, r3, #9
 800421e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004222:	0250      	lsls	r0, r2, #9
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f7fc fc5a 	bl	8000aec <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e04a      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	461a      	mov	r2, r3
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	ea02 0400 	and.w	r4, r2, r0
 800425a:	ea03 0501 	and.w	r5, r3, r1
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	014b      	lsls	r3, r1, #5
 800426c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004270:	0142      	lsls	r2, r0, #5
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	1b00      	subs	r0, r0, r4
 8004278:	eb61 0105 	sbc.w	r1, r1, r5
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	018b      	lsls	r3, r1, #6
 8004286:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428a:	0182      	lsls	r2, r0, #6
 800428c:	1a12      	subs	r2, r2, r0
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	00d9      	lsls	r1, r3, #3
 800429c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a0:	00d0      	lsls	r0, r2, #3
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	1912      	adds	r2, r2, r4
 80042a8:	eb45 0303 	adc.w	r3, r5, r3
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0299      	lsls	r1, r3, #10
 80042b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042ba:	0290      	lsls	r0, r2, #10
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f7fc fc0e 	bl	8000aec <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	60bb      	str	r3, [r7, #8]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042f6:	60bb      	str	r3, [r7, #8]
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000014 	.word	0x20000014

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	08008aac 	.word	0x08008aac

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004358:	f7ff ffdc 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0b5b      	lsrs	r3, r3, #13
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	08008aac 	.word	0x08008aac

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a4:	4b69      	ldr	r3, [pc, #420]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	4964      	ldr	r1, [pc, #400]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	4959      	ldr	r1, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	494a      	ldr	r1, [pc, #296]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808b 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4a39      	ldr	r2, [pc, #228]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6413      	str	r3, [r2, #64]	; 0x40
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd fef2 	bl	800226c <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fd feee 	bl	800226c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e357      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d114      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd feb6 	bl	800226c <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd feb2 	bl	800226c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e319      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004532:	d111      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004542:	400b      	ands	r3, r1
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
 8004554:	0ffffcff 	.word	0x0ffffcff
 8004558:	4bb1      	ldr	r3, [pc, #708]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4ab0      	ldr	r2, [pc, #704]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	4bae      	ldr	r3, [pc, #696]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	49ab      	ldr	r1, [pc, #684]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004582:	4ba7      	ldr	r3, [pc, #668]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	4aa5      	ldr	r2, [pc, #660]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004592:	4ba3      	ldr	r3, [pc, #652]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004594:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	49a0      	ldr	r1, [pc, #640]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b0:	4b9b      	ldr	r3, [pc, #620]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045be:	4998      	ldr	r1, [pc, #608]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d2:	4b93      	ldr	r3, [pc, #588]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	498f      	ldr	r1, [pc, #572]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f4:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	4987      	ldr	r1, [pc, #540]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004616:	4b82      	ldr	r3, [pc, #520]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	497e      	ldr	r1, [pc, #504]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004638:	4b79      	ldr	r3, [pc, #484]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4976      	ldr	r1, [pc, #472]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465a:	4b71      	ldr	r3, [pc, #452]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 020c 	bic.w	r2, r3, #12
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	496d      	ldr	r1, [pc, #436]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	4965      	ldr	r1, [pc, #404]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800469e:	4b60      	ldr	r3, [pc, #384]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	495c      	ldr	r1, [pc, #368]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c0:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	4954      	ldr	r1, [pc, #336]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046e2:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	494b      	ldr	r1, [pc, #300]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004704:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	4943      	ldr	r1, [pc, #268]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	493a      	ldr	r1, [pc, #232]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004756:	4932      	ldr	r1, [pc, #200]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004778:	4929      	ldr	r1, [pc, #164]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4919      	ldr	r1, [pc, #100]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047dc:	4910      	ldr	r1, [pc, #64]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d006      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80d9 	beq.w	80049aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fd fd32 	bl	800226c <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800480a:	e00b      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800480c:	f7fd fd2e 	bl	800226c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d904      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e197      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004824:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ed      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d021      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11d      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004844:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	019a      	lsls	r2, r3, #6
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	071b      	lsls	r3, r3, #28
 8004878:	4957      	ldr	r1, [pc, #348]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d129      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ac:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c0:	0f1b      	lsrs	r3, r3, #28
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	019a      	lsls	r2, r3, #6
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	493d      	ldr	r1, [pc, #244]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	f023 021f 	bic.w	r2, r3, #31
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4937      	ldr	r1, [pc, #220]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01d      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	0e1b      	lsrs	r3, r3, #24
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	0f1b      	lsrs	r3, r3, #28
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	019a      	lsls	r2, r3, #6
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	431a      	orrs	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	071b      	lsls	r3, r3, #28
 8004940:	4925      	ldr	r1, [pc, #148]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	019a      	lsls	r2, r3, #6
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	071b      	lsls	r3, r3, #28
 8004970:	4919      	ldr	r1, [pc, #100]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004984:	f7fd fc72 	bl	800226c <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800498c:	f7fd fc6e 	bl	800226c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0d7      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f040 80cd 	bne.w	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049be:	f7fd fc55 	bl	800226c <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049c4:	e00a      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c6:	f7fd fc51 	bl	800226c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b64      	cmp	r3, #100	; 0x64
 80049d2:	d903      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0ba      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049dc:	4b5e      	ldr	r3, [pc, #376]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e8:	d0ed      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02e      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d12a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a12:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	0f1b      	lsrs	r3, r3, #28
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	019a      	lsls	r2, r3, #6
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	071b      	lsls	r3, r3, #28
 8004a46:	4944      	ldr	r1, [pc, #272]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	493d      	ldr	r1, [pc, #244]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d022      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7c:	d11d      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	4929      	ldr	r1, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	019a      	lsls	r2, r3, #6
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	431a      	orrs	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	4917      	ldr	r1, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4911      	ldr	r1, [pc, #68]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fd fba2 	bl	800226c <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b2c:	f7fd fb9e 	bl	800226c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e007      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4a:	d1ef      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e049      	b.n	8004c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd f956 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f001 f8ec 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e054      	b.n	8004cce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d01d      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <HAL_TIM_Base_Start_IT+0xe0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d115      	bne.n	8004cb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xec>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d015      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d011      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e008      	b.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e049      	b.n	8004da2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f841 	bl	8004daa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f001 f81c 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <HAL_TIM_PWM_Start+0x24>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e03c      	b.n	8004e5e <HAL_TIM_PWM_Start+0x9e>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d109      	bne.n	8004dfe <HAL_TIM_PWM_Start+0x3e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	bf14      	ite	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	2300      	moveq	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	e02f      	b.n	8004e5e <HAL_TIM_PWM_Start+0x9e>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d109      	bne.n	8004e18 <HAL_TIM_PWM_Start+0x58>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	e022      	b.n	8004e5e <HAL_TIM_PWM_Start+0x9e>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d109      	bne.n	8004e32 <HAL_TIM_PWM_Start+0x72>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	e015      	b.n	8004e5e <HAL_TIM_PWM_Start+0x9e>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d109      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x8c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e008      	b.n	8004e5e <HAL_TIM_PWM_Start+0x9e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e092      	b.n	8004f8c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start+0xb6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	e023      	b.n	8004ebe <HAL_TIM_PWM_Start+0xfe>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0xc6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	e01b      	b.n	8004ebe <HAL_TIM_PWM_Start+0xfe>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0xd6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	e013      	b.n	8004ebe <HAL_TIM_PWM_Start+0xfe>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xe6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ea4:	e00b      	b.n	8004ebe <HAL_TIM_PWM_Start+0xfe>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xf6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	e003      	b.n	8004ebe <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fc18 	bl	80066fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a30      	ldr	r2, [pc, #192]	; (8004f94 <HAL_TIM_PWM_Start+0x1d4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIM_PWM_Start+0x120>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <HAL_TIM_PWM_Start+0x1d8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_PWM_Start+0x124>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x126>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <HAL_TIM_PWM_Start+0x1d4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d01d      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <HAL_TIM_PWM_Start+0x1dc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <HAL_TIM_PWM_Start+0x1e0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_PWM_Start+0x1e4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <HAL_TIM_PWM_Start+0x1d8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_TIM_PWM_Start+0x1e8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x18a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <HAL_TIM_PWM_Start+0x1ec>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d115      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <HAL_TIM_PWM_Start+0x1f0>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b06      	cmp	r3, #6
 8004f5a:	d015      	beq.n	8004f88 <HAL_TIM_PWM_Start+0x1c8>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f62:	d011      	beq.n	8004f88 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	e008      	b.n	8004f88 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010400 	.word	0x40010400
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40001800 	.word	0x40001800
 8004fb0:	00010007 	.word	0x00010007

08004fb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f841 	bl	8005062 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fec0 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start_IT+0x1e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e023      	b.n	80050de <HAL_TIM_IC_Start_IT+0x66>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_IC_Start_IT+0x2e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e01b      	b.n	80050de <HAL_TIM_IC_Start_IT+0x66>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start_IT+0x3e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e013      	b.n	80050de <HAL_TIM_IC_Start_IT+0x66>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_IC_Start_IT+0x4e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e00b      	b.n	80050de <HAL_TIM_IC_Start_IT+0x66>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_IC_Start_IT+0x5e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e003      	b.n	80050de <HAL_TIM_IC_Start_IT+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <HAL_TIM_IC_Start_IT+0x78>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e013      	b.n	8005118 <HAL_TIM_IC_Start_IT+0xa0>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d104      	bne.n	8005100 <HAL_TIM_IC_Start_IT+0x88>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e00b      	b.n	8005118 <HAL_TIM_IC_Start_IT+0xa0>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d104      	bne.n	8005110 <HAL_TIM_IC_Start_IT+0x98>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e003      	b.n	8005118 <HAL_TIM_IC_Start_IT+0xa0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005116:	b2db      	uxtb	r3, r3
 8005118:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	7bbb      	ldrb	r3, [r7, #14]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005120:	7b7b      	ldrb	r3, [r7, #13]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0e2      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <HAL_TIM_IC_Start_IT+0xc2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005138:	e023      	b.n	8005182 <HAL_TIM_IC_Start_IT+0x10a>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d104      	bne.n	800514a <HAL_TIM_IC_Start_IT+0xd2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005148:	e01b      	b.n	8005182 <HAL_TIM_IC_Start_IT+0x10a>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d104      	bne.n	800515a <HAL_TIM_IC_Start_IT+0xe2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005158:	e013      	b.n	8005182 <HAL_TIM_IC_Start_IT+0x10a>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d104      	bne.n	800516a <HAL_TIM_IC_Start_IT+0xf2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	e00b      	b.n	8005182 <HAL_TIM_IC_Start_IT+0x10a>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b10      	cmp	r3, #16
 800516e:	d104      	bne.n	800517a <HAL_TIM_IC_Start_IT+0x102>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005178:	e003      	b.n	8005182 <HAL_TIM_IC_Start_IT+0x10a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Start_IT+0x11a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005190:	e013      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x142>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_IC_Start_IT+0x12a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x142>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_IC_Start_IT+0x13a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	e003      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x142>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d841      	bhi.n	8005244 <HAL_TIM_IC_Start_IT+0x1cc>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HAL_TIM_IC_Start_IT+0x150>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	08005245 	.word	0x08005245
 80051d0:	08005245 	.word	0x08005245
 80051d4:	08005245 	.word	0x08005245
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	08005245 	.word	0x08005245
 80051e0:	08005245 	.word	0x08005245
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005221 	.word	0x08005221
 80051ec:	08005245 	.word	0x08005245
 80051f0:	08005245 	.word	0x08005245
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005233 	.word	0x08005233
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0202 	orr.w	r2, r2, #2
 800520a:	60da      	str	r2, [r3, #12]
      break;
 800520c:	e01d      	b.n	800524a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0204 	orr.w	r2, r2, #4
 800521c:	60da      	str	r2, [r3, #12]
      break;
 800521e:	e014      	b.n	800524a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0208 	orr.w	r2, r2, #8
 800522e:	60da      	str	r2, [r3, #12]
      break;
 8005230:	e00b      	b.n	800524a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0210 	orr.w	r2, r2, #16
 8005240:	60da      	str	r2, [r3, #12]
      break;
 8005242:	e002      	b.n	800524a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      break;
 8005248:	bf00      	nop
  }

  if (status == HAL_OK)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d14e      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f001 fa4f 	bl	80066fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <HAL_TIM_IC_Start_IT+0x280>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d022      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d01d      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_TIM_IC_Start_IT+0x284>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d018      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_TIM_IC_Start_IT+0x288>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_TIM_IC_Start_IT+0x28c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_TIM_IC_Start_IT+0x290>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1b      	ldr	r2, [pc, #108]	; (800530c <HAL_TIM_IC_Start_IT+0x294>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_IC_Start_IT+0x236>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <HAL_TIM_IC_Start_IT+0x298>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d115      	bne.n	80052da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	4b17      	ldr	r3, [pc, #92]	; (8005314 <HAL_TIM_IC_Start_IT+0x29c>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d015      	beq.n	80052ec <HAL_TIM_IC_Start_IT+0x274>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d011      	beq.n	80052ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	e008      	b.n	80052ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e000      	b.n	80052ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40010400 	.word	0x40010400
 800530c:	40014000 	.word	0x40014000
 8005310:	40001800 	.word	0x40001800
 8005314:	00010007 	.word	0x00010007

08005318 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e08f      	b.n	800544c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fc fdfb 	bl	8001f3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6899      	ldr	r1, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b3e      	ldr	r3, [pc, #248]	; (8005454 <HAL_TIM_Encoder_Init+0x13c>)
 800535a:	400b      	ands	r3, r1
 800535c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f000 fd05 	bl	8005d78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_TIM_Encoder_Init+0x140>)
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	4313      	orrs	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4b2b      	ldr	r3, [pc, #172]	; (800545c <HAL_TIM_Encoder_Init+0x144>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <HAL_TIM_Encoder_Init+0x148>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	4313      	orrs	r3, r2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	031b      	lsls	r3, r3, #12
 80053d8:	4313      	orrs	r3, r2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4313      	orrs	r3, r2
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	fffebff8 	.word	0xfffebff8
 8005458:	fffffcfc 	.word	0xfffffcfc
 800545c:	fffff3f3 	.word	0xfffff3f3
 8005460:	ffff0f0f 	.word	0xffff0f0f

08005464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005474:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800547c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005484:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d110      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800549a:	7b7b      	ldrb	r3, [r7, #13]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e069      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	e031      	b.n	800551a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d110      	bne.n	80054de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c2:	7b3b      	ldrb	r3, [r7, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e055      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054dc:	e01d      	b.n	800551a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d102      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054f0:	7b3b      	ldrb	r3, [r7, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e03e      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_TIM_Encoder_Start+0xc4>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b04      	cmp	r3, #4
 8005524:	d008      	beq.n	8005538 <HAL_TIM_Encoder_Start+0xd4>
 8005526:	e00f      	b.n	8005548 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f8e3 	bl	80066fc <TIM_CCxChannelCmd>
      break;
 8005536:	e016      	b.n	8005566 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	2104      	movs	r1, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f001 f8db 	bl	80066fc <TIM_CCxChannelCmd>
      break;
 8005546:	e00e      	b.n	8005566 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2201      	movs	r2, #1
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f001 f8d3 	bl	80066fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2201      	movs	r2, #1
 800555c:	2104      	movs	r1, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f8cc 	bl	80066fc <TIM_CCxChannelCmd>
      break;
 8005564:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d122      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0202 	mvn.w	r2, #2
 80055ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb ff62 	bl	800148c <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fbb6 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fbbd 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d122      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d11b      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0204 	mvn.w	r2, #4
 8005600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb ff38 	bl	800148c <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fb8c 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb93 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b08      	cmp	r3, #8
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0208 	mvn.w	r2, #8
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fb ff0e 	bl	800148c <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fb62 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb69 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b10      	cmp	r3, #16
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b10      	cmp	r3, #16
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0210 	mvn.w	r2, #16
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2208      	movs	r2, #8
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb fee4 	bl	800148c <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fb38 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fb3f 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0201 	mvn.w	r2, #1
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb ff30 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f922 	bl	8006974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 f915 	bl	8006988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 faed 	bl	8005d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b20      	cmp	r3, #32
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0220 	mvn.w	r2, #32
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f8d5 	bl	8006960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80057d8:	2302      	movs	r3, #2
 80057da:	e088      	b.n	80058ee <HAL_TIM_IC_ConfigChannel+0x130>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11b      	bne.n	8005822 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f000 fdbb 	bl	8006374 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 020c 	bic.w	r2, r2, #12
 800580c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	619a      	str	r2, [r3, #24]
 8005820:	e060      	b.n	80058e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d11c      	bne.n	8005862 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f000 fe3f 	bl	80064ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800584a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	619a      	str	r2, [r3, #24]
 8005860:	e040      	b.n	80058e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f000 fe8c 	bl	8006594 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 020c 	bic.w	r2, r2, #12
 800588a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69d9      	ldr	r1, [r3, #28]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
 800589e:	e021      	b.n	80058e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	d11c      	bne.n	80058e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6819      	ldr	r1, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f000 fea9 	bl	800660c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	61da      	str	r2, [r3, #28]
 80058de:	e001      	b.n	80058e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005912:	2302      	movs	r3, #2
 8005914:	e0ff      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b14      	cmp	r3, #20
 8005922:	f200 80f0 	bhi.w	8005b06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005981 	.word	0x08005981
 8005930:	08005b07 	.word	0x08005b07
 8005934:	08005b07 	.word	0x08005b07
 8005938:	08005b07 	.word	0x08005b07
 800593c:	080059c1 	.word	0x080059c1
 8005940:	08005b07 	.word	0x08005b07
 8005944:	08005b07 	.word	0x08005b07
 8005948:	08005b07 	.word	0x08005b07
 800594c:	08005a03 	.word	0x08005a03
 8005950:	08005b07 	.word	0x08005b07
 8005954:	08005b07 	.word	0x08005b07
 8005958:	08005b07 	.word	0x08005b07
 800595c:	08005a43 	.word	0x08005a43
 8005960:	08005b07 	.word	0x08005b07
 8005964:	08005b07 	.word	0x08005b07
 8005968:	08005b07 	.word	0x08005b07
 800596c:	08005a85 	.word	0x08005a85
 8005970:	08005b07 	.word	0x08005b07
 8005974:	08005b07 	.word	0x08005b07
 8005978:	08005b07 	.word	0x08005b07
 800597c:	08005ac5 	.word	0x08005ac5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fa96 	bl	8005eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0208 	orr.w	r2, r2, #8
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0204 	bic.w	r2, r2, #4
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	619a      	str	r2, [r3, #24]
      break;
 80059be:	e0a5      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fae8 	bl	8005f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	619a      	str	r2, [r3, #24]
      break;
 8005a00:	e084      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fb3f 	bl	800608c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0208 	orr.w	r2, r2, #8
 8005a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0204 	bic.w	r2, r2, #4
 8005a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	61da      	str	r2, [r3, #28]
      break;
 8005a40:	e064      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fb95 	bl	8006178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	021a      	lsls	r2, r3, #8
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	61da      	str	r2, [r3, #28]
      break;
 8005a82:	e043      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fbcc 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0208 	orr.w	r2, r2, #8
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0204 	bic.w	r2, r2, #4
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ac2:	e023      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fbfe 	bl	80062cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	021a      	lsls	r2, r3, #8
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b04:	e002      	b.n	8005b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop

08005b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_ConfigClockSource+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e0b4      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x186>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <HAL_TIM_ConfigClockSource+0x190>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b74:	d03e      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7a:	f200 8087 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	f000 8086 	beq.w	8005c92 <HAL_TIM_ConfigClockSource+0x172>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	d87f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d87b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b60      	cmp	r3, #96	; 0x60
 8005b96:	d050      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x11a>
 8005b98:	2b60      	cmp	r3, #96	; 0x60
 8005b9a:	d877      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b50      	cmp	r3, #80	; 0x50
 8005b9e:	d03c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0xfa>
 8005ba0:	2b50      	cmp	r3, #80	; 0x50
 8005ba2:	d873      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d058      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x13a>
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d86f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d064      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d86b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d060      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d867      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05c      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d05a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	e062      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6899      	ldr	r1, [r3, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f000 fd71 	bl	80066bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	609a      	str	r2, [r3, #8]
      break;
 8005bf2:	e04f      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f000 fd5a 	bl	80066bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c16:	609a      	str	r2, [r3, #8]
      break;
 8005c18:	e03c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f000 fc18 	bl	800645c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2150      	movs	r1, #80	; 0x50
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fd27 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005c38:	e02c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 fc74 	bl	8006534 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2160      	movs	r1, #96	; 0x60
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fd17 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005c58:	e01c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 fbf8 	bl	800645c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2140      	movs	r1, #64	; 0x40
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fd07 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005c78:	e00c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f000 fcfe 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005c8a:	e003      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	fffeff88 	.word	0xfffeff88

08005cb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d831      	bhi.n	8005d2c <HAL_TIM_ReadCapturedValue+0x78>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d23 	.word	0x08005d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	60fb      	str	r3, [r7, #12]

      break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	60fb      	str	r3, [r7, #12]

      break;
 8005d16:	e00a      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	60fb      	str	r3, [r7, #12]

      break;
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	60fb      	str	r3, [r7, #12]

      break;
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d2c:	bf00      	nop
  }

  return tmpreg;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d00f      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3d      	ldr	r2, [pc, #244]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3c      	ldr	r2, [pc, #240]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3b      	ldr	r2, [pc, #236]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d027      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d023      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <TIM_Base_SetConfig+0x128>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a27      	ldr	r2, [pc, #156]	; (8005ea4 <TIM_Base_SetConfig+0x12c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <TIM_Base_SetConfig+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a25      	ldr	r2, [pc, #148]	; (8005eac <TIM_Base_SetConfig+0x134>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <TIM_Base_SetConfig+0x138>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <TIM_Base_SetConfig+0x13c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0xf8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	615a      	str	r2, [r3, #20]
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800
 8005eac:	40001800 	.word	0x40001800
 8005eb0:	40001c00 	.word	0x40001c00
 8005eb4:	40002000 	.word	0x40002000

08005eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0201 	bic.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <TIM_OC1_SetConfig+0xd8>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 0302 	bic.w	r3, r3, #2
 8005f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <TIM_OC1_SetConfig+0xdc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_OC1_SetConfig+0x64>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <TIM_OC1_SetConfig+0xe0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10c      	bne.n	8005f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0308 	bic.w	r3, r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <TIM_OC1_SetConfig+0xdc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_OC1_SetConfig+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <TIM_OC1_SetConfig+0xe0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d111      	bne.n	8005f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	fffeff8f 	.word	0xfffeff8f
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40010400 	.word	0x40010400

08005f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f023 0210 	bic.w	r2, r3, #16
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <TIM_OC2_SetConfig+0xe4>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0320 	bic.w	r3, r3, #32
 8005fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a23      	ldr	r2, [pc, #140]	; (8006084 <TIM_OC2_SetConfig+0xe8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_OC2_SetConfig+0x68>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a22      	ldr	r2, [pc, #136]	; (8006088 <TIM_OC2_SetConfig+0xec>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10d      	bne.n	8006020 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <TIM_OC2_SetConfig+0xe8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC2_SetConfig+0x94>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <TIM_OC2_SetConfig+0xec>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d113      	bne.n	8006058 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800603e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	feff8fff 	.word	0xfeff8fff
 8006084:	40010000 	.word	0x40010000
 8006088:	40010400 	.word	0x40010400

0800608c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4b2d      	ldr	r3, [pc, #180]	; (800616c <TIM_OC3_SetConfig+0xe0>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <TIM_OC3_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0x66>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a21      	ldr	r2, [pc, #132]	; (8006174 <TIM_OC3_SetConfig+0xe8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10d      	bne.n	800610e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a17      	ldr	r2, [pc, #92]	; (8006170 <TIM_OC3_SetConfig+0xe4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_OC3_SetConfig+0x92>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a16      	ldr	r2, [pc, #88]	; (8006174 <TIM_OC3_SetConfig+0xe8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d113      	bne.n	8006146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	621a      	str	r2, [r3, #32]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	fffeff8f 	.word	0xfffeff8f
 8006170:	40010000 	.word	0x40010000
 8006174:	40010400 	.word	0x40010400

08006178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <TIM_OC4_SetConfig+0xa4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a13      	ldr	r2, [pc, #76]	; (8006220 <TIM_OC4_SetConfig+0xa8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC4_SetConfig+0x68>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a12      	ldr	r2, [pc, #72]	; (8006224 <TIM_OC4_SetConfig+0xac>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d109      	bne.n	80061f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	feff8fff 	.word	0xfeff8fff
 8006220:	40010000 	.word	0x40010000
 8006224:	40010400 	.word	0x40010400

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <TIM_OC5_SetConfig+0x98>)
 8006254:	4013      	ands	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <TIM_OC5_SetConfig+0x9c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_OC5_SetConfig+0x5e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <TIM_OC5_SetConfig+0xa0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d109      	bne.n	800629a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	fffeff8f 	.word	0xfffeff8f
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40010400 	.word	0x40010400

080062cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4b1c      	ldr	r3, [pc, #112]	; (8006368 <TIM_OC6_SetConfig+0x9c>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <TIM_OC6_SetConfig+0xa0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC6_SetConfig+0x60>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <TIM_OC6_SetConfig+0xa4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d109      	bne.n	8006340 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	feff8fff 	.word	0xfeff8fff
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_TI1_SetConfig+0xcc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01b      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a8:	d017      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a25      	ldr	r2, [pc, #148]	; (8006444 <TIM_TI1_SetConfig+0xd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a24      	ldr	r2, [pc, #144]	; (8006448 <TIM_TI1_SetConfig+0xd4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a23      	ldr	r2, [pc, #140]	; (800644c <TIM_TI1_SetConfig+0xd8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a22      	ldr	r2, [pc, #136]	; (8006450 <TIM_TI1_SetConfig+0xdc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <TIM_TI1_SetConfig+0xe0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_TI1_SetConfig+0x66>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a20      	ldr	r2, [pc, #128]	; (8006458 <TIM_TI1_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d101      	bne.n	80063de <TIM_TI1_SetConfig+0x6a>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <TIM_TI1_SetConfig+0x6c>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e003      	b.n	80063fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	b2db      	uxtb	r3, r3
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f023 030a 	bic.w	r3, r3, #10
 8006418:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f003 030a 	and.w	r3, r3, #10
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40010400 	.word	0x40010400
 8006454:	40014000 	.word	0x40014000
 8006458:	40001800 	.word	0x40001800

0800645c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 030a 	bic.w	r3, r3, #10
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b087      	sub	sp, #28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0210 	bic.w	r2, r3, #16
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	b29b      	uxth	r3, r3
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800650c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f023 0210 	bic.w	r2, r3, #16
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800655e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	031b      	lsls	r3, r3, #12
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 0303 	bic.w	r3, r3, #3
 80065c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006638:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800664a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	b29b      	uxth	r3, r3
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800665e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	031b      	lsls	r3, r3, #12
 8006664:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f043 0307 	orr.w	r3, r3, #7
 80066a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	431a      	orrs	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	609a      	str	r2, [r3, #8]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2201      	movs	r2, #1
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1a      	ldr	r2, [r3, #32]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e06d      	b.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a30      	ldr	r2, [pc, #192]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2f      	ldr	r2, [pc, #188]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d108      	bne.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800679a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a20      	ldr	r2, [pc, #128]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d022      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d01d      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d018      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d013      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00e      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a16      	ldr	r2, [pc, #88]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a15      	ldr	r2, [pc, #84]	; (8006860 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40010000 	.word	0x40010000
 800684c:	40010400 	.word	0x40010400
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00
 800685c:	40014000 	.word	0x40014000
 8006860:	40001800 	.word	0x40001800

08006864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800687c:	2302      	movs	r3, #2
 800687e:	e065      	b.n	800694c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a16      	ldr	r2, [pc, #88]	; (8006958 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a14      	ldr	r2, [pc, #80]	; (800695c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d115      	bne.n	800693a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	051b      	lsls	r3, r3, #20
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e040      	b.n	8006a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fb fb8e 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fbd2 	bl	8007184 <UART_SetConfig>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e022      	b.n	8006a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fe28 	bl	8007648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 feaf 	bl	800778c <UART_CheckIdleState>
 8006a2e:	4603      	mov	r3, r0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b08b      	sub	sp, #44	; 0x2c
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d156      	bne.n	8006afc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_UART_Transmit_IT+0x22>
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e04f      	b.n	8006afe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Transmit_IT+0x34>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e048      	b.n	8006afe <HAL_UART_Transmit_IT+0xc6>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2221      	movs	r2, #33	; 0x21
 8006a9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	d107      	bne.n	8006ab8 <HAL_UART_Transmit_IT+0x80>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <HAL_UART_Transmit_IT+0xd4>)
 8006ab4:	669a      	str	r2, [r3, #104]	; 0x68
 8006ab6:	e002      	b.n	8006abe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <HAL_UART_Transmit_IT+0xd8>)
 8006abc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	372c      	adds	r7, #44	; 0x2c
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	08007cb9 	.word	0x08007cb9
 8006b10:	08007c03 	.word	0x08007c03

08006b14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d13d      	bne.n	8006ba6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_UART_Receive_IT+0x22>
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e036      	b.n	8006ba8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_UART_Receive_IT+0x34>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e02f      	b.n	8006ba8 <HAL_UART_Receive_IT+0x94>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	613b      	str	r3, [r7, #16]
   return(result);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	69f9      	ldr	r1, [r7, #28]
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e6      	bne.n	8006b64 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 feed 	bl	800797c <UART_Start_Receive_IT>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	e000      	b.n	8006ba8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
  }
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b0ba      	sub	sp, #232	; 0xe8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bda:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bde:	4013      	ands	r3, r2
 8006be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d115      	bne.n	8006c18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00f      	beq.n	8006c18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 828f 	beq.w	800712c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
      }
      return;
 8006c16:	e289      	b.n	800712c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8117 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c32:	4b85      	ldr	r3, [pc, #532]	; (8006e48 <HAL_UART_IRQHandler+0x298>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 810a 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <HAL_UART_IRQHandler+0xbc>
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c62:	f043 0201 	orr.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <HAL_UART_IRQHandler+0xec>
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	f043 0204 	orr.w	r2, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d011      	beq.n	8006ccc <HAL_UART_IRQHandler+0x11c>
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc2:	f043 0202 	orr.w	r2, r3, #2
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d017      	beq.n	8006d08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfe:	f043 0208 	orr.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_UART_IRQHandler+0x18a>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 81f5 	beq.w	8007130 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d005      	beq.n	8006d92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04f      	beq.n	8006e32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 febc 	bl	8007b10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d141      	bne.n	8006e2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3308      	adds	r3, #8
 8006dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1d9      	bne.n	8006da6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d013      	beq.n	8006e22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <HAL_UART_IRQHandler+0x29c>)
 8006e00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fb ffdb 	bl	8002dc2 <HAL_DMA_Abort_IT>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d017      	beq.n	8006e42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e00f      	b.n	8006e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f998 	bl	8007158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e00b      	b.n	8006e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f994 	bl	8007158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	e007      	b.n	8006e42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f990 	bl	8007158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e40:	e176      	b.n	8007130 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e42:	bf00      	nop
    return;
 8006e44:	e174      	b.n	8007130 <HAL_UART_IRQHandler+0x580>
 8006e46:	bf00      	nop
 8006e48:	04000120 	.word	0x04000120
 8006e4c:	08007bd7 	.word	0x08007bd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	f040 8144 	bne.w	80070e2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 813d 	beq.w	80070e2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8136 	beq.w	80070e2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	f040 80b2 	bne.w	8006ff2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8148 	beq.w	8007134 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f080 8140 	bcs.w	8007134 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec8:	f000 8085 	beq.w	8006fd6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006efa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1da      	bne.n	8006ecc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e1      	bne.n	8006f16 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e3      	bne.n	8006f52 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e4      	bne.n	8006f96 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fb fe86 	bl	8002ce2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8be 	bl	800716c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ff0:	e0a0      	b.n	8007134 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8092 	beq.w	8007138 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 808d 	beq.w	8007138 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007040:	647b      	str	r3, [r7, #68]	; 0x44
 8007042:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800704e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e4      	bne.n	800701e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	623b      	str	r3, [r7, #32]
   return(result);
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007078:	633a      	str	r2, [r7, #48]	; 0x30
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e3      	bne.n	8007054 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e4      	bne.n	800709e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f846 	bl	800716c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e0:	e02a      	b.n	8007138 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01c      	beq.n	800713c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
    }
    return;
 800710a:	e017      	b.n	800713c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d012      	beq.n	800713e <HAL_UART_IRQHandler+0x58e>
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fe27 	bl	8007d78 <UART_EndTransmit_IT>
    return;
 800712a:	e008      	b.n	800713e <HAL_UART_IRQHandler+0x58e>
      return;
 800712c:	bf00      	nop
 800712e:	e006      	b.n	800713e <HAL_UART_IRQHandler+0x58e>
    return;
 8007130:	bf00      	nop
 8007132:	e004      	b.n	800713e <HAL_UART_IRQHandler+0x58e>
      return;
 8007134:	bf00      	nop
 8007136:	e002      	b.n	800713e <HAL_UART_IRQHandler+0x58e>
      return;
 8007138:	bf00      	nop
 800713a:	e000      	b.n	800713e <HAL_UART_IRQHandler+0x58e>
    return;
 800713c:	bf00      	nop
  }

}
 800713e:	37e8      	adds	r7, #232	; 0xe8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4ba7      	ldr	r3, [pc, #668]	; (800744c <UART_SetConfig+0x2c8>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	6979      	ldr	r1, [r7, #20]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a95      	ldr	r2, [pc, #596]	; (8007450 <UART_SetConfig+0x2cc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d120      	bne.n	8007242 <UART_SetConfig+0xbe>
 8007200:	4b94      	ldr	r3, [pc, #592]	; (8007454 <UART_SetConfig+0x2d0>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	2b03      	cmp	r3, #3
 800720c:	d816      	bhi.n	800723c <UART_SetConfig+0xb8>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <UART_SetConfig+0x90>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007225 	.word	0x08007225
 8007218:	08007231 	.word	0x08007231
 800721c:	0800722b 	.word	0x0800722b
 8007220:	08007237 	.word	0x08007237
 8007224:	2301      	movs	r3, #1
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e14f      	b.n	80074ca <UART_SetConfig+0x346>
 800722a:	2302      	movs	r3, #2
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e14c      	b.n	80074ca <UART_SetConfig+0x346>
 8007230:	2304      	movs	r3, #4
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e149      	b.n	80074ca <UART_SetConfig+0x346>
 8007236:	2308      	movs	r3, #8
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e146      	b.n	80074ca <UART_SetConfig+0x346>
 800723c:	2310      	movs	r3, #16
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e143      	b.n	80074ca <UART_SetConfig+0x346>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a84      	ldr	r2, [pc, #528]	; (8007458 <UART_SetConfig+0x2d4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d132      	bne.n	80072b2 <UART_SetConfig+0x12e>
 800724c:	4b81      	ldr	r3, [pc, #516]	; (8007454 <UART_SetConfig+0x2d0>)
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f003 030c 	and.w	r3, r3, #12
 8007256:	2b0c      	cmp	r3, #12
 8007258:	d828      	bhi.n	80072ac <UART_SetConfig+0x128>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0xdc>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007295 	.word	0x08007295
 8007264:	080072ad 	.word	0x080072ad
 8007268:	080072ad 	.word	0x080072ad
 800726c:	080072ad 	.word	0x080072ad
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072ad 	.word	0x080072ad
 8007278:	080072ad 	.word	0x080072ad
 800727c:	080072ad 	.word	0x080072ad
 8007280:	0800729b 	.word	0x0800729b
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072ad 	.word	0x080072ad
 8007290:	080072a7 	.word	0x080072a7
 8007294:	2300      	movs	r3, #0
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e117      	b.n	80074ca <UART_SetConfig+0x346>
 800729a:	2302      	movs	r3, #2
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e114      	b.n	80074ca <UART_SetConfig+0x346>
 80072a0:	2304      	movs	r3, #4
 80072a2:	77fb      	strb	r3, [r7, #31]
 80072a4:	e111      	b.n	80074ca <UART_SetConfig+0x346>
 80072a6:	2308      	movs	r3, #8
 80072a8:	77fb      	strb	r3, [r7, #31]
 80072aa:	e10e      	b.n	80074ca <UART_SetConfig+0x346>
 80072ac:	2310      	movs	r3, #16
 80072ae:	77fb      	strb	r3, [r7, #31]
 80072b0:	e10b      	b.n	80074ca <UART_SetConfig+0x346>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a69      	ldr	r2, [pc, #420]	; (800745c <UART_SetConfig+0x2d8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d120      	bne.n	80072fe <UART_SetConfig+0x17a>
 80072bc:	4b65      	ldr	r3, [pc, #404]	; (8007454 <UART_SetConfig+0x2d0>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072c6:	2b30      	cmp	r3, #48	; 0x30
 80072c8:	d013      	beq.n	80072f2 <UART_SetConfig+0x16e>
 80072ca:	2b30      	cmp	r3, #48	; 0x30
 80072cc:	d814      	bhi.n	80072f8 <UART_SetConfig+0x174>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d009      	beq.n	80072e6 <UART_SetConfig+0x162>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d810      	bhi.n	80072f8 <UART_SetConfig+0x174>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <UART_SetConfig+0x15c>
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d006      	beq.n	80072ec <UART_SetConfig+0x168>
 80072de:	e00b      	b.n	80072f8 <UART_SetConfig+0x174>
 80072e0:	2300      	movs	r3, #0
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e0f1      	b.n	80074ca <UART_SetConfig+0x346>
 80072e6:	2302      	movs	r3, #2
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e0ee      	b.n	80074ca <UART_SetConfig+0x346>
 80072ec:	2304      	movs	r3, #4
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e0eb      	b.n	80074ca <UART_SetConfig+0x346>
 80072f2:	2308      	movs	r3, #8
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e0e8      	b.n	80074ca <UART_SetConfig+0x346>
 80072f8:	2310      	movs	r3, #16
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e0e5      	b.n	80074ca <UART_SetConfig+0x346>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a57      	ldr	r2, [pc, #348]	; (8007460 <UART_SetConfig+0x2dc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d120      	bne.n	800734a <UART_SetConfig+0x1c6>
 8007308:	4b52      	ldr	r3, [pc, #328]	; (8007454 <UART_SetConfig+0x2d0>)
 800730a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007312:	2bc0      	cmp	r3, #192	; 0xc0
 8007314:	d013      	beq.n	800733e <UART_SetConfig+0x1ba>
 8007316:	2bc0      	cmp	r3, #192	; 0xc0
 8007318:	d814      	bhi.n	8007344 <UART_SetConfig+0x1c0>
 800731a:	2b80      	cmp	r3, #128	; 0x80
 800731c:	d009      	beq.n	8007332 <UART_SetConfig+0x1ae>
 800731e:	2b80      	cmp	r3, #128	; 0x80
 8007320:	d810      	bhi.n	8007344 <UART_SetConfig+0x1c0>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <UART_SetConfig+0x1a8>
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d006      	beq.n	8007338 <UART_SetConfig+0x1b4>
 800732a:	e00b      	b.n	8007344 <UART_SetConfig+0x1c0>
 800732c:	2300      	movs	r3, #0
 800732e:	77fb      	strb	r3, [r7, #31]
 8007330:	e0cb      	b.n	80074ca <UART_SetConfig+0x346>
 8007332:	2302      	movs	r3, #2
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e0c8      	b.n	80074ca <UART_SetConfig+0x346>
 8007338:	2304      	movs	r3, #4
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e0c5      	b.n	80074ca <UART_SetConfig+0x346>
 800733e:	2308      	movs	r3, #8
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e0c2      	b.n	80074ca <UART_SetConfig+0x346>
 8007344:	2310      	movs	r3, #16
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e0bf      	b.n	80074ca <UART_SetConfig+0x346>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a45      	ldr	r2, [pc, #276]	; (8007464 <UART_SetConfig+0x2e0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d125      	bne.n	80073a0 <UART_SetConfig+0x21c>
 8007354:	4b3f      	ldr	r3, [pc, #252]	; (8007454 <UART_SetConfig+0x2d0>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007362:	d017      	beq.n	8007394 <UART_SetConfig+0x210>
 8007364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007368:	d817      	bhi.n	800739a <UART_SetConfig+0x216>
 800736a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800736e:	d00b      	beq.n	8007388 <UART_SetConfig+0x204>
 8007370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007374:	d811      	bhi.n	800739a <UART_SetConfig+0x216>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <UART_SetConfig+0x1fe>
 800737a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737e:	d006      	beq.n	800738e <UART_SetConfig+0x20a>
 8007380:	e00b      	b.n	800739a <UART_SetConfig+0x216>
 8007382:	2300      	movs	r3, #0
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e0a0      	b.n	80074ca <UART_SetConfig+0x346>
 8007388:	2302      	movs	r3, #2
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e09d      	b.n	80074ca <UART_SetConfig+0x346>
 800738e:	2304      	movs	r3, #4
 8007390:	77fb      	strb	r3, [r7, #31]
 8007392:	e09a      	b.n	80074ca <UART_SetConfig+0x346>
 8007394:	2308      	movs	r3, #8
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e097      	b.n	80074ca <UART_SetConfig+0x346>
 800739a:	2310      	movs	r3, #16
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e094      	b.n	80074ca <UART_SetConfig+0x346>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a30      	ldr	r2, [pc, #192]	; (8007468 <UART_SetConfig+0x2e4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d125      	bne.n	80073f6 <UART_SetConfig+0x272>
 80073aa:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <UART_SetConfig+0x2d0>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b8:	d017      	beq.n	80073ea <UART_SetConfig+0x266>
 80073ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073be:	d817      	bhi.n	80073f0 <UART_SetConfig+0x26c>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c4:	d00b      	beq.n	80073de <UART_SetConfig+0x25a>
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ca:	d811      	bhi.n	80073f0 <UART_SetConfig+0x26c>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x254>
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d006      	beq.n	80073e4 <UART_SetConfig+0x260>
 80073d6:	e00b      	b.n	80073f0 <UART_SetConfig+0x26c>
 80073d8:	2301      	movs	r3, #1
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e075      	b.n	80074ca <UART_SetConfig+0x346>
 80073de:	2302      	movs	r3, #2
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e072      	b.n	80074ca <UART_SetConfig+0x346>
 80073e4:	2304      	movs	r3, #4
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e06f      	b.n	80074ca <UART_SetConfig+0x346>
 80073ea:	2308      	movs	r3, #8
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e06c      	b.n	80074ca <UART_SetConfig+0x346>
 80073f0:	2310      	movs	r3, #16
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e069      	b.n	80074ca <UART_SetConfig+0x346>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1c      	ldr	r2, [pc, #112]	; (800746c <UART_SetConfig+0x2e8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d137      	bne.n	8007470 <UART_SetConfig+0x2ec>
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <UART_SetConfig+0x2d0>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800740a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800740e:	d017      	beq.n	8007440 <UART_SetConfig+0x2bc>
 8007410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007414:	d817      	bhi.n	8007446 <UART_SetConfig+0x2c2>
 8007416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741a:	d00b      	beq.n	8007434 <UART_SetConfig+0x2b0>
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007420:	d811      	bhi.n	8007446 <UART_SetConfig+0x2c2>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <UART_SetConfig+0x2aa>
 8007426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742a:	d006      	beq.n	800743a <UART_SetConfig+0x2b6>
 800742c:	e00b      	b.n	8007446 <UART_SetConfig+0x2c2>
 800742e:	2300      	movs	r3, #0
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e04a      	b.n	80074ca <UART_SetConfig+0x346>
 8007434:	2302      	movs	r3, #2
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e047      	b.n	80074ca <UART_SetConfig+0x346>
 800743a:	2304      	movs	r3, #4
 800743c:	77fb      	strb	r3, [r7, #31]
 800743e:	e044      	b.n	80074ca <UART_SetConfig+0x346>
 8007440:	2308      	movs	r3, #8
 8007442:	77fb      	strb	r3, [r7, #31]
 8007444:	e041      	b.n	80074ca <UART_SetConfig+0x346>
 8007446:	2310      	movs	r3, #16
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e03e      	b.n	80074ca <UART_SetConfig+0x346>
 800744c:	efff69f3 	.word	0xefff69f3
 8007450:	40011000 	.word	0x40011000
 8007454:	40023800 	.word	0x40023800
 8007458:	40004400 	.word	0x40004400
 800745c:	40004800 	.word	0x40004800
 8007460:	40004c00 	.word	0x40004c00
 8007464:	40005000 	.word	0x40005000
 8007468:	40011400 	.word	0x40011400
 800746c:	40007800 	.word	0x40007800
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a71      	ldr	r2, [pc, #452]	; (800763c <UART_SetConfig+0x4b8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d125      	bne.n	80074c6 <UART_SetConfig+0x342>
 800747a:	4b71      	ldr	r3, [pc, #452]	; (8007640 <UART_SetConfig+0x4bc>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007484:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007488:	d017      	beq.n	80074ba <UART_SetConfig+0x336>
 800748a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800748e:	d817      	bhi.n	80074c0 <UART_SetConfig+0x33c>
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007494:	d00b      	beq.n	80074ae <UART_SetConfig+0x32a>
 8007496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749a:	d811      	bhi.n	80074c0 <UART_SetConfig+0x33c>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <UART_SetConfig+0x324>
 80074a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a4:	d006      	beq.n	80074b4 <UART_SetConfig+0x330>
 80074a6:	e00b      	b.n	80074c0 <UART_SetConfig+0x33c>
 80074a8:	2300      	movs	r3, #0
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e00d      	b.n	80074ca <UART_SetConfig+0x346>
 80074ae:	2302      	movs	r3, #2
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e00a      	b.n	80074ca <UART_SetConfig+0x346>
 80074b4:	2304      	movs	r3, #4
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e007      	b.n	80074ca <UART_SetConfig+0x346>
 80074ba:	2308      	movs	r3, #8
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e004      	b.n	80074ca <UART_SetConfig+0x346>
 80074c0:	2310      	movs	r3, #16
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e001      	b.n	80074ca <UART_SetConfig+0x346>
 80074c6:	2310      	movs	r3, #16
 80074c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d2:	d15a      	bne.n	800758a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80074d4:	7ffb      	ldrb	r3, [r7, #31]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d827      	bhi.n	800752a <UART_SetConfig+0x3a6>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x35c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fc ff12 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8007508:	61b8      	str	r0, [r7, #24]
        break;
 800750a:	e013      	b.n	8007534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fc ff22 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8007510:	61b8      	str	r0, [r7, #24]
        break;
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b4b      	ldr	r3, [pc, #300]	; (8007644 <UART_SetConfig+0x4c0>)
 8007516:	61bb      	str	r3, [r7, #24]
        break;
 8007518:	e00c      	b.n	8007534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fc fe19 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800751e:	61b8      	str	r0, [r7, #24]
        break;
 8007520:	e008      	b.n	8007534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	61bb      	str	r3, [r7, #24]
        break;
 8007528:	e004      	b.n	8007534 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	77bb      	strb	r3, [r7, #30]
        break;
 8007532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d074      	beq.n	8007624 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	005a      	lsls	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	441a      	add	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d916      	bls.n	8007584 <UART_SetConfig+0x400>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755c:	d212      	bcs.n	8007584 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f023 030f 	bic.w	r3, r3, #15
 8007566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	b29b      	uxth	r3, r3
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	b29a      	uxth	r2, r3
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	4313      	orrs	r3, r2
 8007578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	89fa      	ldrh	r2, [r7, #14]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	e04f      	b.n	8007624 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	77bb      	strb	r3, [r7, #30]
 8007588:	e04c      	b.n	8007624 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d828      	bhi.n	80075e2 <UART_SetConfig+0x45e>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x414>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075e3 	.word	0x080075e3
 80075a8:	080075d3 	.word	0x080075d3
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
 80075b8:	080075db 	.word	0x080075db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fc feb6 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 80075c0:	61b8      	str	r0, [r7, #24]
        break;
 80075c2:	e013      	b.n	80075ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fc fec6 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 80075c8:	61b8      	str	r0, [r7, #24]
        break;
 80075ca:	e00f      	b.n	80075ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <UART_SetConfig+0x4c0>)
 80075ce:	61bb      	str	r3, [r7, #24]
        break;
 80075d0:	e00c      	b.n	80075ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d2:	f7fc fdbd 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80075d6:	61b8      	str	r0, [r7, #24]
        break;
 80075d8:	e008      	b.n	80075ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075de:	61bb      	str	r3, [r7, #24]
        break;
 80075e0:	e004      	b.n	80075ec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	77bb      	strb	r3, [r7, #30]
        break;
 80075ea:	bf00      	nop
    }

    if (pclk != 0U)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d018      	beq.n	8007624 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	085a      	lsrs	r2, r3, #1
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	441a      	add	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b0f      	cmp	r3, #15
 800760a:	d909      	bls.n	8007620 <UART_SetConfig+0x49c>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d205      	bcs.n	8007620 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e001      	b.n	8007624 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007630:	7fbb      	ldrb	r3, [r7, #30]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40007c00 	.word	0x40007c00
 8007640:	40023800 	.word	0x40023800
 8007644:	00f42400 	.word	0x00f42400

08007648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01a      	beq.n	800775e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007746:	d10a      	bne.n	800775e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	605a      	str	r2, [r3, #4]
  }
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800779c:	f7fa fd66 	bl	800226c <HAL_GetTick>
 80077a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d10e      	bne.n	80077ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f817 	bl	80077f2 <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e00d      	b.n	80077ea <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b09c      	sub	sp, #112	; 0x70
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007802:	e0a5      	b.n	8007950 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	f000 80a1 	beq.w	8007950 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780e:	f7fa fd2d 	bl	800226c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <UART_WaitOnFlagUntilTimeout+0x32>
 800781e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007820:	2b00      	cmp	r3, #0
 8007822:	d13e      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007838:	667b      	str	r3, [r7, #100]	; 0x64
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e6      	bne.n	8007824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	663b      	str	r3, [r7, #96]	; 0x60
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007876:	64ba      	str	r2, [r7, #72]	; 0x48
 8007878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800787c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e067      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d04f      	beq.n	8007950 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078be:	d147      	bne.n	8007950 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 0301 	bic.w	r3, r3, #1
 8007912:	66bb      	str	r3, [r7, #104]	; 0x68
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3308      	adds	r3, #8
 800791a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800791c:	623a      	str	r2, [r7, #32]
 800791e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	61bb      	str	r3, [r7, #24]
   return(result);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e5      	bne.n	80078fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e010      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4013      	ands	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	429a      	cmp	r2, r3
 800796c:	f43f af4a 	beq.w	8007804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3770      	adds	r7, #112	; 0x70
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797c:	b480      	push	{r7}
 800797e:	b097      	sub	sp, #92	; 0x5c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ae:	d10e      	bne.n	80079ce <UART_Start_Receive_IT+0x52>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <UART_Start_Receive_IT+0x48>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079c2:	e02d      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	22ff      	movs	r2, #255	; 0xff
 80079c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079cc:	e028      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <UART_Start_Receive_IT+0x76>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <UART_Start_Receive_IT+0x6c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	22ff      	movs	r2, #255	; 0xff
 80079e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079e6:	e01b      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f0:	e016      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079fa:	d10d      	bne.n	8007a18 <UART_Start_Receive_IT+0x9c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <UART_Start_Receive_IT+0x92>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	227f      	movs	r2, #127	; 0x7f
 8007a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a0c:	e008      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	223f      	movs	r2, #63	; 0x3f
 8007a12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a16:	e003      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2222      	movs	r2, #34	; 0x22
 8007a2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	657b      	str	r3, [r7, #84]	; 0x54
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	d107      	bne.n	8007a7c <UART_Start_Receive_IT+0x100>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a24      	ldr	r2, [pc, #144]	; (8007b08 <UART_Start_Receive_IT+0x18c>)
 8007a78:	665a      	str	r2, [r3, #100]	; 0x64
 8007a7a:	e002      	b.n	8007a82 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a23      	ldr	r2, [pc, #140]	; (8007b0c <UART_Start_Receive_IT+0x190>)
 8007a80:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d019      	beq.n	8007ac6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_Start_Receive_IT+0x116>
 8007ac4:	e018      	b.n	8007af8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f043 0320 	orr.w	r3, r3, #32
 8007ada:	653b      	str	r3, [r7, #80]	; 0x50
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae4:	623b      	str	r3, [r7, #32]
 8007ae6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	69f9      	ldr	r1, [r7, #28]
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e6      	bne.n	8007ac6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	375c      	adds	r7, #92	; 0x5c
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	08007f29 	.word	0x08007f29
 8007b0c:	08007dcd 	.word	0x08007dcd

08007b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b095      	sub	sp, #84	; 0x54
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
 8007b38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e6      	bne.n	8007b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e5      	bne.n	8007b4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d118      	bne.n	8007bb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bca:	bf00      	nop
 8007bcc:	3754      	adds	r7, #84	; 0x54
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff faaf 	bl	8007158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b08f      	sub	sp, #60	; 0x3c
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0e:	2b21      	cmp	r3, #33	; 0x21
 8007c10:	d14c      	bne.n	8007cac <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d132      	bne.n	8007c84 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e6      	bne.n	8007c1e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c64:	633b      	str	r3, [r7, #48]	; 0x30
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6979      	ldr	r1, [r7, #20]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e6      	bne.n	8007c50 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c82:	e013      	b.n	8007cac <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007cac:	bf00      	nop
 8007cae:	373c      	adds	r7, #60	; 0x3c
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b091      	sub	sp, #68	; 0x44
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc4:	2b21      	cmp	r3, #33	; 0x21
 8007cc6:	d151      	bne.n	8007d6c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d132      	bne.n	8007d3a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e6      	bne.n	8007cd4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	617b      	str	r3, [r7, #20]
   return(result);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e6      	bne.n	8007d06 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d38:	e018      	b.n	8007d6c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d54:	1c9a      	adds	r2, r3, #2
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d6c:	bf00      	nop
 8007d6e:	3744      	adds	r7, #68	; 0x44
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6979      	ldr	r1, [r7, #20]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e6      	bne.n	8007d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff f9c0 	bl	8007144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dc4:	bf00      	nop
 8007dc6:	3720      	adds	r7, #32
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b096      	sub	sp, #88	; 0x58
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de2:	2b22      	cmp	r3, #34	; 0x22
 8007de4:	f040 8094 	bne.w	8007f10 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007df2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007df6:	b2d9      	uxtb	r1, r3
 8007df8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	400a      	ands	r2, r1
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d177      	bne.n	8007f20 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e44:	653b      	str	r3, [r7, #80]	; 0x50
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e6      	bne.n	8007e30 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	623b      	str	r3, [r7, #32]
   return(result);
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e82:	633a      	str	r2, [r7, #48]	; 0x30
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d12e      	bne.n	8007f08 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f023 0310 	bic.w	r3, r3, #16
 8007ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	69b9      	ldr	r1, [r7, #24]
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	617b      	str	r3, [r7, #20]
   return(result);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e6      	bne.n	8007eb0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d103      	bne.n	8007ef8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff f933 	bl	800716c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f06:	e00b      	b.n	8007f20 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7f9 fa8d 	bl	8001428 <HAL_UART_RxCpltCallback>
}
 8007f0e:	e007      	b.n	8007f20 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0208 	orr.w	r2, r2, #8
 8007f1e:	619a      	str	r2, [r3, #24]
}
 8007f20:	bf00      	nop
 8007f22:	3758      	adds	r7, #88	; 0x58
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b096      	sub	sp, #88	; 0x58
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f36:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f3e:	2b22      	cmp	r3, #34	; 0x22
 8007f40:	f040 8094 	bne.w	800806c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f54:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f68:	1c9a      	adds	r2, r3, #2
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d177      	bne.n	800807c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007faa:	643b      	str	r3, [r7, #64]	; 0x40
 8007fac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e5      	bne.n	8007fbe <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008002:	2b01      	cmp	r3, #1
 8008004:	d12e      	bne.n	8008064 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f023 0310 	bic.w	r3, r3, #16
 8008020:	647b      	str	r3, [r7, #68]	; 0x44
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b10      	cmp	r3, #16
 800804a:	d103      	bne.n	8008054 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2210      	movs	r2, #16
 8008052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff f885 	bl	800716c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008062:	e00b      	b.n	800807c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7f9 f9df 	bl	8001428 <HAL_UART_RxCpltCallback>
}
 800806a:	e007      	b.n	800807c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0208 	orr.w	r2, r2, #8
 800807a:	619a      	str	r2, [r3, #24]
}
 800807c:	bf00      	nop
 800807e:	3758      	adds	r7, #88	; 0x58
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <atoi>:
 8008084:	220a      	movs	r2, #10
 8008086:	2100      	movs	r1, #0
 8008088:	f000 b8d6 	b.w	8008238 <strtol>

0800808c <__errno>:
 800808c:	4b01      	ldr	r3, [pc, #4]	; (8008094 <__errno+0x8>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000020 	.word	0x20000020

08008098 <__libc_init_array>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4d0d      	ldr	r5, [pc, #52]	; (80080d0 <__libc_init_array+0x38>)
 800809c:	4c0d      	ldr	r4, [pc, #52]	; (80080d4 <__libc_init_array+0x3c>)
 800809e:	1b64      	subs	r4, r4, r5
 80080a0:	10a4      	asrs	r4, r4, #2
 80080a2:	2600      	movs	r6, #0
 80080a4:	42a6      	cmp	r6, r4
 80080a6:	d109      	bne.n	80080bc <__libc_init_array+0x24>
 80080a8:	4d0b      	ldr	r5, [pc, #44]	; (80080d8 <__libc_init_array+0x40>)
 80080aa:	4c0c      	ldr	r4, [pc, #48]	; (80080dc <__libc_init_array+0x44>)
 80080ac:	f000 fcdc 	bl	8008a68 <_init>
 80080b0:	1b64      	subs	r4, r4, r5
 80080b2:	10a4      	asrs	r4, r4, #2
 80080b4:	2600      	movs	r6, #0
 80080b6:	42a6      	cmp	r6, r4
 80080b8:	d105      	bne.n	80080c6 <__libc_init_array+0x2e>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c0:	4798      	blx	r3
 80080c2:	3601      	adds	r6, #1
 80080c4:	e7ee      	b.n	80080a4 <__libc_init_array+0xc>
 80080c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ca:	4798      	blx	r3
 80080cc:	3601      	adds	r6, #1
 80080ce:	e7f2      	b.n	80080b6 <__libc_init_array+0x1e>
 80080d0:	08008bf0 	.word	0x08008bf0
 80080d4:	08008bf0 	.word	0x08008bf0
 80080d8:	08008bf0 	.word	0x08008bf0
 80080dc:	08008bf4 	.word	0x08008bf4

080080e0 <memset>:
 80080e0:	4402      	add	r2, r0
 80080e2:	4603      	mov	r3, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <memset+0xa>
 80080e8:	4770      	bx	lr
 80080ea:	f803 1b01 	strb.w	r1, [r3], #1
 80080ee:	e7f9      	b.n	80080e4 <memset+0x4>

080080f0 <siprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b500      	push	{lr}
 80080f4:	b09c      	sub	sp, #112	; 0x70
 80080f6:	ab1d      	add	r3, sp, #116	; 0x74
 80080f8:	9002      	str	r0, [sp, #8]
 80080fa:	9006      	str	r0, [sp, #24]
 80080fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <siprintf+0x38>)
 8008102:	9107      	str	r1, [sp, #28]
 8008104:	9104      	str	r1, [sp, #16]
 8008106:	4909      	ldr	r1, [pc, #36]	; (800812c <siprintf+0x3c>)
 8008108:	f853 2b04 	ldr.w	r2, [r3], #4
 800810c:	9105      	str	r1, [sp, #20]
 800810e:	6800      	ldr	r0, [r0, #0]
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	a902      	add	r1, sp, #8
 8008114:	f000 f8f6 	bl	8008304 <_svfiprintf_r>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	b01c      	add	sp, #112	; 0x70
 8008120:	f85d eb04 	ldr.w	lr, [sp], #4
 8008124:	b003      	add	sp, #12
 8008126:	4770      	bx	lr
 8008128:	20000020 	.word	0x20000020
 800812c:	ffff0208 	.word	0xffff0208

08008130 <_strtol_l.isra.0>:
 8008130:	2b01      	cmp	r3, #1
 8008132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008136:	d001      	beq.n	800813c <_strtol_l.isra.0+0xc>
 8008138:	2b24      	cmp	r3, #36	; 0x24
 800813a:	d906      	bls.n	800814a <_strtol_l.isra.0+0x1a>
 800813c:	f7ff ffa6 	bl	800808c <__errno>
 8008140:	2316      	movs	r3, #22
 8008142:	6003      	str	r3, [r0, #0]
 8008144:	2000      	movs	r0, #0
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	4f3a      	ldr	r7, [pc, #232]	; (8008234 <_strtol_l.isra.0+0x104>)
 800814c:	468e      	mov	lr, r1
 800814e:	4676      	mov	r6, lr
 8008150:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008154:	5de5      	ldrb	r5, [r4, r7]
 8008156:	f015 0508 	ands.w	r5, r5, #8
 800815a:	d1f8      	bne.n	800814e <_strtol_l.isra.0+0x1e>
 800815c:	2c2d      	cmp	r4, #45	; 0x2d
 800815e:	d134      	bne.n	80081ca <_strtol_l.isra.0+0x9a>
 8008160:	f89e 4000 	ldrb.w	r4, [lr]
 8008164:	f04f 0801 	mov.w	r8, #1
 8008168:	f106 0e02 	add.w	lr, r6, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d05c      	beq.n	800822a <_strtol_l.isra.0+0xfa>
 8008170:	2b10      	cmp	r3, #16
 8008172:	d10c      	bne.n	800818e <_strtol_l.isra.0+0x5e>
 8008174:	2c30      	cmp	r4, #48	; 0x30
 8008176:	d10a      	bne.n	800818e <_strtol_l.isra.0+0x5e>
 8008178:	f89e 4000 	ldrb.w	r4, [lr]
 800817c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008180:	2c58      	cmp	r4, #88	; 0x58
 8008182:	d14d      	bne.n	8008220 <_strtol_l.isra.0+0xf0>
 8008184:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008188:	2310      	movs	r3, #16
 800818a:	f10e 0e02 	add.w	lr, lr, #2
 800818e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008192:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008196:	2600      	movs	r6, #0
 8008198:	fbbc f9f3 	udiv	r9, ip, r3
 800819c:	4635      	mov	r5, r6
 800819e:	fb03 ca19 	mls	sl, r3, r9, ip
 80081a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80081a6:	2f09      	cmp	r7, #9
 80081a8:	d818      	bhi.n	80081dc <_strtol_l.isra.0+0xac>
 80081aa:	463c      	mov	r4, r7
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	dd24      	ble.n	80081fa <_strtol_l.isra.0+0xca>
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	db1f      	blt.n	80081f4 <_strtol_l.isra.0+0xc4>
 80081b4:	45a9      	cmp	r9, r5
 80081b6:	d31d      	bcc.n	80081f4 <_strtol_l.isra.0+0xc4>
 80081b8:	d101      	bne.n	80081be <_strtol_l.isra.0+0x8e>
 80081ba:	45a2      	cmp	sl, r4
 80081bc:	db1a      	blt.n	80081f4 <_strtol_l.isra.0+0xc4>
 80081be:	fb05 4503 	mla	r5, r5, r3, r4
 80081c2:	2601      	movs	r6, #1
 80081c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80081c8:	e7eb      	b.n	80081a2 <_strtol_l.isra.0+0x72>
 80081ca:	2c2b      	cmp	r4, #43	; 0x2b
 80081cc:	bf08      	it	eq
 80081ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80081d2:	46a8      	mov	r8, r5
 80081d4:	bf08      	it	eq
 80081d6:	f106 0e02 	addeq.w	lr, r6, #2
 80081da:	e7c7      	b.n	800816c <_strtol_l.isra.0+0x3c>
 80081dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80081e0:	2f19      	cmp	r7, #25
 80081e2:	d801      	bhi.n	80081e8 <_strtol_l.isra.0+0xb8>
 80081e4:	3c37      	subs	r4, #55	; 0x37
 80081e6:	e7e1      	b.n	80081ac <_strtol_l.isra.0+0x7c>
 80081e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80081ec:	2f19      	cmp	r7, #25
 80081ee:	d804      	bhi.n	80081fa <_strtol_l.isra.0+0xca>
 80081f0:	3c57      	subs	r4, #87	; 0x57
 80081f2:	e7db      	b.n	80081ac <_strtol_l.isra.0+0x7c>
 80081f4:	f04f 36ff 	mov.w	r6, #4294967295
 80081f8:	e7e4      	b.n	80081c4 <_strtol_l.isra.0+0x94>
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	da05      	bge.n	800820a <_strtol_l.isra.0+0xda>
 80081fe:	2322      	movs	r3, #34	; 0x22
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	4665      	mov	r5, ip
 8008204:	b942      	cbnz	r2, 8008218 <_strtol_l.isra.0+0xe8>
 8008206:	4628      	mov	r0, r5
 8008208:	e79d      	b.n	8008146 <_strtol_l.isra.0+0x16>
 800820a:	f1b8 0f00 	cmp.w	r8, #0
 800820e:	d000      	beq.n	8008212 <_strtol_l.isra.0+0xe2>
 8008210:	426d      	negs	r5, r5
 8008212:	2a00      	cmp	r2, #0
 8008214:	d0f7      	beq.n	8008206 <_strtol_l.isra.0+0xd6>
 8008216:	b10e      	cbz	r6, 800821c <_strtol_l.isra.0+0xec>
 8008218:	f10e 31ff 	add.w	r1, lr, #4294967295
 800821c:	6011      	str	r1, [r2, #0]
 800821e:	e7f2      	b.n	8008206 <_strtol_l.isra.0+0xd6>
 8008220:	2430      	movs	r4, #48	; 0x30
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1b3      	bne.n	800818e <_strtol_l.isra.0+0x5e>
 8008226:	2308      	movs	r3, #8
 8008228:	e7b1      	b.n	800818e <_strtol_l.isra.0+0x5e>
 800822a:	2c30      	cmp	r4, #48	; 0x30
 800822c:	d0a4      	beq.n	8008178 <_strtol_l.isra.0+0x48>
 800822e:	230a      	movs	r3, #10
 8008230:	e7ad      	b.n	800818e <_strtol_l.isra.0+0x5e>
 8008232:	bf00      	nop
 8008234:	08008ab5 	.word	0x08008ab5

08008238 <strtol>:
 8008238:	4613      	mov	r3, r2
 800823a:	460a      	mov	r2, r1
 800823c:	4601      	mov	r1, r0
 800823e:	4802      	ldr	r0, [pc, #8]	; (8008248 <strtol+0x10>)
 8008240:	6800      	ldr	r0, [r0, #0]
 8008242:	f7ff bf75 	b.w	8008130 <_strtol_l.isra.0>
 8008246:	bf00      	nop
 8008248:	20000020 	.word	0x20000020

0800824c <__ssputs_r>:
 800824c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	688e      	ldr	r6, [r1, #8]
 8008252:	429e      	cmp	r6, r3
 8008254:	4682      	mov	sl, r0
 8008256:	460c      	mov	r4, r1
 8008258:	4690      	mov	r8, r2
 800825a:	461f      	mov	r7, r3
 800825c:	d838      	bhi.n	80082d0 <__ssputs_r+0x84>
 800825e:	898a      	ldrh	r2, [r1, #12]
 8008260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008264:	d032      	beq.n	80082cc <__ssputs_r+0x80>
 8008266:	6825      	ldr	r5, [r4, #0]
 8008268:	6909      	ldr	r1, [r1, #16]
 800826a:	eba5 0901 	sub.w	r9, r5, r1
 800826e:	6965      	ldr	r5, [r4, #20]
 8008270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008278:	3301      	adds	r3, #1
 800827a:	444b      	add	r3, r9
 800827c:	106d      	asrs	r5, r5, #1
 800827e:	429d      	cmp	r5, r3
 8008280:	bf38      	it	cc
 8008282:	461d      	movcc	r5, r3
 8008284:	0553      	lsls	r3, r2, #21
 8008286:	d531      	bpl.n	80082ec <__ssputs_r+0xa0>
 8008288:	4629      	mov	r1, r5
 800828a:	f000 fb47 	bl	800891c <_malloc_r>
 800828e:	4606      	mov	r6, r0
 8008290:	b950      	cbnz	r0, 80082a8 <__ssputs_r+0x5c>
 8008292:	230c      	movs	r3, #12
 8008294:	f8ca 3000 	str.w	r3, [sl]
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	6921      	ldr	r1, [r4, #16]
 80082aa:	464a      	mov	r2, r9
 80082ac:	f000 fabe 	bl	800882c <memcpy>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	6126      	str	r6, [r4, #16]
 80082be:	6165      	str	r5, [r4, #20]
 80082c0:	444e      	add	r6, r9
 80082c2:	eba5 0509 	sub.w	r5, r5, r9
 80082c6:	6026      	str	r6, [r4, #0]
 80082c8:	60a5      	str	r5, [r4, #8]
 80082ca:	463e      	mov	r6, r7
 80082cc:	42be      	cmp	r6, r7
 80082ce:	d900      	bls.n	80082d2 <__ssputs_r+0x86>
 80082d0:	463e      	mov	r6, r7
 80082d2:	4632      	mov	r2, r6
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	4641      	mov	r1, r8
 80082d8:	f000 fab6 	bl	8008848 <memmove>
 80082dc:	68a3      	ldr	r3, [r4, #8]
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	1b9b      	subs	r3, r3, r6
 80082e2:	4432      	add	r2, r6
 80082e4:	60a3      	str	r3, [r4, #8]
 80082e6:	6022      	str	r2, [r4, #0]
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7db      	b.n	80082a4 <__ssputs_r+0x58>
 80082ec:	462a      	mov	r2, r5
 80082ee:	f000 fb6f 	bl	80089d0 <_realloc_r>
 80082f2:	4606      	mov	r6, r0
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d1e1      	bne.n	80082bc <__ssputs_r+0x70>
 80082f8:	6921      	ldr	r1, [r4, #16]
 80082fa:	4650      	mov	r0, sl
 80082fc:	f000 fabe 	bl	800887c <_free_r>
 8008300:	e7c7      	b.n	8008292 <__ssputs_r+0x46>
	...

08008304 <_svfiprintf_r>:
 8008304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008308:	4698      	mov	r8, r3
 800830a:	898b      	ldrh	r3, [r1, #12]
 800830c:	061b      	lsls	r3, r3, #24
 800830e:	b09d      	sub	sp, #116	; 0x74
 8008310:	4607      	mov	r7, r0
 8008312:	460d      	mov	r5, r1
 8008314:	4614      	mov	r4, r2
 8008316:	d50e      	bpl.n	8008336 <_svfiprintf_r+0x32>
 8008318:	690b      	ldr	r3, [r1, #16]
 800831a:	b963      	cbnz	r3, 8008336 <_svfiprintf_r+0x32>
 800831c:	2140      	movs	r1, #64	; 0x40
 800831e:	f000 fafd 	bl	800891c <_malloc_r>
 8008322:	6028      	str	r0, [r5, #0]
 8008324:	6128      	str	r0, [r5, #16]
 8008326:	b920      	cbnz	r0, 8008332 <_svfiprintf_r+0x2e>
 8008328:	230c      	movs	r3, #12
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e0d1      	b.n	80084d6 <_svfiprintf_r+0x1d2>
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	616b      	str	r3, [r5, #20]
 8008336:	2300      	movs	r3, #0
 8008338:	9309      	str	r3, [sp, #36]	; 0x24
 800833a:	2320      	movs	r3, #32
 800833c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008340:	f8cd 800c 	str.w	r8, [sp, #12]
 8008344:	2330      	movs	r3, #48	; 0x30
 8008346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084f0 <_svfiprintf_r+0x1ec>
 800834a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800834e:	f04f 0901 	mov.w	r9, #1
 8008352:	4623      	mov	r3, r4
 8008354:	469a      	mov	sl, r3
 8008356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800835a:	b10a      	cbz	r2, 8008360 <_svfiprintf_r+0x5c>
 800835c:	2a25      	cmp	r2, #37	; 0x25
 800835e:	d1f9      	bne.n	8008354 <_svfiprintf_r+0x50>
 8008360:	ebba 0b04 	subs.w	fp, sl, r4
 8008364:	d00b      	beq.n	800837e <_svfiprintf_r+0x7a>
 8008366:	465b      	mov	r3, fp
 8008368:	4622      	mov	r2, r4
 800836a:	4629      	mov	r1, r5
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff6d 	bl	800824c <__ssputs_r>
 8008372:	3001      	adds	r0, #1
 8008374:	f000 80aa 	beq.w	80084cc <_svfiprintf_r+0x1c8>
 8008378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800837a:	445a      	add	r2, fp
 800837c:	9209      	str	r2, [sp, #36]	; 0x24
 800837e:	f89a 3000 	ldrb.w	r3, [sl]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80a2 	beq.w	80084cc <_svfiprintf_r+0x1c8>
 8008388:	2300      	movs	r3, #0
 800838a:	f04f 32ff 	mov.w	r2, #4294967295
 800838e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008392:	f10a 0a01 	add.w	sl, sl, #1
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800839e:	931a      	str	r3, [sp, #104]	; 0x68
 80083a0:	4654      	mov	r4, sl
 80083a2:	2205      	movs	r2, #5
 80083a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a8:	4851      	ldr	r0, [pc, #324]	; (80084f0 <_svfiprintf_r+0x1ec>)
 80083aa:	f7f7 ff31 	bl	8000210 <memchr>
 80083ae:	9a04      	ldr	r2, [sp, #16]
 80083b0:	b9d8      	cbnz	r0, 80083ea <_svfiprintf_r+0xe6>
 80083b2:	06d0      	lsls	r0, r2, #27
 80083b4:	bf44      	itt	mi
 80083b6:	2320      	movmi	r3, #32
 80083b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083bc:	0711      	lsls	r1, r2, #28
 80083be:	bf44      	itt	mi
 80083c0:	232b      	movmi	r3, #43	; 0x2b
 80083c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ca:	2b2a      	cmp	r3, #42	; 0x2a
 80083cc:	d015      	beq.n	80083fa <_svfiprintf_r+0xf6>
 80083ce:	9a07      	ldr	r2, [sp, #28]
 80083d0:	4654      	mov	r4, sl
 80083d2:	2000      	movs	r0, #0
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4621      	mov	r1, r4
 80083da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083de:	3b30      	subs	r3, #48	; 0x30
 80083e0:	2b09      	cmp	r3, #9
 80083e2:	d94e      	bls.n	8008482 <_svfiprintf_r+0x17e>
 80083e4:	b1b0      	cbz	r0, 8008414 <_svfiprintf_r+0x110>
 80083e6:	9207      	str	r2, [sp, #28]
 80083e8:	e014      	b.n	8008414 <_svfiprintf_r+0x110>
 80083ea:	eba0 0308 	sub.w	r3, r0, r8
 80083ee:	fa09 f303 	lsl.w	r3, r9, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	46a2      	mov	sl, r4
 80083f8:	e7d2      	b.n	80083a0 <_svfiprintf_r+0x9c>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	1d19      	adds	r1, r3, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfbb      	ittet	lt
 8008406:	425b      	neglt	r3, r3
 8008408:	f042 0202 	orrlt.w	r2, r2, #2
 800840c:	9307      	strge	r3, [sp, #28]
 800840e:	9307      	strlt	r3, [sp, #28]
 8008410:	bfb8      	it	lt
 8008412:	9204      	strlt	r2, [sp, #16]
 8008414:	7823      	ldrb	r3, [r4, #0]
 8008416:	2b2e      	cmp	r3, #46	; 0x2e
 8008418:	d10c      	bne.n	8008434 <_svfiprintf_r+0x130>
 800841a:	7863      	ldrb	r3, [r4, #1]
 800841c:	2b2a      	cmp	r3, #42	; 0x2a
 800841e:	d135      	bne.n	800848c <_svfiprintf_r+0x188>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9203      	str	r2, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfb8      	it	lt
 800842c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008430:	3402      	adds	r4, #2
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008500 <_svfiprintf_r+0x1fc>
 8008438:	7821      	ldrb	r1, [r4, #0]
 800843a:	2203      	movs	r2, #3
 800843c:	4650      	mov	r0, sl
 800843e:	f7f7 fee7 	bl	8000210 <memchr>
 8008442:	b140      	cbz	r0, 8008456 <_svfiprintf_r+0x152>
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	eba0 000a 	sub.w	r0, r0, sl
 800844a:	fa03 f000 	lsl.w	r0, r3, r0
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	4303      	orrs	r3, r0
 8008452:	3401      	adds	r4, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845a:	4826      	ldr	r0, [pc, #152]	; (80084f4 <_svfiprintf_r+0x1f0>)
 800845c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008460:	2206      	movs	r2, #6
 8008462:	f7f7 fed5 	bl	8000210 <memchr>
 8008466:	2800      	cmp	r0, #0
 8008468:	d038      	beq.n	80084dc <_svfiprintf_r+0x1d8>
 800846a:	4b23      	ldr	r3, [pc, #140]	; (80084f8 <_svfiprintf_r+0x1f4>)
 800846c:	bb1b      	cbnz	r3, 80084b6 <_svfiprintf_r+0x1b2>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	3307      	adds	r3, #7
 8008472:	f023 0307 	bic.w	r3, r3, #7
 8008476:	3308      	adds	r3, #8
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847c:	4433      	add	r3, r6
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	e767      	b.n	8008352 <_svfiprintf_r+0x4e>
 8008482:	fb0c 3202 	mla	r2, ip, r2, r3
 8008486:	460c      	mov	r4, r1
 8008488:	2001      	movs	r0, #1
 800848a:	e7a5      	b.n	80083d8 <_svfiprintf_r+0xd4>
 800848c:	2300      	movs	r3, #0
 800848e:	3401      	adds	r4, #1
 8008490:	9305      	str	r3, [sp, #20]
 8008492:	4619      	mov	r1, r3
 8008494:	f04f 0c0a 	mov.w	ip, #10
 8008498:	4620      	mov	r0, r4
 800849a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800849e:	3a30      	subs	r2, #48	; 0x30
 80084a0:	2a09      	cmp	r2, #9
 80084a2:	d903      	bls.n	80084ac <_svfiprintf_r+0x1a8>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0c5      	beq.n	8008434 <_svfiprintf_r+0x130>
 80084a8:	9105      	str	r1, [sp, #20]
 80084aa:	e7c3      	b.n	8008434 <_svfiprintf_r+0x130>
 80084ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b0:	4604      	mov	r4, r0
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7f0      	b.n	8008498 <_svfiprintf_r+0x194>
 80084b6:	ab03      	add	r3, sp, #12
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	462a      	mov	r2, r5
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <_svfiprintf_r+0x1f8>)
 80084be:	a904      	add	r1, sp, #16
 80084c0:	4638      	mov	r0, r7
 80084c2:	f3af 8000 	nop.w
 80084c6:	1c42      	adds	r2, r0, #1
 80084c8:	4606      	mov	r6, r0
 80084ca:	d1d6      	bne.n	800847a <_svfiprintf_r+0x176>
 80084cc:	89ab      	ldrh	r3, [r5, #12]
 80084ce:	065b      	lsls	r3, r3, #25
 80084d0:	f53f af2c 	bmi.w	800832c <_svfiprintf_r+0x28>
 80084d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d6:	b01d      	add	sp, #116	; 0x74
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	ab03      	add	r3, sp, #12
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	462a      	mov	r2, r5
 80084e2:	4b06      	ldr	r3, [pc, #24]	; (80084fc <_svfiprintf_r+0x1f8>)
 80084e4:	a904      	add	r1, sp, #16
 80084e6:	4638      	mov	r0, r7
 80084e8:	f000 f87a 	bl	80085e0 <_printf_i>
 80084ec:	e7eb      	b.n	80084c6 <_svfiprintf_r+0x1c2>
 80084ee:	bf00      	nop
 80084f0:	08008bb5 	.word	0x08008bb5
 80084f4:	08008bbf 	.word	0x08008bbf
 80084f8:	00000000 	.word	0x00000000
 80084fc:	0800824d 	.word	0x0800824d
 8008500:	08008bbb 	.word	0x08008bbb

08008504 <_printf_common>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	4616      	mov	r6, r2
 800850a:	4699      	mov	r9, r3
 800850c:	688a      	ldr	r2, [r1, #8]
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008514:	4293      	cmp	r3, r2
 8008516:	bfb8      	it	lt
 8008518:	4613      	movlt	r3, r2
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008520:	4607      	mov	r7, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b10a      	cbz	r2, 800852a <_printf_common+0x26>
 8008526:	3301      	adds	r3, #1
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	0699      	lsls	r1, r3, #26
 800852e:	bf42      	ittt	mi
 8008530:	6833      	ldrmi	r3, [r6, #0]
 8008532:	3302      	addmi	r3, #2
 8008534:	6033      	strmi	r3, [r6, #0]
 8008536:	6825      	ldr	r5, [r4, #0]
 8008538:	f015 0506 	ands.w	r5, r5, #6
 800853c:	d106      	bne.n	800854c <_printf_common+0x48>
 800853e:	f104 0a19 	add.w	sl, r4, #25
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	6832      	ldr	r2, [r6, #0]
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	42ab      	cmp	r3, r5
 800854a:	dc26      	bgt.n	800859a <_printf_common+0x96>
 800854c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008550:	1e13      	subs	r3, r2, #0
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	bf18      	it	ne
 8008556:	2301      	movne	r3, #1
 8008558:	0692      	lsls	r2, r2, #26
 800855a:	d42b      	bmi.n	80085b4 <_printf_common+0xb0>
 800855c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008560:	4649      	mov	r1, r9
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	3001      	adds	r0, #1
 8008568:	d01e      	beq.n	80085a8 <_printf_common+0xa4>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	68e5      	ldr	r5, [r4, #12]
 800856e:	6832      	ldr	r2, [r6, #0]
 8008570:	f003 0306 	and.w	r3, r3, #6
 8008574:	2b04      	cmp	r3, #4
 8008576:	bf08      	it	eq
 8008578:	1aad      	subeq	r5, r5, r2
 800857a:	68a3      	ldr	r3, [r4, #8]
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	bf0c      	ite	eq
 8008580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008584:	2500      	movne	r5, #0
 8008586:	4293      	cmp	r3, r2
 8008588:	bfc4      	itt	gt
 800858a:	1a9b      	subgt	r3, r3, r2
 800858c:	18ed      	addgt	r5, r5, r3
 800858e:	2600      	movs	r6, #0
 8008590:	341a      	adds	r4, #26
 8008592:	42b5      	cmp	r5, r6
 8008594:	d11a      	bne.n	80085cc <_printf_common+0xc8>
 8008596:	2000      	movs	r0, #0
 8008598:	e008      	b.n	80085ac <_printf_common+0xa8>
 800859a:	2301      	movs	r3, #1
 800859c:	4652      	mov	r2, sl
 800859e:	4649      	mov	r1, r9
 80085a0:	4638      	mov	r0, r7
 80085a2:	47c0      	blx	r8
 80085a4:	3001      	adds	r0, #1
 80085a6:	d103      	bne.n	80085b0 <_printf_common+0xac>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	3501      	adds	r5, #1
 80085b2:	e7c6      	b.n	8008542 <_printf_common+0x3e>
 80085b4:	18e1      	adds	r1, r4, r3
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	2030      	movs	r0, #48	; 0x30
 80085ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085be:	4422      	add	r2, r4
 80085c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085c8:	3302      	adds	r3, #2
 80085ca:	e7c7      	b.n	800855c <_printf_common+0x58>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4622      	mov	r2, r4
 80085d0:	4649      	mov	r1, r9
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d0e6      	beq.n	80085a8 <_printf_common+0xa4>
 80085da:	3601      	adds	r6, #1
 80085dc:	e7d9      	b.n	8008592 <_printf_common+0x8e>
	...

080085e0 <_printf_i>:
 80085e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	4691      	mov	r9, r2
 80085e8:	7e27      	ldrb	r7, [r4, #24]
 80085ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085ec:	2f78      	cmp	r7, #120	; 0x78
 80085ee:	4680      	mov	r8, r0
 80085f0:	469a      	mov	sl, r3
 80085f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f6:	d807      	bhi.n	8008608 <_printf_i+0x28>
 80085f8:	2f62      	cmp	r7, #98	; 0x62
 80085fa:	d80a      	bhi.n	8008612 <_printf_i+0x32>
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	f000 80d8 	beq.w	80087b2 <_printf_i+0x1d2>
 8008602:	2f58      	cmp	r7, #88	; 0x58
 8008604:	f000 80a3 	beq.w	800874e <_printf_i+0x16e>
 8008608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800860c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008610:	e03a      	b.n	8008688 <_printf_i+0xa8>
 8008612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008616:	2b15      	cmp	r3, #21
 8008618:	d8f6      	bhi.n	8008608 <_printf_i+0x28>
 800861a:	a001      	add	r0, pc, #4	; (adr r0, 8008620 <_printf_i+0x40>)
 800861c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008620:	08008679 	.word	0x08008679
 8008624:	0800868d 	.word	0x0800868d
 8008628:	08008609 	.word	0x08008609
 800862c:	08008609 	.word	0x08008609
 8008630:	08008609 	.word	0x08008609
 8008634:	08008609 	.word	0x08008609
 8008638:	0800868d 	.word	0x0800868d
 800863c:	08008609 	.word	0x08008609
 8008640:	08008609 	.word	0x08008609
 8008644:	08008609 	.word	0x08008609
 8008648:	08008609 	.word	0x08008609
 800864c:	08008799 	.word	0x08008799
 8008650:	080086bd 	.word	0x080086bd
 8008654:	0800877b 	.word	0x0800877b
 8008658:	08008609 	.word	0x08008609
 800865c:	08008609 	.word	0x08008609
 8008660:	080087bb 	.word	0x080087bb
 8008664:	08008609 	.word	0x08008609
 8008668:	080086bd 	.word	0x080086bd
 800866c:	08008609 	.word	0x08008609
 8008670:	08008609 	.word	0x08008609
 8008674:	08008783 	.word	0x08008783
 8008678:	680b      	ldr	r3, [r1, #0]
 800867a:	1d1a      	adds	r2, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	600a      	str	r2, [r1, #0]
 8008680:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008688:	2301      	movs	r3, #1
 800868a:	e0a3      	b.n	80087d4 <_printf_i+0x1f4>
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	6808      	ldr	r0, [r1, #0]
 8008690:	062e      	lsls	r6, r5, #24
 8008692:	f100 0304 	add.w	r3, r0, #4
 8008696:	d50a      	bpl.n	80086ae <_printf_i+0xce>
 8008698:	6805      	ldr	r5, [r0, #0]
 800869a:	600b      	str	r3, [r1, #0]
 800869c:	2d00      	cmp	r5, #0
 800869e:	da03      	bge.n	80086a8 <_printf_i+0xc8>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	426d      	negs	r5, r5
 80086a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a8:	485e      	ldr	r0, [pc, #376]	; (8008824 <_printf_i+0x244>)
 80086aa:	230a      	movs	r3, #10
 80086ac:	e019      	b.n	80086e2 <_printf_i+0x102>
 80086ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086b2:	6805      	ldr	r5, [r0, #0]
 80086b4:	600b      	str	r3, [r1, #0]
 80086b6:	bf18      	it	ne
 80086b8:	b22d      	sxthne	r5, r5
 80086ba:	e7ef      	b.n	800869c <_printf_i+0xbc>
 80086bc:	680b      	ldr	r3, [r1, #0]
 80086be:	6825      	ldr	r5, [r4, #0]
 80086c0:	1d18      	adds	r0, r3, #4
 80086c2:	6008      	str	r0, [r1, #0]
 80086c4:	0628      	lsls	r0, r5, #24
 80086c6:	d501      	bpl.n	80086cc <_printf_i+0xec>
 80086c8:	681d      	ldr	r5, [r3, #0]
 80086ca:	e002      	b.n	80086d2 <_printf_i+0xf2>
 80086cc:	0669      	lsls	r1, r5, #25
 80086ce:	d5fb      	bpl.n	80086c8 <_printf_i+0xe8>
 80086d0:	881d      	ldrh	r5, [r3, #0]
 80086d2:	4854      	ldr	r0, [pc, #336]	; (8008824 <_printf_i+0x244>)
 80086d4:	2f6f      	cmp	r7, #111	; 0x6f
 80086d6:	bf0c      	ite	eq
 80086d8:	2308      	moveq	r3, #8
 80086da:	230a      	movne	r3, #10
 80086dc:	2100      	movs	r1, #0
 80086de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086e2:	6866      	ldr	r6, [r4, #4]
 80086e4:	60a6      	str	r6, [r4, #8]
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	bfa2      	ittt	ge
 80086ea:	6821      	ldrge	r1, [r4, #0]
 80086ec:	f021 0104 	bicge.w	r1, r1, #4
 80086f0:	6021      	strge	r1, [r4, #0]
 80086f2:	b90d      	cbnz	r5, 80086f8 <_printf_i+0x118>
 80086f4:	2e00      	cmp	r6, #0
 80086f6:	d04d      	beq.n	8008794 <_printf_i+0x1b4>
 80086f8:	4616      	mov	r6, r2
 80086fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80086fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008702:	5dc7      	ldrb	r7, [r0, r7]
 8008704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008708:	462f      	mov	r7, r5
 800870a:	42bb      	cmp	r3, r7
 800870c:	460d      	mov	r5, r1
 800870e:	d9f4      	bls.n	80086fa <_printf_i+0x11a>
 8008710:	2b08      	cmp	r3, #8
 8008712:	d10b      	bne.n	800872c <_printf_i+0x14c>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	07df      	lsls	r7, r3, #31
 8008718:	d508      	bpl.n	800872c <_printf_i+0x14c>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	4299      	cmp	r1, r3
 8008720:	bfde      	ittt	le
 8008722:	2330      	movle	r3, #48	; 0x30
 8008724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008728:	f106 36ff 	addle.w	r6, r6, #4294967295
 800872c:	1b92      	subs	r2, r2, r6
 800872e:	6122      	str	r2, [r4, #16]
 8008730:	f8cd a000 	str.w	sl, [sp]
 8008734:	464b      	mov	r3, r9
 8008736:	aa03      	add	r2, sp, #12
 8008738:	4621      	mov	r1, r4
 800873a:	4640      	mov	r0, r8
 800873c:	f7ff fee2 	bl	8008504 <_printf_common>
 8008740:	3001      	adds	r0, #1
 8008742:	d14c      	bne.n	80087de <_printf_i+0x1fe>
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	b004      	add	sp, #16
 800874a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874e:	4835      	ldr	r0, [pc, #212]	; (8008824 <_printf_i+0x244>)
 8008750:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	680e      	ldr	r6, [r1, #0]
 8008758:	061f      	lsls	r7, r3, #24
 800875a:	f856 5b04 	ldr.w	r5, [r6], #4
 800875e:	600e      	str	r6, [r1, #0]
 8008760:	d514      	bpl.n	800878c <_printf_i+0x1ac>
 8008762:	07d9      	lsls	r1, r3, #31
 8008764:	bf44      	itt	mi
 8008766:	f043 0320 	orrmi.w	r3, r3, #32
 800876a:	6023      	strmi	r3, [r4, #0]
 800876c:	b91d      	cbnz	r5, 8008776 <_printf_i+0x196>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f023 0320 	bic.w	r3, r3, #32
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	2310      	movs	r3, #16
 8008778:	e7b0      	b.n	80086dc <_printf_i+0xfc>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f043 0320 	orr.w	r3, r3, #32
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	2378      	movs	r3, #120	; 0x78
 8008784:	4828      	ldr	r0, [pc, #160]	; (8008828 <_printf_i+0x248>)
 8008786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800878a:	e7e3      	b.n	8008754 <_printf_i+0x174>
 800878c:	065e      	lsls	r6, r3, #25
 800878e:	bf48      	it	mi
 8008790:	b2ad      	uxthmi	r5, r5
 8008792:	e7e6      	b.n	8008762 <_printf_i+0x182>
 8008794:	4616      	mov	r6, r2
 8008796:	e7bb      	b.n	8008710 <_printf_i+0x130>
 8008798:	680b      	ldr	r3, [r1, #0]
 800879a:	6826      	ldr	r6, [r4, #0]
 800879c:	6960      	ldr	r0, [r4, #20]
 800879e:	1d1d      	adds	r5, r3, #4
 80087a0:	600d      	str	r5, [r1, #0]
 80087a2:	0635      	lsls	r5, r6, #24
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	d501      	bpl.n	80087ac <_printf_i+0x1cc>
 80087a8:	6018      	str	r0, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <_printf_i+0x1d2>
 80087ac:	0671      	lsls	r1, r6, #25
 80087ae:	d5fb      	bpl.n	80087a8 <_printf_i+0x1c8>
 80087b0:	8018      	strh	r0, [r3, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	4616      	mov	r6, r2
 80087b8:	e7ba      	b.n	8008730 <_printf_i+0x150>
 80087ba:	680b      	ldr	r3, [r1, #0]
 80087bc:	1d1a      	adds	r2, r3, #4
 80087be:	600a      	str	r2, [r1, #0]
 80087c0:	681e      	ldr	r6, [r3, #0]
 80087c2:	6862      	ldr	r2, [r4, #4]
 80087c4:	2100      	movs	r1, #0
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7f7 fd22 	bl	8000210 <memchr>
 80087cc:	b108      	cbz	r0, 80087d2 <_printf_i+0x1f2>
 80087ce:	1b80      	subs	r0, r0, r6
 80087d0:	6060      	str	r0, [r4, #4]
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	2300      	movs	r3, #0
 80087d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087dc:	e7a8      	b.n	8008730 <_printf_i+0x150>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	4632      	mov	r2, r6
 80087e2:	4649      	mov	r1, r9
 80087e4:	4640      	mov	r0, r8
 80087e6:	47d0      	blx	sl
 80087e8:	3001      	adds	r0, #1
 80087ea:	d0ab      	beq.n	8008744 <_printf_i+0x164>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	079b      	lsls	r3, r3, #30
 80087f0:	d413      	bmi.n	800881a <_printf_i+0x23a>
 80087f2:	68e0      	ldr	r0, [r4, #12]
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	4298      	cmp	r0, r3
 80087f8:	bfb8      	it	lt
 80087fa:	4618      	movlt	r0, r3
 80087fc:	e7a4      	b.n	8008748 <_printf_i+0x168>
 80087fe:	2301      	movs	r3, #1
 8008800:	4632      	mov	r2, r6
 8008802:	4649      	mov	r1, r9
 8008804:	4640      	mov	r0, r8
 8008806:	47d0      	blx	sl
 8008808:	3001      	adds	r0, #1
 800880a:	d09b      	beq.n	8008744 <_printf_i+0x164>
 800880c:	3501      	adds	r5, #1
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	9903      	ldr	r1, [sp, #12]
 8008812:	1a5b      	subs	r3, r3, r1
 8008814:	42ab      	cmp	r3, r5
 8008816:	dcf2      	bgt.n	80087fe <_printf_i+0x21e>
 8008818:	e7eb      	b.n	80087f2 <_printf_i+0x212>
 800881a:	2500      	movs	r5, #0
 800881c:	f104 0619 	add.w	r6, r4, #25
 8008820:	e7f5      	b.n	800880e <_printf_i+0x22e>
 8008822:	bf00      	nop
 8008824:	08008bc6 	.word	0x08008bc6
 8008828:	08008bd7 	.word	0x08008bd7

0800882c <memcpy>:
 800882c:	440a      	add	r2, r1
 800882e:	4291      	cmp	r1, r2
 8008830:	f100 33ff 	add.w	r3, r0, #4294967295
 8008834:	d100      	bne.n	8008838 <memcpy+0xc>
 8008836:	4770      	bx	lr
 8008838:	b510      	push	{r4, lr}
 800883a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800883e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008842:	4291      	cmp	r1, r2
 8008844:	d1f9      	bne.n	800883a <memcpy+0xe>
 8008846:	bd10      	pop	{r4, pc}

08008848 <memmove>:
 8008848:	4288      	cmp	r0, r1
 800884a:	b510      	push	{r4, lr}
 800884c:	eb01 0402 	add.w	r4, r1, r2
 8008850:	d902      	bls.n	8008858 <memmove+0x10>
 8008852:	4284      	cmp	r4, r0
 8008854:	4623      	mov	r3, r4
 8008856:	d807      	bhi.n	8008868 <memmove+0x20>
 8008858:	1e43      	subs	r3, r0, #1
 800885a:	42a1      	cmp	r1, r4
 800885c:	d008      	beq.n	8008870 <memmove+0x28>
 800885e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008866:	e7f8      	b.n	800885a <memmove+0x12>
 8008868:	4402      	add	r2, r0
 800886a:	4601      	mov	r1, r0
 800886c:	428a      	cmp	r2, r1
 800886e:	d100      	bne.n	8008872 <memmove+0x2a>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800887a:	e7f7      	b.n	800886c <memmove+0x24>

0800887c <_free_r>:
 800887c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800887e:	2900      	cmp	r1, #0
 8008880:	d048      	beq.n	8008914 <_free_r+0x98>
 8008882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f1a1 0404 	sub.w	r4, r1, #4
 800888e:	bfb8      	it	lt
 8008890:	18e4      	addlt	r4, r4, r3
 8008892:	f000 f8d3 	bl	8008a3c <__malloc_lock>
 8008896:	4a20      	ldr	r2, [pc, #128]	; (8008918 <_free_r+0x9c>)
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	4615      	mov	r5, r2
 800889e:	b933      	cbnz	r3, 80088ae <_free_r+0x32>
 80088a0:	6063      	str	r3, [r4, #4]
 80088a2:	6014      	str	r4, [r2, #0]
 80088a4:	b003      	add	sp, #12
 80088a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088aa:	f000 b8cd 	b.w	8008a48 <__malloc_unlock>
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	d90b      	bls.n	80088ca <_free_r+0x4e>
 80088b2:	6821      	ldr	r1, [r4, #0]
 80088b4:	1862      	adds	r2, r4, r1
 80088b6:	4293      	cmp	r3, r2
 80088b8:	bf04      	itt	eq
 80088ba:	681a      	ldreq	r2, [r3, #0]
 80088bc:	685b      	ldreq	r3, [r3, #4]
 80088be:	6063      	str	r3, [r4, #4]
 80088c0:	bf04      	itt	eq
 80088c2:	1852      	addeq	r2, r2, r1
 80088c4:	6022      	streq	r2, [r4, #0]
 80088c6:	602c      	str	r4, [r5, #0]
 80088c8:	e7ec      	b.n	80088a4 <_free_r+0x28>
 80088ca:	461a      	mov	r2, r3
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b10b      	cbz	r3, 80088d4 <_free_r+0x58>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d9fa      	bls.n	80088ca <_free_r+0x4e>
 80088d4:	6811      	ldr	r1, [r2, #0]
 80088d6:	1855      	adds	r5, r2, r1
 80088d8:	42a5      	cmp	r5, r4
 80088da:	d10b      	bne.n	80088f4 <_free_r+0x78>
 80088dc:	6824      	ldr	r4, [r4, #0]
 80088de:	4421      	add	r1, r4
 80088e0:	1854      	adds	r4, r2, r1
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	6011      	str	r1, [r2, #0]
 80088e6:	d1dd      	bne.n	80088a4 <_free_r+0x28>
 80088e8:	681c      	ldr	r4, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	6053      	str	r3, [r2, #4]
 80088ee:	4421      	add	r1, r4
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	e7d7      	b.n	80088a4 <_free_r+0x28>
 80088f4:	d902      	bls.n	80088fc <_free_r+0x80>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6003      	str	r3, [r0, #0]
 80088fa:	e7d3      	b.n	80088a4 <_free_r+0x28>
 80088fc:	6825      	ldr	r5, [r4, #0]
 80088fe:	1961      	adds	r1, r4, r5
 8008900:	428b      	cmp	r3, r1
 8008902:	bf04      	itt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	bf04      	itt	eq
 800890c:	1949      	addeq	r1, r1, r5
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	6054      	str	r4, [r2, #4]
 8008912:	e7c7      	b.n	80088a4 <_free_r+0x28>
 8008914:	b003      	add	sp, #12
 8008916:	bd30      	pop	{r4, r5, pc}
 8008918:	200000cc 	.word	0x200000cc

0800891c <_malloc_r>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	1ccd      	adds	r5, r1, #3
 8008920:	f025 0503 	bic.w	r5, r5, #3
 8008924:	3508      	adds	r5, #8
 8008926:	2d0c      	cmp	r5, #12
 8008928:	bf38      	it	cc
 800892a:	250c      	movcc	r5, #12
 800892c:	2d00      	cmp	r5, #0
 800892e:	4606      	mov	r6, r0
 8008930:	db01      	blt.n	8008936 <_malloc_r+0x1a>
 8008932:	42a9      	cmp	r1, r5
 8008934:	d903      	bls.n	800893e <_malloc_r+0x22>
 8008936:	230c      	movs	r3, #12
 8008938:	6033      	str	r3, [r6, #0]
 800893a:	2000      	movs	r0, #0
 800893c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893e:	f000 f87d 	bl	8008a3c <__malloc_lock>
 8008942:	4921      	ldr	r1, [pc, #132]	; (80089c8 <_malloc_r+0xac>)
 8008944:	680a      	ldr	r2, [r1, #0]
 8008946:	4614      	mov	r4, r2
 8008948:	b99c      	cbnz	r4, 8008972 <_malloc_r+0x56>
 800894a:	4f20      	ldr	r7, [pc, #128]	; (80089cc <_malloc_r+0xb0>)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	b923      	cbnz	r3, 800895a <_malloc_r+0x3e>
 8008950:	4621      	mov	r1, r4
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f862 	bl	8008a1c <_sbrk_r>
 8008958:	6038      	str	r0, [r7, #0]
 800895a:	4629      	mov	r1, r5
 800895c:	4630      	mov	r0, r6
 800895e:	f000 f85d 	bl	8008a1c <_sbrk_r>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d123      	bne.n	80089ae <_malloc_r+0x92>
 8008966:	230c      	movs	r3, #12
 8008968:	6033      	str	r3, [r6, #0]
 800896a:	4630      	mov	r0, r6
 800896c:	f000 f86c 	bl	8008a48 <__malloc_unlock>
 8008970:	e7e3      	b.n	800893a <_malloc_r+0x1e>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	1b5b      	subs	r3, r3, r5
 8008976:	d417      	bmi.n	80089a8 <_malloc_r+0x8c>
 8008978:	2b0b      	cmp	r3, #11
 800897a:	d903      	bls.n	8008984 <_malloc_r+0x68>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	441c      	add	r4, r3
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	e004      	b.n	800898e <_malloc_r+0x72>
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	42a2      	cmp	r2, r4
 8008988:	bf0c      	ite	eq
 800898a:	600b      	streq	r3, [r1, #0]
 800898c:	6053      	strne	r3, [r2, #4]
 800898e:	4630      	mov	r0, r6
 8008990:	f000 f85a 	bl	8008a48 <__malloc_unlock>
 8008994:	f104 000b 	add.w	r0, r4, #11
 8008998:	1d23      	adds	r3, r4, #4
 800899a:	f020 0007 	bic.w	r0, r0, #7
 800899e:	1ac2      	subs	r2, r0, r3
 80089a0:	d0cc      	beq.n	800893c <_malloc_r+0x20>
 80089a2:	1a1b      	subs	r3, r3, r0
 80089a4:	50a3      	str	r3, [r4, r2]
 80089a6:	e7c9      	b.n	800893c <_malloc_r+0x20>
 80089a8:	4622      	mov	r2, r4
 80089aa:	6864      	ldr	r4, [r4, #4]
 80089ac:	e7cc      	b.n	8008948 <_malloc_r+0x2c>
 80089ae:	1cc4      	adds	r4, r0, #3
 80089b0:	f024 0403 	bic.w	r4, r4, #3
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d0e3      	beq.n	8008980 <_malloc_r+0x64>
 80089b8:	1a21      	subs	r1, r4, r0
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 f82e 	bl	8008a1c <_sbrk_r>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d1dd      	bne.n	8008980 <_malloc_r+0x64>
 80089c4:	e7cf      	b.n	8008966 <_malloc_r+0x4a>
 80089c6:	bf00      	nop
 80089c8:	200000cc 	.word	0x200000cc
 80089cc:	200000d0 	.word	0x200000d0

080089d0 <_realloc_r>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	4607      	mov	r7, r0
 80089d4:	4614      	mov	r4, r2
 80089d6:	460e      	mov	r6, r1
 80089d8:	b921      	cbnz	r1, 80089e4 <_realloc_r+0x14>
 80089da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089de:	4611      	mov	r1, r2
 80089e0:	f7ff bf9c 	b.w	800891c <_malloc_r>
 80089e4:	b922      	cbnz	r2, 80089f0 <_realloc_r+0x20>
 80089e6:	f7ff ff49 	bl	800887c <_free_r>
 80089ea:	4625      	mov	r5, r4
 80089ec:	4628      	mov	r0, r5
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f0:	f000 f830 	bl	8008a54 <_malloc_usable_size_r>
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d20f      	bcs.n	8008a18 <_realloc_r+0x48>
 80089f8:	4621      	mov	r1, r4
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ff8e 	bl	800891c <_malloc_r>
 8008a00:	4605      	mov	r5, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0f2      	beq.n	80089ec <_realloc_r+0x1c>
 8008a06:	4631      	mov	r1, r6
 8008a08:	4622      	mov	r2, r4
 8008a0a:	f7ff ff0f 	bl	800882c <memcpy>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff ff33 	bl	800887c <_free_r>
 8008a16:	e7e9      	b.n	80089ec <_realloc_r+0x1c>
 8008a18:	4635      	mov	r5, r6
 8008a1a:	e7e7      	b.n	80089ec <_realloc_r+0x1c>

08008a1c <_sbrk_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	; (8008a38 <_sbrk_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 f83e 	bl	8001aa8 <_sbrk>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_sbrk_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_sbrk_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	2000032c 	.word	0x2000032c

08008a3c <__malloc_lock>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__malloc_lock+0x8>)
 8008a3e:	f000 b811 	b.w	8008a64 <__retarget_lock_acquire_recursive>
 8008a42:	bf00      	nop
 8008a44:	20000334 	.word	0x20000334

08008a48 <__malloc_unlock>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__malloc_unlock+0x8>)
 8008a4a:	f000 b80c 	b.w	8008a66 <__retarget_lock_release_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20000334 	.word	0x20000334

08008a54 <_malloc_usable_size_r>:
 8008a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a58:	1f18      	subs	r0, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbc      	itt	lt
 8008a5e:	580b      	ldrlt	r3, [r1, r0]
 8008a60:	18c0      	addlt	r0, r0, r3
 8008a62:	4770      	bx	lr

08008a64 <__retarget_lock_acquire_recursive>:
 8008a64:	4770      	bx	lr

08008a66 <__retarget_lock_release_recursive>:
 8008a66:	4770      	bx	lr

08008a68 <_init>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr

08008a74 <_fini>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr
