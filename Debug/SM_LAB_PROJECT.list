
SM_LAB_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008158  08008158  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008160  08008160  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000074  080081dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080081dc  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b2d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321b  00000000  00000000  00039bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  0003e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287bf  00000000  00000000  0003f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019342  00000000  00000000  00067927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f747f  00000000  00000000  00080c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001780e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  0017813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fc8 	.word	0x08007fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007fc8 	.word	0x08007fc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <pid_init>:
 */

#include "PID_controller.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float dt_init, int anti_windup_limit_init)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6178      	str	r0, [r7, #20]
 80005b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80005b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80005b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80005bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	pid_data->previous_error = 0;
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
	pid_data->previous_integral = 0;
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]

	pid_data->Kp = kp_init;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	615a      	str	r2, [r3, #20]
	pid_data->Ki = ki_init;
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	619a      	str	r2, [r3, #24]
	pid_data->Kd = kd_init;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	61da      	str	r2, [r3, #28]
	pid_data->dt = dt_init;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	621a      	str	r2, [r3, #32]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <pid_calculate>:

int pid_calculate(pid_str *pid_data, int setpoint, int frequency)
{
 80005fe:	b480      	push	{r7}
 8000600:	b08b      	sub	sp, #44	; 0x2c
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;
	uint16_t PID;

	  error = setpoint - frequency;
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	61fb      	str	r3, [r7, #28]

	  p_term = (float)(pid_data->Kp * error);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	ed93 7a05 	vldr	s14, [r3, #20]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000626:	edc7 7a06 	vstr	s15, [r7, #24]

	  pid_data->integral = pid_data->previous_integral + (error + pid_data->previous_error);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	440b      	add	r3, r1
 8000636:	441a      	add	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	60da      	str	r2, [r3, #12]
	  pid_data->previous_integral = pid_data->integral;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	609a      	str	r2, [r3, #8]
	  i_term = pid_data->Ki*pid_data->integral*(pid_data->dt/2);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	ed93 7a06 	vldr	s14, [r3, #24]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000660:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000664:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  pid_data->derivative = (error - pid_data->previous_error)/pid_data->dt;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	ed93 7a08 	vldr	s14, [r3, #32]
 8000686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800068a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800068e:	ee17 2a90 	vmov	r2, s15
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	611a      	str	r2, [r3, #16]
	  pid_data->previous_error = error;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	69fa      	ldr	r2, [r7, #28]
 800069a:	601a      	str	r2, [r3, #0]
	  d_term = pid_data->Kd*pid_data->derivative;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	ed93 7a07 	vldr	s14, [r3, #28]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b2:	edc7 7a05 	vstr	s15, [r7, #20]

	  if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	ee07 3a90 	vmov	s15, r3
 80006be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ce:	db08      	blt.n	80006e2 <pid_calculate+0xe4>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80006e0:	e016      	b.n	8000710 <pid_calculate+0x112>
	  else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e6:	425b      	negs	r3, r3
 80006e8:	ee07 3a90 	vmov	s15, r3
 80006ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fc:	d808      	bhi.n	8000710 <pid_calculate+0x112>
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	425b      	negs	r3, r3
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  PID = (uint16_t)(p_term + i_term + d_term);
 8000710:	ed97 7a06 	vldr	s14, [r7, #24]
 8000714:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800071c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000728:	ee17 3a90 	vmov	r3, s15
 800072c:	847b      	strh	r3, [r7, #34]	; 0x22

	  if (PID > 1000)
 800072e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000734:	d902      	bls.n	800073c <pid_calculate+0x13e>
	  {
		  PID = 1000;
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	847b      	strh	r3, [r7, #34]	; 0x22
	  else if(PID < 0)
	  {
		  PID = 0;
	  }

	  return PID;
 800073c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 800073e:	4618      	mov	r0, r3
 8000740:	372c      	adds	r7, #44	; 0x2c
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_ADC1_Init+0x98>)
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_ADC1_Init+0xa0>)
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ac:	f001 f9a4 	bl	8001af8 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fd09 	bl	80011cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ba:	2303      	movs	r3, #3
 80007bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007cc:	f001 f9d8 	bl	8001b80 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007d6:	f000 fcf9 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000b8 	.word	0x200000b8
 80007e8:	40012000 	.word	0x40012000
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <HAL_ADC_MspInit+0x74>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d123      	bne.n	800085a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_ADC_MspInit+0x78>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_ADC_MspInit+0x78>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000842:	2308      	movs	r3, #8
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_ADC_MspInit+0x7c>)
 8000856:	f001 fd87 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40012000 	.word	0x40012000
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a80      	ldr	r2, [pc, #512]	; (8000a8c <MX_GPIO_Init+0x21c>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b7e      	ldr	r3, [pc, #504]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b7b      	ldr	r3, [pc, #492]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a7a      	ldr	r2, [pc, #488]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a6e      	ldr	r2, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b6c      	ldr	r3, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	4b69      	ldr	r3, [pc, #420]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a68      	ldr	r2, [pc, #416]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x21c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a62      	ldr	r2, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x21c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a5c      	ldr	r2, [pc, #368]	; (8000a8c <MX_GPIO_Init+0x21c>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x21c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0181 	movw	r1, #16513	; 0x4081
 8000934:	4856      	ldr	r0, [pc, #344]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000936:	f001 fec3 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4855      	ldr	r0, [pc, #340]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000940:	f001 febe 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	484f      	ldr	r0, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x228>)
 800095c:	f001 fd04 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000960:	2332      	movs	r3, #50	; 0x32
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4847      	ldr	r0, [pc, #284]	; (8000a98 <MX_GPIO_Init+0x228>)
 800097c:	f001 fcf4 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000980:	2386      	movs	r3, #134	; 0x86
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000990:	230b      	movs	r3, #11
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4840      	ldr	r0, [pc, #256]	; (8000a9c <MX_GPIO_Init+0x22c>)
 800099c:	f001 fce4 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4835      	ldr	r0, [pc, #212]	; (8000a90 <MX_GPIO_Init+0x220>)
 80009ba:	f001 fcd5 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d0:	230b      	movs	r3, #11
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	482d      	ldr	r0, [pc, #180]	; (8000a90 <MX_GPIO_Init+0x220>)
 80009dc:	f001 fcc4 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4827      	ldr	r0, [pc, #156]	; (8000a94 <MX_GPIO_Init+0x224>)
 80009f8:	f001 fcb6 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4821      	ldr	r0, [pc, #132]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000a10:	f001 fcaa 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481a      	ldr	r0, [pc, #104]	; (8000a9c <MX_GPIO_Init+0x22c>)
 8000a32:	f001 fc99 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_GPIO_Init+0x22c>)
 8000a4c:	f001 fc8c 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a62:	230b      	movs	r3, #11
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000a6e:	f001 fc7b 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2028      	movs	r0, #40	; 0x28
 8000a78:	f001 fbad 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7c:	2028      	movs	r0, #40	; 0x28
 8000a7e:	f001 fbc6 	bl	800220e <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	f001 fe2e 	bl	800273c <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 fb71 	bl	80011cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aee:	f002 f9a7 	bl	8002e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 fb68 	bl	80011cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000b00:	f002 f9e9 	bl	8002ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 fb5f 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000100 	.word	0x20000100
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	00808cd2 	.word	0x00808cd2

08000b20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_I2C_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d128      	bne.n	8000b94 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b78:	f001 fbf6 	bl	8002368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000bc2:	2028      	movs	r0, #40	; 0x28
 8000bc4:	f000 ff74 	bl	8001ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	2130      	movs	r1, #48	; 0x30
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f829 	bl	8000c28 <lcd_write>
	HAL_Delay(5);
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f000 ff6a 	bl	8001ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	2130      	movs	r1, #48	; 0x30
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f81f 	bl	8000c28 <lcd_write>
	HAL_Delay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 ff60 	bl	8001ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	2130      	movs	r1, #48	; 0x30
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f815 	bl	8000c28 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f80e 	bl	8000c28 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	210c      	movs	r1, #12
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f807 	bl	8000c28 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f89f 	bl	8000d5e <lcd_clear>

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	460b      	mov	r3, r1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	f023 030f 	bic.w	r3, r3, #15
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000c50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c54:	f023 030f 	bic.w	r3, r3, #15
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	797b      	ldrb	r3, [r7, #5]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	f107 020c 	add.w	r2, r7, #12
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2304      	movs	r3, #4
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <lcd_write+0x88>)
 8000c9c:	f001 fdde 	bl	800285c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000ca0:	2005      	movs	r0, #5
 8000ca2:	f000 ff05 	bl	8001ab0 <HAL_Delay>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000100 	.word	0x20000100

08000cb4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f843 	bl	8000d5e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffa1 	bl	8000c28 <lcd_write>
	while(lcd->f_line[i])
 8000ce6:	e00f      	b.n	8000d08 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7818      	ldrb	r0, [r3, #0]
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	7859      	ldrb	r1, [r3, #1]
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f7ff ff93 	bl	8000c28 <lcd_write>
		i++;
 8000d02:	7bbb      	ldrb	r3, [r7, #14]
 8000d04:	3301      	adds	r3, #1
 8000d06:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e9      	bne.n	8000ce8 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	21c0      	movs	r1, #192	; 0xc0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff81 	bl	8000c28 <lcd_write>
	while(lcd->s_line[i])
 8000d26:	e00f      	b.n	8000d48 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7818      	ldrb	r0, [r3, #0]
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	7c99      	ldrb	r1, [r3, #18]
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f7ff ff73 	bl	8000c28 <lcd_write>
		i++;
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	3301      	adds	r3, #1
 8000d46:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	7c9b      	ldrb	r3, [r3, #18]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1e9      	bne.n	8000d28 <lcd_display+0x74>
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000d74:	2308      	movs	r3, #8
 8000d76:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff51 	bl	8000c28 <lcd_write>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_UART_RxCpltCallback>:

//LCD
struct lcd_disp disp;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_UART_RxCpltCallback+0x4c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d118      	bne.n	8000dd4 <HAL_UART_RxCpltCallback+0x44>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_UART_RxCpltCallback+0x50>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <HAL_UART_RxCpltCallback+0x54>)
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <HAL_UART_RxCpltCallback+0x58>)
 8000dae:	f005 f961 	bl	8006074 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_UART_RxCpltCallback+0x50>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	490a      	ldr	r1, [pc, #40]	; (8000de4 <HAL_UART_RxCpltCallback+0x54>)
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <HAL_UART_RxCpltCallback+0x58>)
 8000dbe:	f005 f8eb 	bl	8005f98 <HAL_UART_Transmit_IT>
		counter_usart = atoi(msg_str);
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <HAL_UART_RxCpltCallback+0x54>)
 8000dc4:	f006 fc0e 	bl	80075e4 <atoi>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_UART_RxCpltCallback+0x5c>)
 8000dcc:	6013      	str	r3, [r2, #0]
		flag = 1;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_UART_RxCpltCallback+0x60>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	20000000 	.word	0x20000000
 8000de4:	2000015c 	.word	0x2000015c
 8000de8:	200002d8 	.word	0x200002d8
 8000dec:	200000a4 	.word	0x200000a4
 8000df0:	200000a8 	.word	0x200000a8

08000df4 <HAL_TIM_IC_CaptureCallback>:

// INPUT CAPTURE FUNCTION
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7f1b      	ldrb	r3, [r3, #28]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d148      	bne.n	8000e96 <HAL_TIM_IC_CaptureCallback+0xa2>
	{


		if (Is_First_Captured==0) // if the first rising edge is not captured
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10a      	bne.n	8000e22 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f004 fa00 	bl	8005214 <HAL_TIM_ReadCapturedValue>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e18:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e039      	b.n	8000e96 <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f004 f9f5 	bl	8005214 <HAL_TIM_ReadCapturedValue>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e2e:	6013      	str	r3, [r2, #0]




			if (IC_Val2 > IC_Val1)
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d907      	bls.n	8000e4c <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00d      	b.n	8000e68 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d907      	bls.n	8000e68 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e66:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e6a:	60fb      	str	r3, [r7, #12]

			frequency = refClock/(Difference*2);
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e7a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e84:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]


		}
	}

	  if(output == 0)
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <HAL_TIM_IC_CaptureCallback+0xb2>
	  {
		  frequency = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
	  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000009c 	.word	0x2000009c
 8000eb4:	20000090 	.word	0x20000090
 8000eb8:	20000094 	.word	0x20000094
 8000ebc:	20000098 	.word	0x20000098
 8000ec0:	49742400 	.word	0x49742400
 8000ec4:	200000a0 	.word	0x200000a0
 8000ec8:	20000154 	.word	0x20000154

08000ecc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d159      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0xc6>
  {
//	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint16_t)(readADC_f));


	  	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ee8:	801a      	strh	r2, [r3, #0]

	  	  if (flag == 1)
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x38>
	  	  {
	  		u = counter_usart;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ef8:	6013      	str	r3, [r2, #0]
	  		counter = counter_usart;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f02:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if (temp_counter != counter) {
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d007      	beq.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x58>
			flag = 0;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			u = counter;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f22:	601a      	str	r2, [r3, #0]
		}

	  	temp_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000f2e:	801a      	strh	r2, [r3, #0]

	  	output = pid_calculate(&(pid_controller), u, frequency);
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f36:	edd2 7a00 	vldr	s15, [r2]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	4619      	mov	r1, r3
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000f46:	f7ff fb5a 	bl	80005fe <pid_calculate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000f4e:	6013      	str	r3, [r2, #0]
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, output);
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c

//
  		n = sprintf(data_msg, " U:%4d, V:%4d, Y:%4d,\r\n", (int)output, (int)frequency, (int)u);
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	4915      	ldr	r1, [pc, #84]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f74:	4815      	ldr	r0, [pc, #84]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f76:	f006 fb6b 	bl	8007650 <siprintf>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f80:	701a      	strb	r2, [r3, #0]
  		HAL_UART_Transmit_IT(&huart3, (uint8_t*)data_msg, n);
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4910      	ldr	r1, [pc, #64]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f8e:	f005 f803 	bl	8005f98 <HAL_UART_Transmit_IT>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	200001f4 	.word	0x200001f4
 8000fa4:	2000015a 	.word	0x2000015a
 8000fa8:	200000a8 	.word	0x200000a8
 8000fac:	200000a4 	.word	0x200000a4
 8000fb0:	2000018c 	.word	0x2000018c
 8000fb4:	20000150 	.word	0x20000150
 8000fb8:	200000a0 	.word	0x200000a0
 8000fbc:	20000160 	.word	0x20000160
 8000fc0:	20000154 	.word	0x20000154
 8000fc4:	20000240 	.word	0x20000240
 8000fc8:	08007fe0 	.word	0x08007fe0
 8000fcc:	200001b4 	.word	0x200001b4
 8000fd0:	20000001 	.word	0x20000001
 8000fd4:	200002d8 	.word	0x200002d8

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f000 fd0b 	bl	80019f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe0:	f000 f866 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe4:	f7ff fc44 	bl	8000870 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fe8:	f000 f9bc 	bl	8001364 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000fec:	f7ff fbae 	bl	800074c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ff0:	f000 fa66 	bl	80014c0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ff4:	f7ff fd54 	bl	8000aa0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ff8:	f000 fade 	bl	80015b8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000ffc:	f000 fc56 	bl	80018ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <main+0xa4>)
 8001002:	f003 f8b3 	bl	800416c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001006:	2108      	movs	r1, #8
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <main+0xa4>)
 800100a:	f003 f989 	bl	8004320 <HAL_TIM_PWM_Start>

//PID
  pid_init(&(pid_controller), FAN_Kp, FAN_Ki, FAN_Kd, FAN_dt, FAN_ANTI_WINDUP);
 800100e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001012:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8001080 <main+0xa8>
 8001016:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001084 <main+0xac>
 800101a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800101e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001022:	4819      	ldr	r0, [pc, #100]	; (8001088 <main+0xb0>)
 8001024:	f7ff fac0 	bl	80005a8 <pid_init>

// Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <main+0xb4>)
 800102c:	f003 fad4 	bl	80045d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001030:	2108      	movs	r1, #8
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <main+0xb4>)
 8001034:	f003 fad0 	bl	80045d8 <HAL_TIM_IC_Start_IT>

//  Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001038:	213c      	movs	r1, #60	; 0x3c
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <main+0xb8>)
 800103c:	f003 fcc2 	bl	80049c4 <HAL_TIM_Encoder_Start>
//USART
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, msg_len);
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <main+0xbc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	4913      	ldr	r1, [pc, #76]	; (8001098 <main+0xc0>)
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0xc4>)
 800104c:	f005 f812 	bl	8006074 <HAL_UART_Receive_IT>


  // LCD init
  disp.addr = (0x27 << 1);
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0xc8>)
 8001052:	224e      	movs	r2, #78	; 0x4e
 8001054:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <main+0xc8>)
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 800105e:	4810      	ldr	r0, [pc, #64]	; (80010a0 <main+0xc8>)
 8001060:	f7ff fda2 	bl	8000ba8 <lcd_init>

  sprintf((char *)&disp.f_line, "################");
 8001064:	490f      	ldr	r1, [pc, #60]	; (80010a4 <main+0xcc>)
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <main+0xd0>)
 8001068:	f006 faf2 	bl	8007650 <siprintf>
  sprintf((char *)&disp.s_line, "################");
 800106c:	490d      	ldr	r1, [pc, #52]	; (80010a4 <main+0xcc>)
 800106e:	480f      	ldr	r0, [pc, #60]	; (80010ac <main+0xd4>)
 8001070:	f006 faee 	bl	8007650 <siprintf>

  lcd_display(&disp);
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <main+0xc8>)
 8001076:	f7ff fe1d 	bl	8000cb4 <lcd_display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800107a:	e7fe      	b.n	800107a <main+0xa2>
 800107c:	20000240 	.word	0x20000240
 8001080:	3a83126f 	.word	0x3a83126f
 8001084:	00000000 	.word	0x00000000
 8001088:	20000160 	.word	0x20000160
 800108c:	2000028c 	.word	0x2000028c
 8001090:	200001f4 	.word	0x200001f4
 8001094:	20000000 	.word	0x20000000
 8001098:	2000015c 	.word	0x2000015c
 800109c:	200002d8 	.word	0x200002d8
 80010a0:	20000190 	.word	0x20000190
 80010a4:	08007ff8 	.word	0x08007ff8
 80010a8:	20000191 	.word	0x20000191
 80010ac:	200001a2 	.word	0x200001a2

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0b4      	sub	sp, #208	; 0xd0
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fabe 	bl	8007640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2284      	movs	r2, #132	; 0x84
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 faaf 	bl	8007640 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e2:	f001 ff45 	bl	8002f70 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <SystemClock_Config+0x114>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <SystemClock_Config+0x114>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <SystemClock_Config+0x114>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <SystemClock_Config+0x118>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <SystemClock_Config+0x118>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <SystemClock_Config+0x118>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111a:	2301      	movs	r3, #1
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001120:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001136:	2304      	movs	r3, #4
 8001138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800113c:	2348      	movs	r3, #72	; 0x48
 800113e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001148:	2303      	movs	r3, #3
 800114a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 ff1c 	bl	8002f90 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800115e:	f000 f835 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f9a5 	bl	80034d8 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001194:	f000 f81a 	bl	80011cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001198:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800119c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800119e:	2300      	movs	r3, #0
 80011a0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fb96 	bl	80038dc <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80011b6:	f000 f809 	bl	80011cc <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	37d0      	adds	r7, #208	; 0xd0
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x44>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_MspInit+0x44>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x44>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x44>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x44>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x44>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 fc00 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800127a:	f003 fc31 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000240 	.word	0x20000240

08001288 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM2_IRQHandler+0x10>)
 800128e:	f003 fc27 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000028c 	.word	0x2000028c

0800129c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM3_IRQHandler+0x10>)
 80012a2:	f003 fc1d 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001f4 	.word	0x200001f4

080012b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <USART3_IRQHandler+0x10>)
 80012b6:	f004 ff2b 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002d8 	.word	0x200002d8

080012c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012cc:	f001 fa12 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f006 f972 	bl	80075ec <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20050000 	.word	0x20050000
 8001334:	00000400 	.word	0x00000400
 8001338:	200000ac 	.word	0x200000ac
 800133c:	20000370 	.word	0x20000370

08001340 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09a      	sub	sp, #104	; 0x68
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	222c      	movs	r2, #44	; 0x2c
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 f94e 	bl	8007640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013a6:	4a45      	ldr	r2, [pc, #276]	; (80014bc <MX_TIM1_Init+0x158>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013ac:	2247      	movs	r2, #71	; 0x47
 80013ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013d2:	f002 fe73 	bl	80040bc <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013dc:	f7ff fef6 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ea:	4619      	mov	r1, r3
 80013ec:	4832      	ldr	r0, [pc, #200]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013ee:	f003 fe47 	bl	8005080 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013f8:	f7ff fee8 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fc:	482e      	ldr	r0, [pc, #184]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013fe:	f002 ff2d 	bl	800425c <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001408:	f7ff fee0 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141c:	4619      	mov	r1, r3
 800141e:	4826      	ldr	r0, [pc, #152]	; (80014b8 <MX_TIM1_Init+0x154>)
 8001420:	f004 fc42 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800142a:	f7ff fecf 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8001432:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	2208      	movs	r2, #8
 8001452:	4619      	mov	r1, r3
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM1_Init+0x154>)
 8001456:	f003 fcff 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001460:	f7ff feb4 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM1_Init+0x154>)
 800149a:	f004 fc93 	bl	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014a4:	f7ff fe92 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM1_Init+0x154>)
 80014aa:	f000 f9c7 	bl	800183c <HAL_TIM_MspPostInit>

}
 80014ae:	bf00      	nop
 80014b0:	3768      	adds	r7, #104	; 0x68
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000240 	.word	0x20000240
 80014bc:	40010000 	.word	0x40010000

080014c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <MX_TIM2_Init+0xf4>)
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <MX_TIM2_Init+0xf4>)
 80014f6:	2247      	movs	r2, #71	; 0x47
 80014f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_TIM2_Init+0xf4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_TIM2_Init+0xf4>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001514:	4827      	ldr	r0, [pc, #156]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001516:	f002 fdd1 	bl	80040bc <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001520:	f7ff fe54 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4619      	mov	r1, r3
 8001530:	4820      	ldr	r0, [pc, #128]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001532:	f003 fda5 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800153c:	f7ff fe46 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001540:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001542:	f002 ffe7 	bl	8004514 <HAL_TIM_IC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800154c:	f7ff fe3e 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001560:	f004 fba2 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800156a:	f7ff fe2f 	bl	80011cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001572:	2301      	movs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <MX_TIM2_Init+0xf4>)
 8001586:	f003 fbca 	bl	8004d1e <HAL_TIM_IC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001590:	f7ff fe1c 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2208      	movs	r2, #8
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM2_Init+0xf4>)
 800159c:	f003 fbbf 	bl	8004d1e <HAL_TIM_IC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80015a6:	f7ff fe11 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000028c 	.word	0x2000028c

080015b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 f83a 	bl	8007640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015d8:	4a20      	ldr	r2, [pc, #128]	; (800165c <MX_TIM3_Init+0xa4>)
 80015da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM3_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015fa:	2303      	movs	r3, #3
 80015fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM3_Init+0xa0>)
 8001626:	f003 f927 	bl	8004878 <HAL_TIM_Encoder_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001630:	f7ff fdcc 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM3_Init+0xa0>)
 8001642:	f004 fb31 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800164c:	f7ff fdbe 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001f4 	.word	0x200001f4
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a36      	ldr	r2, [pc, #216]	; (8001758 <HAL_TIM_Base_MspInit+0xf8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d114      	bne.n	80016ac <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2019      	movs	r0, #25
 80016a0:	f000 fd99 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016a4:	2019      	movs	r0, #25
 80016a6:	f000 fdb2 	bl	800220e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016aa:	e051      	b.n	8001750 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b4:	d14c      	bne.n	8001750 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a22      	ldr	r2, [pc, #136]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_TIM_Base_MspInit+0xfc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016fe:	2301      	movs	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001706:	2301      	movs	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170e:	2301      	movs	r3, #1
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <HAL_TIM_Base_MspInit+0x100>)
 800171a:	f000 fe25 	bl	8002368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <HAL_TIM_Base_MspInit+0x104>)
 800173c:	f000 fe14 	bl	8002368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	201c      	movs	r0, #28
 8001746:	f000 fd46 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174a:	201c      	movs	r0, #28
 800174c:	f000 fd5f 	bl	800220e <HAL_NVIC_EnableIRQ>
}
 8001750:	bf00      	nop
 8001752:	3730      	adds	r7, #48	; 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40010000 	.word	0x40010000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d14b      	bne.n	8001822 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_TIM_Encoder_MspInit+0xc8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e2:	2302      	movs	r3, #2
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <HAL_TIM_Encoder_MspInit+0xcc>)
 80017ee:	f000 fdbb 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001802:	2302      	movs	r3, #2
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480a      	ldr	r0, [pc, #40]	; (8001838 <HAL_TIM_Encoder_MspInit+0xd0>)
 800180e:	f000 fdab 	bl	8002368 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201d      	movs	r0, #29
 8001818:	f000 fcdd 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800181c:	201d      	movs	r0, #29
 800181e:	f000 fcf6 	bl	800220e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40000400 	.word	0x40000400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020800 	.word	0x40020800

0800183c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_TIM_MspPostInit+0x64>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d11c      	bne.n	8001898 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_TIM_MspPostInit+0x68>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_TIM_MspPostInit+0x68>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_TIM_MspPostInit+0x68>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_TIM_MspPostInit+0x6c>)
 8001894:	f000 fd68 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40021000 	.word	0x40021000

080018ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_USART3_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART3_UART_Init+0x58>)
 80018f0:	f004 fb04 	bl	8005efc <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f7ff fc67 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002d8 	.word	0x200002d8
 8001908:	40004800 	.word	0x40004800

0800190c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x8c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d130      	bne.n	8001990 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_MspInit+0x90>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_UART_MspInit+0x90>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_MspInit+0x90>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0x90>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_UART_MspInit+0x90>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_MspInit+0x90>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800195e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001970:	2307      	movs	r3, #7
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_UART_MspInit+0x94>)
 800197c:	f000 fcf4 	bl	8002368 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2027      	movs	r0, #39	; 0x27
 8001986:	f000 fc26 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800198a:	2027      	movs	r0, #39	; 0x27
 800198c:	f000 fc3f 	bl	800220e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004800 	.word	0x40004800
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020c00 	.word	0x40020c00

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019aa:	490e      	ldr	r1, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ce:	f7ff fcb7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f005 fe11 	bl	80075f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff faff 	bl	8000fd8 <main>
  bx  lr    
 80019da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019e8:	08008168 	.word	0x08008168
  ldr r2, =_sbss
 80019ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019f0:	20000370 	.word	0x20000370

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>

080019f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f000 fbe0 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f805 	bl	8001a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a06:	f7ff fbe7 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x54>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x58>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fbfb 	bl	800222a <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f000 fbc3 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x5c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000004 	.word	0x20000004
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	20000008 	.word	0x20000008

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	2000035c 	.word	0x2000035c

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000035c 	.word	0x2000035c

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e031      	b.n	8001b72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fe6a 	bl	80007f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_ADC_Init+0x84>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	f043 0202 	orr.w	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f970 	bl	8001e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
 8001b62:	e001      	b.n	8001b68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	ffffeefd 	.word	0xffffeefd

08001b80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x1c>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e136      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x28a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b09      	cmp	r3, #9
 8001baa:	d93a      	bls.n	8001c22 <HAL_ADC_ConfigChannel+0xa2>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb4:	d035      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b1e      	subs	r3, #30
 8001bcc:	2207      	movs	r2, #7
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a8d      	ldr	r2, [pc, #564]	; (8001e18 <HAL_ADC_ConfigChannel+0x298>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10a      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68d9      	ldr	r1, [r3, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	061a      	lsls	r2, r3, #24
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfa:	e035      	b.n	8001c68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4403      	add	r3, r0
 8001c14:	3b1e      	subs	r3, #30
 8001c16:	409a      	lsls	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c20:	e022      	b.n	8001c68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	2207      	movs	r2, #7
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6919      	ldr	r1, [r3, #16]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	4603      	mov	r3, r0
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4403      	add	r3, r0
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b06      	cmp	r3, #6
 8001c6e:	d824      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b05      	subs	r3, #5
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b05      	subs	r3, #5
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb8:	e04c      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d824      	bhi.n	8001d0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b23      	subs	r3, #35	; 0x23
 8001cd4:	221f      	movs	r2, #31
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b23      	subs	r3, #35	; 0x23
 8001cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0a:	e023      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b41      	subs	r3, #65	; 0x41
 8001d1e:	221f      	movs	r2, #31
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43da      	mvns	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b41      	subs	r3, #65	; 0x41
 8001d48:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a30      	ldr	r2, [pc, #192]	; (8001e1c <HAL_ADC_ConfigChannel+0x29c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1f4>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <HAL_ADC_ConfigChannel+0x29c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10f      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x21e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d10b      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d90:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <HAL_ADC_ConfigChannel+0x29c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d12b      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x280>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_ADC_ConfigChannel+0x298>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d003      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x23a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b11      	cmp	r3, #17
 8001db8:	d122      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dc4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dd0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_ADC_ConfigChannel+0x298>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d111      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_ADC_ConfigChannel+0x2a8>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	10000012 	.word	0x10000012
 8001e1c:	40012000 	.word	0x40012000
 8001e20:	40012300 	.word	0x40012300
 8001e24:	20000004 	.word	0x20000004
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e34:	4b78      	ldr	r3, [pc, #480]	; (8002018 <ADC_Init+0x1ec>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4a77      	ldr	r2, [pc, #476]	; (8002018 <ADC_Init+0x1ec>)
 8001e3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e40:	4b75      	ldr	r3, [pc, #468]	; (8002018 <ADC_Init+0x1ec>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4973      	ldr	r1, [pc, #460]	; (8002018 <ADC_Init+0x1ec>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	021a      	lsls	r2, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	4a58      	ldr	r2, [pc, #352]	; (800201c <ADC_Init+0x1f0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d022      	beq.n	8001f06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ece:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6899      	ldr	r1, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ef0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	e00f      	b.n	8001f26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0202 	bic.w	r2, r2, #2
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	005a      	lsls	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	035a      	lsls	r2, r3, #13
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	e007      	b.n	8001f9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	051a      	lsls	r2, r3, #20
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fde:	025a      	lsls	r2, r3, #9
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	029a      	lsls	r2, r3, #10
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40012300 	.word	0x40012300
 800201c:	0f000001 	.word	0x0f000001

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	4313      	orrs	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	05fa0000 	.word	0x05fa0000

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fc22 	bl	8001a98 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d008      	beq.n	8002274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e052      	b.n	800231a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0216 	bic.w	r2, r2, #22
 8002282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <HAL_DMA_Abort+0x62>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0208 	bic.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c4:	e013      	b.n	80022ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff fbe7 	bl	8001a98 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d90c      	bls.n	80022ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e015      	b.n	800231a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e4      	bne.n	80022c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	223f      	movs	r2, #63	; 0x3f
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d004      	beq.n	8002340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e00c      	b.n	800235a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2205      	movs	r2, #5
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e175      	b.n	8002674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8164 	bne.w	800266e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d005      	beq.n	80023be <HAL_GPIO_Init+0x56>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d130      	bne.n	8002420 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d017      	beq.n	800245c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d123      	bne.n	80024b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80be 	beq.w	800266e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b66      	ldr	r3, [pc, #408]	; (800268c <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_GPIO_Init+0x324>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_GPIO_Init+0x324>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800250a:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_GPIO_Init+0x328>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_GPIO_Init+0x32c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d037      	beq.n	80025a6 <HAL_GPIO_Init+0x23e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_GPIO_Init+0x330>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d031      	beq.n	80025a2 <HAL_GPIO_Init+0x23a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_GPIO_Init+0x334>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <HAL_GPIO_Init+0x236>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a55      	ldr	r2, [pc, #340]	; (80026a0 <HAL_GPIO_Init+0x338>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x232>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_GPIO_Init+0x33c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x22e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a53      	ldr	r2, [pc, #332]	; (80026a8 <HAL_GPIO_Init+0x340>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x22a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x344>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x226>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x348>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x222>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_GPIO_Init+0x34c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x21e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x350>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x21a>
 800257e:	2309      	movs	r3, #9
 8002580:	e012      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002582:	230a      	movs	r3, #10
 8002584:	e010      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002586:	2308      	movs	r3, #8
 8002588:	e00e      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800258a:	2307      	movs	r3, #7
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800258e:	2306      	movs	r3, #6
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025b8:	4935      	ldr	r1, [pc, #212]	; (8002690 <HAL_GPIO_Init+0x328>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_GPIO_Init+0x354>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f ae86 	bls.w	8002388 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40022400 	.word	0x40022400
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f806 	bl	8002724 <HAL_GPIO_EXTI_Callback>
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e07f      	b.n	800284e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe f9dc 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800278c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e006      	b.n	80027c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d104      	bne.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_I2C_Init+0x11c>)
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	02008000 	.word	0x02008000

0800285c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
 800286c:	4613      	mov	r3, r2
 800286e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b20      	cmp	r3, #32
 800287a:	f040 80da 	bne.w	8002a32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2C_Master_Transmit+0x30>
 8002888:	2302      	movs	r3, #2
 800288a:	e0d3      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002894:	f7ff f900 	bl	8001a98 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2319      	movs	r3, #25
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f8f0 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0be      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2221      	movs	r2, #33	; 0x21
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2210      	movs	r2, #16
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	893a      	ldrh	r2, [r7, #8]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2bff      	cmp	r3, #255	; 0xff
 80028e6:	d90e      	bls.n	8002906 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	22ff      	movs	r2, #255	; 0xff
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_I2C_Master_Transmit+0x1e0>)
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa6c 	bl	8002ddc <I2C_TransferConfig>
 8002904:	e06c      	b.n	80029e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	b2da      	uxtb	r2, r3
 8002916:	8979      	ldrh	r1, [r7, #10]
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_I2C_Master_Transmit+0x1e0>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fa5b 	bl	8002ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002926:	e05b      	b.n	80029e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6a39      	ldr	r1, [r7, #32]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f8ed 	bl	8002b0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07b      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <HAL_I2C_Master_Transmit+0x184>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d130      	bne.n	80029e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f87f 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04d      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa0f 	bl	8002ddc <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9fe 	bl	8002ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d19e      	bne.n	8002928 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6a39      	ldr	r1, [r7, #32]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8cc 	bl	8002b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_I2C_Master_Transmit+0x1e4>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	80002000 	.word	0x80002000
 8002a40:	fe00e800 	.word	0xfe00e800

08002a44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d103      	bne.n	8002a62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d007      	beq.n	8002a80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	619a      	str	r2, [r3, #24]
  }
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	e022      	b.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa4:	d01e      	beq.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe fff7 	bl	8001a98 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d113      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e00f      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d0cd      	beq.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b18:	e02c      	b.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f870 	bl	8002c04 <I2C_IsErrorOccurred>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e02a      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b34:	d01e      	beq.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe ffaf 	bl	8001a98 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e007      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d1cb      	bne.n	8002b1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b98:	e028      	b.n	8002bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f830 	bl	8002c04 <I2C_IsErrorOccurred>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e026      	b.n	8002bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7fe ff73 	bl	8001a98 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e007      	b.n	8002bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d1cf      	bne.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d075      	beq.n	8002d1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c38:	e056      	b.n	8002ce8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c40:	d052      	beq.n	8002ce8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe ff29 	bl	8001a98 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_IsErrorOccurred+0x54>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d147      	bne.n	8002ce8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7a:	d12e      	bne.n	8002cda <I2C_IsErrorOccurred+0xd6>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c82:	d02a      	beq.n	8002cda <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d027      	beq.n	8002cda <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c98:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c9a:	f7fe fefd 	bl	8001a98 <HAL_GetTick>
 8002c9e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca0:	e01b      	b.n	8002cda <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ca2:	f7fe fef9 	bl	8001a98 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b19      	cmp	r3, #25
 8002cae:	d914      	bls.n	8002cda <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d1dc      	bne.n	8002ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d003      	beq.n	8002cfe <I2C_IsErrorOccurred+0xfa>
 8002cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d09d      	beq.n	8002c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f043 0308 	orr.w	r3, r3, #8
 8002d56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01c      	beq.n	8002dcc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fe56 	bl	8002a44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <I2C_IsErrorOccurred+0x1d4>)
 8002da4:	400b      	ands	r3, r1
 8002da6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	fe00e800 	.word	0xfe00e800

08002ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	4613      	mov	r3, r2
 8002dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df4:	7a7b      	ldrb	r3, [r7, #9]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <I2C_TransferConfig+0x60>)
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	ea02 0103 	and.w	r1, r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	03ff63ff 	.word	0x03ff63ff

08002e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d138      	bne.n	8002ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e032      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d139      	bne.n	8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e033      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	; 0x24
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e291      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc0:	4b93      	ldr	r3, [pc, #588]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
 8002fcc:	4b90      	ldr	r3, [pc, #576]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x130>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e26b      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x7a>
 8002ffc:	4b84      	ldr	r3, [pc, #528]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a83      	ldr	r2, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x9c>
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7e      	ldr	r2, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xc0>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a72      	ldr	r2, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd8>
 8003050:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fd12 	bl	8001a98 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fd0e 	bl	8001a98 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e21f      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fcfe 	bl	8001a98 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fcfa 	bl	8001a98 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e20b      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x110>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d069      	beq.n	80031a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1df      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	493d      	ldr	r1, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e040      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fcb0 	bl	8001a98 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe fcac 	bl	8001a98 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1bd      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4929      	ldr	r1, [pc, #164]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
 800316e:	e018      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fc8c 	bl	8001a98 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe fc88 	bl	8001a98 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e199      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d038      	beq.n	8003220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe fc69 	bl	8001a98 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe fc65 	bl	8001a98 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e176      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x23a>
 80031e8:	e01a      	b.n	8003220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe fc4f 	bl	8001a98 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe fc4b 	bl	8001a98 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d903      	bls.n	8003214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e15c      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
 8003210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b91      	ldr	r3, [pc, #580]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a4 	beq.w	8003376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b8b      	ldr	r3, [pc, #556]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a87      	ldr	r2, [pc, #540]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b85      	ldr	r3, [pc, #532]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b82      	ldr	r3, [pc, #520]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7e      	ldr	r2, [pc, #504]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe fc13 	bl	8001a98 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fc0f 	bl	8001a98 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e120      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	4b75      	ldr	r3, [pc, #468]	; (8003460 <HAL_RCC_OscConfig+0x4d0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x31a>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x33c>
 80032b2:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a66      	ldr	r2, [pc, #408]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x35e>
 80032d4:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a60      	ldr	r2, [pc, #384]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a5d      	ldr	r2, [pc, #372]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
 80032ee:	4b5b      	ldr	r3, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a5a      	ldr	r2, [pc, #360]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fbc3 	bl	8001a98 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fbbf 	bl	8001a98 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0ce      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x386>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fbad 	bl	8001a98 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fba9 	bl	8001a98 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0b8      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b3c      	ldr	r3, [pc, #240]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a3b      	ldr	r2, [pc, #236]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a4 	beq.w	80034c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d06b      	beq.n	8003464 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d149      	bne.n	8003428 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fb7a 	bl	8001a98 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fb76 	bl	8001a98 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e087      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	4313      	orrs	r3, r2
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fb4a 	bl	8001a98 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fb46 	bl	8001a98 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e057      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x478>
 8003426:	e04f      	b.n	80034c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 800342e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fb30 	bl	8001a98 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe fb2c 	bl	8001a98 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e03d      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_OscConfig+0x4cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x4ac>
 800345a:	e035      	b.n	80034c8 <HAL_RCC_OscConfig+0x538>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCC_OscConfig+0x544>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d121      	bne.n	80034c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11a      	bne.n	80034c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349c:	4293      	cmp	r3, r2
 800349e:	d111      	bne.n	80034c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d0      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 020f 	bic.w	r2, r3, #15
 8003506:	4965      	ldr	r1, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d040      	beq.n	80035fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e073      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06b      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4936      	ldr	r1, [pc, #216]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe fa64 	bl	8001a98 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fa60 	bl	8001a98 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e053      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d210      	bcs.n	800362c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 020f 	bic.w	r2, r3, #15
 8003612:	4922      	ldr	r1, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1cc>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe f9c0 	bl	8001a10 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	0800800c 	.word	0x0800800c
 80036a8:	20000004 	.word	0x20000004
 80036ac:	20000008 	.word	0x20000008

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	2300      	movs	r3, #0
 80036c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80bd 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e0b7      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036e6:	60bb      	str	r3, [r7, #8]
      break;
 80036e8:	e0b7      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036ec:	60bb      	str	r3, [r7, #8]
      break;
 80036ee:	e0b4      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036fa:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04d      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	461a      	mov	r2, r3
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	ea02 0800 	and.w	r8, r2, r0
 800371e:	ea03 0901 	and.w	r9, r3, r1
 8003722:	4640      	mov	r0, r8
 8003724:	4649      	mov	r1, r9
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	014b      	lsls	r3, r1, #5
 8003730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003734:	0142      	lsls	r2, r0, #5
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	ebb0 0008 	subs.w	r0, r0, r8
 800373e:	eb61 0109 	sbc.w	r1, r1, r9
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	018b      	lsls	r3, r1, #6
 800374c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003750:	0182      	lsls	r2, r0, #6
 8003752:	1a12      	subs	r2, r2, r0
 8003754:	eb63 0301 	sbc.w	r3, r3, r1
 8003758:	f04f 0000 	mov.w	r0, #0
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	00d9      	lsls	r1, r3, #3
 8003762:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003766:	00d0      	lsls	r0, r2, #3
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	eb12 0208 	adds.w	r2, r2, r8
 8003770:	eb43 0309 	adc.w	r3, r3, r9
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	0259      	lsls	r1, r3, #9
 800377e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003782:	0250      	lsls	r0, r2, #9
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	461a      	mov	r2, r3
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f7fc fd8c 	bl	80002b0 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e04a      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	461a      	mov	r2, r3
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	ea02 0400 	and.w	r4, r2, r0
 80037ba:	ea03 0501 	and.w	r5, r3, r1
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	014b      	lsls	r3, r1, #5
 80037cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037d0:	0142      	lsls	r2, r0, #5
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	1b00      	subs	r0, r0, r4
 80037d8:	eb61 0105 	sbc.w	r1, r1, r5
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	018b      	lsls	r3, r1, #6
 80037e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037ea:	0182      	lsls	r2, r0, #6
 80037ec:	1a12      	subs	r2, r2, r0
 80037ee:	eb63 0301 	sbc.w	r3, r3, r1
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	00d9      	lsls	r1, r3, #3
 80037fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003800:	00d0      	lsls	r0, r2, #3
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	1912      	adds	r2, r2, r4
 8003808:	eb45 0303 	adc.w	r3, r5, r3
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	0299      	lsls	r1, r3, #10
 8003816:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800381a:	0290      	lsls	r0, r2, #10
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	461a      	mov	r2, r3
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	f7fc fd40 	bl	80002b0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003856:	60bb      	str	r3, [r7, #8]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	68bb      	ldr	r3, [r7, #8]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	0800801c 	.word	0x0800801c

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800801c 	.word	0x0800801c

080038dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003904:	4b69      	ldr	r3, [pc, #420]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a68      	ldr	r2, [pc, #416]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800390e:	6093      	str	r3, [r2, #8]
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	4964      	ldr	r1, [pc, #400]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d017      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	4959      	ldr	r1, [pc, #356]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003972:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	494a      	ldr	r1, [pc, #296]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039ae:	2301      	movs	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 808b 	beq.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4a39      	ldr	r2, [pc, #228]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	; 0x40
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e4:	f7fe f858 	bl	8001a98 <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe f854 	bl	8001a98 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e357      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0a:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d035      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d02e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a4a:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d114      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f81c 	bl	8001a98 <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fe f818 	bl	8001a98 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e319      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ee      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	4901      	ldr	r1, [pc, #4]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	0ffffcff 	.word	0x0ffffcff
 8003ab8:	4bb1      	ldr	r3, [pc, #708]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4ab0      	ldr	r2, [pc, #704]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003abe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ac2:	6093      	str	r3, [r2, #8]
 8003ac4:	4bae      	ldr	r3, [pc, #696]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	49ab      	ldr	r1, [pc, #684]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae2:	4ba7      	ldr	r3, [pc, #668]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	4aa5      	ldr	r2, [pc, #660]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003af2:	4ba3      	ldr	r3, [pc, #652]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003af4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	49a0      	ldr	r1, [pc, #640]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b10:	4b9b      	ldr	r3, [pc, #620]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1e:	4998      	ldr	r1, [pc, #608]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b32:	4b93      	ldr	r3, [pc, #588]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b40:	498f      	ldr	r1, [pc, #572]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b54:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b62:	4987      	ldr	r1, [pc, #540]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	497e      	ldr	r1, [pc, #504]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b98:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4976      	ldr	r1, [pc, #472]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bba:	4b71      	ldr	r3, [pc, #452]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f023 020c 	bic.w	r2, r3, #12
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	496d      	ldr	r1, [pc, #436]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4965      	ldr	r1, [pc, #404]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bfe:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	495c      	ldr	r1, [pc, #368]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c20:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	4954      	ldr	r1, [pc, #336]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c42:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	494b      	ldr	r1, [pc, #300]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	4943      	ldr	r1, [pc, #268]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c86:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c94:	493a      	ldr	r1, [pc, #232]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	4932      	ldr	r1, [pc, #200]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd8:	4929      	ldr	r1, [pc, #164]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d18:	4919      	ldr	r1, [pc, #100]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3c:	4910      	ldr	r1, [pc, #64]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d006      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80d9 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fd fe98 	bl	8001a98 <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d6c:	f7fd fe94 	bl	8001a98 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d904      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e197      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d84:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ed      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d021      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11d      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003db2:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	4957      	ldr	r1, [pc, #348]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02e      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d129      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e0c:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	0f1b      	lsrs	r3, r3, #28
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	019a      	lsls	r2, r3, #6
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	493d      	ldr	r1, [pc, #244]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4e:	f023 021f 	bic.w	r2, r3, #31
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	3b01      	subs	r3, #1
 8003e58:	4937      	ldr	r1, [pc, #220]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	0e1b      	lsrs	r3, r3, #24
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	0f1b      	lsrs	r3, r3, #28
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	019a      	lsls	r2, r3, #6
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	431a      	orrs	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	071b      	lsls	r3, r3, #28
 8003ea0:	4925      	ldr	r1, [pc, #148]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d011      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	019a      	lsls	r2, r3, #6
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	4919      	ldr	r1, [pc, #100]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed8:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fdd8 	bl	8001a98 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eec:	f7fd fdd4 	bl	8001a98 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0d7      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f040 80cd 	bne.w	80040ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1e:	f7fd fdbb 	bl	8001a98 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f26:	f7fd fdb7 	bl	8001a98 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b64      	cmp	r3, #100	; 0x64
 8003f32:	d903      	bls.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0ba      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f3c:	4b5e      	ldr	r3, [pc, #376]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f48:	d0ed      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02e      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d12a      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f80:	4b4d      	ldr	r3, [pc, #308]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	0f1b      	lsrs	r3, r3, #28
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	4944      	ldr	r1, [pc, #272]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fae:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	493d      	ldr	r1, [pc, #244]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fdc:	d11d      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fec:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	0f1b      	lsrs	r3, r3, #28
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4929      	ldr	r1, [pc, #164]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	019a      	lsls	r2, r3, #6
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	4917      	ldr	r1, [pc, #92]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4911      	ldr	r1, [pc, #68]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004084:	f7fd fd08 	bl	8001a98 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800408c:	f7fd fd04 	bl	8001a98 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e007      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040aa:	d1ef      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e049      	b.n	8004162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd fabc 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f001 f8ec 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e054      	b.n	800422e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <HAL_TIM_Base_Start_IT+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d01d      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	; (8004240 <HAL_TIM_Base_Start_IT+0xd4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_TIM_Base_Start_IT+0xd8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <HAL_TIM_Base_Start_IT+0xdc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_TIM_Base_Start_IT+0xe0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <HAL_TIM_Base_Start_IT+0xe4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x80>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_TIM_Base_Start_IT+0xe8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d115      	bne.n	8004218 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_TIM_Base_Start_IT+0xec>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d015      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d011      	beq.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	e008      	b.n	800422a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e000      	b.n	800422c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40010000 	.word	0x40010000
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40010400 	.word	0x40010400
 8004250:	40014000 	.word	0x40014000
 8004254:	40001800 	.word	0x40001800
 8004258:	00010007 	.word	0x00010007

0800425c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e049      	b.n	8004302 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f841 	bl	800430a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f001 f81c 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x24>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e03c      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d109      	bne.n	800435e <HAL_TIM_PWM_Start+0x3e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e02f      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x58>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e022      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d109      	bne.n	8004392 <HAL_TIM_PWM_Start+0x72>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e015      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x8c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e008      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e092      	b.n	80044ec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xb6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d4:	e023      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xc6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	e01b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f4:	e013      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xe6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004404:	e00b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xf6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	e003      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f001 fc18 	bl	8005c5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_TIM_PWM_Start+0x1d4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_PWM_Start+0x120>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <HAL_TIM_PWM_Start+0x1d8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_TIM_PWM_Start+0x124>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_TIM_PWM_Start+0x126>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004458:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <HAL_TIM_PWM_Start+0x1d4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446c:	d01d      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_TIM_PWM_Start+0x1dc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a20      	ldr	r2, [pc, #128]	; (8004500 <HAL_TIM_PWM_Start+0x1e0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_TIM_PWM_Start+0x1e4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_TIM_PWM_Start+0x1d8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <HAL_TIM_PWM_Start+0x1e8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIM_PWM_Start+0x18a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_TIM_PWM_Start+0x1ec>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d115      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	4b17      	ldr	r3, [pc, #92]	; (8004510 <HAL_TIM_PWM_Start+0x1f0>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d015      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x1c8>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d011      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	e008      	b.n	80044e8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e000      	b.n	80044ea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40010400 	.word	0x40010400
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40014000 	.word	0x40014000
 800450c:	40001800 	.word	0x40001800
 8004510:	00010007 	.word	0x00010007

08004514 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e049      	b.n	80045ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f841 	bl	80045c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fec0 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_IC_Start_IT+0x1e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e023      	b.n	800463e <HAL_TIM_IC_Start_IT+0x66>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_IC_Start_IT+0x2e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e01b      	b.n	800463e <HAL_TIM_IC_Start_IT+0x66>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d104      	bne.n	8004616 <HAL_TIM_IC_Start_IT+0x3e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e013      	b.n	800463e <HAL_TIM_IC_Start_IT+0x66>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d104      	bne.n	8004626 <HAL_TIM_IC_Start_IT+0x4e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e00b      	b.n	800463e <HAL_TIM_IC_Start_IT+0x66>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b10      	cmp	r3, #16
 800462a:	d104      	bne.n	8004636 <HAL_TIM_IC_Start_IT+0x5e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e003      	b.n	800463e <HAL_TIM_IC_Start_IT+0x66>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800463c:	b2db      	uxtb	r3, r3
 800463e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_TIM_IC_Start_IT+0x78>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e013      	b.n	8004678 <HAL_TIM_IC_Start_IT+0xa0>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d104      	bne.n	8004660 <HAL_TIM_IC_Start_IT+0x88>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e00b      	b.n	8004678 <HAL_TIM_IC_Start_IT+0xa0>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b08      	cmp	r3, #8
 8004664:	d104      	bne.n	8004670 <HAL_TIM_IC_Start_IT+0x98>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e003      	b.n	8004678 <HAL_TIM_IC_Start_IT+0xa0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004676:	b2db      	uxtb	r3, r3
 8004678:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d102      	bne.n	8004686 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004680:	7b7b      	ldrb	r3, [r7, #13]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0e2      	b.n	8004850 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <HAL_TIM_IC_Start_IT+0xc2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	e023      	b.n	80046e2 <HAL_TIM_IC_Start_IT+0x10a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d104      	bne.n	80046aa <HAL_TIM_IC_Start_IT+0xd2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	e01b      	b.n	80046e2 <HAL_TIM_IC_Start_IT+0x10a>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_IC_Start_IT+0xe2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b8:	e013      	b.n	80046e2 <HAL_TIM_IC_Start_IT+0x10a>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d104      	bne.n	80046ca <HAL_TIM_IC_Start_IT+0xf2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c8:	e00b      	b.n	80046e2 <HAL_TIM_IC_Start_IT+0x10a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d104      	bne.n	80046da <HAL_TIM_IC_Start_IT+0x102>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d8:	e003      	b.n	80046e2 <HAL_TIM_IC_Start_IT+0x10a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_IC_Start_IT+0x11a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	e013      	b.n	800471a <HAL_TIM_IC_Start_IT+0x142>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_IC_Start_IT+0x12a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004700:	e00b      	b.n	800471a <HAL_TIM_IC_Start_IT+0x142>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d104      	bne.n	8004712 <HAL_TIM_IC_Start_IT+0x13a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004710:	e003      	b.n	800471a <HAL_TIM_IC_Start_IT+0x142>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d841      	bhi.n	80047a4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_TIM_IC_Start_IT+0x150>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800475d 	.word	0x0800475d
 800472c:	080047a5 	.word	0x080047a5
 8004730:	080047a5 	.word	0x080047a5
 8004734:	080047a5 	.word	0x080047a5
 8004738:	0800476f 	.word	0x0800476f
 800473c:	080047a5 	.word	0x080047a5
 8004740:	080047a5 	.word	0x080047a5
 8004744:	080047a5 	.word	0x080047a5
 8004748:	08004781 	.word	0x08004781
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080047a5 	.word	0x080047a5
 8004758:	08004793 	.word	0x08004793
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0202 	orr.w	r2, r2, #2
 800476a:	60da      	str	r2, [r3, #12]
      break;
 800476c:	e01d      	b.n	80047aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0204 	orr.w	r2, r2, #4
 800477c:	60da      	str	r2, [r3, #12]
      break;
 800477e:	e014      	b.n	80047aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0208 	orr.w	r2, r2, #8
 800478e:	60da      	str	r2, [r3, #12]
      break;
 8004790:	e00b      	b.n	80047aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0210 	orr.w	r2, r2, #16
 80047a0:	60da      	str	r2, [r3, #12]
      break;
 80047a2:	e002      	b.n	80047aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      break;
 80047a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d14e      	bne.n	800484e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fa4f 	bl	8005c5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a25      	ldr	r2, [pc, #148]	; (8004858 <HAL_TIM_IC_Start_IT+0x280>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d01d      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a21      	ldr	r2, [pc, #132]	; (800485c <HAL_TIM_IC_Start_IT+0x284>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <HAL_TIM_IC_Start_IT+0x288>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_TIM_IC_Start_IT+0x28c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <HAL_TIM_IC_Start_IT+0x290>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_TIM_IC_Start_IT+0x294>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_IC_Start_IT+0x236>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <HAL_TIM_IC_Start_IT+0x298>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d115      	bne.n	800483a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_TIM_IC_Start_IT+0x29c>)
 8004816:	4013      	ands	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d015      	beq.n	800484c <HAL_TIM_IC_Start_IT+0x274>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d011      	beq.n	800484c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	e008      	b.n	800484c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e000      	b.n	800484e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40010000 	.word	0x40010000
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40010400 	.word	0x40010400
 800486c:	40014000 	.word	0x40014000
 8004870:	40001800 	.word	0x40001800
 8004874:	00010007 	.word	0x00010007

08004878 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e08f      	b.n	80049ac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fc ff61 	bl	8001768 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <HAL_TIM_Encoder_Init+0x13c>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fd05 	bl	80052d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <HAL_TIM_Encoder_Init+0x140>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	4313      	orrs	r3, r2
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_TIM_Encoder_Init+0x144>)
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_TIM_Encoder_Init+0x148>)
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4313      	orrs	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	011a      	lsls	r2, r3, #4
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	031b      	lsls	r3, r3, #12
 8004938:	4313      	orrs	r3, r2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4313      	orrs	r3, r2
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	fffebff8 	.word	0xfffebff8
 80049b8:	fffffcfc 	.word	0xfffffcfc
 80049bc:	fffff3f3 	.word	0xfffff3f3
 80049c0:	ffff0f0f 	.word	0xffff0f0f

080049c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d110      	bne.n	8004a16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049fa:	7b7b      	ldrb	r3, [r7, #13]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e069      	b.n	8004ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	e031      	b.n	8004a7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d110      	bne.n	8004a3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a1c:	7bbb      	ldrb	r3, [r7, #14]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a22:	7b3b      	ldrb	r3, [r7, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e055      	b.n	8004ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3c:	e01d      	b.n	8004a7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a44:	7bbb      	ldrb	r3, [r7, #14]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a4a:	7b7b      	ldrb	r3, [r7, #13]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a50:	7b3b      	ldrb	r3, [r7, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e03e      	b.n	8004ad8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_TIM_Encoder_Start+0xc4>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d008      	beq.n	8004a98 <HAL_TIM_Encoder_Start+0xd4>
 8004a86:	e00f      	b.n	8004aa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f8e3 	bl	8005c5c <TIM_CCxChannelCmd>
      break;
 8004a96:	e016      	b.n	8004ac6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f8db 	bl	8005c5c <TIM_CCxChannelCmd>
      break;
 8004aa6:	e00e      	b.n	8004ac6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f8d3 	bl	8005c5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2201      	movs	r2, #1
 8004abc:	2104      	movs	r1, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 f8cc 	bl	8005c5c <TIM_CCxChannelCmd>
      break;
 8004ac4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0202 	mvn.w	r2, #2
 8004b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc f966 	bl	8000df4 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fbb6 	bl	800529c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fbbd 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0204 	mvn.w	r2, #4
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc f93c 	bl	8000df4 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fb8c 	bl	800529c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb93 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0208 	mvn.w	r2, #8
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f912 	bl	8000df4 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb62 	bl	800529c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb69 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc f8e8 	bl	8000df4 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb38 	bl	800529c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb3f 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d107      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0201 	mvn.w	r2, #1
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc f934 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d10e      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 f922 	bl	8005ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f001 f915 	bl	8005ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 faed 	bl	80052c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0220 	mvn.w	r2, #32
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f8d5 	bl	8005ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e088      	b.n	8004e4e <HAL_TIM_IC_ConfigChannel+0x130>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11b      	bne.n	8004d82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f000 fdbb 	bl	80058d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 020c 	bic.w	r2, r2, #12
 8004d6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6999      	ldr	r1, [r3, #24]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	619a      	str	r2, [r3, #24]
 8004d80:	e060      	b.n	8004e44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11c      	bne.n	8004dc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f000 fe3f 	bl	8005a1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004daa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	619a      	str	r2, [r3, #24]
 8004dc0:	e040      	b.n	8004e44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f000 fe8c 	bl	8005af4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 020c 	bic.w	r2, r2, #12
 8004dea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69d9      	ldr	r1, [r3, #28]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	61da      	str	r2, [r3, #28]
 8004dfe:	e021      	b.n	8004e44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d11c      	bne.n	8004e40 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f000 fea9 	bl	8005b6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]
 8004e3e:	e001      	b.n	8004e44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0ff      	b.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b14      	cmp	r3, #20
 8004e82:	f200 80f0 	bhi.w	8005066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08005067 	.word	0x08005067
 8004e94:	08005067 	.word	0x08005067
 8004e98:	08005067 	.word	0x08005067
 8004e9c:	08004f21 	.word	0x08004f21
 8004ea0:	08005067 	.word	0x08005067
 8004ea4:	08005067 	.word	0x08005067
 8004ea8:	08005067 	.word	0x08005067
 8004eac:	08004f63 	.word	0x08004f63
 8004eb0:	08005067 	.word	0x08005067
 8004eb4:	08005067 	.word	0x08005067
 8004eb8:	08005067 	.word	0x08005067
 8004ebc:	08004fa3 	.word	0x08004fa3
 8004ec0:	08005067 	.word	0x08005067
 8004ec4:	08005067 	.word	0x08005067
 8004ec8:	08005067 	.word	0x08005067
 8004ecc:	08004fe5 	.word	0x08004fe5
 8004ed0:	08005067 	.word	0x08005067
 8004ed4:	08005067 	.word	0x08005067
 8004ed8:	08005067 	.word	0x08005067
 8004edc:	08005025 	.word	0x08005025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fa96 	bl	8005418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0208 	orr.w	r2, r2, #8
 8004efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
      break;
 8004f1e:	e0a5      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fae8 	bl	80054fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]
      break;
 8004f60:	e084      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fb3f 	bl	80055ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0208 	orr.w	r2, r2, #8
 8004f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0204 	bic.w	r2, r2, #4
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	61da      	str	r2, [r3, #28]
      break;
 8004fa0:	e064      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb95 	bl	80056d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
      break;
 8004fe2:	e043      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fbcc 	bl	8005788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005022:	e023      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fbfe 	bl	800582c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005064:	e002      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
      break;
 800506a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop

08005080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIM_ConfigClockSource+0x1c>
 8005098:	2302      	movs	r3, #2
 800509a:	e0b4      	b.n	8005206 <HAL_TIM_ConfigClockSource+0x186>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_TIM_ConfigClockSource+0x190>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d03e      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xd4>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	f200 8087 	bhi.w	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	f000 8086 	beq.w	80051f2 <HAL_TIM_ConfigClockSource+0x172>
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d87f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d01a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xa6>
 80050f0:	2b70      	cmp	r3, #112	; 0x70
 80050f2:	d87b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d050      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x11a>
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d877      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b50      	cmp	r3, #80	; 0x50
 80050fe:	d03c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0xfa>
 8005100:	2b50      	cmp	r3, #80	; 0x50
 8005102:	d873      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d058      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x13a>
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d86f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d064      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d86b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d060      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d867      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d05a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	e062      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f000 fd71 	bl	8005c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e04f      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fd5a 	bl	8005c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005176:	609a      	str	r2, [r3, #8]
      break;
 8005178:	e03c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fc18 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2150      	movs	r1, #80	; 0x50
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd27 	bl	8005be6 <TIM_ITRx_SetConfig>
      break;
 8005198:	e02c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fc74 	bl	8005a94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2160      	movs	r1, #96	; 0x60
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fd17 	bl	8005be6 <TIM_ITRx_SetConfig>
      break;
 80051b8:	e01c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fbf8 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fd07 	bl	8005be6 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fcfe 	bl	8005be6 <TIM_ITRx_SetConfig>
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	fffeff88 	.word	0xfffeff88

08005214 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d831      	bhi.n	800528c <HAL_TIM_ReadCapturedValue+0x78>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_TIM_ReadCapturedValue+0x1c>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005265 	.word	0x08005265
 8005234:	0800528d 	.word	0x0800528d
 8005238:	0800528d 	.word	0x0800528d
 800523c:	0800528d 	.word	0x0800528d
 8005240:	0800526f 	.word	0x0800526f
 8005244:	0800528d 	.word	0x0800528d
 8005248:	0800528d 	.word	0x0800528d
 800524c:	0800528d 	.word	0x0800528d
 8005250:	08005279 	.word	0x08005279
 8005254:	0800528d 	.word	0x0800528d
 8005258:	0800528d 	.word	0x0800528d
 800525c:	0800528d 	.word	0x0800528d
 8005260:	08005283 	.word	0x08005283
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	60fb      	str	r3, [r7, #12]

      break;
 800526c:	e00f      	b.n	800528e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	60fb      	str	r3, [r7, #12]

      break;
 8005276:	e00a      	b.n	800528e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	60fb      	str	r3, [r7, #12]

      break;
 8005280:	e005      	b.n	800528e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	60fb      	str	r3, [r7, #12]

      break;
 800528a:	e000      	b.n	800528e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800528c:	bf00      	nop
  }

  return tmpreg;
 800528e:	68fb      	ldr	r3, [r7, #12]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a40      	ldr	r2, [pc, #256]	; (80053ec <TIM_Base_SetConfig+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d00f      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a3d      	ldr	r2, [pc, #244]	; (80053f0 <TIM_Base_SetConfig+0x118>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00b      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3c      	ldr	r2, [pc, #240]	; (80053f4 <TIM_Base_SetConfig+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <TIM_Base_SetConfig+0x120>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <TIM_Base_SetConfig+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d108      	bne.n	800532a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <TIM_Base_SetConfig+0x114>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d02b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005338:	d027      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <TIM_Base_SetConfig+0x118>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d023      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2b      	ldr	r2, [pc, #172]	; (80053f4 <TIM_Base_SetConfig+0x11c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01f      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <TIM_Base_SetConfig+0x120>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <TIM_Base_SetConfig+0x124>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d017      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a28      	ldr	r2, [pc, #160]	; (8005400 <TIM_Base_SetConfig+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <TIM_Base_SetConfig+0x12c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a26      	ldr	r2, [pc, #152]	; (8005408 <TIM_Base_SetConfig+0x130>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a25      	ldr	r2, [pc, #148]	; (800540c <TIM_Base_SetConfig+0x134>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a24      	ldr	r2, [pc, #144]	; (8005410 <TIM_Base_SetConfig+0x138>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a23      	ldr	r2, [pc, #140]	; (8005414 <TIM_Base_SetConfig+0x13c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0xf8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <TIM_Base_SetConfig+0x124>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d103      	bne.n	80053d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	615a      	str	r2, [r3, #20]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800
 800540c:	40001800 	.word	0x40001800
 8005410:	40001c00 	.word	0x40001c00
 8005414:	40002000 	.word	0x40002000

08005418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <TIM_OC1_SetConfig+0xd8>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <TIM_OC1_SetConfig+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC1_SetConfig+0x64>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <TIM_OC1_SetConfig+0xe0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0308 	bic.w	r3, r3, #8
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <TIM_OC1_SetConfig+0xdc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC1_SetConfig+0x8e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <TIM_OC1_SetConfig+0xe0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d111      	bne.n	80054ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	621a      	str	r2, [r3, #32]
}
 80054e4:	bf00      	nop
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	fffeff8f 	.word	0xfffeff8f
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010400 	.word	0x40010400

080054fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0210 	bic.w	r2, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0320 	bic.w	r3, r3, #32
 8005546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <TIM_OC2_SetConfig+0xe8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC2_SetConfig+0x68>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <TIM_OC2_SetConfig+0xec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10d      	bne.n	8005580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <TIM_OC2_SetConfig+0xe8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC2_SetConfig+0x94>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <TIM_OC2_SetConfig+0xec>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d113      	bne.n	80055b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800559e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	feff8fff 	.word	0xfeff8fff
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010400 	.word	0x40010400

080055ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <TIM_OC3_SetConfig+0xe0>)
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <TIM_OC3_SetConfig+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC3_SetConfig+0x66>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <TIM_OC3_SetConfig+0xe8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10d      	bne.n	800566e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <TIM_OC3_SetConfig+0xe4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC3_SetConfig+0x92>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <TIM_OC3_SetConfig+0xe8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d113      	bne.n	80056a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	fffeff8f 	.word	0xfffeff8f
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40010400 	.word	0x40010400

080056d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4b1e      	ldr	r3, [pc, #120]	; (800577c <TIM_OC4_SetConfig+0xa4>)
 8005704:	4013      	ands	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	031b      	lsls	r3, r3, #12
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <TIM_OC4_SetConfig+0xa8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC4_SetConfig+0x68>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a12      	ldr	r2, [pc, #72]	; (8005784 <TIM_OC4_SetConfig+0xac>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d109      	bne.n	8005754 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	feff8fff 	.word	0xfeff8fff
 8005780:	40010000 	.word	0x40010000
 8005784:	40010400 	.word	0x40010400

08005788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <TIM_OC5_SetConfig+0x98>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <TIM_OC5_SetConfig+0x9c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC5_SetConfig+0x5e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <TIM_OC5_SetConfig+0xa0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d109      	bne.n	80057fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	fffeff8f 	.word	0xfffeff8f
 8005824:	40010000 	.word	0x40010000
 8005828:	40010400 	.word	0x40010400

0800582c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <TIM_OC6_SetConfig+0x9c>)
 8005858:	4013      	ands	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800586e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	051b      	lsls	r3, r3, #20
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <TIM_OC6_SetConfig+0xa0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_OC6_SetConfig+0x60>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <TIM_OC6_SetConfig+0xa4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d109      	bne.n	80058a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	029b      	lsls	r3, r3, #10
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	feff8fff 	.word	0xfeff8fff
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40010400 	.word	0x40010400

080058d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <TIM_TI1_SetConfig+0xcc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d017      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <TIM_TI1_SetConfig+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <TIM_TI1_SetConfig+0xd4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a23      	ldr	r2, [pc, #140]	; (80059ac <TIM_TI1_SetConfig+0xd8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <TIM_TI1_SetConfig+0xdc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <TIM_TI1_SetConfig+0xe0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_TI1_SetConfig+0x66>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <TIM_TI1_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <TIM_TI1_SetConfig+0x6a>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <TIM_TI1_SetConfig+0x6c>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e003      	b.n	800595e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	b2db      	uxtb	r3, r3
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f023 030a 	bic.w	r3, r3, #10
 8005978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f003 030a 	and.w	r3, r3, #10
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40010400 	.word	0x40010400
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40001800 	.word	0x40001800

080059bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 030a 	bic.w	r3, r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f023 0210 	bic.w	r2, r3, #16
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f023 0210 	bic.w	r2, r3, #16
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	031b      	lsls	r3, r3, #12
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 0303 	bic.w	r3, r3, #3
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	031b      	lsls	r3, r3, #12
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	031b      	lsls	r3, r3, #12
 8005bc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f043 0307 	orr.w	r3, r3, #7
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	609a      	str	r2, [r3, #8]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	021a      	lsls	r2, r3, #8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	609a      	str	r2, [r3, #8]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2201      	movs	r2, #1
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	401a      	ands	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e06d      	b.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d01d      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10c      	bne.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e065      	b.n	8005eac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d115      	bne.n	8005e9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	051b      	lsls	r3, r3, #20
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40010400 	.word	0x40010400

08005ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e040      	b.n	8005f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fb fcf4 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fbd2 	bl	80066e4 <UART_SetConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e022      	b.n	8005f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fe28 	bl	8006ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 feaf 	bl	8006cec <UART_CheckIdleState>
 8005f8e:	4603      	mov	r3, r0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b08b      	sub	sp, #44	; 0x2c
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d156      	bne.n	800605c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_UART_Transmit_IT+0x22>
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e04f      	b.n	800605e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Transmit_IT+0x34>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e048      	b.n	800605e <HAL_UART_Transmit_IT+0xc6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	88fa      	ldrh	r2, [r7, #6]
 8005fde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2221      	movs	r2, #33	; 0x21
 8005ffc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d107      	bne.n	8006018 <HAL_UART_Transmit_IT+0x80>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a16      	ldr	r2, [pc, #88]	; (800606c <HAL_UART_Transmit_IT+0xd4>)
 8006014:	669a      	str	r2, [r3, #104]	; 0x68
 8006016:	e002      	b.n	800601e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a15      	ldr	r2, [pc, #84]	; (8006070 <HAL_UART_Transmit_IT+0xd8>)
 800601c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	613b      	str	r3, [r7, #16]
   return(result);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	69f9      	ldr	r1, [r7, #28]
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	61bb      	str	r3, [r7, #24]
   return(result);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	e000      	b.n	800605e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
  }
}
 800605e:	4618      	mov	r0, r3
 8006060:	372c      	adds	r7, #44	; 0x2c
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	08007219 	.word	0x08007219
 8006070:	08007163 	.word	0x08007163

08006074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006086:	2b20      	cmp	r3, #32
 8006088:	d13d      	bne.n	8006106 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_UART_Receive_IT+0x22>
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e036      	b.n	8006108 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_UART_Receive_IT+0x34>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e02f      	b.n	8006108 <HAL_UART_Receive_IT+0x94>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d018      	beq.n	80060f6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	613b      	str	r3, [r7, #16]
   return(result);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	69f9      	ldr	r1, [r7, #28]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	461a      	mov	r2, r3
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 feed 	bl	8006edc <UART_Start_Receive_IT>
 8006102:	4603      	mov	r3, r0
 8006104:	e000      	b.n	8006108 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006106:	2302      	movs	r3, #2
  }
}
 8006108:	4618      	mov	r0, r3
 800610a:	3728      	adds	r7, #40	; 0x28
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ba      	sub	sp, #232	; 0xe8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800613a:	f640 030f 	movw	r3, #2063	; 0x80f
 800613e:	4013      	ands	r3, r2
 8006140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d115      	bne.n	8006178 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 828f 	beq.w	800668c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
      }
      return;
 8006176:	e289      	b.n	800668c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8117 	beq.w	80063b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800618e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006192:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_UART_IRQHandler+0x298>)
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 810a 	beq.w	80063b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d011      	beq.n	80061cc <HAL_UART_IRQHandler+0xbc>
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2201      	movs	r2, #1
 80061ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c2:	f043 0201 	orr.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d011      	beq.n	80061fc <HAL_UART_IRQHandler+0xec>
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2202      	movs	r2, #2
 80061ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f2:	f043 0204 	orr.w	r2, r3, #4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
 8006208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2204      	movs	r2, #4
 800621a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006222:	f043 0202 	orr.w	r2, r3, #2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2208      	movs	r2, #8
 8006256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625e:	f043 0208 	orr.w	r2, r3, #8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006270:	2b00      	cmp	r3, #0
 8006272:	d012      	beq.n	800629a <HAL_UART_IRQHandler+0x18a>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 81f5 	beq.w	8006690 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d005      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04f      	beq.n	8006392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 febc 	bl	8007070 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d141      	bne.n	800638a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800633e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800634a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1d9      	bne.n	8006306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <HAL_UART_IRQHandler+0x29c>)
 8006360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4618      	mov	r0, r3
 8006368:	f7fb ffdb 	bl	8002322 <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d017      	beq.n	80063a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00f      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f998 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e00b      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f994 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e007      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f990 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063a0:	e176      	b.n	8006690 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a2:	bf00      	nop
    return;
 80063a4:	e174      	b.n	8006690 <HAL_UART_IRQHandler+0x580>
 80063a6:	bf00      	nop
 80063a8:	04000120 	.word	0x04000120
 80063ac:	08007137 	.word	0x08007137

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 8144 	bne.w	8006642 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 813d 	beq.w	8006642 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8136 	beq.w	8006642 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	f040 80b2 	bne.w	8006552 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8148 	beq.w	8006694 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800640a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640e:	429a      	cmp	r2, r3
 8006410:	f080 8140 	bcs.w	8006694 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006428:	f000 8085 	beq.w	8006536 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800645a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800646e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1da      	bne.n	800642c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800649a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800649e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e1      	bne.n	8006476 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e3      	bne.n	80064b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006518:	65bb      	str	r3, [r7, #88]	; 0x58
 800651a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800651e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e4      	bne.n	80064f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	4618      	mov	r0, r3
 8006532:	f7fb fe86 	bl	8002242 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006542:	b29b      	uxth	r3, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8be 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006550:	e0a0      	b.n	8006694 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800655e:	b29b      	uxth	r3, r3
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8092 	beq.w	8006698 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 808d 	beq.w	8006698 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a0:	647b      	str	r3, [r7, #68]	; 0x44
 80065a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e4      	bne.n	800657e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	623b      	str	r3, [r7, #32]
   return(result);
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065d8:	633a      	str	r2, [r7, #48]	; 0x30
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e3      	bne.n	80065b4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	60fb      	str	r3, [r7, #12]
   return(result);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0310 	bic.w	r3, r3, #16
 8006612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	617b      	str	r3, [r7, #20]
   return(result);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e4      	bne.n	80065fe <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f846 	bl	80066cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006640:	e02a      	b.n	8006698 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01c      	beq.n	800669c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
    }
    return;
 800666a:	e017      	b.n	800669c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <HAL_UART_IRQHandler+0x58e>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00c      	beq.n	800669e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fe27 	bl	80072d8 <UART_EndTransmit_IT>
    return;
 800668a:	e008      	b.n	800669e <HAL_UART_IRQHandler+0x58e>
      return;
 800668c:	bf00      	nop
 800668e:	e006      	b.n	800669e <HAL_UART_IRQHandler+0x58e>
    return;
 8006690:	bf00      	nop
 8006692:	e004      	b.n	800669e <HAL_UART_IRQHandler+0x58e>
      return;
 8006694:	bf00      	nop
 8006696:	e002      	b.n	800669e <HAL_UART_IRQHandler+0x58e>
      return;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <HAL_UART_IRQHandler+0x58e>
    return;
 800669c:	bf00      	nop
  }

}
 800669e:	37e8      	adds	r7, #232	; 0xe8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4ba7      	ldr	r3, [pc, #668]	; (80069ac <UART_SetConfig+0x2c8>)
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	6979      	ldr	r1, [r7, #20]
 8006718:	430b      	orrs	r3, r1
 800671a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a95      	ldr	r2, [pc, #596]	; (80069b0 <UART_SetConfig+0x2cc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d120      	bne.n	80067a2 <UART_SetConfig+0xbe>
 8006760:	4b94      	ldr	r3, [pc, #592]	; (80069b4 <UART_SetConfig+0x2d0>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d816      	bhi.n	800679c <UART_SetConfig+0xb8>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0x90>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	08006791 	.word	0x08006791
 800677c:	0800678b 	.word	0x0800678b
 8006780:	08006797 	.word	0x08006797
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e14f      	b.n	8006a2a <UART_SetConfig+0x346>
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e14c      	b.n	8006a2a <UART_SetConfig+0x346>
 8006790:	2304      	movs	r3, #4
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e149      	b.n	8006a2a <UART_SetConfig+0x346>
 8006796:	2308      	movs	r3, #8
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e146      	b.n	8006a2a <UART_SetConfig+0x346>
 800679c:	2310      	movs	r3, #16
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e143      	b.n	8006a2a <UART_SetConfig+0x346>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a84      	ldr	r2, [pc, #528]	; (80069b8 <UART_SetConfig+0x2d4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d132      	bne.n	8006812 <UART_SetConfig+0x12e>
 80067ac:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <UART_SetConfig+0x2d0>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	f003 030c 	and.w	r3, r3, #12
 80067b6:	2b0c      	cmp	r3, #12
 80067b8:	d828      	bhi.n	800680c <UART_SetConfig+0x128>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0xdc>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067f5 	.word	0x080067f5
 80067c4:	0800680d 	.word	0x0800680d
 80067c8:	0800680d 	.word	0x0800680d
 80067cc:	0800680d 	.word	0x0800680d
 80067d0:	08006801 	.word	0x08006801
 80067d4:	0800680d 	.word	0x0800680d
 80067d8:	0800680d 	.word	0x0800680d
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	080067fb 	.word	0x080067fb
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006807 	.word	0x08006807
 80067f4:	2300      	movs	r3, #0
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e117      	b.n	8006a2a <UART_SetConfig+0x346>
 80067fa:	2302      	movs	r3, #2
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e114      	b.n	8006a2a <UART_SetConfig+0x346>
 8006800:	2304      	movs	r3, #4
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e111      	b.n	8006a2a <UART_SetConfig+0x346>
 8006806:	2308      	movs	r3, #8
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e10e      	b.n	8006a2a <UART_SetConfig+0x346>
 800680c:	2310      	movs	r3, #16
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e10b      	b.n	8006a2a <UART_SetConfig+0x346>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a69      	ldr	r2, [pc, #420]	; (80069bc <UART_SetConfig+0x2d8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d120      	bne.n	800685e <UART_SetConfig+0x17a>
 800681c:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <UART_SetConfig+0x2d0>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006826:	2b30      	cmp	r3, #48	; 0x30
 8006828:	d013      	beq.n	8006852 <UART_SetConfig+0x16e>
 800682a:	2b30      	cmp	r3, #48	; 0x30
 800682c:	d814      	bhi.n	8006858 <UART_SetConfig+0x174>
 800682e:	2b20      	cmp	r3, #32
 8006830:	d009      	beq.n	8006846 <UART_SetConfig+0x162>
 8006832:	2b20      	cmp	r3, #32
 8006834:	d810      	bhi.n	8006858 <UART_SetConfig+0x174>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <UART_SetConfig+0x15c>
 800683a:	2b10      	cmp	r3, #16
 800683c:	d006      	beq.n	800684c <UART_SetConfig+0x168>
 800683e:	e00b      	b.n	8006858 <UART_SetConfig+0x174>
 8006840:	2300      	movs	r3, #0
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0f1      	b.n	8006a2a <UART_SetConfig+0x346>
 8006846:	2302      	movs	r3, #2
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e0ee      	b.n	8006a2a <UART_SetConfig+0x346>
 800684c:	2304      	movs	r3, #4
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e0eb      	b.n	8006a2a <UART_SetConfig+0x346>
 8006852:	2308      	movs	r3, #8
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e0e8      	b.n	8006a2a <UART_SetConfig+0x346>
 8006858:	2310      	movs	r3, #16
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e0e5      	b.n	8006a2a <UART_SetConfig+0x346>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a57      	ldr	r2, [pc, #348]	; (80069c0 <UART_SetConfig+0x2dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d120      	bne.n	80068aa <UART_SetConfig+0x1c6>
 8006868:	4b52      	ldr	r3, [pc, #328]	; (80069b4 <UART_SetConfig+0x2d0>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006872:	2bc0      	cmp	r3, #192	; 0xc0
 8006874:	d013      	beq.n	800689e <UART_SetConfig+0x1ba>
 8006876:	2bc0      	cmp	r3, #192	; 0xc0
 8006878:	d814      	bhi.n	80068a4 <UART_SetConfig+0x1c0>
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d009      	beq.n	8006892 <UART_SetConfig+0x1ae>
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d810      	bhi.n	80068a4 <UART_SetConfig+0x1c0>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <UART_SetConfig+0x1a8>
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d006      	beq.n	8006898 <UART_SetConfig+0x1b4>
 800688a:	e00b      	b.n	80068a4 <UART_SetConfig+0x1c0>
 800688c:	2300      	movs	r3, #0
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e0cb      	b.n	8006a2a <UART_SetConfig+0x346>
 8006892:	2302      	movs	r3, #2
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e0c8      	b.n	8006a2a <UART_SetConfig+0x346>
 8006898:	2304      	movs	r3, #4
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e0c5      	b.n	8006a2a <UART_SetConfig+0x346>
 800689e:	2308      	movs	r3, #8
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e0c2      	b.n	8006a2a <UART_SetConfig+0x346>
 80068a4:	2310      	movs	r3, #16
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e0bf      	b.n	8006a2a <UART_SetConfig+0x346>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a45      	ldr	r2, [pc, #276]	; (80069c4 <UART_SetConfig+0x2e0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d125      	bne.n	8006900 <UART_SetConfig+0x21c>
 80068b4:	4b3f      	ldr	r3, [pc, #252]	; (80069b4 <UART_SetConfig+0x2d0>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c2:	d017      	beq.n	80068f4 <UART_SetConfig+0x210>
 80068c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c8:	d817      	bhi.n	80068fa <UART_SetConfig+0x216>
 80068ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ce:	d00b      	beq.n	80068e8 <UART_SetConfig+0x204>
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d4:	d811      	bhi.n	80068fa <UART_SetConfig+0x216>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <UART_SetConfig+0x1fe>
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d006      	beq.n	80068ee <UART_SetConfig+0x20a>
 80068e0:	e00b      	b.n	80068fa <UART_SetConfig+0x216>
 80068e2:	2300      	movs	r3, #0
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e0a0      	b.n	8006a2a <UART_SetConfig+0x346>
 80068e8:	2302      	movs	r3, #2
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e09d      	b.n	8006a2a <UART_SetConfig+0x346>
 80068ee:	2304      	movs	r3, #4
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e09a      	b.n	8006a2a <UART_SetConfig+0x346>
 80068f4:	2308      	movs	r3, #8
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e097      	b.n	8006a2a <UART_SetConfig+0x346>
 80068fa:	2310      	movs	r3, #16
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e094      	b.n	8006a2a <UART_SetConfig+0x346>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a30      	ldr	r2, [pc, #192]	; (80069c8 <UART_SetConfig+0x2e4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d125      	bne.n	8006956 <UART_SetConfig+0x272>
 800690a:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <UART_SetConfig+0x2d0>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006918:	d017      	beq.n	800694a <UART_SetConfig+0x266>
 800691a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800691e:	d817      	bhi.n	8006950 <UART_SetConfig+0x26c>
 8006920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006924:	d00b      	beq.n	800693e <UART_SetConfig+0x25a>
 8006926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692a:	d811      	bhi.n	8006950 <UART_SetConfig+0x26c>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <UART_SetConfig+0x254>
 8006930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006934:	d006      	beq.n	8006944 <UART_SetConfig+0x260>
 8006936:	e00b      	b.n	8006950 <UART_SetConfig+0x26c>
 8006938:	2301      	movs	r3, #1
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e075      	b.n	8006a2a <UART_SetConfig+0x346>
 800693e:	2302      	movs	r3, #2
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e072      	b.n	8006a2a <UART_SetConfig+0x346>
 8006944:	2304      	movs	r3, #4
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e06f      	b.n	8006a2a <UART_SetConfig+0x346>
 800694a:	2308      	movs	r3, #8
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e06c      	b.n	8006a2a <UART_SetConfig+0x346>
 8006950:	2310      	movs	r3, #16
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e069      	b.n	8006a2a <UART_SetConfig+0x346>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1c      	ldr	r2, [pc, #112]	; (80069cc <UART_SetConfig+0x2e8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d137      	bne.n	80069d0 <UART_SetConfig+0x2ec>
 8006960:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <UART_SetConfig+0x2d0>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800696a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696e:	d017      	beq.n	80069a0 <UART_SetConfig+0x2bc>
 8006970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006974:	d817      	bhi.n	80069a6 <UART_SetConfig+0x2c2>
 8006976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697a:	d00b      	beq.n	8006994 <UART_SetConfig+0x2b0>
 800697c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006980:	d811      	bhi.n	80069a6 <UART_SetConfig+0x2c2>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <UART_SetConfig+0x2aa>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	d006      	beq.n	800699a <UART_SetConfig+0x2b6>
 800698c:	e00b      	b.n	80069a6 <UART_SetConfig+0x2c2>
 800698e:	2300      	movs	r3, #0
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e04a      	b.n	8006a2a <UART_SetConfig+0x346>
 8006994:	2302      	movs	r3, #2
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e047      	b.n	8006a2a <UART_SetConfig+0x346>
 800699a:	2304      	movs	r3, #4
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e044      	b.n	8006a2a <UART_SetConfig+0x346>
 80069a0:	2308      	movs	r3, #8
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e041      	b.n	8006a2a <UART_SetConfig+0x346>
 80069a6:	2310      	movs	r3, #16
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e03e      	b.n	8006a2a <UART_SetConfig+0x346>
 80069ac:	efff69f3 	.word	0xefff69f3
 80069b0:	40011000 	.word	0x40011000
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40004400 	.word	0x40004400
 80069bc:	40004800 	.word	0x40004800
 80069c0:	40004c00 	.word	0x40004c00
 80069c4:	40005000 	.word	0x40005000
 80069c8:	40011400 	.word	0x40011400
 80069cc:	40007800 	.word	0x40007800
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a71      	ldr	r2, [pc, #452]	; (8006b9c <UART_SetConfig+0x4b8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d125      	bne.n	8006a26 <UART_SetConfig+0x342>
 80069da:	4b71      	ldr	r3, [pc, #452]	; (8006ba0 <UART_SetConfig+0x4bc>)
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069e8:	d017      	beq.n	8006a1a <UART_SetConfig+0x336>
 80069ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ee:	d817      	bhi.n	8006a20 <UART_SetConfig+0x33c>
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d00b      	beq.n	8006a0e <UART_SetConfig+0x32a>
 80069f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fa:	d811      	bhi.n	8006a20 <UART_SetConfig+0x33c>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <UART_SetConfig+0x324>
 8006a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a04:	d006      	beq.n	8006a14 <UART_SetConfig+0x330>
 8006a06:	e00b      	b.n	8006a20 <UART_SetConfig+0x33c>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e00d      	b.n	8006a2a <UART_SetConfig+0x346>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e00a      	b.n	8006a2a <UART_SetConfig+0x346>
 8006a14:	2304      	movs	r3, #4
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e007      	b.n	8006a2a <UART_SetConfig+0x346>
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e004      	b.n	8006a2a <UART_SetConfig+0x346>
 8006a20:	2310      	movs	r3, #16
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e001      	b.n	8006a2a <UART_SetConfig+0x346>
 8006a26:	2310      	movs	r3, #16
 8006a28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a32:	d15a      	bne.n	8006aea <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d827      	bhi.n	8006a8a <UART_SetConfig+0x3a6>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x35c>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a7b 	.word	0x08006a7b
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a8b 	.word	0x08006a8b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7fc ff12 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8006a68:	61b8      	str	r0, [r7, #24]
        break;
 8006a6a:	e013      	b.n	8006a94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fc ff22 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8006a70:	61b8      	str	r0, [r7, #24]
        break;
 8006a72:	e00f      	b.n	8006a94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b4b      	ldr	r3, [pc, #300]	; (8006ba4 <UART_SetConfig+0x4c0>)
 8006a76:	61bb      	str	r3, [r7, #24]
        break;
 8006a78:	e00c      	b.n	8006a94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fc fe19 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8006a7e:	61b8      	str	r0, [r7, #24]
        break;
 8006a80:	e008      	b.n	8006a94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a86:	61bb      	str	r3, [r7, #24]
        break;
 8006a88:	e004      	b.n	8006a94 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	77bb      	strb	r3, [r7, #30]
        break;
 8006a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d074      	beq.n	8006b84 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d916      	bls.n	8006ae4 <UART_SetConfig+0x400>
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d212      	bcs.n	8006ae4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	89fb      	ldrh	r3, [r7, #14]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	89fa      	ldrh	r2, [r7, #14]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e04f      	b.n	8006b84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	77bb      	strb	r3, [r7, #30]
 8006ae8:	e04c      	b.n	8006b84 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aea:	7ffb      	ldrb	r3, [r7, #31]
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d828      	bhi.n	8006b42 <UART_SetConfig+0x45e>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x414>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b25 	.word	0x08006b25
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b43 	.word	0x08006b43
 8006b08:	08006b33 	.word	0x08006b33
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b43 	.word	0x08006b43
 8006b14:	08006b43 	.word	0x08006b43
 8006b18:	08006b3b 	.word	0x08006b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fc feb6 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8006b20:	61b8      	str	r0, [r7, #24]
        break;
 8006b22:	e013      	b.n	8006b4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b24:	f7fc fec6 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8006b28:	61b8      	str	r0, [r7, #24]
        break;
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <UART_SetConfig+0x4c0>)
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e00c      	b.n	8006b4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fc fdbd 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8006b36:	61b8      	str	r0, [r7, #24]
        break;
 8006b38:	e008      	b.n	8006b4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	61bb      	str	r3, [r7, #24]
        break;
 8006b40:	e004      	b.n	8006b4c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	77bb      	strb	r3, [r7, #30]
        break;
 8006b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	085a      	lsrs	r2, r3, #1
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b0f      	cmp	r3, #15
 8006b6a:	d909      	bls.n	8006b80 <UART_SetConfig+0x49c>
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d205      	bcs.n	8006b80 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	e001      	b.n	8006b84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40007c00 	.word	0x40007c00
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	00f42400 	.word	0x00f42400

08006ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	f003 0310 	and.w	r3, r3, #16
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca6:	d10a      	bne.n	8006cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cfc:	f7fa fecc 	bl	8001a98 <HAL_GetTick>
 8006d00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d10e      	bne.n	8006d2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f817 	bl	8006d52 <UART_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e00d      	b.n	8006d4a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b09c      	sub	sp, #112	; 0x70
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d62:	e0a5      	b.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6a:	f000 80a1 	beq.w	8006eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6e:	f7fa fe93 	bl	8001a98 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d302      	bcc.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d13e      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d98:	667b      	str	r3, [r7, #100]	; 0x64
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e6      	bne.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e5      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e067      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04f      	beq.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1e:	d147      	bne.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e7c:	623a      	str	r2, [r7, #32]
 8006e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2220      	movs	r2, #32
 8006e94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e010      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	f43f af4a 	beq.w	8006d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3770      	adds	r7, #112	; 0x70
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b097      	sub	sp, #92	; 0x5c
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d10e      	bne.n	8006f2e <UART_Start_Receive_IT+0x52>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <UART_Start_Receive_IT+0x48>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f22:	e02d      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f2c:	e028      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <UART_Start_Receive_IT+0x76>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <UART_Start_Receive_IT+0x6c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	22ff      	movs	r2, #255	; 0xff
 8006f42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f46:	e01b      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	227f      	movs	r2, #127	; 0x7f
 8006f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f50:	e016      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5a:	d10d      	bne.n	8006f78 <UART_Start_Receive_IT+0x9c>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <UART_Start_Receive_IT+0x92>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	227f      	movs	r2, #127	; 0x7f
 8006f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f6c:	e008      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	223f      	movs	r2, #63	; 0x3f
 8006f72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f76:	e003      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2222      	movs	r2, #34	; 0x22
 8006f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d107      	bne.n	8006fdc <UART_Start_Receive_IT+0x100>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a24      	ldr	r2, [pc, #144]	; (8007068 <UART_Start_Receive_IT+0x18c>)
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64
 8006fda:	e002      	b.n	8006fe2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <UART_Start_Receive_IT+0x190>)
 8006fe0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d019      	beq.n	8007026 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_Start_Receive_IT+0x116>
 8007024:	e018      	b.n	8007058 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	613b      	str	r3, [r7, #16]
   return(result);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f043 0320 	orr.w	r3, r3, #32
 800703a:	653b      	str	r3, [r7, #80]	; 0x50
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007044:	623b      	str	r3, [r7, #32]
 8007046:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	61bb      	str	r3, [r7, #24]
   return(result);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	375c      	adds	r7, #92	; 0x5c
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	08007489 	.word	0x08007489
 800706c:	0800732d 	.word	0x0800732d

08007070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b095      	sub	sp, #84	; 0x54
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800708c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007096:	643b      	str	r3, [r7, #64]	; 0x40
 8007098:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800709c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d118      	bne.n	8007118 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f023 0310 	bic.w	r3, r3, #16
 80070fa:	647b      	str	r3, [r7, #68]	; 0x44
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6979      	ldr	r1, [r7, #20]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	613b      	str	r3, [r7, #16]
   return(result);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	665a      	str	r2, [r3, #100]	; 0x64
}
 800712a:	bf00      	nop
 800712c:	3754      	adds	r7, #84	; 0x54
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff faaf 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007162:	b480      	push	{r7}
 8007164:	b08f      	sub	sp, #60	; 0x3c
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716e:	2b21      	cmp	r3, #33	; 0x21
 8007170:	d14c      	bne.n	800720c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d132      	bne.n	80071e4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	61fb      	str	r3, [r7, #28]
   return(result);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	613b      	str	r3, [r7, #16]
   return(result);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80071e2:	e013      	b.n	800720c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800720c:	bf00      	nop
 800720e:	373c      	adds	r7, #60	; 0x3c
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b091      	sub	sp, #68	; 0x44
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007224:	2b21      	cmp	r3, #33	; 0x21
 8007226:	d151      	bne.n	80072cc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d132      	bne.n	800729a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	623b      	str	r3, [r7, #32]
   return(result);
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	633b      	str	r3, [r7, #48]	; 0x30
 8007254:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	60fb      	str	r3, [r7, #12]
   return(result);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	69b9      	ldr	r1, [r7, #24]
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	617b      	str	r3, [r7, #20]
   return(result);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e6      	bne.n	8007266 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007298:	e018      	b.n	80072cc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072cc:	bf00      	nop
 80072ce:	3744      	adds	r7, #68	; 0x44
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6979      	ldr	r1, [r7, #20]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	613b      	str	r3, [r7, #16]
   return(result);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff f9c0 	bl	80066a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007324:	bf00      	nop
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b096      	sub	sp, #88	; 0x58
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800733a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007342:	2b22      	cmp	r3, #34	; 0x22
 8007344:	f040 8094 	bne.w	8007470 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007352:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007356:	b2d9      	uxtb	r1, r3
 8007358:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800735c:	b2da      	uxtb	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	400a      	ands	r2, r1
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d177      	bne.n	8007480 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a4:	653b      	str	r3, [r7, #80]	; 0x50
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
 80073b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	623b      	str	r3, [r7, #32]
   return(result);
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073e2:	633a      	str	r2, [r7, #48]	; 0x30
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007406:	2b01      	cmp	r3, #1
 8007408:	d12e      	bne.n	8007468 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	60fb      	str	r3, [r7, #12]
   return(result);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0310 	bic.w	r3, r3, #16
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	69b9      	ldr	r1, [r7, #24]
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	617b      	str	r3, [r7, #20]
   return(result);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e6      	bne.n	8007410 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b10      	cmp	r3, #16
 800744e:	d103      	bne.n	8007458 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2210      	movs	r2, #16
 8007456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff f933 	bl	80066cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007466:	e00b      	b.n	8007480 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7f9 fc91 	bl	8000d90 <HAL_UART_RxCpltCallback>
}
 800746e:	e007      	b.n	8007480 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0208 	orr.w	r2, r2, #8
 800747e:	619a      	str	r2, [r3, #24]
}
 8007480:	bf00      	nop
 8007482:	3758      	adds	r7, #88	; 0x58
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b096      	sub	sp, #88	; 0x58
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007496:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749e:	2b22      	cmp	r3, #34	; 0x22
 80074a0:	f040 8094 	bne.w	80075cc <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80074b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80074b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074bc:	4013      	ands	r3, r2
 80074be:	b29a      	uxth	r2, r3
 80074c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	1c9a      	adds	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d177      	bne.n	80075dc <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750a:	643b      	str	r3, [r7, #64]	; 0x40
 800750c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	61fb      	str	r3, [r7, #28]
   return(result);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	64bb      	str	r3, [r7, #72]	; 0x48
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	2b01      	cmp	r3, #1
 8007564:	d12e      	bne.n	80075c4 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	60bb      	str	r3, [r7, #8]
   return(result);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f023 0310 	bic.w	r3, r3, #16
 8007580:	647b      	str	r3, [r7, #68]	; 0x44
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	613b      	str	r3, [r7, #16]
   return(result);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d103      	bne.n	80075b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2210      	movs	r2, #16
 80075b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f885 	bl	80066cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075c2:	e00b      	b.n	80075dc <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7f9 fbe3 	bl	8000d90 <HAL_UART_RxCpltCallback>
}
 80075ca:	e007      	b.n	80075dc <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0208 	orr.w	r2, r2, #8
 80075da:	619a      	str	r2, [r3, #24]
}
 80075dc:	bf00      	nop
 80075de:	3758      	adds	r7, #88	; 0x58
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <atoi>:
 80075e4:	220a      	movs	r2, #10
 80075e6:	2100      	movs	r1, #0
 80075e8:	f000 b8d6 	b.w	8007798 <strtol>

080075ec <__errno>:
 80075ec:	4b01      	ldr	r3, [pc, #4]	; (80075f4 <__errno+0x8>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000010 	.word	0x20000010

080075f8 <__libc_init_array>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4d0d      	ldr	r5, [pc, #52]	; (8007630 <__libc_init_array+0x38>)
 80075fc:	4c0d      	ldr	r4, [pc, #52]	; (8007634 <__libc_init_array+0x3c>)
 80075fe:	1b64      	subs	r4, r4, r5
 8007600:	10a4      	asrs	r4, r4, #2
 8007602:	2600      	movs	r6, #0
 8007604:	42a6      	cmp	r6, r4
 8007606:	d109      	bne.n	800761c <__libc_init_array+0x24>
 8007608:	4d0b      	ldr	r5, [pc, #44]	; (8007638 <__libc_init_array+0x40>)
 800760a:	4c0c      	ldr	r4, [pc, #48]	; (800763c <__libc_init_array+0x44>)
 800760c:	f000 fcdc 	bl	8007fc8 <_init>
 8007610:	1b64      	subs	r4, r4, r5
 8007612:	10a4      	asrs	r4, r4, #2
 8007614:	2600      	movs	r6, #0
 8007616:	42a6      	cmp	r6, r4
 8007618:	d105      	bne.n	8007626 <__libc_init_array+0x2e>
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007620:	4798      	blx	r3
 8007622:	3601      	adds	r6, #1
 8007624:	e7ee      	b.n	8007604 <__libc_init_array+0xc>
 8007626:	f855 3b04 	ldr.w	r3, [r5], #4
 800762a:	4798      	blx	r3
 800762c:	3601      	adds	r6, #1
 800762e:	e7f2      	b.n	8007616 <__libc_init_array+0x1e>
 8007630:	08008160 	.word	0x08008160
 8007634:	08008160 	.word	0x08008160
 8007638:	08008160 	.word	0x08008160
 800763c:	08008164 	.word	0x08008164

08007640 <memset>:
 8007640:	4402      	add	r2, r0
 8007642:	4603      	mov	r3, r0
 8007644:	4293      	cmp	r3, r2
 8007646:	d100      	bne.n	800764a <memset+0xa>
 8007648:	4770      	bx	lr
 800764a:	f803 1b01 	strb.w	r1, [r3], #1
 800764e:	e7f9      	b.n	8007644 <memset+0x4>

08007650 <siprintf>:
 8007650:	b40e      	push	{r1, r2, r3}
 8007652:	b500      	push	{lr}
 8007654:	b09c      	sub	sp, #112	; 0x70
 8007656:	ab1d      	add	r3, sp, #116	; 0x74
 8007658:	9002      	str	r0, [sp, #8]
 800765a:	9006      	str	r0, [sp, #24]
 800765c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007660:	4809      	ldr	r0, [pc, #36]	; (8007688 <siprintf+0x38>)
 8007662:	9107      	str	r1, [sp, #28]
 8007664:	9104      	str	r1, [sp, #16]
 8007666:	4909      	ldr	r1, [pc, #36]	; (800768c <siprintf+0x3c>)
 8007668:	f853 2b04 	ldr.w	r2, [r3], #4
 800766c:	9105      	str	r1, [sp, #20]
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	a902      	add	r1, sp, #8
 8007674:	f000 f8f6 	bl	8007864 <_svfiprintf_r>
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	b01c      	add	sp, #112	; 0x70
 8007680:	f85d eb04 	ldr.w	lr, [sp], #4
 8007684:	b003      	add	sp, #12
 8007686:	4770      	bx	lr
 8007688:	20000010 	.word	0x20000010
 800768c:	ffff0208 	.word	0xffff0208

08007690 <_strtol_l.isra.0>:
 8007690:	2b01      	cmp	r3, #1
 8007692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007696:	d001      	beq.n	800769c <_strtol_l.isra.0+0xc>
 8007698:	2b24      	cmp	r3, #36	; 0x24
 800769a:	d906      	bls.n	80076aa <_strtol_l.isra.0+0x1a>
 800769c:	f7ff ffa6 	bl	80075ec <__errno>
 80076a0:	2316      	movs	r3, #22
 80076a2:	6003      	str	r3, [r0, #0]
 80076a4:	2000      	movs	r0, #0
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	4f3a      	ldr	r7, [pc, #232]	; (8007794 <_strtol_l.isra.0+0x104>)
 80076ac:	468e      	mov	lr, r1
 80076ae:	4676      	mov	r6, lr
 80076b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80076b4:	5de5      	ldrb	r5, [r4, r7]
 80076b6:	f015 0508 	ands.w	r5, r5, #8
 80076ba:	d1f8      	bne.n	80076ae <_strtol_l.isra.0+0x1e>
 80076bc:	2c2d      	cmp	r4, #45	; 0x2d
 80076be:	d134      	bne.n	800772a <_strtol_l.isra.0+0x9a>
 80076c0:	f89e 4000 	ldrb.w	r4, [lr]
 80076c4:	f04f 0801 	mov.w	r8, #1
 80076c8:	f106 0e02 	add.w	lr, r6, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d05c      	beq.n	800778a <_strtol_l.isra.0+0xfa>
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d10c      	bne.n	80076ee <_strtol_l.isra.0+0x5e>
 80076d4:	2c30      	cmp	r4, #48	; 0x30
 80076d6:	d10a      	bne.n	80076ee <_strtol_l.isra.0+0x5e>
 80076d8:	f89e 4000 	ldrb.w	r4, [lr]
 80076dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076e0:	2c58      	cmp	r4, #88	; 0x58
 80076e2:	d14d      	bne.n	8007780 <_strtol_l.isra.0+0xf0>
 80076e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80076e8:	2310      	movs	r3, #16
 80076ea:	f10e 0e02 	add.w	lr, lr, #2
 80076ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80076f2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80076f6:	2600      	movs	r6, #0
 80076f8:	fbbc f9f3 	udiv	r9, ip, r3
 80076fc:	4635      	mov	r5, r6
 80076fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8007702:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007706:	2f09      	cmp	r7, #9
 8007708:	d818      	bhi.n	800773c <_strtol_l.isra.0+0xac>
 800770a:	463c      	mov	r4, r7
 800770c:	42a3      	cmp	r3, r4
 800770e:	dd24      	ble.n	800775a <_strtol_l.isra.0+0xca>
 8007710:	2e00      	cmp	r6, #0
 8007712:	db1f      	blt.n	8007754 <_strtol_l.isra.0+0xc4>
 8007714:	45a9      	cmp	r9, r5
 8007716:	d31d      	bcc.n	8007754 <_strtol_l.isra.0+0xc4>
 8007718:	d101      	bne.n	800771e <_strtol_l.isra.0+0x8e>
 800771a:	45a2      	cmp	sl, r4
 800771c:	db1a      	blt.n	8007754 <_strtol_l.isra.0+0xc4>
 800771e:	fb05 4503 	mla	r5, r5, r3, r4
 8007722:	2601      	movs	r6, #1
 8007724:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007728:	e7eb      	b.n	8007702 <_strtol_l.isra.0+0x72>
 800772a:	2c2b      	cmp	r4, #43	; 0x2b
 800772c:	bf08      	it	eq
 800772e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007732:	46a8      	mov	r8, r5
 8007734:	bf08      	it	eq
 8007736:	f106 0e02 	addeq.w	lr, r6, #2
 800773a:	e7c7      	b.n	80076cc <_strtol_l.isra.0+0x3c>
 800773c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007740:	2f19      	cmp	r7, #25
 8007742:	d801      	bhi.n	8007748 <_strtol_l.isra.0+0xb8>
 8007744:	3c37      	subs	r4, #55	; 0x37
 8007746:	e7e1      	b.n	800770c <_strtol_l.isra.0+0x7c>
 8007748:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800774c:	2f19      	cmp	r7, #25
 800774e:	d804      	bhi.n	800775a <_strtol_l.isra.0+0xca>
 8007750:	3c57      	subs	r4, #87	; 0x57
 8007752:	e7db      	b.n	800770c <_strtol_l.isra.0+0x7c>
 8007754:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007758:	e7e4      	b.n	8007724 <_strtol_l.isra.0+0x94>
 800775a:	2e00      	cmp	r6, #0
 800775c:	da05      	bge.n	800776a <_strtol_l.isra.0+0xda>
 800775e:	2322      	movs	r3, #34	; 0x22
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	4665      	mov	r5, ip
 8007764:	b942      	cbnz	r2, 8007778 <_strtol_l.isra.0+0xe8>
 8007766:	4628      	mov	r0, r5
 8007768:	e79d      	b.n	80076a6 <_strtol_l.isra.0+0x16>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d000      	beq.n	8007772 <_strtol_l.isra.0+0xe2>
 8007770:	426d      	negs	r5, r5
 8007772:	2a00      	cmp	r2, #0
 8007774:	d0f7      	beq.n	8007766 <_strtol_l.isra.0+0xd6>
 8007776:	b10e      	cbz	r6, 800777c <_strtol_l.isra.0+0xec>
 8007778:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800777c:	6011      	str	r1, [r2, #0]
 800777e:	e7f2      	b.n	8007766 <_strtol_l.isra.0+0xd6>
 8007780:	2430      	movs	r4, #48	; 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1b3      	bne.n	80076ee <_strtol_l.isra.0+0x5e>
 8007786:	2308      	movs	r3, #8
 8007788:	e7b1      	b.n	80076ee <_strtol_l.isra.0+0x5e>
 800778a:	2c30      	cmp	r4, #48	; 0x30
 800778c:	d0a4      	beq.n	80076d8 <_strtol_l.isra.0+0x48>
 800778e:	230a      	movs	r3, #10
 8007790:	e7ad      	b.n	80076ee <_strtol_l.isra.0+0x5e>
 8007792:	bf00      	nop
 8007794:	08008025 	.word	0x08008025

08007798 <strtol>:
 8007798:	4613      	mov	r3, r2
 800779a:	460a      	mov	r2, r1
 800779c:	4601      	mov	r1, r0
 800779e:	4802      	ldr	r0, [pc, #8]	; (80077a8 <strtol+0x10>)
 80077a0:	6800      	ldr	r0, [r0, #0]
 80077a2:	f7ff bf75 	b.w	8007690 <_strtol_l.isra.0>
 80077a6:	bf00      	nop
 80077a8:	20000010 	.word	0x20000010

080077ac <__ssputs_r>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	688e      	ldr	r6, [r1, #8]
 80077b2:	429e      	cmp	r6, r3
 80077b4:	4682      	mov	sl, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	4690      	mov	r8, r2
 80077ba:	461f      	mov	r7, r3
 80077bc:	d838      	bhi.n	8007830 <__ssputs_r+0x84>
 80077be:	898a      	ldrh	r2, [r1, #12]
 80077c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077c4:	d032      	beq.n	800782c <__ssputs_r+0x80>
 80077c6:	6825      	ldr	r5, [r4, #0]
 80077c8:	6909      	ldr	r1, [r1, #16]
 80077ca:	eba5 0901 	sub.w	r9, r5, r1
 80077ce:	6965      	ldr	r5, [r4, #20]
 80077d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077d8:	3301      	adds	r3, #1
 80077da:	444b      	add	r3, r9
 80077dc:	106d      	asrs	r5, r5, #1
 80077de:	429d      	cmp	r5, r3
 80077e0:	bf38      	it	cc
 80077e2:	461d      	movcc	r5, r3
 80077e4:	0553      	lsls	r3, r2, #21
 80077e6:	d531      	bpl.n	800784c <__ssputs_r+0xa0>
 80077e8:	4629      	mov	r1, r5
 80077ea:	f000 fb47 	bl	8007e7c <_malloc_r>
 80077ee:	4606      	mov	r6, r0
 80077f0:	b950      	cbnz	r0, 8007808 <__ssputs_r+0x5c>
 80077f2:	230c      	movs	r3, #12
 80077f4:	f8ca 3000 	str.w	r3, [sl]
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	6921      	ldr	r1, [r4, #16]
 800780a:	464a      	mov	r2, r9
 800780c:	f000 fabe 	bl	8007d8c <memcpy>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	6126      	str	r6, [r4, #16]
 800781e:	6165      	str	r5, [r4, #20]
 8007820:	444e      	add	r6, r9
 8007822:	eba5 0509 	sub.w	r5, r5, r9
 8007826:	6026      	str	r6, [r4, #0]
 8007828:	60a5      	str	r5, [r4, #8]
 800782a:	463e      	mov	r6, r7
 800782c:	42be      	cmp	r6, r7
 800782e:	d900      	bls.n	8007832 <__ssputs_r+0x86>
 8007830:	463e      	mov	r6, r7
 8007832:	4632      	mov	r2, r6
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	4641      	mov	r1, r8
 8007838:	f000 fab6 	bl	8007da8 <memmove>
 800783c:	68a3      	ldr	r3, [r4, #8]
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	1b9b      	subs	r3, r3, r6
 8007842:	4432      	add	r2, r6
 8007844:	60a3      	str	r3, [r4, #8]
 8007846:	6022      	str	r2, [r4, #0]
 8007848:	2000      	movs	r0, #0
 800784a:	e7db      	b.n	8007804 <__ssputs_r+0x58>
 800784c:	462a      	mov	r2, r5
 800784e:	f000 fb6f 	bl	8007f30 <_realloc_r>
 8007852:	4606      	mov	r6, r0
 8007854:	2800      	cmp	r0, #0
 8007856:	d1e1      	bne.n	800781c <__ssputs_r+0x70>
 8007858:	6921      	ldr	r1, [r4, #16]
 800785a:	4650      	mov	r0, sl
 800785c:	f000 fabe 	bl	8007ddc <_free_r>
 8007860:	e7c7      	b.n	80077f2 <__ssputs_r+0x46>
	...

08007864 <_svfiprintf_r>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	4698      	mov	r8, r3
 800786a:	898b      	ldrh	r3, [r1, #12]
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	b09d      	sub	sp, #116	; 0x74
 8007870:	4607      	mov	r7, r0
 8007872:	460d      	mov	r5, r1
 8007874:	4614      	mov	r4, r2
 8007876:	d50e      	bpl.n	8007896 <_svfiprintf_r+0x32>
 8007878:	690b      	ldr	r3, [r1, #16]
 800787a:	b963      	cbnz	r3, 8007896 <_svfiprintf_r+0x32>
 800787c:	2140      	movs	r1, #64	; 0x40
 800787e:	f000 fafd 	bl	8007e7c <_malloc_r>
 8007882:	6028      	str	r0, [r5, #0]
 8007884:	6128      	str	r0, [r5, #16]
 8007886:	b920      	cbnz	r0, 8007892 <_svfiprintf_r+0x2e>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007890:	e0d1      	b.n	8007a36 <_svfiprintf_r+0x1d2>
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	616b      	str	r3, [r5, #20]
 8007896:	2300      	movs	r3, #0
 8007898:	9309      	str	r3, [sp, #36]	; 0x24
 800789a:	2320      	movs	r3, #32
 800789c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a4:	2330      	movs	r3, #48	; 0x30
 80078a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a50 <_svfiprintf_r+0x1ec>
 80078aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ae:	f04f 0901 	mov.w	r9, #1
 80078b2:	4623      	mov	r3, r4
 80078b4:	469a      	mov	sl, r3
 80078b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ba:	b10a      	cbz	r2, 80078c0 <_svfiprintf_r+0x5c>
 80078bc:	2a25      	cmp	r2, #37	; 0x25
 80078be:	d1f9      	bne.n	80078b4 <_svfiprintf_r+0x50>
 80078c0:	ebba 0b04 	subs.w	fp, sl, r4
 80078c4:	d00b      	beq.n	80078de <_svfiprintf_r+0x7a>
 80078c6:	465b      	mov	r3, fp
 80078c8:	4622      	mov	r2, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ff6d 	bl	80077ac <__ssputs_r>
 80078d2:	3001      	adds	r0, #1
 80078d4:	f000 80aa 	beq.w	8007a2c <_svfiprintf_r+0x1c8>
 80078d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078da:	445a      	add	r2, fp
 80078dc:	9209      	str	r2, [sp, #36]	; 0x24
 80078de:	f89a 3000 	ldrb.w	r3, [sl]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80a2 	beq.w	8007a2c <_svfiprintf_r+0x1c8>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f2:	f10a 0a01 	add.w	sl, sl, #1
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	9307      	str	r3, [sp, #28]
 80078fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007900:	4654      	mov	r4, sl
 8007902:	2205      	movs	r2, #5
 8007904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007908:	4851      	ldr	r0, [pc, #324]	; (8007a50 <_svfiprintf_r+0x1ec>)
 800790a:	f7f8 fc81 	bl	8000210 <memchr>
 800790e:	9a04      	ldr	r2, [sp, #16]
 8007910:	b9d8      	cbnz	r0, 800794a <_svfiprintf_r+0xe6>
 8007912:	06d0      	lsls	r0, r2, #27
 8007914:	bf44      	itt	mi
 8007916:	2320      	movmi	r3, #32
 8007918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791c:	0711      	lsls	r1, r2, #28
 800791e:	bf44      	itt	mi
 8007920:	232b      	movmi	r3, #43	; 0x2b
 8007922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007926:	f89a 3000 	ldrb.w	r3, [sl]
 800792a:	2b2a      	cmp	r3, #42	; 0x2a
 800792c:	d015      	beq.n	800795a <_svfiprintf_r+0xf6>
 800792e:	9a07      	ldr	r2, [sp, #28]
 8007930:	4654      	mov	r4, sl
 8007932:	2000      	movs	r0, #0
 8007934:	f04f 0c0a 	mov.w	ip, #10
 8007938:	4621      	mov	r1, r4
 800793a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800793e:	3b30      	subs	r3, #48	; 0x30
 8007940:	2b09      	cmp	r3, #9
 8007942:	d94e      	bls.n	80079e2 <_svfiprintf_r+0x17e>
 8007944:	b1b0      	cbz	r0, 8007974 <_svfiprintf_r+0x110>
 8007946:	9207      	str	r2, [sp, #28]
 8007948:	e014      	b.n	8007974 <_svfiprintf_r+0x110>
 800794a:	eba0 0308 	sub.w	r3, r0, r8
 800794e:	fa09 f303 	lsl.w	r3, r9, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	46a2      	mov	sl, r4
 8007958:	e7d2      	b.n	8007900 <_svfiprintf_r+0x9c>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	1d19      	adds	r1, r3, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	9103      	str	r1, [sp, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfbb      	ittet	lt
 8007966:	425b      	neglt	r3, r3
 8007968:	f042 0202 	orrlt.w	r2, r2, #2
 800796c:	9307      	strge	r3, [sp, #28]
 800796e:	9307      	strlt	r3, [sp, #28]
 8007970:	bfb8      	it	lt
 8007972:	9204      	strlt	r2, [sp, #16]
 8007974:	7823      	ldrb	r3, [r4, #0]
 8007976:	2b2e      	cmp	r3, #46	; 0x2e
 8007978:	d10c      	bne.n	8007994 <_svfiprintf_r+0x130>
 800797a:	7863      	ldrb	r3, [r4, #1]
 800797c:	2b2a      	cmp	r3, #42	; 0x2a
 800797e:	d135      	bne.n	80079ec <_svfiprintf_r+0x188>
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	9203      	str	r2, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfb8      	it	lt
 800798c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007990:	3402      	adds	r4, #2
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a60 <_svfiprintf_r+0x1fc>
 8007998:	7821      	ldrb	r1, [r4, #0]
 800799a:	2203      	movs	r2, #3
 800799c:	4650      	mov	r0, sl
 800799e:	f7f8 fc37 	bl	8000210 <memchr>
 80079a2:	b140      	cbz	r0, 80079b6 <_svfiprintf_r+0x152>
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	eba0 000a 	sub.w	r0, r0, sl
 80079aa:	fa03 f000 	lsl.w	r0, r3, r0
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	4303      	orrs	r3, r0
 80079b2:	3401      	adds	r4, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ba:	4826      	ldr	r0, [pc, #152]	; (8007a54 <_svfiprintf_r+0x1f0>)
 80079bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c0:	2206      	movs	r2, #6
 80079c2:	f7f8 fc25 	bl	8000210 <memchr>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d038      	beq.n	8007a3c <_svfiprintf_r+0x1d8>
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <_svfiprintf_r+0x1f4>)
 80079cc:	bb1b      	cbnz	r3, 8007a16 <_svfiprintf_r+0x1b2>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	3308      	adds	r3, #8
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079dc:	4433      	add	r3, r6
 80079de:	9309      	str	r3, [sp, #36]	; 0x24
 80079e0:	e767      	b.n	80078b2 <_svfiprintf_r+0x4e>
 80079e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e6:	460c      	mov	r4, r1
 80079e8:	2001      	movs	r0, #1
 80079ea:	e7a5      	b.n	8007938 <_svfiprintf_r+0xd4>
 80079ec:	2300      	movs	r3, #0
 80079ee:	3401      	adds	r4, #1
 80079f0:	9305      	str	r3, [sp, #20]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f04f 0c0a 	mov.w	ip, #10
 80079f8:	4620      	mov	r0, r4
 80079fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fe:	3a30      	subs	r2, #48	; 0x30
 8007a00:	2a09      	cmp	r2, #9
 8007a02:	d903      	bls.n	8007a0c <_svfiprintf_r+0x1a8>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0c5      	beq.n	8007994 <_svfiprintf_r+0x130>
 8007a08:	9105      	str	r1, [sp, #20]
 8007a0a:	e7c3      	b.n	8007994 <_svfiprintf_r+0x130>
 8007a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a10:	4604      	mov	r4, r0
 8007a12:	2301      	movs	r3, #1
 8007a14:	e7f0      	b.n	80079f8 <_svfiprintf_r+0x194>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <_svfiprintf_r+0x1f8>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4638      	mov	r0, r7
 8007a22:	f3af 8000 	nop.w
 8007a26:	1c42      	adds	r2, r0, #1
 8007a28:	4606      	mov	r6, r0
 8007a2a:	d1d6      	bne.n	80079da <_svfiprintf_r+0x176>
 8007a2c:	89ab      	ldrh	r3, [r5, #12]
 8007a2e:	065b      	lsls	r3, r3, #25
 8007a30:	f53f af2c 	bmi.w	800788c <_svfiprintf_r+0x28>
 8007a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a36:	b01d      	add	sp, #116	; 0x74
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <_svfiprintf_r+0x1f8>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4638      	mov	r0, r7
 8007a48:	f000 f87a 	bl	8007b40 <_printf_i>
 8007a4c:	e7eb      	b.n	8007a26 <_svfiprintf_r+0x1c2>
 8007a4e:	bf00      	nop
 8007a50:	08008125 	.word	0x08008125
 8007a54:	0800812f 	.word	0x0800812f
 8007a58:	00000000 	.word	0x00000000
 8007a5c:	080077ad 	.word	0x080077ad
 8007a60:	0800812b 	.word	0x0800812b

08007a64 <_printf_common>:
 8007a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	4616      	mov	r6, r2
 8007a6a:	4699      	mov	r9, r3
 8007a6c:	688a      	ldr	r2, [r1, #8]
 8007a6e:	690b      	ldr	r3, [r1, #16]
 8007a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	bfb8      	it	lt
 8007a78:	4613      	movlt	r3, r2
 8007a7a:	6033      	str	r3, [r6, #0]
 8007a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a80:	4607      	mov	r7, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	b10a      	cbz	r2, 8007a8a <_printf_common+0x26>
 8007a86:	3301      	adds	r3, #1
 8007a88:	6033      	str	r3, [r6, #0]
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	0699      	lsls	r1, r3, #26
 8007a8e:	bf42      	ittt	mi
 8007a90:	6833      	ldrmi	r3, [r6, #0]
 8007a92:	3302      	addmi	r3, #2
 8007a94:	6033      	strmi	r3, [r6, #0]
 8007a96:	6825      	ldr	r5, [r4, #0]
 8007a98:	f015 0506 	ands.w	r5, r5, #6
 8007a9c:	d106      	bne.n	8007aac <_printf_common+0x48>
 8007a9e:	f104 0a19 	add.w	sl, r4, #25
 8007aa2:	68e3      	ldr	r3, [r4, #12]
 8007aa4:	6832      	ldr	r2, [r6, #0]
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	42ab      	cmp	r3, r5
 8007aaa:	dc26      	bgt.n	8007afa <_printf_common+0x96>
 8007aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ab0:	1e13      	subs	r3, r2, #0
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	bf18      	it	ne
 8007ab6:	2301      	movne	r3, #1
 8007ab8:	0692      	lsls	r2, r2, #26
 8007aba:	d42b      	bmi.n	8007b14 <_printf_common+0xb0>
 8007abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	47c0      	blx	r8
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d01e      	beq.n	8007b08 <_printf_common+0xa4>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	68e5      	ldr	r5, [r4, #12]
 8007ace:	6832      	ldr	r2, [r6, #0]
 8007ad0:	f003 0306 	and.w	r3, r3, #6
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	bf08      	it	eq
 8007ad8:	1aad      	subeq	r5, r5, r2
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	bf0c      	ite	eq
 8007ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ae4:	2500      	movne	r5, #0
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	bfc4      	itt	gt
 8007aea:	1a9b      	subgt	r3, r3, r2
 8007aec:	18ed      	addgt	r5, r5, r3
 8007aee:	2600      	movs	r6, #0
 8007af0:	341a      	adds	r4, #26
 8007af2:	42b5      	cmp	r5, r6
 8007af4:	d11a      	bne.n	8007b2c <_printf_common+0xc8>
 8007af6:	2000      	movs	r0, #0
 8007af8:	e008      	b.n	8007b0c <_printf_common+0xa8>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4652      	mov	r2, sl
 8007afe:	4649      	mov	r1, r9
 8007b00:	4638      	mov	r0, r7
 8007b02:	47c0      	blx	r8
 8007b04:	3001      	adds	r0, #1
 8007b06:	d103      	bne.n	8007b10 <_printf_common+0xac>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b10:	3501      	adds	r5, #1
 8007b12:	e7c6      	b.n	8007aa2 <_printf_common+0x3e>
 8007b14:	18e1      	adds	r1, r4, r3
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	2030      	movs	r0, #48	; 0x30
 8007b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b1e:	4422      	add	r2, r4
 8007b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b28:	3302      	adds	r3, #2
 8007b2a:	e7c7      	b.n	8007abc <_printf_common+0x58>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4622      	mov	r2, r4
 8007b30:	4649      	mov	r1, r9
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d0e6      	beq.n	8007b08 <_printf_common+0xa4>
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7d9      	b.n	8007af2 <_printf_common+0x8e>
	...

08007b40 <_printf_i>:
 8007b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	460c      	mov	r4, r1
 8007b46:	4691      	mov	r9, r2
 8007b48:	7e27      	ldrb	r7, [r4, #24]
 8007b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b4c:	2f78      	cmp	r7, #120	; 0x78
 8007b4e:	4680      	mov	r8, r0
 8007b50:	469a      	mov	sl, r3
 8007b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b56:	d807      	bhi.n	8007b68 <_printf_i+0x28>
 8007b58:	2f62      	cmp	r7, #98	; 0x62
 8007b5a:	d80a      	bhi.n	8007b72 <_printf_i+0x32>
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	f000 80d8 	beq.w	8007d12 <_printf_i+0x1d2>
 8007b62:	2f58      	cmp	r7, #88	; 0x58
 8007b64:	f000 80a3 	beq.w	8007cae <_printf_i+0x16e>
 8007b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b70:	e03a      	b.n	8007be8 <_printf_i+0xa8>
 8007b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b76:	2b15      	cmp	r3, #21
 8007b78:	d8f6      	bhi.n	8007b68 <_printf_i+0x28>
 8007b7a:	a001      	add	r0, pc, #4	; (adr r0, 8007b80 <_printf_i+0x40>)
 8007b7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bed 	.word	0x08007bed
 8007b88:	08007b69 	.word	0x08007b69
 8007b8c:	08007b69 	.word	0x08007b69
 8007b90:	08007b69 	.word	0x08007b69
 8007b94:	08007b69 	.word	0x08007b69
 8007b98:	08007bed 	.word	0x08007bed
 8007b9c:	08007b69 	.word	0x08007b69
 8007ba0:	08007b69 	.word	0x08007b69
 8007ba4:	08007b69 	.word	0x08007b69
 8007ba8:	08007b69 	.word	0x08007b69
 8007bac:	08007cf9 	.word	0x08007cf9
 8007bb0:	08007c1d 	.word	0x08007c1d
 8007bb4:	08007cdb 	.word	0x08007cdb
 8007bb8:	08007b69 	.word	0x08007b69
 8007bbc:	08007b69 	.word	0x08007b69
 8007bc0:	08007d1b 	.word	0x08007d1b
 8007bc4:	08007b69 	.word	0x08007b69
 8007bc8:	08007c1d 	.word	0x08007c1d
 8007bcc:	08007b69 	.word	0x08007b69
 8007bd0:	08007b69 	.word	0x08007b69
 8007bd4:	08007ce3 	.word	0x08007ce3
 8007bd8:	680b      	ldr	r3, [r1, #0]
 8007bda:	1d1a      	adds	r2, r3, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	600a      	str	r2, [r1, #0]
 8007be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0a3      	b.n	8007d34 <_printf_i+0x1f4>
 8007bec:	6825      	ldr	r5, [r4, #0]
 8007bee:	6808      	ldr	r0, [r1, #0]
 8007bf0:	062e      	lsls	r6, r5, #24
 8007bf2:	f100 0304 	add.w	r3, r0, #4
 8007bf6:	d50a      	bpl.n	8007c0e <_printf_i+0xce>
 8007bf8:	6805      	ldr	r5, [r0, #0]
 8007bfa:	600b      	str	r3, [r1, #0]
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	da03      	bge.n	8007c08 <_printf_i+0xc8>
 8007c00:	232d      	movs	r3, #45	; 0x2d
 8007c02:	426d      	negs	r5, r5
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c08:	485e      	ldr	r0, [pc, #376]	; (8007d84 <_printf_i+0x244>)
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e019      	b.n	8007c42 <_printf_i+0x102>
 8007c0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c12:	6805      	ldr	r5, [r0, #0]
 8007c14:	600b      	str	r3, [r1, #0]
 8007c16:	bf18      	it	ne
 8007c18:	b22d      	sxthne	r5, r5
 8007c1a:	e7ef      	b.n	8007bfc <_printf_i+0xbc>
 8007c1c:	680b      	ldr	r3, [r1, #0]
 8007c1e:	6825      	ldr	r5, [r4, #0]
 8007c20:	1d18      	adds	r0, r3, #4
 8007c22:	6008      	str	r0, [r1, #0]
 8007c24:	0628      	lsls	r0, r5, #24
 8007c26:	d501      	bpl.n	8007c2c <_printf_i+0xec>
 8007c28:	681d      	ldr	r5, [r3, #0]
 8007c2a:	e002      	b.n	8007c32 <_printf_i+0xf2>
 8007c2c:	0669      	lsls	r1, r5, #25
 8007c2e:	d5fb      	bpl.n	8007c28 <_printf_i+0xe8>
 8007c30:	881d      	ldrh	r5, [r3, #0]
 8007c32:	4854      	ldr	r0, [pc, #336]	; (8007d84 <_printf_i+0x244>)
 8007c34:	2f6f      	cmp	r7, #111	; 0x6f
 8007c36:	bf0c      	ite	eq
 8007c38:	2308      	moveq	r3, #8
 8007c3a:	230a      	movne	r3, #10
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c42:	6866      	ldr	r6, [r4, #4]
 8007c44:	60a6      	str	r6, [r4, #8]
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	bfa2      	ittt	ge
 8007c4a:	6821      	ldrge	r1, [r4, #0]
 8007c4c:	f021 0104 	bicge.w	r1, r1, #4
 8007c50:	6021      	strge	r1, [r4, #0]
 8007c52:	b90d      	cbnz	r5, 8007c58 <_printf_i+0x118>
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	d04d      	beq.n	8007cf4 <_printf_i+0x1b4>
 8007c58:	4616      	mov	r6, r2
 8007c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c62:	5dc7      	ldrb	r7, [r0, r7]
 8007c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c68:	462f      	mov	r7, r5
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	d9f4      	bls.n	8007c5a <_printf_i+0x11a>
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d10b      	bne.n	8007c8c <_printf_i+0x14c>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	07df      	lsls	r7, r3, #31
 8007c78:	d508      	bpl.n	8007c8c <_printf_i+0x14c>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	bfde      	ittt	le
 8007c82:	2330      	movle	r3, #48	; 0x30
 8007c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c88:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007c8c:	1b92      	subs	r2, r2, r6
 8007c8e:	6122      	str	r2, [r4, #16]
 8007c90:	f8cd a000 	str.w	sl, [sp]
 8007c94:	464b      	mov	r3, r9
 8007c96:	aa03      	add	r2, sp, #12
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	f7ff fee2 	bl	8007a64 <_printf_common>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d14c      	bne.n	8007d3e <_printf_i+0x1fe>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca8:	b004      	add	sp, #16
 8007caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cae:	4835      	ldr	r0, [pc, #212]	; (8007d84 <_printf_i+0x244>)
 8007cb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	680e      	ldr	r6, [r1, #0]
 8007cb8:	061f      	lsls	r7, r3, #24
 8007cba:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cbe:	600e      	str	r6, [r1, #0]
 8007cc0:	d514      	bpl.n	8007cec <_printf_i+0x1ac>
 8007cc2:	07d9      	lsls	r1, r3, #31
 8007cc4:	bf44      	itt	mi
 8007cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cca:	6023      	strmi	r3, [r4, #0]
 8007ccc:	b91d      	cbnz	r5, 8007cd6 <_printf_i+0x196>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f023 0320 	bic.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	2310      	movs	r3, #16
 8007cd8:	e7b0      	b.n	8007c3c <_printf_i+0xfc>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	f043 0320 	orr.w	r3, r3, #32
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	2378      	movs	r3, #120	; 0x78
 8007ce4:	4828      	ldr	r0, [pc, #160]	; (8007d88 <_printf_i+0x248>)
 8007ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cea:	e7e3      	b.n	8007cb4 <_printf_i+0x174>
 8007cec:	065e      	lsls	r6, r3, #25
 8007cee:	bf48      	it	mi
 8007cf0:	b2ad      	uxthmi	r5, r5
 8007cf2:	e7e6      	b.n	8007cc2 <_printf_i+0x182>
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	e7bb      	b.n	8007c70 <_printf_i+0x130>
 8007cf8:	680b      	ldr	r3, [r1, #0]
 8007cfa:	6826      	ldr	r6, [r4, #0]
 8007cfc:	6960      	ldr	r0, [r4, #20]
 8007cfe:	1d1d      	adds	r5, r3, #4
 8007d00:	600d      	str	r5, [r1, #0]
 8007d02:	0635      	lsls	r5, r6, #24
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	d501      	bpl.n	8007d0c <_printf_i+0x1cc>
 8007d08:	6018      	str	r0, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <_printf_i+0x1d2>
 8007d0c:	0671      	lsls	r1, r6, #25
 8007d0e:	d5fb      	bpl.n	8007d08 <_printf_i+0x1c8>
 8007d10:	8018      	strh	r0, [r3, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	4616      	mov	r6, r2
 8007d18:	e7ba      	b.n	8007c90 <_printf_i+0x150>
 8007d1a:	680b      	ldr	r3, [r1, #0]
 8007d1c:	1d1a      	adds	r2, r3, #4
 8007d1e:	600a      	str	r2, [r1, #0]
 8007d20:	681e      	ldr	r6, [r3, #0]
 8007d22:	6862      	ldr	r2, [r4, #4]
 8007d24:	2100      	movs	r1, #0
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7f8 fa72 	bl	8000210 <memchr>
 8007d2c:	b108      	cbz	r0, 8007d32 <_printf_i+0x1f2>
 8007d2e:	1b80      	subs	r0, r0, r6
 8007d30:	6060      	str	r0, [r4, #4]
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	2300      	movs	r3, #0
 8007d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d3c:	e7a8      	b.n	8007c90 <_printf_i+0x150>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	4632      	mov	r2, r6
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	47d0      	blx	sl
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d0ab      	beq.n	8007ca4 <_printf_i+0x164>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	079b      	lsls	r3, r3, #30
 8007d50:	d413      	bmi.n	8007d7a <_printf_i+0x23a>
 8007d52:	68e0      	ldr	r0, [r4, #12]
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	4298      	cmp	r0, r3
 8007d58:	bfb8      	it	lt
 8007d5a:	4618      	movlt	r0, r3
 8007d5c:	e7a4      	b.n	8007ca8 <_printf_i+0x168>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4632      	mov	r2, r6
 8007d62:	4649      	mov	r1, r9
 8007d64:	4640      	mov	r0, r8
 8007d66:	47d0      	blx	sl
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d09b      	beq.n	8007ca4 <_printf_i+0x164>
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	68e3      	ldr	r3, [r4, #12]
 8007d70:	9903      	ldr	r1, [sp, #12]
 8007d72:	1a5b      	subs	r3, r3, r1
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	dcf2      	bgt.n	8007d5e <_printf_i+0x21e>
 8007d78:	e7eb      	b.n	8007d52 <_printf_i+0x212>
 8007d7a:	2500      	movs	r5, #0
 8007d7c:	f104 0619 	add.w	r6, r4, #25
 8007d80:	e7f5      	b.n	8007d6e <_printf_i+0x22e>
 8007d82:	bf00      	nop
 8007d84:	08008136 	.word	0x08008136
 8007d88:	08008147 	.word	0x08008147

08007d8c <memcpy>:
 8007d8c:	440a      	add	r2, r1
 8007d8e:	4291      	cmp	r1, r2
 8007d90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d94:	d100      	bne.n	8007d98 <memcpy+0xc>
 8007d96:	4770      	bx	lr
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da2:	4291      	cmp	r1, r2
 8007da4:	d1f9      	bne.n	8007d9a <memcpy+0xe>
 8007da6:	bd10      	pop	{r4, pc}

08007da8 <memmove>:
 8007da8:	4288      	cmp	r0, r1
 8007daa:	b510      	push	{r4, lr}
 8007dac:	eb01 0402 	add.w	r4, r1, r2
 8007db0:	d902      	bls.n	8007db8 <memmove+0x10>
 8007db2:	4284      	cmp	r4, r0
 8007db4:	4623      	mov	r3, r4
 8007db6:	d807      	bhi.n	8007dc8 <memmove+0x20>
 8007db8:	1e43      	subs	r3, r0, #1
 8007dba:	42a1      	cmp	r1, r4
 8007dbc:	d008      	beq.n	8007dd0 <memmove+0x28>
 8007dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dc6:	e7f8      	b.n	8007dba <memmove+0x12>
 8007dc8:	4402      	add	r2, r0
 8007dca:	4601      	mov	r1, r0
 8007dcc:	428a      	cmp	r2, r1
 8007dce:	d100      	bne.n	8007dd2 <memmove+0x2a>
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dda:	e7f7      	b.n	8007dcc <memmove+0x24>

08007ddc <_free_r>:
 8007ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d048      	beq.n	8007e74 <_free_r+0x98>
 8007de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de6:	9001      	str	r0, [sp, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f1a1 0404 	sub.w	r4, r1, #4
 8007dee:	bfb8      	it	lt
 8007df0:	18e4      	addlt	r4, r4, r3
 8007df2:	f000 f8d3 	bl	8007f9c <__malloc_lock>
 8007df6:	4a20      	ldr	r2, [pc, #128]	; (8007e78 <_free_r+0x9c>)
 8007df8:	9801      	ldr	r0, [sp, #4]
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	b933      	cbnz	r3, 8007e0e <_free_r+0x32>
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	6014      	str	r4, [r2, #0]
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e0a:	f000 b8cd 	b.w	8007fa8 <__malloc_unlock>
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	d90b      	bls.n	8007e2a <_free_r+0x4e>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	1862      	adds	r2, r4, r1
 8007e16:	4293      	cmp	r3, r2
 8007e18:	bf04      	itt	eq
 8007e1a:	681a      	ldreq	r2, [r3, #0]
 8007e1c:	685b      	ldreq	r3, [r3, #4]
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	bf04      	itt	eq
 8007e22:	1852      	addeq	r2, r2, r1
 8007e24:	6022      	streq	r2, [r4, #0]
 8007e26:	602c      	str	r4, [r5, #0]
 8007e28:	e7ec      	b.n	8007e04 <_free_r+0x28>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x58>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x4e>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1855      	adds	r5, r2, r1
 8007e38:	42a5      	cmp	r5, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x78>
 8007e3c:	6824      	ldr	r4, [r4, #0]
 8007e3e:	4421      	add	r1, r4
 8007e40:	1854      	adds	r4, r2, r1
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1dd      	bne.n	8007e04 <_free_r+0x28>
 8007e48:	681c      	ldr	r4, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	4421      	add	r1, r4
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	e7d7      	b.n	8007e04 <_free_r+0x28>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x80>
 8007e56:	230c      	movs	r3, #12
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	e7d3      	b.n	8007e04 <_free_r+0x28>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf04      	itt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	bf04      	itt	eq
 8007e6c:	1949      	addeq	r1, r1, r5
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	6054      	str	r4, [r2, #4]
 8007e72:	e7c7      	b.n	8007e04 <_free_r+0x28>
 8007e74:	b003      	add	sp, #12
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	200000b0 	.word	0x200000b0

08007e7c <_malloc_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	1ccd      	adds	r5, r1, #3
 8007e80:	f025 0503 	bic.w	r5, r5, #3
 8007e84:	3508      	adds	r5, #8
 8007e86:	2d0c      	cmp	r5, #12
 8007e88:	bf38      	it	cc
 8007e8a:	250c      	movcc	r5, #12
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	db01      	blt.n	8007e96 <_malloc_r+0x1a>
 8007e92:	42a9      	cmp	r1, r5
 8007e94:	d903      	bls.n	8007e9e <_malloc_r+0x22>
 8007e96:	230c      	movs	r3, #12
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9e:	f000 f87d 	bl	8007f9c <__malloc_lock>
 8007ea2:	4921      	ldr	r1, [pc, #132]	; (8007f28 <_malloc_r+0xac>)
 8007ea4:	680a      	ldr	r2, [r1, #0]
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	b99c      	cbnz	r4, 8007ed2 <_malloc_r+0x56>
 8007eaa:	4f20      	ldr	r7, [pc, #128]	; (8007f2c <_malloc_r+0xb0>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	b923      	cbnz	r3, 8007eba <_malloc_r+0x3e>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 f862 	bl	8007f7c <_sbrk_r>
 8007eb8:	6038      	str	r0, [r7, #0]
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f000 f85d 	bl	8007f7c <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d123      	bne.n	8007f0e <_malloc_r+0x92>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f86c 	bl	8007fa8 <__malloc_unlock>
 8007ed0:	e7e3      	b.n	8007e9a <_malloc_r+0x1e>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	1b5b      	subs	r3, r3, r5
 8007ed6:	d417      	bmi.n	8007f08 <_malloc_r+0x8c>
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d903      	bls.n	8007ee4 <_malloc_r+0x68>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	441c      	add	r4, r3
 8007ee0:	6025      	str	r5, [r4, #0]
 8007ee2:	e004      	b.n	8007eee <_malloc_r+0x72>
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	42a2      	cmp	r2, r4
 8007ee8:	bf0c      	ite	eq
 8007eea:	600b      	streq	r3, [r1, #0]
 8007eec:	6053      	strne	r3, [r2, #4]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f85a 	bl	8007fa8 <__malloc_unlock>
 8007ef4:	f104 000b 	add.w	r0, r4, #11
 8007ef8:	1d23      	adds	r3, r4, #4
 8007efa:	f020 0007 	bic.w	r0, r0, #7
 8007efe:	1ac2      	subs	r2, r0, r3
 8007f00:	d0cc      	beq.n	8007e9c <_malloc_r+0x20>
 8007f02:	1a1b      	subs	r3, r3, r0
 8007f04:	50a3      	str	r3, [r4, r2]
 8007f06:	e7c9      	b.n	8007e9c <_malloc_r+0x20>
 8007f08:	4622      	mov	r2, r4
 8007f0a:	6864      	ldr	r4, [r4, #4]
 8007f0c:	e7cc      	b.n	8007ea8 <_malloc_r+0x2c>
 8007f0e:	1cc4      	adds	r4, r0, #3
 8007f10:	f024 0403 	bic.w	r4, r4, #3
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d0e3      	beq.n	8007ee0 <_malloc_r+0x64>
 8007f18:	1a21      	subs	r1, r4, r0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f000 f82e 	bl	8007f7c <_sbrk_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1dd      	bne.n	8007ee0 <_malloc_r+0x64>
 8007f24:	e7cf      	b.n	8007ec6 <_malloc_r+0x4a>
 8007f26:	bf00      	nop
 8007f28:	200000b0 	.word	0x200000b0
 8007f2c:	200000b4 	.word	0x200000b4

08007f30 <_realloc_r>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	4607      	mov	r7, r0
 8007f34:	4614      	mov	r4, r2
 8007f36:	460e      	mov	r6, r1
 8007f38:	b921      	cbnz	r1, 8007f44 <_realloc_r+0x14>
 8007f3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f3e:	4611      	mov	r1, r2
 8007f40:	f7ff bf9c 	b.w	8007e7c <_malloc_r>
 8007f44:	b922      	cbnz	r2, 8007f50 <_realloc_r+0x20>
 8007f46:	f7ff ff49 	bl	8007ddc <_free_r>
 8007f4a:	4625      	mov	r5, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f50:	f000 f830 	bl	8007fb4 <_malloc_usable_size_r>
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d20f      	bcs.n	8007f78 <_realloc_r+0x48>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f7ff ff8e 	bl	8007e7c <_malloc_r>
 8007f60:	4605      	mov	r5, r0
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0f2      	beq.n	8007f4c <_realloc_r+0x1c>
 8007f66:	4631      	mov	r1, r6
 8007f68:	4622      	mov	r2, r4
 8007f6a:	f7ff ff0f 	bl	8007d8c <memcpy>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ff33 	bl	8007ddc <_free_r>
 8007f76:	e7e9      	b.n	8007f4c <_realloc_r+0x1c>
 8007f78:	4635      	mov	r5, r6
 8007f7a:	e7e7      	b.n	8007f4c <_realloc_r+0x1c>

08007f7c <_sbrk_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_sbrk_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 f9a4 	bl	80012d4 <_sbrk>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_sbrk_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_sbrk_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20000360 	.word	0x20000360

08007f9c <__malloc_lock>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__malloc_lock+0x8>)
 8007f9e:	f000 b811 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	20000368 	.word	0x20000368

08007fa8 <__malloc_unlock>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__malloc_unlock+0x8>)
 8007faa:	f000 b80c 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007fae:	bf00      	nop
 8007fb0:	20000368 	.word	0x20000368

08007fb4 <_malloc_usable_size_r>:
 8007fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb8:	1f18      	subs	r0, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfbc      	itt	lt
 8007fbe:	580b      	ldrlt	r3, [r1, r0]
 8007fc0:	18c0      	addlt	r0, r0, r3
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
